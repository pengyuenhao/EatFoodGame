{"version":3,"sources":["assets/scripts/project/view/Animal.ts","assets/scripts/project/impl/Begin.ts","assets/scripts/lib/framework/Bind/BindConst.ts","assets/scripts/lib/framework/Bind/Binder.ts","assets/scripts/lib/framework/Bind/Binding.ts","assets/scripts/lib/framework/Command/CommandBinder.ts","assets/scripts/lib/framework/Command/CommandBinding.ts","assets/scripts/lib/framework/Command/CommandConst.ts","assets/scripts/lib/framework/Command/Command.ts","assets/scripts/project/Common.ts","assets/scripts/lib/framework/Context/Context.ts","assets/scripts/lib/framework/Decorator/DecoratorClassBinder.ts","assets/scripts/lib/framework/Decorator/DecoratorClassBinding.ts","assets/scripts/lib/framework/Decorator/DecoratorClass.ts","assets/scripts/lib/framework/Decorator/DecoratorConst.ts","assets/scripts/project/view/Food.ts","assets/scripts/project/command/GameOverCommand.ts","assets/scripts/project/command/GenerateCommand.ts","assets/scripts/lib/framework/Command/ICommandBinder.ts","assets/scripts/lib/framework/Context/IRoot.ts","assets/scripts/lib/framework/Injector/InjectBinder.ts","assets/scripts/lib/framework/Injector/InjectBinding.ts","assets/scripts/lib/framework/Injector/InjectConst.ts","assets/scripts/lib/framework/Injector/InjectDecorator.ts","assets/scripts/lib/framework/Injector/InjectFactory.ts","assets/scripts/lib/framework/Injector/Injector.ts","assets/scripts/project/command/InputControlCommand.ts","assets/scripts/lib/extensions/IocComponet.ts","assets/scripts/lib/framework/IocConst.ts","assets/scripts/lib/extensions/IocRoot.ts","assets/scripts/lib/extensions/IocView.ts","assets/scripts/project/view/LogicNode.ts","assets/scripts/project/wxgame/login/Login.js","assets/scripts/project/command/LookRankCommand.ts","assets/scripts/project/context/MainContext.ts","assets/scripts/project/context/MainModel.ts","assets/scripts/project/view/MainNode.ts","assets/scripts/project/context/MainRoot.ts","assets/scripts/project/signal/MainSignalEnum.ts","assets/scripts/project/signal/MainSignalManager.ts","assets/scripts/project/util/MainUtil.ts","assets/scripts/project/util/Manager.ts","assets/scripts/project/command/MatchCommand.ts","assets/scripts/project/util/Model.ts","assets/scripts/project/view/PauseNode.ts","assets/scripts/project/PersistRoot.ts","assets/scripts/lib/extensions/Pool.ts","assets/scripts/project/helper/PrefabPool.ts","assets/scripts/lib/extensions/Prototype.ts","assets/scripts/project/wxgame/rank/Rank.js","assets/scripts/project/util/ResourceManager.ts","assets/scripts/project/command/RestartCommand.ts","assets/scripts/lib/framework/Signal/SignalManager.ts","assets/scripts/lib/framework/Signal/Signal.ts","assets/scripts/project/util/Singleton.ts","assets/scripts/lib/extensions/Stack.ts","assets/scripts/project/command/StartCommand.ts","assets/scripts/project/wxgame/rank/TipsUiView.ts","assets/scripts/project/util/TouchUtil.ts","assets/scripts/project/command/UpdateCommand.ts","assets/scripts/project/wxgame/WxApi.js","assets/scripts/project/util/index.ts"],"names":["IocComponet_1","require","InjectDecorator_1","Model_1","_a","cc","_decorator","ccclass","property","Animal","_super","_this","apply","this","arguments","type","__extends","prototype","onLoad","call","start","rePositonAnimal","i","mMdl","animalTextureRect","width","height","offsetRatio","x","y","node","setPosition","__decorate","inject","__IC_Model","ModelType","Main","IocComponet","exports","default","Begin","beginGame","director","loadScene","lookRank","Component","BindingConst","NULL","Symbol","Binding_1","BindConst_1","__IC_Binder","Object","defineProperty","get","IConstructorName","Binder","init","_bindings","Map","resolver","binding","key","resolveBinding","dict","bindingName","name","has","existingBinding","value","delete","set","bind","getRawBinding","unbind","checkKey","Binding","checkAbstract","getBinding","getBindingMap","__IC_Binding","_resolver","_key","_value","_name","to","toName","isConstructor","constructorName","InjectBinder_1","CommandBinding_1","Command_1","Pool_1","CommandConst_1","CommandBinder","pools","activeCommands","Set","activeSequences","usePooling","getPool","isPooled","that_1","values","length","push","forEach","myPool","makePoolFromType","poolType","injectBinder","Pool","CommandConst","COMMAND_POOL","pool","getInstance","CommandBinding","invokeCommand","cmd","args","depth","command","createCommand","sequenceId","trackCommand","executeCommand","data","getCommand","msg","toString","Error","isClean","injector","deploy","add","__IC_Command","isSequence","execute","onDispose","trigger","_i","next","aa","a","releaseCommand","disposeOfSequencedData","isOnce","isRetain","t","constructor","returnInstance","__IC_InjectBinder","SignalCommandBinder","addListener","signal","toSingleton","createCommandForSignal","_isSequence","_isOnce","Pooled","ICommandBinder_1","Command","_clean","_retain","clean","retain","release","restore","uninject","__IC_CommandBinder","Common","isInit","persistRootNode","root","shareTickets","isHasWxRank","maxScore","saveScoreFunc","userOpenId","session_key","unionId","CommandBinder_1","IocConst_1","__IC_Context","Context","firstContext","getRoot","crossContextBinder","addCrossContext","setRoot","addCore","_injectBinder","InjectBinder","_crossContextBinder","_commandBinder","context","removeCrossContext","childContext","restart","console","info","instantiateCore","mapBindings","postBindings","launch","toValue","Binder_1","DecoratorClass_1","DecoratorClassBinding_1","Prototype_1","DecoratorClassBinder","_decoratorClassBufferMap","target","extendsList","Prototype","getPrototypeList","injectClass","DecoratorClass","list","bindingMaps_1","size","inside","j","DecoratorClassBinding","insideDict","insideDict_1","insideDic","_property","toProperty","_list","DecoratorClassBinder_1","DecoratorConst","DECORATOR_CLASS_BINDER","util_1","Animal_1","MainUtil_1","IocView_1","MainSignalEnum_1","Food","speed","accel","moveY","Food_1","reuse","unuse","update","dt","inited","onCollisionEnter","other","self","otherComponent","getComponent","selfComponent","sMgr","MainSignalEnum","Match","dispatch","GameSignalEnum","onMatch","resPoolNode","onNotMatch","randomProps","baseIndex","track","randomCoin","lastFoodIndex","lastTrack","randomRange","map","foodDatas","foodIndex","randomValue","foodData","foodNode","mUtl","getSceneSize","Sprite","spriteFrame","index","currentFoodNodes","indexOf","splice","foodPool","res","__IC_Util","IocView","GameOverCommand","gameOver","PrefabPool_1","GenerateCommand","log","generateTouchArea","generateAnimalNodes","area","Node","sceneNode","addChild","tUtl","registerTouchArea","foodPrefab","pauseFlag","Promise","all","spriteRes","image","then","that","animalDatas","animalData","spriteFrames","animalNode","instantiate","animalPrefab","animal","sprite","animalsNode","Prefab","__IC_Root","Injector_1","InjectBinding_1","DecoratorConst_1","ClassBinder","_injector","Injector","binder","injectClassBinder","instance","tryInject","InjectBinding","unbindAllMark","unbinds","isUnbind","InjectConst_1","_isUnbind","_bindingType","InjectConst","BindingType","DEFAULT","_isInject","_args","toArgs","VALUE","SINGLETON","unBind","setValue","o","toInject","injectNoNameFunc","injectToNameFunc","_constructor","_target","injectFunc","InjectFactory","bindingType","singletonOf","valueOf","instanceOf","createFromValue","generateImplicit","c","ToString","InjectFactory_1","factory","decoratorUnInject","tryInjectHere","isValueConstructor","isKeyConstructor","isInject","attemptConstructorInjection","decoratorInject","injectBinding","getInjectValue","injv","TouchUtil_1","InputControlCommand","on","TouchDirection","Up","status","sPosX","areaOnMove","Down","Left","sPosY","Right","direction","rotateAnimals","isRotationing","rotateAction","scaleBy","rotateDur","runAction","sequence","callFunc","resetAnimalsNode","children","animalsNodeChildren","switchIndex","setScale","one","two","temp","BubbleType","Context_1","IocRoot_1","_requiresContext","_registerWithContext","enabled","activeInHierarchy","autoRegisterWithContext","registeredWithContext","shouldRegister","bubbleToContext","Add","view","finalTry","loopLimiter","parent","IocRoot","iocContext","success","Remove","Enable","Disable","requiresContext","IocError","IC_ERROR","onDestroy","SignalManager_1","__IC_SignalManager","LogicNode","inj","Update","Class","extends","properties","_WxApi2","isRunInWeiXin","wx","login","fail","launchOptionsSync","_common2","saveScore","getLaunchOptionsSync","scene","shareTicket","score","Number","getOpenDataContext","postMessage","message","function","LookRankCommand","StartCommand_1","MainSignalManager_1","MainModel_1","UpdateCommand_1","GenerateCommand_1","RestartCommand_1","LookRankCommand_1","MatchCommand_1","ResourceManager_1","Manager_1","InputControlCommand_1","MainContext","MainSignalManager","MainModel","Instance","MainUtil","TouchUtil","__IC_Manager","ManagerType","Resource","signalMgr","commandBinder","Start","StartCommand","UpdateCommand","Generate","Restart","RestartCommand","LookRank","MatchCommand","InputControl","timer","lastTimer","timePeriod","initTimePeriod","minTimePeriod","currentLevel","harderRatios","Singleton","MainNode","Common_1","MainRoot","SignalManager","Singleton_1","winSize","resourceUrl","resolve","reject","loader","loadRes","SpriteFrame","err","Math","round","random","randomNumber","floor","match","gainPoint","scoreNode","Label","string","stopAllCurrent","pauseNode","active","NewClass","onRestartClicked","onLookRankClicked","MainContext_1","PersistRoot","prefabs","game","addPersistRootNode","prefab","setPrefab","PoolOverflowBehavior","BindingConstraintType","PoolInflationType","Stack_1","__IC_InstanceProvider","instancesAvailable","Stack","instancesInUse","constraint","POOL","uniqueValues","overflowBehavior","EXCEPTION","inflationType","DOUBLE","failIf","isProtetype","_instanceCount","addList","item","remove","removeInstance","removeList","retv","pop","instancesToCreate","instanceCount","WARNING","warn","INCREMENT","instanceProvider","newInstance","clear","condition","PrefabPool","nodePool","NodePool","put","hasPrototypeList","constructor_1","types","__proto__","startsWith","AddPrototype","prototypeMap","Array","from","tpye","extendSet","subContextView","tipsUiNode","rankType","shareCount","updateShareMenu","withShareTicket","switchRank","event","switchBtn","switchBar","getChildByName","moveRange","moveBy","v2","ticket","showTipsUi","getShareInfo","backhome","shareApp","shareAppMessage","title","isExist","content","tipsUiView","display","ResourceManager","onConstructor","prefabMap","hasPrefab","getPrefab","revive","clearAllCurrent","Signal_1","_signal_dic","symbol","_signal","Signal","__IC_Signal","_listener","_onceListener","action","concat","callback","addUnique","addOnceListener","removeAllListeners","listeners","isUnique","getTypes","clazz","classMap","getInstanceOrCreate","destroyInstance","Item","_next","_size","_header","top","newItem","tmp","lanuch","getCollisionManager","resMgr","mainNode","avatar","animals","pause","TipsUiView","label","text","onClicked","RichText","areaMap","isGlobal","areaStatus","AreaStatus","globalAreaStatus","EventType","TOUCH_START","getTouches","touch","getLocationX","sPoxY","getLocationY","TouchStatus","No","totalX","totalY","trendX","trendY","touchMap","getID","TOUCH_MOVE","mDeltaX","getDelta","mDeltaY","abs","TOUCH_END","disposeTouchResult","TOUCH_CANCEL","result","touchMoveDetection","touchEvnet","isMoveValid","tickcount","timecount","newNode","level","ratio","food","getPoolNode","WxApi","func","sys","platform","WECHAT_GAME","errorLog"],"mappings":"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","sourcesContent":["import { IocComponet } from \"../../lib/extensions/IocComponet\";\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\nimport { MainModel } from \"../context/MainModel\";\nimport { __IC_Model, ModelType } from \"../util/Model\";\n\nconst {ccclass,property} = cc._decorator\n\n@ccclass\nexport default class Animal extends IocComponet {\n    @inject(__IC_Model,ModelType.Main)\n    mMdl : MainModel;\n\n    @property\n    type = ''\n\n    onLoad() {\n        super.onLoad();\n    }\n    start(){\n        super.start();\n    }\n\n    //重设动物坐标\n    rePositonAnimal(i) {\n        let {\n            width,\n            height\n        } = this.mMdl.animalTextureRect\n        let offsetRatio = {\n            x: 0,\n            y: 0\n        }\n        i === 0 && (offsetRatio = {\n            x: -1,\n            y: 1\n        })\n        i === 1 && (offsetRatio = {\n            x: 1,\n            y: 1\n        })\n        i === 2 && (offsetRatio = {\n            x: 1,\n            y: -1\n        })\n        i === 3 && (offsetRatio = {\n            x: -1,\n            y: -1\n        })\n        this.node.setPosition(offsetRatio.x * width / 2, offsetRatio.y * height / 2)\n    }\n\n}","\nconst {ccclass, property} = cc._decorator\n\n@ccclass\nexport default class Begin extends cc.Component {\n\n/*     @property(cc.Node)\n    playButton = null */\n\n    onLoad () {\n        \n    }\n\n    beginGame() {\n        cc.director.loadScene('Game')\n    }\n\n    lookRank(){\n        cc.director.loadScene(\"Rank\");\n    }\n}","//namespace ioc{\r\n    export module BindingConst{\r\n        //定义空常量\r\n        export const NULL = Symbol(\"NULL\");\r\n    }\r\n//}","import { IBinding,Binding } from \"./Binding\"\r\nimport {BindingConst} from \"./BindConst\"\r\nimport {IConstructorName} from \"../IocConst\"\r\n\r\nexport interface IBinder {\r\n    bind(key) : IBinding;\r\n    unbind(key, name);\r\n    //根据绑定器实例生成一个空的绑定状态\r\n    getRawBinding() : IBinding;\r\n    //获取绑定状态\r\n    getBinding(key : any, name : any) : IBinding;\r\n    getBindingMap(key : any) : Map<any,IBinding>;\r\n    resolveBinding( binding : IBinding,  key : any);\r\n}\r\nexport class __IC_Binder extends IConstructorName{\r\n    get constructorName(){return \"IBinder\";}\r\n}\r\nexport class Binder implements IBinder {\r\n    //绑定状态映射字典\r\n    protected _bindings: any;\r\n    //绑定状态白名单\r\n    //protected _bindingWhitelist : Array<object> ;\r\n    constructor() {\r\n        this.init();\r\n    }\r\n    /**\r\n     * 初始化函数，通过重写该函数指定映射字典的实例\r\n     */\r\n    init(){\r\n        //初始化绑定状态映射\r\n        this._bindings = new Map < any, Map < any, IBinding >> ();\r\n    }\r\n    /**\r\n     * 解析器，将正在绑定中的状态信息解析，使之成为可存储的数据绑定到映射字典。\r\n     * @param binding 绑定的状态\r\n     */\r\n    resolver(binding: IBinding) {\r\n        let key = binding.key;\r\n        this.resolveBinding(binding,key);\r\n    }\r\n    /**\r\n     * 解析绑定状态\r\n     * @param binding 绑定状态\r\n     * @param key 键值\r\n     */\r\n    resolveBinding( binding : IBinding,  key : any){\r\n        //检查绑定状态是否存在别名\r\n        let bindingName = (binding.name == null) ? BindingConst.NULL : binding.name;\r\n        let dict : Map<any,IBinding>;\r\n        //检查绑定状态字典已经存在键值\r\n        if ((this._bindings.has(key))) {\r\n            //获取绑定映射\r\n            dict = this._bindings.get(key);\r\n            //检查绑定映射是否存在别名\r\n            if (dict.has(bindingName)) {\r\n                //获取已经存在的绑定映射\r\n                let existingBinding = dict.get(bindingName);\r\n                //检查合法性\r\n                if (existingBinding != binding) {\r\n                    //如果绑定值为空\r\n                    if (!existingBinding.value) {\r\n                        //移除无效的绑定别名\r\n                        dict.delete(bindingName);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //创建绑定映射\r\n            dict = new Map<any,IBinding>();\r\n            //添加绑定映射\r\n            this._bindings.set(key, dict);\r\n        }\r\n\r\n        //如果存在默认绑定状态并且等于当前绑定状态\r\n        if (dict.has(BindingConst.NULL) && dict.get(BindingConst.NULL) === binding) {\r\n            //删除默认绑定\r\n            dict.delete(BindingConst.NULL);\r\n        }\r\n\r\n        //添加或覆盖绑定状态\r\n        if (!dict.has(bindingName)) {\r\n            dict.set(bindingName, binding);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 绑定信号容器\r\n     * @param key 键值，可以是需要执行的全局信号名称或枚举\r\n     */\r\n    bind(key) : IBinding{\r\n        //创建一个绑定中状态\r\n        let binding = this.getRawBinding();\r\n        \r\n        //绑定标志\r\n        binding.bind(key);\r\n        return binding;\r\n    }\r\n    /**\r\n     * 解除绑定信号容器\r\n     * @param key 键值，需要绑定的键值\r\n     * @param name 别名，被绑定变量的别名\r\n     */\r\n    unbind(key, name) {\r\n        let checkKey = Binding.checkAbstract(key);\r\n        //如果绑定映射字典内包含键值\r\n        if (this._bindings.has(checkKey)) {\r\n            //直接获取键值映射的值\r\n            let dict = this._bindings.get(checkKey);\r\n            //检查是否存指定别名\r\n            let bindingName;\r\n            if(name){\r\n                bindingName = name;\r\n            }else{\r\n                bindingName = BindingConst.NULL;\r\n            }\r\n            if (dict.has(bindingName)) {\r\n                dict.delete(bindingName);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 生成默认的绑定状态\r\n     */\r\n    getRawBinding(): IBinding{\r\n        return new Binding(this.resolver.bind(this));\r\n    }\r\n    /**\r\n     * 根据键值和别名获取绑定器中的绑定状态\r\n     * @param key 键值\r\n     * @param name 别名\r\n     */\r\n    getBinding(key : any, name : any) : IBinding{\r\n        //查找是否存在键值\r\n        if(this._bindings.has (key))\r\n        {\r\n            let dict = this._bindings.get(key);\r\n            //如果别名不存在则使用默认值\r\n            if(!name){\r\n                name = BindingConst.NULL\r\n            }\r\n            //查找绑定状态是否存在别名\r\n            if (dict.has(name))\r\n            {\r\n                return dict.get(name);\r\n            }\r\n            else{\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取绑定状态映射表，返回键值的所有绑定状态\r\n     * @param key 被绑定的键值\r\n     */\r\n    getBindingMap(key : any) : any{\r\n        if(this._bindings.has(key)){\r\n            return this._bindings.get(key);\r\n        }\r\n    }\r\n}\r\n//}","import { IConstructorName } from \"../IocConst\";\r\n\r\n//namespace ioc {\r\nexport interface IBinding {\r\n    name: any;\r\n    key: any;\r\n    value: any;\r\n    bind(k:any):IBinding;\r\n    to(v:any):IBinding;\r\n    toName(n:any):IBinding;\r\n}\r\nexport class __IC_Binding extends IConstructorName{\r\n    get constructorName(){return \"IBinding\";}\r\n}\r\nexport class Binding implements IBinding {\r\n    protected _key: any;\r\n    protected _value: any;\r\n    protected _name: any;\r\n    protected _resolver: any;\r\n\r\n    public get key() {\r\n        return this._key;\r\n    }\r\n    public get value() {\r\n        return this._value;\r\n    }\r\n    public get name() {\r\n        return this._name;\r\n    }\r\n\r\n    constructor(resolver: any) {\r\n        this._resolver = resolver;\r\n\r\n        this._key = null;\r\n        this._value = null;\r\n        this._name = null;\r\n    }\r\n\r\n    /**\r\n     * 绑定标志到键值，返回此时的绑定状态。\r\n     * @param key 标志值，可以是需要执行的全局信号名称或枚举\r\n     */\r\n    bind(key) :IBinding{\r\n        this._key = Binding.checkAbstract(key);\r\n        return this;\r\n    }\r\n    /**\r\n     * 从正在绑定状态映射到实例，返回此时的绑定状态。\r\n     * @param value 绑定映射的值\r\n     */\r\n    to(value):IBinding {\r\n        this._value = value;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 实例的别名，用于区分不同的实例，返回此时的绑定状态。\r\n     * @param name 实例的别名\r\n     */\r\n    toName(name):IBinding {\r\n        this._name = name;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n    //判断是否为构造函数\r\n    public get isKeyConstructor():boolean{\r\n        return Binding.isConstructor(this._key);\r\n    }\r\n    //判断是否为构造函数\r\n    public get isValueConstructor():boolean{\r\n        return Binding.isConstructor(this._value);\r\n    }\r\n    public static isConstructor(value : object):boolean{\r\n        //如果不是一个函数则绝对不是构造函数\r\n        if(typeof value !== \"function\"){\r\n            return false;\r\n        }\r\n        //如果不能直接获取原型则不是构造函数\r\n        if(!value.prototype){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    public static checkAbstract(key){\r\n        //检查被绑定的对象是否为虚类\r\n        let constructorName;\r\n        if(key.constructorName){\r\n            constructorName = key.constructorName;\r\n            //console.info(\"[转化虚拟类]\"+ constructorName);\r\n        }else{\r\n            constructorName = key;\r\n            //console.info(\"[非虚拟类]\"+ constructorName.constructor.name);\r\n        }\r\n        return constructorName;\r\n    }\r\n}\r\n//}","import {\r\n    IBinding,\r\n    Binding\r\n} from \"../Bind/Binding\"\r\nimport {\r\n    __IC_InjectBinder,\r\n    IInjectBinder\r\n} from \"../Injector/InjectBinder\";\r\nimport {\r\n    CommandBinding\r\n} from \"./CommandBinding\";\r\nimport {\r\n    ISignal\r\n} from \"../Signal/Signal\"\r\nimport {\r\n    InjectBinding\r\n} from \"../Injector/InjectBinding\";\r\nimport {\r\n    ICommand,\r\n    __IC_Command\r\n} from \"./Command\";\r\nimport {\r\n    Pool\r\n} from \"../../Extensions/Pool\";\r\nimport {\r\n    CommandConst\r\n} from \"./CommandConst\"\r\nimport {\r\n    inject\r\n} from \"../Injector/InjectDecorator\";\r\nimport {\r\n    Binder\r\n} from \"../Bind/Binder\";\r\nimport {\r\n    ICommandBinder\r\n} from \"./ICommandBinder\";\r\n//全局注入数据绑定器\r\n\r\n\r\n/**\r\n * 指令绑定器\r\n */\r\nexport class CommandBinder extends Binder implements ICommandBinder {\r\n    //注入绑定器\r\n    @inject(__IC_InjectBinder)\r\n    public injectBinder: IInjectBinder;\r\n\r\n    //指令池\r\n    protected pools: Map < object, Pool >= new Map < object, Pool > ();\r\n\r\n    // Tracker for parallel commands in progress\r\n    protected activeCommands: Set < ICommand >= new Set < ICommand > ();\r\n    // Tracker for sequences in progress\r\n    protected activeSequences: Map < ICommand, CommandBinding > = new Map < ICommand, CommandBinding > ();\r\n    //是否使用池\r\n    public usePooling: boolean = false;\r\n    public getPool(type: object): Pool {\r\n        if (this.pools.has(type))\r\n            return this.pools.get(type);\r\n        return null;\r\n    }\r\n\r\n    public resolver(binding: IBinding) {\r\n        super.resolver(binding);\r\n        if (this.usePooling && (binding as CommandBinding).isPooled) {\r\n            if (binding.value != null) {\r\n                let that = this;\r\n                //检查被绑定的值是否有效\r\n                let values: object[] = binding.value as object[];\r\n                if (values.length === 0) {\r\n                    values = [];\r\n                    values.push(binding.value);\r\n                }\r\n\r\n                if (values && values.length > 0) {\r\n                    values.forEach((value) => {\r\n                        //如果找不到对应的池则创建\r\n                        if (that.pools.has(value) == false) {\r\n                            let myPool = this.makePoolFromType(value);\r\n                            that.pools.set(value, myPool);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    protected makePoolFromType(type): Pool {\r\n        //池构造函数作为类型使用\r\n        let poolType = type;\r\n        //预制实例缓存\r\n        this.injectBinder.bind(type).to(type);\r\n\r\n        //获取一个池实例\r\n        this.injectBinder.bind(Pool).to(Pool).toName(CommandConst.COMMAND_POOL);\r\n        let pool: Pool = this.injectBinder.getInstance(Pool, CommandConst.COMMAND_POOL) as Pool;\r\n        this.injectBinder.unbind(Pool, CommandConst.COMMAND_POOL);\r\n        pool.bind(poolType);\r\n\r\n        return pool;\r\n    }\r\n    //绑定状态映射字典\r\n    getRawBinding(): IBinding {\r\n        return new CommandBinding(this.resolver.bind(this));\r\n    }\r\n    bind(key: any): CommandBinding {\r\n        return super.bind(key) as CommandBinding;\r\n    }\r\n    //调用指令\r\n    protected invokeCommand(cmd: object, binding: CommandBinding, args, depth: number): ICommand {\r\n        let command: ICommand = this.createCommand(cmd, args);\r\n        command.sequenceId = depth;\r\n        this.trackCommand(command, binding);\r\n        this.executeCommand(command,args);\r\n        return command;\r\n    }\r\n    //\r\n    protected createCommand(cmd: object, data: object): ICommand {\r\n        let command: ICommand = this.getCommand(cmd);\r\n\r\n        if (command == null) {\r\n            let msg: string = \"A Command \";\r\n            if (data != null) {\r\n                msg += \"tied to data \" + data.toString();\r\n            }\r\n            msg += \" could not be instantiated.\\nThis might be caused by a null pointer during instantiation or failing to override Execute (generally you shouldn't have constructor code in Commands).\";\r\n            throw new Error(msg);\r\n        }\r\n\r\n        command.data = data;\r\n        return command;\r\n    }\r\n    //获取指令实例\r\n    protected getCommand(type: object): ICommand {\r\n        //如果使用池则检查是否已经存在相应的实例\r\n        if (this.usePooling && this.pools.has(type)) {\r\n            let pool: Pool = this.pools.get(type);\r\n            let command: ICommand = pool.getInstance() as ICommand;\r\n            //是否存在对应的实例\r\n            if(command){\r\n                //检查是否已经清理\r\n                if (command.isClean) {\r\n                    this.injectBinder.injector.inject(command, null);\r\n                    command.deploy();\r\n                }\r\n            }else{\r\n                //获取实例\r\n                command = this.injectBinder.getInstance(type,null);\r\n                //为池添加实例缓存\r\n                pool.add(command);\r\n            }\r\n            return command;\r\n        } else {\r\n            this.injectBinder.bind(__IC_Command).to(type);\r\n            let command: ICommand = this.injectBinder.getInstance(__IC_Command, null);\r\n            this.injectBinder.unbind(__IC_Command, null);\r\n            return command;\r\n        }\r\n    }\r\n    protected trackCommand(command: ICommand, binding: CommandBinding) {\r\n        if (binding.isSequence) {\r\n            this.activeSequences.set(command, binding);\r\n        } else {\r\n            this.activeCommands.add(command);\r\n        }\r\n    }\r\n    //执行指令\r\n    protected executeCommand(command: ICommand,args) {\r\n        if (command == null) {\r\n            return;\r\n        }\r\n        command.execute(...args);\r\n    }\r\n    /**\r\n     * 信号调用回掉函数\r\n     * @param trigger 触发的信号\r\n     * @param data 数据\r\n     */\r\n    public onDispose(trigger: object , ...args) {\r\n        //尝试获取绑定状态\r\n        let binding: CommandBinding = this.getBinding(trigger, null) as CommandBinding;\r\n        if (binding != null) {\r\n            //是否处于执行序列中\r\n            if (binding.isSequence) {\r\n                //加入执行队列\r\n                this.next(binding, args, 0,);\r\n            } else {\r\n                //获取被绑定的指令对象\r\n                let values: object[] = binding.value as object[];\r\n                let aa = values.length + 1;\r\n                for (let a = 0; a < aa; a++) {\r\n                    this.next(binding, args , a,);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //下一次即将执行的指令\r\n    protected next(binding: CommandBinding, args, depth: number) {\r\n        let values: object[] = binding.value as object[];\r\n        if (values.length === 0) {\r\n            values = [];\r\n            values.push(binding.value);\r\n        }\r\n\r\n        if (depth < values.length) {\r\n            let cmd = values[depth];\r\n            let command: ICommand = this.invokeCommand(cmd, binding, args, depth);\r\n            this.releaseCommand(command);\r\n        } else {\r\n            this.disposeOfSequencedData(args);\r\n            //是否仅执行一次\r\n            if (binding.isOnce) {\r\n                //解除绑定\r\n                this.unbind(binding, null);\r\n            }\r\n        }\r\n    }\r\n    //EventCommandBinder (and perhaps other sub-classes) use this method to dispose of the data in sequenced commands\r\n    protected disposeOfSequencedData(data: object) {\r\n        //No-op. Override if necessary.\r\n    }\r\n    //释放指令，使其进入池\r\n    public releaseCommand(command: ICommand) {\r\n        //有时会需要执行一些耗时的异步操作，如果指令被用户保持则不进行释放，默认情况下都是自动释放的\r\n        if (!command.isRetain) {\r\n            //使用构造函数作为类型\r\n            let t = command.constructor;\r\n            if (this.usePooling && this.pools.has(t)) {\r\n                this.pools.get(t).returnInstance(command);\r\n            }\r\n            if (this.activeCommands.has(command)) {\r\n                this.activeCommands.delete(command);\r\n            } else if (this.activeSequences.has(command)) {\r\n                let binding: CommandBinding = this.activeSequences.get(command);\r\n                let data = command.data;\r\n                this.activeSequences.delete(command);\r\n                this.next(binding, data, command.sequenceId + 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class SignalCommandBinder extends CommandBinder {\r\n    //启用池\r\n    public usePooling : boolean = true;\r\n    //重写解析绑定状态函数\r\n    resolveBinding(binding: IBinding, key: any) {\r\n        super.resolveBinding(binding, key);\r\n        //如果已经存在了则不能再次绑定\r\n        if (this._bindings.has(key)) {\r\n            let signal: ISignal = key;\r\n            signal.addListener(this.onDispose.bind(this)); //Do normal bits, then assign the commandlistener to be reactTo\r\n        }\r\n    }\r\n    //重写绑定方法\r\n    public bind(value: object): CommandBinding {\r\n        //获取绑定状态\r\n        let binding: InjectBinding = this.injectBinder.getBinding(value, null);\r\n        let signal: ISignal = null;\r\n        //检查参数值是否为构造函数\r\n        if (Binding.isConstructor(value)) {\r\n            //如果尚未进行注入则注入一个单例\r\n            if (binding == null) {\r\n                binding = this.injectBinder.bind(value);\r\n                binding.toSingleton();\r\n            }\r\n            signal = this.injectBinder.getInstance(value, null) as ISignal;\r\n        }\r\n        //如果信号存在则绑定信号，否则直接绑定值\r\n        if (signal) {\r\n            return super.bind(signal);\r\n        } else {\r\n            return super.bind(value);\r\n        }\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key: any, name: any): CommandBinding {\r\n        let signal;\r\n        //检查键值是否为构造函数\r\n        if (Binding.isConstructor(key)) {\r\n            //参数应该是一个信号或信号的构造函数，而不是其他的值\r\n            signal = this.injectBinder.getInstance(key, name);\r\n        } else {\r\n            //信号是一个实例\r\n            signal = key;\r\n        }\r\n        return super.getBinding(signal, name) as CommandBinding;\r\n    }\r\n    protected invokeCommand(cmd, binding: CommandBinding, args, depth: number): ICommand {\r\n        let signal: ISignal = binding.key;\r\n        let command: ICommand = this.createCommandForSignal(cmd, args); //Special signal-only command creation\r\n        command.sequenceId = depth;\r\n        this.trackCommand(command, binding);\r\n        this.executeCommand(command,args);\r\n        return command;\r\n    }\r\n    // Create a Command and bind its injectable parameters to the Signal types\r\n    protected createCommandForSignal(cmd, args): ICommand {\r\n        let that = this;\r\n\r\n        if (args != null) {\r\n\r\n            let signalData: [] = args as[];\r\n\r\n            //Iterate each signal type, in order. \r\n            //Iterate values and find a match\r\n            //If we cannot find a match, throw an error\r\n            let injectedTypes = new Set < any > ();\r\n            let values = [signalData];\r\n\r\n            /* if(signalTypes&&signalTypes.length>0){\r\n            signalTypes.forEach((type)=>{\r\n                if (!injectedTypes.has(type)) // Do not allow more than one injection of the same Type\r\n                {\r\n                    let foundValue : boolean= false;\r\n                    for(let i = 0;i<values.length;i++){\r\n                        if (values[i] != null)\r\n                        {\r\n                            that.injectBinder.bind(type).toValue(values[i]).toInject(false);\r\n                            injectedTypes.add(type);\r\n                            //values[i]=null;\r\n                            foundValue = true;\r\n                            break;\r\n                        }\r\n                        else //Do not allow null injections\r\n                        {\r\n                            throw new Error(\"SignalCommandBinder attempted to bind a null value from a signal to Command: \" + cmd.GetType() + \" to type: \" + type);\r\n                        }\r\n                    }\r\n                    if (!foundValue)\r\n                    {\r\n                        throw new Error(\"Could not find an unused injectable value to inject in to Command: \" + cmd.GetType() + \" for Type: \" + type);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    throw new Error(\"SignalCommandBinder: You have attempted to map more than one value of type: \" + type +\r\n                        \" in Command: \" + cmd.GetType() + \". Only the first value of a type will be injected. You may want to place your values in a VO, instead.\");\r\n                }\r\n            })\r\n            }*/\r\n        }\r\n        let command: ICommand = that.getCommand(cmd);\r\n        command.data = args;\r\n/*         if (signalTypes && signalTypes.length > 0) {\r\n            signalTypes.forEach((typeToRemove) => {\r\n                that.injectBinder.unbind(typeToRemove, null);\r\n            })\r\n        } */\r\n        return command;\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\n\r\nexport class CommandBinding extends Binding{\r\n    //是否在执行序列中\r\n    protected _isSequence : boolean;\r\n    //是否仅执行一次\r\n    protected _isOnce : boolean;\r\n    //是否在对象池中\r\n    public isPooled : boolean\r\n    \r\n    public get isSequence() : boolean{\r\n        return this._isSequence\r\n    }\r\n    public get isOnce() : boolean{\r\n        return this._isOnce;\r\n    }\r\n    public to(value) : CommandBinding{\r\n        return super.to(value) as CommandBinding\r\n    }\r\n    public toName(name) : CommandBinding{\r\n        return super.toName(name) as CommandBinding;\r\n    }\r\n    /**\r\n     * 是否进入池\r\n     */\r\n    public Pooled()\r\n    {\r\n        this.isPooled = true;\r\n        this._resolver (this);\r\n        return this;\r\n    }\r\n}","//注入状态类型枚举\r\nexport enum CommandConst\r\n{\r\n    /// Temporary marker for any pool instantiated by the CommandBinder\r\n    COMMAND_POOL = \"COMMAND_POOL\",\r\n}","import { ICommandBinder, __IC_CommandBinder } from \"./ICommandBinder\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../Injector/InjectBinder\";\r\nimport { inject } from \"../Injector/InjectDecorator\";\r\nimport { IConstructorName } from \"../IocConst\";\r\n\r\nexport interface ICommand{\r\n    commandBinder : ICommandBinder;\r\n    injectBinder : IInjectBinder;\r\n    //执行指令\r\n    execute(...args);\r\n    //本条指令的操作ID，用于在队列中寻找下一条指令\r\n    sequenceId : number;\r\n    data : any;\r\n    args : any;\r\n    deploy();\r\n    clean();\r\n    isClean : boolean;\r\n    isRetain : boolean;\r\n    //执行异步操作时可以使用保留指令\r\n    retain();\r\n    //释放被异步操作锁定的指令\r\n    release();\r\n}\r\nexport class __IC_Command extends IConstructorName{\r\n    get constructorName(){return \"ICommand\";}\r\n}\r\nexport class Command implements ICommand{\r\n    // The InjectionBinder for this Context\r\n\t@inject(__IC_InjectBinder)\r\n    public injectBinder : IInjectBinder;\r\n    // Back reference to the CommandBinder that instantiated this Commmand\r\n\t@inject(__IC_CommandBinder)\r\n\tpublic  commandBinder : ICommandBinder;\r\n    public sequenceId;\r\n    public data;\r\n    public args;\r\n    private _clean = false;\r\n    public deploy(){\r\n        this._clean = false;\r\n    }\r\n    public clean(){\r\n        this._clean = true;\r\n    }\r\n    public get isClean(){\r\n        return this._clean;\r\n    };\r\n    private _retain = false;\r\n    //保持指令\r\n    public retain()\r\n    {\r\n        this._retain = true;\r\n    }\r\n    public release()\r\n    {\r\n        this._retain = false\r\n    }\r\n    public get isRetain() : boolean{\r\n        return this._retain;\r\n    }\r\n    //重新释放\r\n    public restore()\r\n    {\r\n        this.injectBinder.injector.uninject (this);\r\n        this.clean();\r\n    }\r\n    //执行指令\r\n    public execute(...args){\r\n\r\n    }\r\n}","import PersistRoot from \"./PersistRoot\";\r\n\r\n//全局变量\r\n export default class  Common{\r\n    static isInit : boolean = false;\r\n    static persistRootNode : PersistRoot= null;\r\n    static root = null;\r\n    static shareTickets = [];\r\n    static isHasWxRank = false;\r\n    static maxScore = 0;\r\n    static saveScoreFunc = null;\r\n    //用户的唯一标识\r\n    static userOpenId = 0;\r\n    //会话密钥\r\n    static session_key = \"\";\r\n    //用户全局唯一标识\r\n    static unionId = 0;\r\n}","import {IRoot} from \"./IRoot\"\r\nimport {__IC_InjectBinder,InjectBinder} from \"../Injector/InjectBinder\";\r\nimport {CommandBinder , SignalCommandBinder } from \"../Command/CommandBinder\";\r\nimport {IocError, IConstructorName} from \"../IocConst\"\r\nimport { __IC_CommandBinder } from \"../Command/ICommandBinder\";\r\n\r\nexport interface IContext {\r\n    start(): IContext;\r\n    restart() : IContext;\r\n    //启动\r\n    launch();\r\n    /// Get the ContextView\r\n    getRoot(): any;\r\n    // Register a new context to this one\r\n    addCrossContext(context : IContext):IContext;\r\n    removeCrossContext(context : IContext);\r\n    //共用绑定器\r\n    crossContextBinder : InjectBinder;\r\n}\r\nexport class __IC_Context extends IConstructorName{\r\n    get constructorName(){return \"IContext\";}\r\n}\r\n\r\nexport class Context implements IContext {\r\n    //第一个被创建出来的环境容器\r\n    public static firstContext : IContext;\r\n    //应该以注入的方式获取\r\n    private _injectBinder : InjectBinder;\r\n    private _crossContextBinder : InjectBinder;\r\n    //注入绑定器\r\n    public get injectBinder(): InjectBinder {\r\n        if(!this._injectBinder){\r\n            this._injectBinder = new InjectBinder();\r\n        }\r\n        return this._injectBinder; \r\n    }\r\n    //设置全局注入绑定器\r\n    public set crossContextBinder(value){\r\n        this._crossContextBinder = value;\r\n    }\r\n    //这里使用注入绑定器代替全局绑定器\r\n    public get crossContextBinder(){\r\n        return this._crossContextBinder;\r\n    }\r\n    private _commandBinder : CommandBinder;\r\n    //指令绑定器\r\n    public get commandBinder(): CommandBinder {\r\n/*         //指令绑定器应该由注入产生\r\n        if(!this._commandBinder){\r\n            this._commandBinder = new CommandBinder();\r\n        } */\r\n        return this._commandBinder; \r\n    }\r\n    //根节点\r\n    root: IRoot;\r\n    //获取根节点\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n\r\n    constructor(root: any) {\r\n        if (Context.firstContext == null || Context.firstContext.getRoot() == null){\r\n            Context.firstContext = this;\r\n            this.crossContextBinder = this.injectBinder;\r\n\t\t}else{\r\n\t\t\tContext.firstContext.addCrossContext(this);\r\n        }\r\n        //设置根节点\r\n        this.setRoot(root);\r\n        //添加核心\r\n        this.addCore();\r\n        //启动环境容器\r\n        this.start();\r\n    }\r\n    //添加全局环境容器\r\n    public addCrossContext(context : IContext):IContext{\r\n        //共用注入绑定器\r\n        context.crossContextBinder= this.injectBinder;\r\n\t\treturn this;\r\n    }\r\n    //移除全局环境容器\r\n    public removeCrossContext(childContext: IContext)\r\n    {\r\n/*         if (childContext.crossContextBinder != null)\r\n        {\r\n            childContext.crossContextBinder = null;\r\n        } */\r\n    }\r\n\r\n    public setRoot(root: any): IContext {\r\n        this.root = root;\r\n        return this;\r\n    }\r\n    public restart() : IContext{\r\n        this.addCore();\r\n        this.start();\r\n        console.info(\"[重启Ioc容器]\");\r\n        return this;\r\n    }\r\n    public start(): IContext {\r\n        this.instantiateCore();\r\n        this.mapBindings();\r\n        this.postBindings();\r\n        this.launch();\r\n\r\n        return this;\r\n    }\r\n    //启动容器\r\n    public launch() {\r\n        console.info(\"Ioc容器启动\");\r\n    }\r\n    /**\r\n     * 初始化核心组件\r\n     */\r\n    protected instantiateCore() {\r\n        //实例化信号绑定器\r\n        this._commandBinder = this.injectBinder.getInstance(__IC_CommandBinder,null);\r\n    }\r\n    protected mapBindings() {\r\n\r\n    }\r\n    protected postBindings() {\r\n\r\n    }\r\n    protected addCore() {\r\n        //注入注入绑定器\r\n        this.injectBinder.bind(__IC_InjectBinder).toValue(this.injectBinder);\r\n        //注入信号绑定器\r\n        this.injectBinder.bind(__IC_CommandBinder).to(SignalCommandBinder).toSingleton();\r\n    }\r\n\r\n}\r\n//}","import {Binder} from \"../Bind/Binder\";\r\nimport {BindingConst} from \"../Bind/BindConst\";\r\nimport {DecoratorClass} from \"./DecoratorClass\";\r\nimport {DecoratorClassBinding} from \"./DecoratorClassBinding\";\r\nimport {IBinding, Binding} from \"../Bind/Binding\";\r\nimport { Prototype } from \"../../Extensions/Prototype\";\r\n\r\nexport class DecoratorClassBinder extends Binder {\r\n    //重写绑定状态映射字典Map< 被注入的类名, Map< 属性名 ，Map< 属性别名 , 绑定状态>>>\r\n    protected _bindings: Map < any, Map < any, Map < any, DecoratorClassBinding >>> ;\r\n    private _decoratorClassBufferMap : Map<any,DecoratorClass>;\r\n\r\n    //重写初始化函数\r\n    init() {\r\n        //初始化绑定状态映射\r\n        this._bindings = new Map < any, Map < any, Map < any, DecoratorClassBinding >>> ();\r\n        //初始化缓存映射\r\n        this._decoratorClassBufferMap = new Map<any,DecoratorClass>();\r\n    }\r\n    //检查是否存在指定的键值\r\n    public has(key):boolean{\r\n        return this._bindings.has(key);\r\n    }\r\n    //获取需要注入的类型数据\r\n    public get(target: any): DecoratorClass {\r\n        //检查是否为实例\r\n        if (!(target instanceof Object)) throw new Error(\"proto must is a object but\" + target + \"is not\");\r\n        //检查是否存在缓存\r\n        if(!this._decoratorClassBufferMap.has(target)){\r\n            //获取继承列表\r\n            let extendsList = Prototype.getPrototypeList(target);\r\n\r\n            let injectClass: DecoratorClass = new DecoratorClass();\r\n            let list = [];\r\n            let dict: Map < any, Map < any, DecoratorClassBinding >> ;\r\n            let that = this;\r\n            let bindingMaps = [];\r\n            if (extendsList && extendsList.length > 0) {\r\n                for(let i = 0 ; i<extendsList.length ; i++){\r\n                    dict = that.getBindingMap(extendsList[i]);\r\n                    if(dict&&dict.size>0){\r\n                        dict.forEach(function(inside) {\r\n                            bindingMaps.push(inside);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            let inside : Map<any,DecoratorClassBinding>;\r\n            if (bindingMaps && bindingMaps.length > 0) {\r\n                for(let i = 0; i <bindingMaps.length;i++){\r\n                    inside = bindingMaps[i];\r\n                    if(inside&&inside.size>0){\r\n                        let values = inside.values();\r\n                        for (let j =0;j<inside.size;j++) {\r\n                            let binding = values.next();\r\n                            list.push(binding.value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            injectClass.list = list;\r\n            //添加缓存\r\n            this._decoratorClassBufferMap.set(target,injectClass);\r\n        }\r\n        //从缓存映射中获取对应的列表\r\n        return this._decoratorClassBufferMap.get(target);\r\n    }\r\n    //重写绑定方法\r\n    public bind(key: any): DecoratorClassBinding {\r\n        return super.bind(key) as DecoratorClassBinding;\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key, name): DecoratorClassBinding {\r\n        return super.getBinding(key, name) as DecoratorClassBinding\r\n    }\r\n    //重写绑定获取方法\r\n    public getRawBinding(): IBinding {\r\n        return new DecoratorClassBinding(this.resolver.bind(this));\r\n    }\r\n    //重写解析器\r\n    public resolver(binding: IBinding) {\r\n        super.resolver(binding);\r\n    }\r\n    /**\r\n     * 重写解析绑定状态\r\n     * @param binding 绑定状态\r\n     * @param key 键值\r\n     */\r\n    resolveBinding(binding: DecoratorClassBinding, key: any) {\r\n        //绑定状态必须有属性名\r\n        if (!binding.property) return;\r\n        //检查绑定状态是否存在别名\r\n        let bindingName = (binding.name == null) ? BindingConst.NULL : binding.name;\r\n        let dict: Map < any, Map < any, DecoratorClassBinding >> ;\r\n        //检查绑定状态字典已经存在键值\r\n        if ((this._bindings.has(key))) {\r\n            //获取绑定映射\r\n            dict = this._bindings.get(key);\r\n            //检查绑定映射是否存在别名\r\n            if (dict.has(bindingName)) {\r\n                //获取内部映射\r\n                let insideDict = dict.get(bindingName);\r\n                //检查映射内是否存在属性名\r\n                if (insideDict.has(binding.property)) {\r\n                    let existingBinding = insideDict.get(binding.property);\r\n                    //如果存在绑定状态\r\n                    if (existingBinding) {\r\n                        //检查存在对应状态绑定是否于当前相等\r\n                        if (existingBinding != binding) {\r\n                            //如果绑定值为空\r\n                            if (!existingBinding.value) {\r\n                                //移除无效的绑定别名\r\n                                dict.delete(bindingName);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //创建绑定映射Map< 别名, Map< 属性名, 绑定状态 >\r\n            dict = new Map < any, Map < any, DecoratorClassBinding >> ();\r\n            //添加绑定映射\r\n            this._bindings.set(key, dict);\r\n        }\r\n\r\n        //如果存在默认绑定状态并且等于当前绑定状态\r\n        if (dict.has(BindingConst.NULL)) {\r\n            let insideDic = dict.get(BindingConst.NULL);\r\n            if (insideDic.has(binding.property)) {\r\n                let existingBinding = insideDic.get(binding.property);\r\n                if (binding.property === binding) {\r\n                    //删除默认绑定\r\n                    insideDic.delete(BindingConst.NULL);\r\n                }\r\n            }\r\n\r\n        }\r\n        let insideDict;\r\n        //添加或覆盖绑定状态\r\n        if (!dict.has(bindingName)) {\r\n            //创建内部映射\r\n            insideDict = new Map < any, DecoratorClassBinding > ();\r\n            //映射绑定状态\r\n            insideDict.set(binding.property, binding);\r\n            //映射绑定\r\n            dict.set(bindingName, insideDict);\r\n        } else {\r\n            //获取内部映射\r\n            insideDict = dict.get(bindingName);\r\n            //检查是否存在属性名映射\r\n            if (!insideDict.has(binding.property)) {\r\n                //映射绑定\r\n                insideDict.set(binding.property, binding)\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 重写获取绑定状态映射表，返回键值的所有绑定状态\r\n     * @param key 被绑定的键值\r\n     */\r\n    getBindingMap(key: any): Map < any, Map < any, DecoratorClassBinding >> {\r\n        if (this._bindings.has(key)) {\r\n            return this._bindings.get(key);\r\n        }\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\n\r\nexport class DecoratorClassBinding extends Binding{\r\n    protected _property: any;\r\n    public get property(){\r\n        return this._property;\r\n    }\r\n    \r\n    /**\r\n     * 从正在绑定状态映射到属性，返回此时的绑定状态。\r\n     * @param property 绑定映射的值\r\n     */\r\n    toProperty(property : any):DecoratorClassBinding {\r\n        this._property = property;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n    //重写绑定到值\r\n    to(value : any):DecoratorClassBinding{\r\n        return super.to(value) as DecoratorClassBinding;\r\n    }\r\n    //重写绑定别名\r\n    toName(name : any) : DecoratorClassBinding{\r\n        return super.toName(name) as DecoratorClassBinding;\r\n    }\r\n}","import { DecoratorClassBinding } from \"./DecoratorClassBinding\";\r\n/**\r\n * 存储装饰器获取的信息\r\n */\r\nexport class DecoratorClass{\r\n    //注入列表\r\n    private _list : DecoratorClassBinding[];\r\n    public get list(){\r\n        return this._list;\r\n    }\r\n    public set list(value : DecoratorClassBinding[]){\r\n        this._list = value;\r\n    }\r\n}","import { DecoratorClassBinder } from \"./DecoratorClassBinder\";\r\nexport module DecoratorConst {\r\n    /**\r\n     * 全局注册接入点\r\n     * 使用属性的类型和属性的别名识别被注入的属性\r\n     */\r\n    export const DECORATOR_CLASS_BINDER = new DecoratorClassBinder();\r\n}","import { randomCoin, randomValue, spriteRes } from '.././util'\nimport { inject } from '../../lib/framework/Injector/InjectDecorator';\nimport { MainModel} from '../context/MainModel';\nimport Animal from './Animal';\nimport { MainUtil, __IC_Util } from '../util/MainUtil';\nimport { IocView } from '../../lib/extensions/IocView';\nimport { GameSignalEnum, MainSignalEnum } from '../signal/MainSignalEnum';\nimport { __IC_Model, ModelType } from \"../util/Model\";\n\nconst {ccclass, property} = cc._decorator\n\n@ccclass\nexport default class Food extends IocView {\n    @inject(__IC_Model,ModelType.Main)\n    mMdl : MainModel;\n    @inject(__IC_Util,\"Main\")\n    mUtl : MainUtil;\n\n    inited;\n    foodData;\n\n\tspeed = 300\n\taccel = 100\n    moveY = 0\n    type = ''\n\n    onLoad() {super.onLoad();}\n    start(){super.start();}\n    reuse() {}\n    unuse() {}\n\n    update(dt) {\n    \tif (!this.inited) return\n    \tthis.speed += this.accel * dt\n    \tthis.moveY = this.speed * dt\n    \tthis.node.y -= this.moveY\n    }\n\n    onCollisionEnter(other, self) {\n        if (!this.inited) return\n        const otherComponent = other.getComponent(Animal)\n        const selfComponent = self.getComponent(Food)\n        if (otherComponent && selfComponent && otherComponent.type === selfComponent.type) {\n            //this.mMdl.onMatch()\n            this.sMgr.get(MainSignalEnum.Match).dispatch(GameSignalEnum.onMatch);\n            this.resPoolNode(this.node)\n        } else {\n            //this.mMdl.onNotMatch()\n            this.sMgr.get(MainSignalEnum.Match).dispatch(GameSignalEnum.onNotMatch);\n        }\n    }\n    //随机配置食物位置\n    randomProps() {\n        this.inited = false\n        let track = randomCoin()\n        //记录最后的食物索引\n        if (this.mMdl.lastFoodIndex === -1) this.mMdl.lastFoodIndex = track\n        if (this.mMdl.lastTrack === -1) this.mMdl.lastTrack = track\n        let baseIndex\n        //如果当前轨道等于最后的轨道\n        if (track === this.mMdl.lastTrack) {\n            //创建与最后的轨道相同类型的食物\n            baseIndex = this.mMdl.lastFoodIndex\n        } else {\n            //检查当前的轨道与最后的食物之间的差值\n            baseIndex = track ? this.mMdl.lastFoodIndex + 1 : this.mMdl.lastFoodIndex - 1\n        }\n        //随机范围\n        let randomRange = [baseIndex - 1, baseIndex + 1].map(i => {\n            if (i < 0) i = this.mMdl.foodDatas.length + i\n            if (i >= this.mMdl.foodDatas.length) i = i - this.mMdl.foodDatas.length\n            return i\n        })\n        let foodIndex = randomValue(...randomRange)\n        this.mMdl.lastFoodIndex = foodIndex\n        this.mMdl.lastTrack = track\n        this.foodData = this.mMdl.foodDatas[foodIndex]\n        let foodNode = this.node\n        this.type = this.foodData.type\n        foodNode.setPosition((track ? 1 : -1) * this.node.width / 2, this.mUtl.getSceneSize().height/2);\n        foodNode.getComponent(cc.Sprite).spriteFrame = this.foodData.spriteFrame \n        this.inited = true\n    }\n    //回收到资源池\n    resPoolNode(foodNode) {\n        let index = this.mMdl.currentFoodNodes.indexOf(foodNode)\n        if (index !== -1) {\n            this.mMdl.currentFoodNodes.splice(index, 1)\n        }\n        return this.mMdl.foodPool.res(foodNode)\n    }\n}\n\n\n\n","import { Command } from \"../../lib/framework/Command/Command\";\r\n\r\n//引用注入装饰器\r\nexport class GameOverCommand extends Command{\r\n    execute(){\r\n        console.info(\"[游戏结束]\");\r\n    }\r\n\r\n    gameOver() {\r\n\r\n        cc.director.loadScene('Begin')\r\n    }\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../context/MainModel\";\r\nimport { MainUtil,__IC_Util } from \"../util/MainUtil\";\r\nimport Animal from \"../view/Animal\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\nimport { TouchUtil, TouchDirection, TouchStatus } from \"../util/TouchUtil\";\r\n\r\n/**\r\n * 生成视图节点命令\r\n * 这个命令用于生成游戏视图\r\n */\r\nexport class GenerateCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,\"Main\")\r\n    mUtl : MainUtil;\r\n    @inject(__IC_Util,\"Touch\")\r\n    tUtl : TouchUtil;\r\n    @inject(cc.Node,\"Scene\")\r\n    sceneNode : cc.Node;\r\n    @inject(cc.Node,\"Animals\")\r\n    animalsNode : cc.Node;\r\n    @inject(cc.Prefab,\"Animal\")\r\n    animalPrefab : cc.Prefab;\r\n    @inject(cc.Prefab,\"Food\")\r\n    foodPrefab : cc.Prefab;\r\n\r\n\r\n    execute(){\r\n        console.log(\"[视图节点生成指令]\");\r\n        this.init();\r\n        this.generateTouchArea();\r\n        this.generateAnimalNodes();\r\n    }\r\n    //生成触控区域\r\n    generateTouchArea(){\r\n        let area = new cc.Node(\"TouchArea\");\r\n        this.sceneNode.addChild(area);\r\n        area.width = this.mUtl.getSceneSize().width;\r\n        area.height = this.mUtl.getSceneSize().height;\r\n        this.tUtl.registerTouchArea(area,true);\r\n    }\r\n    init() {\r\n        this.mMdl.currentFoodNodes = [];\r\n        this.mMdl.foodPool = new PrefabPool('Food', this.foodPrefab)\r\n        this.mMdl.pauseFlag = false;\r\n        this.mMdl.lastFoodIndex = -1\r\n        this.mMdl.lastTrack = -1\r\n        return Promise.all(this.mMdl.foodDatas.map(foodData => this.mUtl.spriteRes(foodData.image).then(spriteFrame => { foodData.spriteFrame = spriteFrame })))\r\n    }\r\n    //生成动物节点\r\n    generateAnimalNodes() {\r\n        let that = this;\r\n        Promise.all(that.mMdl.animalDatas.map(animalData => that.mUtl.spriteRes(animalData.image)))\r\n            .then((spriteFrames) => {\r\n                if (spriteFrames && spriteFrames.length > 0) {\r\n                    spriteFrames.forEach((spriteFrame, i) => {\r\n                        let animalData = that.mMdl.animalDatas[i];\r\n                        let animalNode = cc.instantiate(that.animalPrefab);\r\n                        let animal = animalNode.getComponent(Animal);\r\n                        let sprite = animalNode.getComponent(cc.Sprite);\r\n                        //注意，未被添加到空间中的节点不会被初始化，所以这里需要先引入节点再执行节点的函数\r\n                        that.animalsNode.addChild(animalNode);\r\n\r\n                        sprite.spriteFrame = spriteFrame as cc.SpriteFrame;\r\n                        animal.type = animalData.type;\r\n                        animal.rePositonAnimal(i);\r\n                    })\r\n                }\r\n            })\r\n    }\r\n}","import { CommandBinding } from \"./CommandBinding\";\r\nimport { IBinding } from \"../Bind/Binding\";\r\nimport { Binder } from \"../Bind/Binder\";\r\nimport { IConstructorName } from \"../IocConst\";\r\n\r\nexport interface ICommandBinder{\r\n    bind (key : any) : CommandBinding;\r\n    getRawBinding():IBinding;\r\n}\r\nexport class __IC_CommandBinder extends IConstructorName{\r\n    static get constructorName(){return \"ICommandBinder\";}\r\n}","//namespace ioc{\r\nimport { IContext } from \"./Context\"\r\nimport { IConstructorName } from \"../IocConst\";\r\nexport class __IC_Root extends IConstructorName{\r\n    get constructorName(){return \"IRoot\";}\r\n}\r\nexport interface IRoot {\r\n    context: IContext;\r\n}\r\n//}","import {Binder, IBinder} from \"../Bind/Binder\"\r\nimport {IBinding, Binding} from \"../Bind/Binding\"\r\nimport {BindingConst} from \"../Bind/BindConst\"\r\nimport { Injector } from \"./Injector\";\r\nimport { InjectBinding } from \"./InjectBinding\";\r\nimport {DecoratorConst} from \"../Decorator/DecoratorConst\"\r\nimport {IocError, IConstructorName} from \"../IocConst\"\r\nimport { __IC_Model } from \"../../../project/util/Model\";\r\nimport { MainModel } from \"../../../project/context/MainModel\";\r\n//全局注入数据绑定器\r\nconst ClassBinder = DecoratorConst.DECORATOR_CLASS_BINDER;\r\n\r\nexport interface IInjectBinder extends IBinder{\r\n    injector:Injector;\r\n    getInstance(key,name) : any;\r\n    getBinding(key, name) : InjectBinding;\r\n    bind(key:any):InjectBinding;\r\n    /**\r\n     * 解绑所有被标记了需要解绑的状态\r\n     */\r\n    unbindAllMark();\r\n} \r\nexport class __IC_InjectBinder extends IConstructorName{\r\n    get constructorName(){return \"IInjectBinder\";}\r\n}\r\nexport class InjectBinder extends Binder implements IInjectBinder {\r\n    //注入器\r\n    private _injector:Injector;\r\n    constructor(){\r\n        super();\r\n        this._injector = new Injector ();\r\n        this._injector.binder = this;\r\n        this._injector.injectClassBinder = ClassBinder;\r\n    }\r\n    public get injector() : Injector{\r\n        return this._injector;\r\n    }\r\n    //绑定状态映射字典\r\n    public getInstance(key,name) : any\r\n    {\r\n        //如果未设置别名则使用默认设置\r\n        if(!name)name = BindingConst.NULL;\r\n        //获取绑定状态\r\n        let binding : InjectBinding = this.getBinding (Binding.checkAbstract(key), name) as InjectBinding;\r\n        //尝试获取一个未绑定的键值对时抛出绑定失败异常\r\n        if (binding == null){throw new Error(\"InjectionBinder has no binding for:\\n\\tkey: \" + key + \"\\nname: \" + name);}\r\n        //根据绑定状态从注入器中获取实例\r\n        //console.info(\"[实例化]\"+binding.key);\r\n        let instance = this._injector.instantiate(binding,false);\r\n        //console.info(\"[尝试注入]\"+Binding.checkAbstract(binding.key));\r\n        this._injector.tryInject(binding,instance);\r\n        return instance;\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key, name) : InjectBinding{\r\n        return super.getBinding(key,name) as InjectBinding\r\n    }\r\n    //重写基类的绑定函数\r\n    public bind(key:any):InjectBinding{\r\n        return super.bind(key) as InjectBinding;\r\n    }\r\n    public getRawBinding() : IBinding{\r\n        return new InjectBinding(this.resolver.bind(this));\r\n    }\r\n    public unbindAllMark(){\r\n        let that = this;\r\n        let unbinds = [];\r\n        (this._bindings as Map < any, Map < any, InjectBinding >>).forEach(dict => {\r\n            dict.forEach(binding=>{\r\n                if(binding.isUnbind){\r\n                    unbinds.push(binding);\r\n                }\r\n            })\r\n        });\r\n        //解除被标记的绑定\r\n        unbinds.forEach(binding=>{\r\n            that.unbind(binding.key,binding.name);\r\n        })\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\nimport {InjectConst} from \"./InjectConst\";\r\n\r\nexport class InjectBinding extends Binding{\r\n    protected _isUnbind : boolean = false;\r\n    //默认绑定状态\r\n    protected _bindingType: InjectConst.BindingType = InjectConst.BindingType.DEFAULT;\r\n    //默认自动注入\r\n    protected _isInject: boolean = true;\r\n    //参数\r\n    protected _args: any;\r\n/*     //键值是否为构造函数\r\n    protected _isKeyConstructor = false;\r\n    //值是否为构造函数\r\n    protected _isValueConstructor = false; */\r\n\r\n/*     public get isKeyConstructor(){\r\n        return this._isKeyConstructor;\r\n    }\r\n    public get isValueConstructor(){\r\n        return this._isValueConstructor;\r\n    } */\r\n    public get isInject(){\r\n        return this._isInject;\r\n    }\r\n    //参数列表\r\n    public get args() {\r\n        return this._args;\r\n    }\r\n    public get bindingType(){\r\n        return this._bindingType;\r\n    }\r\n    public get isUnbind(){\r\n        return this._isUnbind;\r\n    }\r\n    /**\r\n     * 参数列表\r\n     */\r\n    public toArgs(){\r\n        this._args = arguments;\r\n        if (this._resolver != null){\r\n            this._resolver(this);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 设置为单例模式时，每次都会得到相同的实例\r\n     */\r\n\tpublic toSingleton(): InjectBinding\r\n\t{\r\n\t\t//如果已经存在一个值了, 那么这次映射就被视为多余的\r\n\t\tif (this._bindingType === InjectConst.BindingType.VALUE){\r\n            return this;\r\n        }\r\n        //设定为单例注入\r\n        this._bindingType = InjectConst.BindingType.SINGLETON;\r\n\t\tif (this._resolver != null){\r\n\t\t\tthis._resolver (this);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n    /**\r\n     * 设置为解绑时，调用解绑方法将会解绑所有被标记的绑定状态\r\n     */\r\n    public unBind(): InjectBinding{\r\n        this._isUnbind = true;\r\n        return this;\r\n    }\r\n    public toValue(value : any) : InjectBinding{\r\n        this._bindingType = InjectConst.BindingType.VALUE;\r\n        this.setValue(value);\r\n        return this;\r\n    }\r\n    public setValue(o : any) : InjectBinding\r\n    {\r\n        this.to(o);\r\n        return this;\r\n    }\r\n    public toInject( value : boolean) : InjectBinding\r\n    {\r\n        this._isInject = value;\r\n        return this;\r\n    }\r\n    //重写基类的赋值函数\r\n    public to(value : any) : InjectBinding{\r\n        return super.to(value) as InjectBinding;\r\n    }\r\n    public toName(name : any) : InjectBinding{\r\n        return super.toName(name) as InjectBinding;\r\n    }\r\n}","export module InjectConst {\r\n    //注入状态类型枚举\r\n    export const enum BindingType\r\n    {\r\n        /// 每次都会创建一个新的对象\r\n        DEFAULT = \"Default\",\r\n    \r\n        /// 总是使用同一个对象单例\r\n        SINGLETON = \"Singleton\",\r\n    \r\n        /// 总是相同的对象但参数不同\r\n        VALUE = \"Value\",\r\n    }\r\n}","import {DecoratorConst} from \"../Decorator/DecoratorConst\"\r\nimport { Binding } from \"../Bind/Binding\";\r\n//全局注入数据绑定器\r\nconst ClassBinder = DecoratorConst.DECORATOR_CLASS_BINDER;\r\n/**\r\n * 注入装饰器模块\r\n * 因为TS的类型系统仅可以用于检查语法错误，而在编译为JS后不再有类型系统，所以无法在TS中存储类型数据\r\n * 并且在微信环境下是无法使用反射库和动态代码，至少现在还不行。\r\n * 为了实现注入功能，这里采用类的构造函数作为类型数据，以构造函数的name属性作为类型的名称，又因接口没有构造函数\r\n * 所以统一采用添加 __IC_ 前缀的模拟接口名方式间接存储接口数据，因为装饰器会在程序运行的起始阶段执行，所以使用一个全局变量存储这些数据\r\n * @see 注意：所有的__IC_类均需要实现IConstructorName接口\r\n * @example\r\n * class{\r\n *  @inject(constructor)\r\n *  anyclass:T;\r\n * }\r\n */\r\nexport function inject < T > (str: string): Function;\r\n/**\r\n * 属性值注入装饰器\r\n * @param c 构造函数\r\n */\r\nexport function inject < T > (c: new() => T): Function;\r\n/**\r\n * 使用别名的方式注入属性值\r\n * @param name 属性值别名\r\n */\r\nexport function inject < T > (c: new() => T, name: any): Function;\r\nexport function inject < T > (str:string, name: any): Function;\r\n/**\r\n * 使用默认的方式注入属性值\r\n */\r\n//export function inject<T>(_target: Object, _key: any, _desc ? : any) : void;\r\n\r\n//利用重载的形式定义注入属性的方法\r\nexport function inject < T > (): any {\r\n    switch (arguments.length) {\r\n        case 0:\r\n            break;\r\n        case 1:\r\n            return injectNoNameFunc < T > (arguments[0]);\r\n            break;\r\n        case 2:\r\n            return injectToNameFunc < T > (arguments[0], arguments[1])\r\n            break;\r\n        case 3:\r\n            break;\r\n    }\r\n}\r\n/**\r\n * 无别名的属性装饰器\r\n * @param _constructor 类型T的构造函数\r\n */\r\nconst injectNoNameFunc = < T > (_constructor: new() => T | string) => {\r\n    return function (_target: any, _property: string) {\r\n        injectFunc(_target,_constructor,_property);\r\n    }\r\n}\r\n/**\r\n * 带别名的属性装饰器\r\n * @param _constructor 类型T的构造函数\r\n */\r\nconst injectToNameFunc = < T > (_constructor: new() => T | string, _name: any) => {\r\n    return function (_target: any, _property: string) {\r\n        injectFunc(_target,_constructor,_property,_name);\r\n    }\r\n\r\n}\r\n/**\r\n * \r\n * @param _target 被注入的目标类\r\n * @param _constructor 注入的类\r\n * @param _property 注入的类的属性名\r\n * @param _name 注入的类的别名\r\n */\r\nfunction injectFunc(_target,_constructor,_property,_name?){\r\n    //所有实现了IConstructorName的类都属于虚类，这里获取虚类对应的接口名作为键值传递给绑定器\r\n    //因为压缩代码会把所有对象的名称都压缩掉，所以这里使用构造函数作为键值\r\n    ClassBinder.bind(_target.constructor).to(Binding.checkAbstract(_constructor)).toProperty(_property).toName(_name);\r\n}","import { InjectBinding } from \"./InjectBinding\";\r\nimport {InjectConst} from \"./InjectConst\";\r\nimport { Binding } from \"../Bind/Binding\";\r\n/**\r\n * 注入工厂，负责从给定的构造函数创建对象\r\n * 可以创建单例\r\n */\r\nexport class InjectFactory{\r\n    /**\r\n     * 根据绑定状态和指定的参数创建或获取实例对象\r\n     * @param binding 绑定状态\r\n     * @param args 参数\r\n     */\r\n    public get(binding:InjectBinding,args : any[]):object{\r\n        //检查绑定状态是否有效\r\n        if (binding == null){\r\n\t\t\tthrow new Error (\"InjectorFactory cannot act on null binding\");\r\n        }\r\n        //判断注入状态类型\r\n        let bindingType : InjectConst.BindingType = binding.bindingType;\r\n        //根据不同的类型创建\r\n        switch (bindingType)\r\n        {\r\n            case InjectConst.BindingType.SINGLETON:\r\n                return this.singletonOf (binding, args);\r\n                break;\r\n            case InjectConst.BindingType.VALUE:\r\n                return this.valueOf (binding);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return this.instanceOf (binding, args);\r\n    }\r\n    // 生成一个新的实例\r\n\tprotected instanceOf( binding : InjectBinding, args : any[]) : any\r\n\t{\r\n\t\tif (binding.value != null)\r\n\t\t{\r\n\t\t\treturn this.createFromValue(binding.value, args);\r\n\t\t}\r\n\t\tlet value : any = this.generateImplicit(binding.key, args);\r\n\t\treturn this.createFromValue(value, args);\r\n    }\r\n    // Call the Activator to attempt instantiation the given object\r\n\tprotected createFromValue(c : new(...args)=> any, args : any[]) : any\r\n\t{\r\n\t\tlet instance = null;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (args == null || args.length == 0)\r\n\t\t\t{\r\n\t\t\t\tinstance = new c();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinstance = new c(args);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch\r\n\t\t{\r\n\t\t\t//No-op\r\n        }\r\n        //if(instance)console.info(\"[实例化]\"+instance.constructor.name);\r\n\t\treturn instance;\r\n    }\r\n    protected generateImplicit(key : any, args:any[]):any\r\n    {\r\n        //如果无法直接转换键值为构造函数\r\n        if(!key)return null;\r\n        //检查键值是否为构造函数\r\n        if (Binding.isConstructor(key))\r\n        {\r\n            return this.createFromValue(key, args);\r\n        }\r\n        throw new Error (\"InjectorFactory can't instantiate an Interface or Abstract Class. Class: \" + key.ToString());\r\n    }\r\n    // Generate a Singleton instance\r\n\tprotected singletonOf(binding : InjectBinding, args : any[])\r\n\t{\r\n\t\tif (binding.value != null)\r\n\t\t{\r\n            let o = this.createFromValue (binding.value, args);\r\n            if (o == null)\r\n                return null;\r\n            binding.setValue(o);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbinding.setValue(this.generateImplicit(binding.key, args));\r\n\t\t}\r\n\t\treturn binding.value;\r\n    }\r\n    protected valueOf(binding : InjectBinding)\r\n    {\r\n        return binding.value;\r\n    }\r\n}","import { InjectFactory } from \"./InjectFactory\"\r\nimport { InjectBinder } from \"./InjectBinder\";\r\nimport { InjectBinding } from \"./InjectBinding\";\r\nimport { InjectConst} from \"./InjectConst\";\r\nimport { DecoratorClass } from \"../Decorator/DecoratorClass\";\r\nimport { DecoratorClassBinder } from \"../Decorator/DecoratorClassBinder\";\r\nimport { Binding } from \"../Bind/Binding\";\r\n\r\nexport class Injector{\r\n    public factory : InjectFactory;\r\n    public binder : InjectBinder;\r\n    public injectClassBinder : DecoratorClassBinder;\r\n\r\n    constructor(){\r\n        this.factory = new InjectFactory();\r\n    }\r\n    public uninject(target)\r\n    {\r\n        if(!this.binder||!target)throw new Error(\"Attempt to inject into Injector without a Binder or null instance\");\r\n        //排除一些不能被注入的类型\r\n        let type : any = typeof target;\r\n        if (type === \"string\" || type === \"boolean\"||type === \"number\" ||type === \"symbol\"||type === \"undefined\" || type === \"function\")\r\n        {\r\n            return target;\r\n        }\r\n        //获取注入类\r\n        let injectClass : DecoratorClass = this.injectClassBinder.get(target);\r\n        this.decoratorUnInject (target, injectClass);\r\n    }\r\n    private decoratorUnInject(target : any, injectClass : DecoratorClass){\r\n        let that = this;\r\n        //遍历注入类\r\n        injectClass.list.forEach((binding)=>{\r\n            //尝试获绑定状态\r\n            let injectBinding = that.binder.getBinding(binding.value,binding.name);\r\n            //不能注入一个未绑定的值\r\n            if(injectBinding){\r\n                //将注入值赋给目标对象\r\n                target[binding.property] = null;\r\n            }\r\n        })\r\n    }\r\n    //实例化对象\r\n    public instantiate(binding : InjectBinding,tryInjectHere : boolean) : object{\r\n        //检查是否具备注入条件\r\n        if(!this.binder||!this.factory)throw new Error(\"Attempt to instantiate from Injector without a Binder or inject into Injector without a Factory\");\r\n        //构造函数\r\n        let constructor = null;\r\n        //实例对象\r\n        let instance : object = null;\r\n        //检查绑定状态的值是否为构造函数\r\n        if (binding.isValueConstructor){\r\n            //传入构造函数\r\n            constructor = binding.value;\r\n        }else{\r\n            //直接赋值\r\n            instance = binding.value;\r\n        }\r\n        //如果没有设置注入值但是键值是一个构造函数\r\n        if(!constructor&&binding.isKeyConstructor){\r\n            //指定绑定状态的键值为构造函数\r\n            constructor = binding.key;\r\n        }\r\n        //如果没有直接赋值实例并且存在构造函数\r\n        if(!instance && constructor){\r\n            //参数\r\n            let args = binding.args;\r\n            instance = this.factory.get(binding, args);\r\n            //如果尝试在这里直接注入\r\n            if (tryInjectHere)\r\n            {\r\n                this.tryInject(binding, instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    public tryInject(binding : InjectBinding, target : any)\r\n    {\r\n        //如果工厂不能创建实例则这里直接返回\r\n        if (target != null)\r\n        {\r\n            if (binding.isInject)\r\n            {\r\n                target = this.inject(target, false);\r\n            }\r\n\r\n            if (binding.bindingType == InjectConst.BindingType.SINGLETON || binding.bindingType == InjectConst.BindingType.VALUE)\r\n            {\r\n                //prevent double-injection\r\n                binding.toInject(false);\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    //注入目标中所有被@Inject标记的属性\r\n    public inject(target : object, attemptConstructorInjection : boolean) : any\r\n    {\r\n        if(!this.binder||!target)throw new Error(\"Attempt to inject into Injector without a Binder or null instance\");\r\n        //排除一些不能被注入的类型\r\n        let type : any = typeof target;\r\n        if (type === \"string\" || type === \"boolean\"||type === \"number\" ||type === \"symbol\"||type === \"undefined\" || type === \"function\")\r\n        {\r\n            return target;\r\n        }\r\n        //因为TS中无法获得类型名称，所以使用目标的构造函数名称代替类型名称\r\n        //let typeName : string = target.constructor;\r\n        //获取注入类\r\n        let injectClass : DecoratorClass = this.injectClassBinder.get(target);\r\n        //是否允许使用构造器注入\r\n        if (attemptConstructorInjection)\r\n        {\r\n            //target = performConstructorInject(target, reflection);\r\n        }\r\n        this.decoratorInject(target,injectClass);\r\n        //performSetterInject(target, reflection);\r\n        //postInject(target, reflection);\r\n        return target;\r\n    }\r\n    /**\r\n     * 装饰器注入，使用注入类进行注入\r\n     */\r\n    private decoratorInject(target : any, injectClass : DecoratorClass){\r\n        let that = this;\r\n        //遍历注入类\r\n        injectClass.list.forEach((binding)=>{\r\n            //console.info(\"[装饰器注入]\"+binding.value + \"[别名]\"+binding.name);\r\n            //尝试获绑定状态\r\n            let injectBinding = that.binder.getBinding(binding.value,binding.name);\r\n            //不能注入一个未绑定的值\r\n            if(injectBinding){\r\n                let instance = that.getInjectValue(injectBinding.key,injectBinding.name);\r\n                //将注入值赋给目标对象\r\n                target[binding.property] = instance;\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * 获取需要注入的值，这个过程会递归调用\r\n     * @see 注意循环依赖会严重消耗性能\r\n     */\r\n    private getInjectValue(type,name):object{\r\n        //尝试获取绑定状态\r\n        let binding = this.binder.getBinding(type,name);\r\n        if(!binding)return null;\r\n        //if(binding.key.name)console.info(\"[获取注入值]\"+binding.key.name+\"[别名]\"+name+\"[绑定状态]\"+binding.bindingType + \",\"+binding.isInject);\r\n        //else console.info(\"[获取注入值]\"+binding.key+\"[别名]\"+name+\"[绑定状态]\"+binding.bindingType + \"[需要注入]\"+binding.isInject);\r\n        //如果是值类型绑定\r\n        if(binding.bindingType === InjectConst.BindingType.VALUE){\r\n            //如果需要注入\r\n            if(binding.isInject){\r\n                //if(Binding.isConstructor(binding.value))console.info(\"[对值(构造函数))]\"+binding.value.constructor.name + \"[进行注入]\");\r\n                //else console.info(\"[对值(对象)]\"+binding.value.__proto__.constructor + \"[进行注入]\");\r\n\r\n                let injv = this.inject (binding.value, false);\r\n                binding.toInject (false);\r\n\r\n                //if(binding.key.name)console.info(\"[绑定状态]\"+binding.key.name+\"[完成注入]\"+binding.isInject);\r\n                //else console.info(\"[绑定状态]\"+binding.key+\"[完成注入]\"+binding.isInject);\r\n\r\n                return injv;\r\n            }else{\r\n                return binding.value;\r\n            }\r\n        //如果是单例注入\r\n        }else if (binding.bindingType == InjectConst.BindingType.SINGLETON){\r\n            //如果绑定状态的值是一个构造函数\r\n            if (binding.isValueConstructor || binding.value == null)\r\n            {\r\n                this.instantiate (binding, true);\r\n            }\r\n            return binding.value;\r\n        }else{\r\n            return this.instantiate(binding,true);\r\n        }\r\n    }\r\n    /*     //构造器注入，未实现\r\n    private performConstructorInject(){\r\n\r\n    } */\r\n    /* //属性设置器注入，未实现\r\n    performSetterInject(){\r\n\r\n    } */\r\n    /*     //方法注入，未实现\r\n    postInject(){\r\n\r\n    } */\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { MainModel } from \"../context/MainModel\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport Animal from \"../view/Animal\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Util } from \"../util/MainUtil\";\r\nimport { TouchUtil, TouchDirection, TouchStatus } from \"../util/TouchUtil\";\r\n\r\n/**\r\n * 输入控制指令\r\n */\r\nexport class InputControlCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(cc.Node,\"Animals\")\r\n    animalsNode : cc.Node;\r\n    @inject(__IC_Util,\"Touch\")\r\n    tUtl : TouchUtil;\r\n\r\n    execute(){\r\n        let that = this;\r\n        //注册一个使用全局区域的上划回调\r\n        this.tUtl.on(TouchDirection.Up,(status:TouchStatus)=>{\r\n            if(status.sPosX>0){\r\n                that.areaOnMove(TouchDirection.Up);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Down);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Down,(status:TouchStatus)=>{\r\n            if(status.sPosX>0){\r\n                that.areaOnMove(TouchDirection.Up);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Down);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Left,(status:TouchStatus)=>{\r\n            if(status.sPosY>0){\r\n                that.areaOnMove(TouchDirection.Left);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Right);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Right,(status:TouchStatus)=>{\r\n            if(status.sPosY>0){\r\n                that.areaOnMove(TouchDirection.Left);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Right);\r\n            }\r\n        });\r\n    }\r\n\r\n    areaOnMove(direction : TouchDirection) {\r\n        //如果暂停标志位为真则直接返回\r\n        if (this.mMdl.pauseFlag) return\r\n        if (direction === TouchDirection.Left || direction === TouchDirection.Right) {\r\n            this.rotateAnimals(0)\r\n        } else if (direction === TouchDirection.Up || direction === TouchDirection.Down) {\r\n            this.rotateAnimals(1)\r\n        }\r\n    }\r\n    //旋转动物\r\n    rotateAnimals(direction) {\r\n        if (this.mMdl.isRotationing) return\r\n        let that = this;\r\n        this.mMdl.isRotationing = true\r\n        const [x, y] = direction ? [1, -1] : [-1, 1]\r\n        const rotateAction = cc.scaleBy(this.mMdl.rotateDur, x, y)\r\n        this.animalsNode.runAction(cc.sequence(rotateAction, cc.callFunc(() => {\r\n            that.resetAnimalsNode(direction);\r\n            if(that.animalsNode.children&&this.animalsNode.children.length>0){\r\n                //遍历并旋转所有动物节点\r\n                that.animalsNode.children.forEach((animalNode, i) => animalNode.getComponent(Animal).rePositonAnimal(i))\r\n            }\r\n            that.mMdl.isRotationing = false\r\n        })))\r\n    }\r\n\r\n    resetAnimalsNode(direction) {\r\n        const animalsNodeChildren = this.animalsNode.children;\r\n        if (!direction) {\r\n            this.switchIndex(animalsNodeChildren, 0, 1)\r\n            this.switchIndex(animalsNodeChildren, 3, 2)\r\n        } else {\r\n            this.switchIndex(animalsNodeChildren, 0, 3)\r\n            this.switchIndex(animalsNodeChildren, 1, 2)\r\n        }\r\n        this.animalsNode.setScale(1, 1)\r\n    }\r\n\r\n    switchIndex(list, one, two) {\r\n        const temp = list[two]\r\n        list[two] = list[one]\r\n        list[one] = temp\r\n    }\r\n}","import {Context, IContext} from \"../framework/Context/Context\"\r\nimport {IocRoot} from \"./IocRoot\"\r\nconst {ccclass} = cc._decorator\r\n@ccclass\r\nexport class IocComponet extends cc.Component{\r\n\tpublic registeredWithContext : boolean;\r\n\tprivate _requiresContext : boolean= true;\r\n\tpublic get requiresContext() : boolean\r\n\t{\r\n\t\treturn this._requiresContext;\r\n\t}\r\n\tpublic set requiresContext(value){\r\n\t\tthis._requiresContext = value;\r\n\t}\r\n\tprotected _registerWithContext : boolean = true;\r\n\tpublic get autoRegisterWithContext()\r\n\t{\r\n\t\treturn this._registerWithContext; \r\n\t}\r\n\tpublic set autoRegisterWithContext(value){\r\n\t\tthis._registerWithContext = value;\r\n\t}\r\n\tpublic get shouldRegister() :boolean { return this.enabled && this.node.activeInHierarchy; }\r\n\r\n\t//载入阶段尝试注入数据\r\n    onLoad(){\r\n\t\tif (this.autoRegisterWithContext && !this.registeredWithContext && this.shouldRegister)\r\n\t\t\tthis.bubbleToContext(this,BubbleType.Add, false);\r\n\t}\r\n\t//启动阶段尝试注入数据\r\n\tstart(){\r\n\t\tif (this.autoRegisterWithContext && !this.registeredWithContext && this.shouldRegister)\r\n\t\t\tthis.bubbleToContext(this, BubbleType.Add, true);\r\n\t}\r\n\r\n    protected bubbleToContext(view : cc.Component,type: BubbleType,finalTry:boolean)\r\n\t{\r\n\t\t\tconst LOOP_MAX : number= 100;\r\n\t\t\tlet loopLimiter : number= 0;\r\n\t\t\tlet node = view.node;\r\n\t\t\twhile (node.parent != null && loopLimiter < LOOP_MAX)\r\n\t\t\t{\r\n\t\t\t\tloopLimiter++;\r\n\t\t\t\tnode = node.parent;\r\n\t\t\t\tif (node.getComponent(IocRoot) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet iocContext : IocRoot = node.getComponent(IocRoot) as IocRoot;\r\n\t\t\t\t\tif (iocContext.context != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet context : IContext= iocContext.context;\r\n\t\t\t\t\t\tlet success : boolean= true;\r\n\r\n\t\t\t\t\t\tswitch (type)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase BubbleType.Add:\r\n\t\t\t\t\t\t\t\t//注入数据\r\n\t\t\t\t\t\t\t\tcontext.crossContextBinder.injector.inject(this,true);\r\n\t\t\t\t\t\t\t\t//context.addView(view);\r\n\t\t\t\t\t\t\t\tthis.registeredWithContext = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Remove:\r\n\t\t\t\t\t\t\t\t//context.removeView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Enable:\r\n\t\t\t\t\t\t\t\t//context.enableView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Disable:\r\n\t\t\t\t\t\t\t\t//context.disableView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tsuccess = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (success)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.requiresContext && finalTry && type == BubbleType.Add)\r\n\t\t\t{\r\n\t\t\t\t//last ditch. If there's a Context anywhere, we'll use it!\r\n\t\t\t\tif (Context.firstContext != null)\r\n\t\t\t\t{\r\n\t\t\t\t\t//Context.firstContext.addView(view);\r\n\t\t\t\t\tthis.registeredWithContext = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet msg : string;\r\n\t\t\t\tif(loopLimiter == LOOP_MAX){\r\n\t\t\t\t\tmsg = \"A view couldn't find a context. Loop limit reached.\"\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tmsg = \"A view was added with no context. Views must be added into the hierarchy of their ContextView lest all hell break loose.\";\r\n\t\t\t\t\tmsg += \"\\nView: \" + view.toString();\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(msg);\r\n\t\t\t}\r\n\t\t}\r\n}\r\n\r\nexport enum BubbleType\r\n{\r\n\tAdd,\r\n\tRemove,\r\n\tEnable,\r\n\tDisable\r\n}","export module IocError{\r\n    export const IC_ERROR = \"can't implement class that is only as interface\";\r\n}\r\nexport abstract class IConstructorName{\r\n    abstract get constructorName() : string;\r\n}","import {Context, IContext} from \"../framework/Context/Context\"\r\n\r\nconst {ccclass, property} = cc._decorator\r\n@ccclass\r\nexport class IocRoot extends cc.Component{\r\n    public context : IContext;\r\n\r\n    public requiresContext : boolean;\r\n\r\n    public registeredWithContext : boolean;\r\n\r\n    public autoRegisterWithContext : boolean;\r\n\r\n    public get shouldRegister() {return true;}\r\n\r\n    onDestroy(){\r\n        if (this.context != null && Context.firstContext != null)\r\n            Context.firstContext.removeCrossContext(this.context);\r\n    }\r\n}","import { IocComponet } from \"./IocComponet\";\r\nimport { inject } from \"../framework/Injector/InjectDecorator\";\r\nimport { __IC_SignalManager, ISignalManager } from \"../framework/Signal/SignalManager\";\r\n\r\nconst {ccclass} = cc._decorator\r\n@ccclass\r\nexport class IocView extends IocComponet{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n\r\n    onLoad(){\r\n        super.onLoad();\r\n    }\r\n    \r\n    start(){\r\n        super.start();\r\n    }\r\n\r\n}","import { IocComponet } from \"../../lib/extensions/IocComponet\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { __IC_SignalManager, ISignalManager } from \"../../lib/framework/Signal/SignalManager\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainModel } from \"../context/MainModel\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class LogicNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    onLoad(){\r\n        super.onLoad();\r\n        //注册节点\r\n        this.inj.bind(cc.Node).toName(\"LogicNode\").toValue(this.node).unBind();\r\n    }\r\n    start(){\r\n        super.start();\r\n    }\r\n    update(dt){\r\n        if(this.sMgr && !this.mMdl.pauseFlag){\r\n            this.sMgr.get(MainSignalEnum.Update).dispatch(dt);\r\n        }\r\n    }\r\n}","import Common from \"../../common\";\r\nimport WxApi from \"../WxApi\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad(){\r\n        if(!WxApi.isRunInWeiXin)return;\r\n        console.info(\"[登入微信平台]\");\r\n        wx.login({\r\n            success(res){\r\n                console.info(\"[登录成功]\" + res);\r\n            },\r\n            fail(res){\r\n                console.info(\"[登录失败]\" + res);\r\n            }\r\n        });\r\n        //同步启动选项\r\n        this.launchOptionsSync();\r\n        //设置存储分数的方法并获取最高分\r\n        if(!Common.saveScoreFunc){\r\n            //获取最高分数据后绑定存储分数的方法\r\n            Common.saveScoreFunc = this.saveScore;\r\n        }\r\n    },\r\n    launchOptionsSync(){\r\n        if(!Common.shareTickets)Common.shareTickets=[];\r\n        let info = wx.getLaunchOptionsSync();\r\n        console.info(\"[同步启动选项]\"+info);\r\n        switch(info.scene){\r\n            case 1044:\r\n                if(info.shareTicket){\r\n                    Common.shareTickets.push(info.shareTicket);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    //存储游戏分数\r\n    saveScore(value){\r\n        let score =  Number(value);\r\n        //检查是否为最高分\r\n        if(score&&score>Common.maxScore){\r\n            Common.maxScore = score;\r\n        }\r\n        console.info(\"[通知开发数据容器存储分数]\"+score);\r\n        //发送存储分数消息告知开放数据容器\r\n        wx.getOpenDataContext().postMessage({\r\n            message:{\r\n                type: \"command\",\r\n                function: \"save\",\r\n                arguments : \"score\",\r\n                data: Common.maxScore,\r\n            }\r\n        });\r\n    }\r\n});","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport Common from \"../Common\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IInjectBinder, __IC_InjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\n\r\n//引用注入装饰器\r\nexport class LookRankCommand extends Command{\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    execute(){\r\n        console.info(\"[查看排行榜开始]\");\r\n        this.lookRank();\r\n    }\r\n\r\n    lookRank(){\r\n        this.inj.unbindAllMark();\r\n        //let a = Common.persistRootNode;\r\n        cc.director.loadScene('Rank')\r\n    }\r\n}","import {StartCommand} from \"../command/StartCommand\"\r\nimport { __IC_SignalManager, ISignalManager } from \"../../Lib/Framework/Signal/SignalManager\";\r\nimport {IContext,Context} from \"../../Lib/Framework/Context/Context\"\r\nimport { MainSignalManager } from \"../signal/MainSignalManager\"\r\nimport { MainModel } from \"./MainModel\";\r\nimport { UpdateCommand } from \"../command/UpdateCommand\";\r\nimport { GenerateCommand } from \"../command/GenerateCommand\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainUtil,__IC_Util } from \"../util/MainUtil\";\r\nimport { RestartCommand } from \"../command/RestartCommand\";\r\nimport { LookRankCommand } from \"../command/LookRankCommand\";\r\nimport { MatchCommand } from \"../command/MatchCommand\";\r\nimport ResourceManager from \"../util/ResourceManager\";\r\nimport { ManagerType, __IC_Manager } from \"../util/Manager\";\r\nimport { __IC_Model } from \"../util/Model\";\r\nimport { TouchUtil } from \"../util/TouchUtil\";\r\nimport { InputControlCommand } from \"../command/InputControlCommand\";\r\n\r\nexport class MainContext extends Context{\r\n    constructor(root: any){\r\n        super(root);\r\n    }\r\n    //添加核心\r\n    addCore(){\r\n        super.addCore();\r\n        //注入信号管理器单例\r\n        this.injectBinder.bind(__IC_SignalManager).to(MainSignalManager).toSingleton();\r\n        //绑定数据\r\n        this.injectBinder.bind(__IC_Model).toValue(MainModel.Instance).toName(\"Main\");\r\n        //绑定工具\r\n        this.injectBinder.bind(__IC_Util).toValue(MainUtil.Instance).toName(\"Main\");\r\n        this.injectBinder.bind(__IC_Util).toValue(TouchUtil.Instance).toName(\"Touch\");\r\n        //绑定资源管理器\r\n        this.injectBinder.bind(__IC_Manager).toValue(ResourceManager.Instance).toName(ManagerType.Resource);\r\n        //console.info(\"添加核心\");\r\n    }\r\n    //映射绑定\r\n    mapBindings(){\r\n        super.mapBindings();\r\n        //console.info(\"映射绑定\");\r\n        let signalMgr : ISignalManager= this.injectBinder.getInstance(__IC_SignalManager,null);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Start)).to(StartCommand);\r\n        //绑定更新信号到更新命令,并使用池进行缓存\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Update)).to(UpdateCommand).Pooled();\r\n        //生成游戏视图节点\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Generate)).to(GenerateCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Restart)).to(RestartCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.LookRank)).to(LookRankCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Match)).to(MatchCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.InputControl)).to(InputControlCommand);\r\n    }\r\n    start() : IContext{\r\n        super.start();\r\n        console.info(\"[启动环境]\");\r\n        return this;\r\n    } \r\n}\r\n","import { Singleton } from \"../util/Singleton\";\r\nimport { IModel } from \"../util/Model\";\r\nimport { Singleton } from \"../util/Singleton\";\r\n\r\n/**\r\n * 应该将需要生命周期较长的变量存储在数据模型里，然后在其他类中通过注入的方式获取数据模型\r\n */\r\nexport class MainModel extends Singleton implements IModel{\r\n    //食物对象池，减少创建对象的开销\r\n    public foodPool = null;\r\n    //当前的食物节点列表\r\n    public currentFoodNodes = [];\r\n    //最后的食物索引\r\n    public lastFoodIndex = 0;\r\n    //最后的轨道\r\n    public lastTrack = 0;\r\n    public onMatch = null;\r\n    public onNotMatch = null;\r\n\r\n    public animalDatas = [{\r\n        image: 'animals/bird',\r\n        type: '0'      \r\n    }, {\r\n        image: 'animals/bear',\r\n        type: '1'   \r\n    }, {\r\n        image: 'animals/rabbit',\r\n        type: '2'   \r\n    }, {\r\n        image: 'animals/dog',\r\n        type: '3'   \r\n    }]\r\n    public foodDatas = [{\r\n        image: 'foods/food-bird',\r\n        type: '0',\r\n        spriteFrame : null\r\n    }, {\r\n        image: 'foods/food-bear',\r\n        type: '1',\r\n        spriteFrame : null \r\n    }, {\r\n        image: 'foods/food-rabbit',\r\n        type: '2',\r\n        spriteFrame : null\r\n    }, {\r\n        image: 'foods/food-dog',\r\n        type: '3',\r\n        spriteFrame : null\r\n    }]\r\n    public rotateDur = 0.1\r\n    public isRotationing = false\r\n    public animalTextureRect = { width: 264, height: 268  }\r\n\r\n    public pauseFlag = true;\r\n    public timer = 0\r\n    public lastTimer = 0\r\n    public timePeriod = 1.8\r\n    public initTimePeriod = 0\r\n    public minTimePeriod = 0.6\r\n    public score = 0\r\n    public maxScore = 0;\r\n    public currentLevel = 0\r\n    public harderRatios = (() => {\r\n        const list = []\r\n        for (let i = 0; i <= 10; i++) {\r\n            list[i] = [i * 10, 0.2]\r\n        }\r\n        return list\r\n    })();\r\n}","import {__IC_SignalManager,ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport {MainModel} from '../context/MainModel';\r\nimport { inject } from '../../lib/framework/Injector/InjectDecorator';\r\nimport { IocView } from '../../lib/extensions/IocView';\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class MainNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl: MainModel;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n        //注册节点\r\n        this.inj.bind(cc.Node).toName(\"MainNode\").toValue(this.node).unBind();\r\n        //执行开始信号\r\n        this.sMgr.get(MainSignalEnum.Start).dispatch();\r\n    }\r\n\r\n    update(dt) {\r\n\r\n    }\r\n}","import {IRoot} from \"../../Lib/Framework/Context/IRoot\"\r\nimport {IContext} from \"../../Lib/Framework/Context/Context\"\r\nimport {IocRoot} from \"../../lib/extensions/IocRoot\"\r\nimport {MainContext} from \"./MainContext\"\r\nimport PersistRoot from \"../PersistRoot\";\r\nimport Common from \"../Common\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainRoot extends IocRoot implements IRoot {\r\n    //环境容器\r\n    public context: IContext;\r\n\r\n    onLoad () {\r\n        //let context = new MainContext(this);\r\n        this.context = Common.persistRootNode.context;\r\n        //this.context.restart();\r\n    }\r\n\r\n    start () {\r\n        if(this.context){\r\n            console.info(this.context.getRoot().node.name);\r\n        }\r\n    }\r\n}\r\n\r\n","//主要的信号枚举类型,注意要确保不出现重复的字符串\r\nexport enum MainSignalEnum{\r\n    //开始命令\r\n    Start = \"Start\",\r\n    //更新命令\r\n    Update = \"Update\",\r\n    //生成视图节点命令\r\n    Generate = \"GenerateViewNodes\",\r\n    //重新开始\r\n    Restart = \"Restart\",\r\n    //查看排行榜\r\n    LookRank = \"LookRank\",\r\n    //记分逻辑\r\n    Match = \"Match\",\r\n    //输入控制\r\n    InputControl = \"InputControl\",\r\n}\r\n\r\nexport enum GameSignalEnum{\r\n    onMatch = \"OnMatch\",\r\n    onNotMatch = \"OnNotMatch\"\r\n}","import {SignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\n\r\nexport class MainSignalManager extends SignalManager{\r\n    info : string = \"this is a main signal manager\";\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IConstructorName } from \"../../lib/framework/IocConst\";\r\nexport class __IC_Util extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IUtil\";\r\n    }\r\n}\r\nexport interface IUtil{\r\n\r\n}\r\nexport class MainUtil extends Singleton implements IUtil{\r\n    public getSceneSize(){\r\n        return cc.winSize;\r\n    }\r\n    public spriteRes(resourceUrl) {\r\n        return new Promise((resolve, reject) => {\r\n            cc.loader.loadRes(resourceUrl, cc.SpriteFrame, (err, spriteFrame) => {\r\n                if (err) throw err\r\n                resolve(spriteFrame)\r\n            })\r\n        })\r\n    }\r\n    \r\n    public randomCoin() {\r\n        return Math.round(Math.random())\r\n    }\r\n    \r\n    public randomNumber(size) {\r\n        return Math.floor(Math.random() * size)\r\n    }\r\n    \r\n    public randomValue(...values) {\r\n        return values[this.randomNumber(values.length)]\r\n    }\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Manager extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IManager\";\r\n    }\r\n}\r\nexport interface IManager{\r\n\r\n}\r\n/**\r\n * 管理器类型枚举\r\n */\r\nexport enum ManagerType{\r\n    Resource = \"Resource\",\r\n\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../context/MainModel\";\r\nimport Common from \"../Common\";\r\nimport Food from \"../view/Food\";\r\nimport { GameSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\n\r\n//引用注入装饰器\r\nexport class MatchCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(cc.Node,\"Score\")\r\n    scoreNode : cc.Node;\r\n    @inject(cc.Node,\"Pause\")\r\n    pauseNode : cc.Node;\r\n\r\n    execute(match){\r\n        console.info(\"[游戏判断]\");\r\n        switch(match){\r\n            case GameSignalEnum.onMatch:\r\n                this.onMatch();\r\n                break;\r\n            case GameSignalEnum.onNotMatch:\r\n                this.onNotMatch();\r\n                break;\r\n        }\r\n    }\r\n    //增加分数\r\n    gainPoint() {\r\n        this.mMdl.score++\r\n        this.scoreNode.getComponent(cc.Label).string = 'Score: ' + Number(this.mMdl.score)\r\n    }\r\n    onMatch() {\r\n        this.gainPoint()\r\n    }\r\n\r\n    onNotMatch() {\r\n        this.mMdl.pauseFlag = true\r\n        this.stopAllCurrent()\r\n        this.pauseNode.active = true\r\n        console.info(\"[游戏结算]\"+this.mMdl.score);\r\n        if(Common.saveScoreFunc){\r\n            Common.saveScoreFunc(this.mMdl.score);\r\n        }\r\n    }\r\n\r\n    stopAllCurrent() {\r\n        console.info(\"[停止当前游戏进程]\");\r\n        //let a = Common.persistRootNode;\r\n        if(this.mMdl.currentFoodNodes&&this.mMdl.currentFoodNodes.length>0){\r\n            this.mMdl.currentFoodNodes.forEach(foodNode => {\r\n            foodNode.getComponent(Food).inited = false\r\n            })\r\n        }\r\n    }\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Model extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IModel\"\r\n    }\r\n}\r\nexport interface IModel{\r\n\r\n}\r\n/**\r\n * 数据模型类型枚举\r\n */\r\nexport enum ModelType{\r\n    Main = \"Main\",\r\n\r\n}","import { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends IocView {\r\n\r\n    onLoad () {\r\n        super.onLoad();\r\n    }\r\n\r\n    start () {\r\n        super.start();\r\n    }\r\n    //重新开始按钮被点击时\r\n    onRestartClicked(){\r\n        this.sMgr.get(MainSignalEnum.Restart).dispatch();\r\n    }\r\n    //排行榜按钮被点击时\r\n    onLookRankClicked(){\r\n        this.sMgr.get(MainSignalEnum.LookRank).dispatch();\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import Common from \"./Common\";\r\nimport ResourceManager from \"./util/ResourceManager\";\r\nimport { IRoot } from \"../lib/framework/Context/IRoot\";\r\nimport { MainContext } from \"./context/MainContext\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PersistRoot extends cc.Component implements IRoot {\r\n    public context;\r\n\r\n    @property([cc.Prefab])\r\n    prefabs: Array<cc.Prefab> = [];\r\n\r\n    onLoad () {\r\n        //防止重复执行初始化\r\n        if(Common.isInit)return;\r\n        Common.isInit = true;\r\n        console.info(\"[初始化常驻节点]\");\r\n        //配置为常驻节点\r\n        if(!Common.persistRootNode){\r\n            cc.game.addPersistRootNode(this.node);\r\n            Common.persistRootNode = this;\r\n        }\r\n        this.context = new MainContext(this)\r\n        this.prefabs.forEach(prefab => {\r\n            ResourceManager.Instance.setPrefab(prefab.name,prefab);\r\n        });\r\n    }\r\n    start () {\r\n\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import {Stack} from \"./Stack\"\r\nimport { IConstructorName } from \"../framework/IocConst\";\r\nimport {inject} from \"../framework/Injector/InjectDecorator\";\r\nimport {Prototype} from \"./Prototype\"\r\n\r\nexport enum PoolOverflowBehavior\r\n{\r\n    /// Requesting more than the fixed size will throw an exception.\r\n    EXCEPTION,\r\n    \r\n    /// Requesting more than the fixed size will throw a warning.\r\n    WARNING,\r\n\r\n    /// Requesting more than the fixed size will return null and not throw an error.\r\n    IGNORE\r\n}\r\nexport enum BindingConstraintType\r\n{\r\n    /// Constrains a SemiBinding to carry no more than one item in its Value\r\n    ONE,\r\n    /// Constrains a SemiBinding to carry a list of items in its Value\r\n    MANY,\r\n    /// Instructs the Binding to apply a Pool instead of a SemiBinding\r\n    POOL,\r\n}\r\nexport enum PoolInflationType\r\n{\r\n    /// When a dynamic pool inflates, add one to the pool.\r\n    INCREMENT,\r\n\r\n    /// When a dynamic pool inflates, double the size of the pool\r\n    DOUBLE\r\n}\r\nexport interface IPoolable\r\n{\r\n    /// <summary>\r\n    /// Clean up this instance for reuse.\r\n    /// </summary>\r\n    /// Restore methods should clean up the instance sufficiently to remove prior state.\r\n    restore ();\r\n\r\n    /// <summary>\r\n    /// Keep this instance from being returned to the pool \r\n    /// </summary>\r\n    retain ();\r\n\r\n    /// <summary>\r\n    /// Release this instance back to the pool.\r\n    /// </summary>\r\n    /// Release methods should clean up the instance sufficiently to remove prior state.\r\n    release();\r\n\r\n    /// <summary>\r\n    /// Is this instance retained?\r\n    /// </summary>\r\n    /// <value><c>true</c> if retained; otherwise, <c>false</c>.</value>\r\n    isRetain : boolean;\r\n}\r\nexport interface IInstanceProvider{\r\n    /// Retrieve an Instance based on the key.\r\n    /// ex. `injectionBinder.Get<cISomeInterface>();`\r\n    //getInstance<T>() : T;\r\n\r\n    /// Retrieve an Instance based on the key.\r\n    /// ex. `injectionBinder.Get(typeof(ISomeInterface));`\r\n    getInstance(key : object) : object;\r\n}\r\nexport class __IC_InstanceProvider extends IConstructorName{\r\n    //getInstance<T>() : T{return;} \r\n    get constructorName(){return \"IInstanceProvider\";}\r\n}\r\nexport interface IManagedList\r\n{\r\n    /// Add a value to this List. \r\n    add( value : object) : IManagedList;\r\n\r\n    /// Add a set of values to this List. \r\n    add( list : object[]) : IManagedList;\r\n\r\n    /// Remove a value from this List. \r\n    remove( value : object) : IManagedList;\r\n\r\n    /// Remove a set of values from this List. \r\n    remove( list : object[]) : IManagedList;\r\n\r\n    /// Retrieve the value of this List.\r\n    /// If the constraint is MANY, the value will be an Array.\r\n    /// If the constraint is POOL, this becomes a synonym for GetInstance().\r\n    value : object;\r\n}\r\nexport interface IPool extends IManagedList\r\n{\r\n    /// A class that provides instances to the pool when it needs them.\r\n    /// This can be the InjectionBinder, or any class you write that satisfies the IInstanceProvider\r\n    /// interface.\r\n    instanceProvider : IInstanceProvider;\r\n\r\n    /// The object Type of the first object added to the pool.\r\n    /// Pool objects must be of the same concrete type. This property enforces that requirement. \r\n    poolType : object;\r\n    /// <summary>\r\n    /// Gets an instance from the pool if one is available.\r\n    /// </summary>\r\n    /// <returns>The instance.</returns>\r\n    getInstance() : object;\r\n\r\n    /// <summary>\r\n    /// Returns an instance to the pool.\r\n    /// </summary>\r\n    /// If the instance being released implements IPoolable, the Release() method will be called.\r\n    /// <param name=\"value\">The instance to be return to the pool.</param>\r\n    returnInstance (value : object);\r\n\r\n    /// <summary>\r\n    /// Remove all instance references from the Pool.\r\n    /// </summary>\r\n    clean ();\r\n\r\n    /// <summary>\r\n    /// Returns the count of non-committed instances\r\n    /// </summary>\r\n    available : number;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the size of the pool.\r\n    /// </summary>\r\n    /// <value>The pool size. '0' is a special value indicating infinite size. Infinite pools expand as necessary to accomodate requirement.</value>\r\n    size : number;\r\n\r\n    /// <summary>\r\n    /// Returns the total number of instances currently managed by this pool.\r\n    /// </summary>\r\n    instanceCount : number;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the overflow behavior of this pool.\r\n    /// </summary>\r\n    /// <value>A PoolOverflowBehavior value.</value>\r\n    overflowBehavior : PoolOverflowBehavior;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the type of inflation for infinite-sized pools.\r\n    /// </summary>\r\n    /// By default, a pool doubles its InstanceCount.\r\n    /// <value>A PoolInflationType value.</value>\r\n    inflationType : PoolInflationType;\r\n}\r\nexport class Pool implements IPool, IPoolable\r\n{\r\n\r\n    @inject(__IC_InstanceProvider)\r\n    public instanceProvider : IInstanceProvider\r\n\r\n    /// Stack of instances still in the Pool.\r\n    protected instancesAvailable : Stack<any> = new Stack<any> ();\r\n\r\n    /// A HashSet of the objects checked out of the Pool.\r\n    protected instancesInUse :Set<object>= new Set<object> ();\r\n\r\n    protected _instanceCount : number;\r\n\r\n    public size : number;\r\n\r\n    public overflowBehavior : PoolOverflowBehavior;\r\n\r\n    public inflationType : PoolInflationType;\r\n\r\n    public uniqueValues : boolean;\r\n\r\n    public constraint : any;\r\n\r\n    public poolType : object;\r\n    \r\n    public isRetain : boolean;\r\n\r\n    public Pool ()\r\n    {\r\n        this.size = 0;\r\n        this.constraint = BindingConstraintType.POOL;\r\n        this.uniqueValues = true;\r\n        \r\n        this.overflowBehavior = PoolOverflowBehavior.EXCEPTION;\r\n        this.inflationType = PoolInflationType.DOUBLE;\r\n    }\r\n    public bind(type){\r\n        this.poolType = type;\r\n    }\r\n\r\n    public add ( value : object) : IManagedList\r\n    {\r\n        //检查对象原型是否相同\r\n        this.failIf(!Prototype.isProtetype(value,this.poolType) , \" Pool Type mismatch. Pools must consist of a common concrete type.\\n\\t\\tPool type: \" + this.poolType + \"\\n\\t\\tMismatch type: \" + value);\r\n        this._instanceCount++;\r\n        this.instancesAvailable.push (value);\r\n        return this;\r\n    }\r\n    public addList (list : object[]) : IManagedList\r\n    {\r\n        if(list&&list.length>0){\r\n            list.forEach((item : object)=>{\r\n                this.add (item);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    public remove (value : object) : IManagedList\r\n    {\r\n        this._instanceCount--;\r\n        this.removeInstance (value);\r\n        return this;\r\n    }\r\n\r\n    public removeList (list : object[]) : IManagedList\r\n    {\r\n        if(list&&list.length>0){\r\n            list.forEach((item : object)=>{\r\n                this.remove(item);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public get value() : object\r\n    {\r\n        return this.getInstance ();\r\n    }\r\n\r\n    /// The object Type of the first object added to the pool.\r\n    /// Pool objects must be of the same concrete type. This property enforces that requirement. \r\n\r\n    public get instanceCount() : number\r\n    {\r\n        return this._instanceCount;\r\n    }\r\n\r\n    public getInstance () : object\r\n    {\r\n        // Is an instance available?\r\n        if (this.instancesAvailable.size > 0)\r\n        {\r\n            let retv : object = this.instancesAvailable.pop ();\r\n            this.instancesInUse.add (retv);\r\n            return retv;\r\n        }\r\n\r\n        let instancesToCreate : number = 0;\r\n\r\n        //New fixed-size pool. Populate.\r\n        if (this.size > 0)\r\n        {\r\n            if (this.instanceCount == 0)\r\n            {\r\n                //New pool. Add instances.\r\n                instancesToCreate = this.size;\r\n            }\r\n            else\r\n            {\r\n                //Illegal overflow. Report and return null\r\n                this.failIf (this.overflowBehavior == PoolOverflowBehavior.EXCEPTION,\r\n                    \"A pool has overflowed its limit.\\n\\t\\tPool type: \" + this.poolType);\r\n\r\n                if (this.overflowBehavior == PoolOverflowBehavior.WARNING)\r\n                {\r\n                    console.warn (\"WARNING: A pool has overflowed its limit.\\n\\t\\tPool type: \" + this.poolType);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //Zero-sized pools will expand.\r\n            if (this.instanceCount == 0 || this.inflationType == PoolInflationType.INCREMENT)\r\n            {\r\n                instancesToCreate = 1;\r\n            }\r\n            else\r\n            {\r\n                instancesToCreate = this.instanceCount;\r\n            }\r\n        }\r\n\r\n        if (instancesToCreate > 0)\r\n        {\r\n            this.failIf (this.instanceProvider == null, \"A Pool of type: \" + this.poolType + \" has no instance provider.\");\r\n\r\n            for (let a = 0; a < instancesToCreate; a++)\r\n            {\r\n                let newInstance : object= this.instanceProvider.getInstance (this.poolType);\r\n                this.add (newInstance);\r\n            }\r\n            return this.getInstance ();\r\n        }\r\n\r\n        //If not, return null\r\n        return null;\r\n    }\r\n\r\n    public returnInstance ( value : object)\r\n    {\r\n        if (this.instancesInUse.has (value))\r\n        {\r\n            /* if (value extends IPoolable)\r\n            {\r\n                (value as IPoolable).Restore ();\r\n            } */\r\n            (value as IPoolable).restore ();\r\n            this.instancesInUse.delete (value);\r\n            this.instancesAvailable.push (value);\r\n        }\r\n    }\r\n\r\n    public clean()\r\n    {\r\n        this.instancesAvailable.clear();\r\n        this.instancesInUse = new Set<object> ();\r\n        this._instanceCount = 0;\r\n    }\r\n\r\n    public get available() : number\r\n    {\r\n        return this.instancesAvailable.size;\r\n\r\n    }\r\n\r\n    public restore ()\r\n    {\r\n        this.clean ();\r\n        this.size = 0;\r\n    }\r\n\r\n    public retain()\r\n    {\r\n        this.isRetain = true;\r\n    }\r\n\r\n    public release()\r\n    {\r\n        this.isRetain = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Permanently removes an instance from the Pool\r\n    /// </summary>\r\n    /// In the event that the removed Instance is in use, it is removed from instancesInUse.\r\n    /// Otherwise, it is presumed inactive, and the next available object is popped from\r\n    /// instancesAvailable.\r\n    /// <param name=\"value\">An instance to remove permanently from the Pool.</param>\r\n    protected removeInstance(value : object)\r\n    {\r\n        this.failIf (value != this.poolType, \"Attempt to remove a instance from a pool that is of the wrong Type:\\n\\t\\tPool type: \" + this.poolType.toString() + \"\\n\\t\\tInstance type: \" + value.toString());\r\n        if (this.instancesInUse.has(value))\r\n        {\r\n            this.instancesInUse.delete (value);\r\n        }\r\n        else\r\n        {\r\n            this.instancesAvailable.pop ();\r\n        }\r\n    }\r\n\r\n    protected failIf(condition : boolean, message : string)\r\n    {\r\n        if (condition)\r\n        {\r\n            throw new Error(message);\r\n        }\r\n    }\r\n}","/**\n * 简单的对象池\n */\nexport default class PrefabPool {\n\ttype;\n\tprefab;\n\tnodePool;\n\n\tconstructor(type, prefab) {\n\t\tthis.type = type\n\t\tthis.prefab = prefab\n\t\tthis.nodePool = new cc.NodePool(type)\n\t}\n\t/**\n\t * 获取节点\n\t */\n\tget() {\n\t\tlet node = null\n\t    if (this.nodePool.size > 0) {\n\t        node = this.nodePool.get()\n\t    } else {\n\t        node = cc.instantiate(this.prefab)\n\t    }\n\t    return node\n\t}\n\t/**\n\t * 回收节点\n\t * @param node \n\t */\n\tres(node) {\n\t\tthis.nodePool.put(node)\n\t}\n\n}","/**\r\n * 原型缓存字典，用于检测一个对象的基类\r\n */\r\nexport class Prototype {\r\n    //继承映射表\r\n    private static prototypeMap = new Map<Object,Set<Object>>();\r\n    /**\r\n     * 基类检测函数\r\n     * @param instance 实例\r\n     * @param prototype 基类\r\n     */\r\n    public static isProtetype(type, prototype): boolean {\r\n        //let b = type instanceof prototype;\r\n        return type instanceof prototype;\r\n/*         if(!(type instanceof Object))return false;\r\n        let constructor = type.constructor;\r\n        if(this.prototypeMap.has(constructor)){\r\n            let sett = this.prototypeMap.get(constructor);\r\n            if(sett.has(prototype)){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return false; */\r\n    }\r\n    /**\r\n     * 获取继承列表\r\n     * @param instance 实例\r\n     */\r\n    public static getPrototypeList(target) {\r\n        let that = this;\r\n        if(!this.hasPrototypeList(target)){\r\n            let extendsList;\r\n            //获取继承列表\r\n            extendsList = [];\r\n            //用构造函数代替类型来使用\r\n            let types = [];\r\n            //types.push(target.constructor);\r\n            //继承类型\r\n            let prototype = target.__proto__;\r\n            //构造函数\r\n            let constructor;\r\n            while (true) {\r\n                //如果继承存在\r\n                if (prototype) {\r\n                    //因为压缩代码会把所有对象的名称都压缩掉，所以这里使用构造函数作为键值\r\n                    constructor = prototype.constructor;\r\n                    //搜索到基类一层\r\n                    if (constructor === Object) break;\r\n                    //排除以__IC__开头模拟接口的临时替代类型\r\n                    if (!constructor.name.startsWith(\"__IC_\")) {\r\n                        extendsList.push(constructor);\r\n                        types.push(constructor);\r\n                        //为每一个类都添加继承关系\r\n                        types.forEach(type => {\r\n                            that.AddPrototype(type,constructor);\r\n                        });\r\n                    }\r\n                    prototype = prototype.__proto__;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }            \r\n        let values = this.prototypeMap.get(target.constructor);\r\n        return Array.from(values);\r\n    }\r\n    /**\r\n     * 添加继承关系\r\n     */\r\n    public static AddPrototype(tpye,prototype){\r\n        let extendSet : Set<Object>;\r\n        if(this.prototypeMap.has(tpye)){\r\n            extendSet = this.prototypeMap.get(tpye);\r\n        }else{\r\n            extendSet = new Set();\r\n            this.prototypeMap.set(tpye,extendSet);\r\n        }\r\n        //为继承队列加入新的继承\r\n        extendSet.add(prototype);\r\n    }\r\n    /**\r\n     * 是否存在继承列表\r\n     * @param instance 实例\r\n     */\r\n    public static hasPrototypeList(target) {\r\n        if(this.prototypeMap.has(target.constructor)){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}","import Common from \"../../common\";\r\nimport WxApi from \"../WxApi\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        subContextView: cc.Node,\r\n        tipsUiNode: cc.Node\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        let that = this;\r\n        this.rankType = 0;\r\n        this.shareCount = 0;\r\n        //设置转发选项\r\n        if (WxApi.isRunInWeiXin) {\r\n            wx.updateShareMenu({\r\n                withShareTicket: true,\r\n                success() {\r\n                    console.info(\"设置转发选项成功\");\r\n                },\r\n                fail() {\r\n                    console.info(\"设置转发选项失败\");\r\n                }\r\n            })\r\n        }\r\n        //this.subContextView.enabled = false;\r\n        console.info(\"[初始化功能]\");\r\n    },\r\n\r\n    start() {\r\n        console.info(\"[主域进入排行榜界面]\");\r\n        //发送启动消息告知开发数据容器\r\n        if (WxApi.isRunInWeiXin) {\r\n            console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"start\",\r\n                    arguments: \"default\",\r\n                    data: {\r\n                        width: this.subContextView.width,\r\n                        height: this.subContextView.height\r\n                    },\r\n                }\r\n            });\r\n        }\r\n    },\r\n    //切换排行榜\r\n    switchRank(event) {\r\n        //获取切换按钮\r\n        let switchBtn = event.target;\r\n        let switchBar = event.target.getChildByName(\"Switch\");\r\n        let moveRange = switchBtn.width - switchBar.width - 10;\r\n        let that = this;\r\n        //循环切换排行榜类型\r\n        if (this.rankType < 1) {\r\n            this.rankType += 1;\r\n        } else {\r\n            this.rankType = 0;\r\n        }\r\n        switch (this.rankType) {\r\n            case 0:\r\n                switchBar.runAction(cc.moveBy(0.125, cc.v2(-moveRange, 0)));\r\n                if (WxApi.isRunInWeiXin) {\r\n                    console.info(\"[显示好友排行]\");\r\n                    //切换到显示好友排行\r\n                    wx.getOpenDataContext().postMessage({\r\n                        message: {\r\n                            type: \"command\",\r\n                            function: \"switch\",\r\n                            arguments: \"friend\",\r\n                            data: \"\",\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            case 1:\r\n                switchBar.runAction(cc.moveBy(0.125, cc.v2(moveRange, 0)));\r\n                if (WxApi.isRunInWeiXin) {\r\n                    let ticket;\r\n                    if (Common.shareTickets && Common.shareTickets.length > 0) {\r\n                        ticket = Common.shareTickets[this.shareCount];\r\n                        if (!ticket) {\r\n                            console.info(\"[意外的识别码缺失]\" + Common.shareTickets +\",\"+ this.shareCount);\r\n                            Common.shareTickets = [];\r\n                            this.shareCount = 0;\r\n                        } else {\r\n                            //循环切换群信息，索引是从0开始计算的，所以这里需要减一\r\n                            if (this.shareCount >= (Common.shareTickets.length - 1)) {\r\n                                this.shareCount = 0;\r\n                            } else {\r\n                                this.shareCount += 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        console.info(\"[未找到群信息]\");\r\n                        this.showTipsUi(\"无法显示群排行榜\", \"请先分享到群再查看\");\r\n                    }\r\n                    //验证群信息是否有效\r\n                    if(ticket&&ticket!=\"\"){\r\n                        wx.getShareInfo({\r\n                            shareTicket : ticket,\r\n                            success(res){\r\n                                console.info(\"[有效的群信息]\" + ticket + \",\" + res);\r\n                            },\r\n                            fail(err){\r\n                                console.info(\"[无效的群信息]\" + ticket + \",\" + err);\r\n                            }\r\n                        })\r\n                    }else{\r\n                        ticket = \"\";\r\n                    }\r\n                    console.info(\"[显示群信息]\" + Common.shareTickets.length);\r\n                    //切换到显示群排行\r\n                    wx.getOpenDataContext().postMessage({\r\n                        message: {\r\n                            type: \"command\",\r\n                            function: \"switch\",\r\n                            arguments: \"group\",\r\n                            data: ticket,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        console.info(\"[切换排行榜]\" + this.rankType);\r\n    },\r\n\r\n    backhome() {\r\n        cc.director.loadScene(\"Begin\");\r\n    },\r\n\r\n    shareApp() {\r\n        if (!WxApi.isRunInWeiXin) return;\r\n        let that = this;\r\n        wx.shareAppMessage({\r\n            title: \"一起来玩游戏吧！\",\r\n            success(res) {\r\n                console.info(\"[转发成功]\" + res.shareTickets);\r\n                //没有获取到群消息\r\n                if (!res.shareTickets || res.shareTickets === \"\") {\r\n                    console.info(\"[转发到个人用户]\");\r\n                } else {\r\n                    console.info(\"[转发到微信群]\" + res.shareTickets);\r\n                    //如果存在群组信息\r\n                    if (res.shareTickets.length > 0) {\r\n                        let isExist = false;\r\n                        //保存群组信息\r\n                        for (let i = 0; i < res.shareTickets.length; i++) {\r\n                            for (let j = 0; j < Common.shareTickets.length; j++) {\r\n                                //检查是否存在重复的群识别号\r\n                                if (res.shareTickets[i] === Common.shareTickets[j]) {\r\n                                    isExist = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!isExist) {\r\n                                console.info(\"[存储群识别码]\" + res.shareTickets[i]);\r\n                                Common.shareTickets.push(res.shareTickets[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            fail(res) {\r\n                console.info(\"[转发失败]\");\r\n            }\r\n        });\r\n\r\n    },\r\n    //显示提示框\r\n    showTipsUi(title, content) {\r\n        if (!this.tipsUiNode.active) {\r\n            this.tipsUiNode.active = true;\r\n            let tipsUiView = this.tipsUiNode.getComponent(\"TipsUiView\");\r\n            if (tipsUiView) {\r\n                tipsUiView.display(title, content);\r\n            } else {\r\n                console.info(\"[提示UI不存在]\");\r\n            }\r\n        }\r\n    },\r\n});","import { Singleton } from \"./Singleton\";\r\nimport { IManager } from \"./Manager\";\r\n\r\nexport default class ResourceManager extends Singleton implements IManager{\r\n    public isInit = false;\r\n    private prefabMap : Map<any,any>\r\n\r\n    protected onConstructor(){\r\n        this.prefabMap = new Map();\r\n    }\r\n    hasPrefab(key):boolean{\r\n        return this.prefabMap.has(key);\r\n    }\r\n    getPrefab(key):cc.Prefab{\r\n        return this.prefabMap.get(key);\r\n    }\r\n    setPrefab(key,value){\r\n        this.prefabMap.set(key,value);\r\n    }\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../context/MainModel\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\n\r\n//引用注入装饰器\r\nexport class RestartCommand extends Command{\r\n    @inject(cc.Node,\"Pause\")\r\n    pauseNode : cc.Node;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n\r\n    execute(){\r\n        console.info(\"[重新开始]\");\r\n\r\n        this.revive();\r\n    }\r\n\r\n    revive() {\r\n        this.pauseNode.active = false\r\n        this.clearAllCurrent()\r\n        this.mMdl.pauseFlag = false\r\n    }\r\n\r\n    clearAllCurrent() {\r\n        if(this.mMdl.currentFoodNodes&&this.mMdl.currentFoodNodes.length>0){\r\n            this.mMdl.currentFoodNodes.forEach(foodNode => {\r\n                this.mMdl.foodPool.res(foodNode)\r\n            })\r\n        }\r\n        this.mMdl.currentFoodNodes = []\r\n    }\r\n}","import { IConstructorName } from \"../IocConst\"\r\nimport { __IC_Signal , Signal, ISignal } from \"./Signal\"\r\n\r\nexport interface ISignalManager {\r\n    get(symbol) : ISignal;\r\n    delete(symbol);\r\n    info: string;\r\n}\r\nexport class __IC_SignalManager extends IConstructorName {\r\n    static get constructorName(){return \"ISignalManager\";}\r\n}\r\nexport class SignalManager implements ISignalManager {\r\n    //维护一个信号指令映射表，注意不再使用的信号应该及时释放掉\r\n    _signal_dic : Map<any,ISignal>= new Map < any, ISignal > ();\r\n    info: string = \"this is a signal manager\";\r\n\r\n    public get(symbol) : ISignal{\r\n        //检查全局信号字典内是否存在对应的信号名称或枚举\r\n        if (this._signal_dic.has(symbol)) {\r\n            //获取标志对应的信号\r\n            return this._signal_dic.get(symbol);\r\n        } else {\r\n            //创建一个信号\r\n            let _signal = new Signal();\r\n            //如果使用字符串作为信号识别名，则将其绑定给信号\r\n            if(typeof symbol == \"string\")_signal.name = symbol;\r\n            //设置根环境\r\n            //_signal.setRoot(this._context.getRoot);\r\n            //建立全局信号与标志值的映射关系\r\n            this._signal_dic.set(symbol, _signal);\r\n            return _signal;\r\n        }\r\n    };\r\n\r\n    public delete(symbol) {\r\n        //检查全局信号字典内是否存在对应的信号名称或枚举\r\n        if (this._signal_dic.has(symbol)) {\r\n            //获取标志对应的信号\r\n            return this._signal_dic.delete(symbol);\r\n        }\r\n    }\r\n}","import {IocError, IConstructorName} from \"../IocConst\"\r\nexport interface ISignal {\r\n    name;\r\n    dispatch(...args);\r\n    addListener(callback:Function);\r\n    addOnceListener(callback:Function);\r\n    removeAllListeners();\r\n    /// Returns a List<System.Type> representing the Types bindable to this Signal\r\n\tgetTypes() : object[];\r\n}\r\nexport class __IC_Signal extends IConstructorName {\r\n    static get constructorName(){return \"ISignal\";};\r\n}\r\n\r\nexport class Signal implements ISignal {\r\n    public name;\r\n    //回调监听\r\n    public _listener: Function[] = [];\r\n    public _onceListener: Function[] = [];\r\n    //执行信号\r\n    public dispatch(...args) {\r\n        let that = this;\r\n        //如果存在回调函数\r\n        if (that._listener&&that._listener.length != 0) {\r\n            this._listener.forEach(function (action) {\r\n                action(that,...args);\r\n            })\r\n        }\r\n        //如果存在单次回调\r\n        if (that._onceListener&&that._onceListener.length != 0)\r\n            this._listener.forEach(function (action) {\r\n                action(that,...args);\r\n            })\r\n        //清空单次执行的监听\r\n        this._onceListener.length = 0;\r\n    }\r\n    public addListener(callback:Function){\r\n        this._listener = this.addUnique(this._listener,callback);\r\n    }\r\n    public addOnceListener(callback:Function){\r\n        this._onceListener = this.addUnique(this._onceListener,callback);\r\n    }\r\n    //清空监听\r\n    public removeAllListeners(){\r\n        this._listener.length=0;\r\n        this._onceListener.length=0;\r\n    }\r\n    //不重复添加\r\n    private addUnique(listeners : Function[], callback : Function)\r\n    {\r\n        //检查监听回调是否存在\r\n        if (listeners)\r\n        {\r\n            let isUnique = false;\r\n            for(let i = 0;i<listeners.length;i++){\r\n                //检查是否存在重复项\r\n                if(listeners[i] === callback){\r\n                    isUnique = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!isUnique){\r\n                //放入回调\r\n                listeners.push(callback);\r\n            }\r\n        }\r\n        return listeners;\r\n    }\r\n    public getTypes() : object[]\r\n    {\r\n        let retv = [];\r\n        //retv.push(this);\r\n        return retv;\r\n    }\r\n}","export class Singleton {\r\n    /** 存放初始化过的构造函数,这里用数组来存放构造函数 **/\r\n    private static classMap: Map < any, any > = new Map();\r\n\r\n    constructor() {\r\n        let clazz: any = this.constructor;\r\n        //为空时，表示浏览器不支持这样读取构造函数\r\n        if (!clazz)\r\n            return;\r\n        // 防止重复实例化\r\n        if (Singleton.classMap.has(clazz))\r\n            throw new Error(this + \" 只允许实例化一次！\");\r\n        else {\r\n            Singleton.classMap.set(clazz, this);\r\n            this.onConstructor();\r\n        }\r\n    }\r\n    protected onConstructor() {\r\n\r\n    }\r\n    public static get Instance() {\r\n        return Singleton.getInstanceOrCreate(this);\r\n    }\r\n\r\n    public static destroyInstance(clazz: any): void {\r\n        if (Singleton.classMap.has(clazz)) {\r\n            Singleton.classMap.get(clazz).onDestroy();\r\n            Singleton.classMap.delete(clazz);\r\n        }\r\n    }\r\n\r\n    public static getInstanceOrCreate(clazz: any,...args): any {\r\n        let instance;\r\n        if (Singleton.classMap.has(clazz)) {\r\n            instance = Singleton.classMap.get(clazz);\r\n            if (instance) {\r\n                return instance;\r\n            }\r\n        }\r\n        instance = new clazz(...args);\r\n        //不是Singleton的子类，则手动添加Singleton构造器会自动添加到classMap\r\n        if (!(instance instanceof Singleton)) {\r\n            Singleton.classMap.set(clazz, instance);\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n\r\n    }\r\n}","export interface IStack<T> {\r\n    //获取栈顶元素\r\n    top(): T;\r\n    //压栈\r\n    push(item: T);\r\n    //出栈\r\n    pop(): T;\r\n    //清空\r\n    clear();\r\n    //是否空栈\r\n    isEmpty: boolean;\r\n    //栈大小\r\n    size: number;\r\n}\r\n\r\nexport class Item<T> {\r\n    private _value: T;\r\n    private _next: Item<T>;\r\n    constructor(value: T, next: Item<T> = null) {\r\n        this._value = value;\r\n        this._next = next;\r\n    }\r\n    set value(value: T) {\r\n        this._value = value;\r\n    }\r\n    get value(): T {\r\n        return this._value;\r\n    }\r\n    set next(next: Item<T>) {\r\n        this._next = next;\r\n    }\r\n    get next(): Item<T> {\r\n        return this._next;\r\n    }\r\n}\r\n\r\nexport class Stack<T> implements IStack<T> {\r\n    private _header: Item<T>;\r\n    private _size: number = 0;\r\n    constructor() {\r\n        this._header = new Item<T>(null);\r\n    }\r\n    top(): T {\r\n        if (this._size === 0) {\r\n            return null;\r\n        }\r\n        return this._header.next.value;\r\n    }\r\n\r\n    /**\r\n     * 入栈\r\n     * @param item 添加的元素\r\n     * 将header的下一个元素的引用赋值给新元素的next\r\n     * 再将新元素赋值给header的next\r\n     */\r\n    push(item: T) {\r\n        let newItem = new Item<T>(item);\r\n        newItem.next = this._header.next;\r\n        this._header.next = newItem;\r\n        this._size++;\r\n    }\r\n\r\n    /**\r\n     * 出栈\r\n     * 将header之后的第一个元素移除\r\n     * 同时修改header的next到下一个元素\r\n     */\r\n    pop(): T {\r\n        if (this._size === 0) {\r\n            return null;\r\n        }\r\n        let item = this._header.next;\r\n        this._header.next = item.next;\r\n        this._size--;\r\n        item.next = null;//清除引用\r\n        return item.value;\r\n    }\r\n    clear(){\r\n        let item;\r\n        let tmp = this._header;\r\n        while(this._size !== 0){\r\n            item = tmp.next;\r\n            tmp = item;\r\n            item.next = null;\r\n            this._size--;\r\n        }\r\n        this._header = null;\r\n    }\r\n    get isEmpty(): boolean {\r\n        return this._size === 0;\r\n    }\r\n\r\n    get size(): number {\r\n        return this._size;\r\n    }\r\n}","import {__IC_SignalManager, ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport { Command } from \"../../lib/framework/Command/Command\";\r\nimport { MainModel } from \"../context/MainModel\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainUtil,__IC_Util } from \"../util/MainUtil\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport ResourceManager from \"../util/ResourceManager\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\n\r\n//引用注入装饰器\r\nexport class StartCommand extends Command{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,\"Main\")\r\n    mUtil : MainUtil;\r\n    //注入资源管理器\r\n    @inject(__IC_Manager,ManagerType.Resource)\r\n    resMgr : ResourceManager;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n    @inject(cc.Node,\"LogicNode\")\r\n    logicNode : cc.Node;\r\n    @inject(cc.Node,\"MainNode\")\r\n    mainNode : cc.Node;\r\n\r\n    //执行\r\n    execute(){\r\n        console.log(\"[开始指令]\");\r\n\r\n        this.lanuch();\r\n        this.start();\r\n    }\r\n    start(){\r\n        this.sMgr.get(MainSignalEnum.InputControl).dispatch();\r\n    }\r\n    //启动配置\r\n    lanuch(){\r\n        const manager = cc.director.getCollisionManager()\r\n        manager.enabled = true\r\n\r\n        this.loadRes();\r\n\r\n        this.sMgr.get(MainSignalEnum.Generate).dispatch();\r\n    }\r\n\r\n\r\n    loadRes(){\r\n        if(!this.resMgr.isInit){\r\n            //绑定预制件\r\n            if(this.resMgr.hasPrefab(\"Animal\")){\r\n                this.inj.bind(cc.Prefab).toName(\"Animal\").toValue(this.resMgr.getPrefab(\"Animal\"));\r\n            }\r\n            if(this.resMgr.hasPrefab(\"Food\")){\r\n                this.inj.bind(cc.Prefab).toName(\"Food\").toValue(this.resMgr.getPrefab(\"Food\"));\r\n            }\r\n            this.resMgr.isInit = true;\r\n        }\r\n        \r\n        //检查是否存在对应的资源\r\n        if(this.resMgr.hasPrefab(\"Scene\")){\r\n            let scene : cc.Node = cc.instantiate(this.resMgr.getPrefab(\"Scene\"));\r\n            this.mainNode.addChild(scene);\r\n            let avatar = scene.getChildByName(\"Avatar\");\r\n            let animals = avatar.getChildByName(\"Animals\");\r\n            let score = scene.getChildByName(\"Score\");\r\n\r\n            this.inj.bind(cc.Node).toName(\"Scene\").toValue(scene).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Avatar\").toValue(avatar).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Animals\").toValue(animals).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Score\").toValue(score).unBind();\r\n        }else{\r\n            throw new Error(\"Scene prefab is not found\");\r\n        }\r\n        if(this.resMgr.hasPrefab(\"PauseLayer\")){\r\n            let pause : cc.Node = cc.instantiate(this.resMgr.getPrefab(\"PauseLayer\"));\r\n            this.mainNode.addChild(pause);\r\n            pause.active = false;\r\n\r\n            this.inj.bind(cc.Node).toName(\"Pause\").toValue(pause).unBind();\r\n        }else{\r\n            throw new Error(\"Pause layer prefab is not found\");\r\n        }\r\n    }\r\n}","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TipsUiView extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    label: cc.Label = null;\r\n\r\n    @property(cc.RichText)\r\n    text: cc.RichText = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        \r\n    }\r\n    display(title,content){\r\n        this.label.string = title;\r\n        this.text.string = content;\r\n    }\r\n    onClicked(){\r\n        this.node.active = false;\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import {Singleton} from \"./Singleton\";\r\n\r\n\r\nexport class TouchUtil extends Singleton {\r\n    private areaMap;\r\n    //全局区域状态\r\n    private globalAreaStatus : AreaStatus;\r\n\r\n    onConstructor(){\r\n        this.areaMap = new Map();\r\n    }\r\n    /**\r\n     * 注册一个触摸区域，只有在区域内的触控才会被识别\r\n     * @param area 区域\r\n     * @param isGlobal 是否设为全局区域\r\n     */\r\n    public registerTouchArea(area: cc.Node,isGlobal:boolean = false) {\r\n        let areaStatus;\r\n        //尝试获取对应的区域状态\r\n        if(this.areaMap.has(area)){\r\n            areaStatus = this.areaMap.get(area);\r\n        }else{\r\n            areaStatus = new AreaStatus();\r\n            this.areaMap.set(area,areaStatus);\r\n        }\r\n        //设定全局区域\r\n        if(isGlobal)this.globalAreaStatus = areaStatus;\r\n        //触摸开始时\r\n        area.on(cc.Node.EventType.TOUCH_START, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                let sPosX = touch.getLocationX();\r\n                let sPoxY = touch.getLocationY();\r\n                let status = new TouchStatus();\r\n                status.direction = TouchDirection.No;\r\n                status.touch = touch;\r\n                status.sPosX = sPosX;\r\n                status.sPosY = sPoxY;\r\n                status.totalX = 0;\r\n                status.totalY = 0;\r\n                status.trendX = 0;\r\n                status.trendY = 0;\r\n\r\n                //绑定触摸ID到状态\r\n                areaStatus.touchMap.set(touch.getID(), status)\r\n            });\r\n        });\r\n        //触摸移动时\r\n        area.on(cc.Node.EventType.TOUCH_MOVE, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    let status: TouchStatus = areaStatus.touchMap.get(touch.getID());\r\n                    let mDeltaX = touch.getDelta().x;\r\n                    let mDeltaY = touch.getDelta().y;\r\n                    status.totalX += mDeltaX;\r\n                    status.totalY += mDeltaY;\r\n\r\n                    //如果触摸正在向左移动\r\n                    if (Math.abs(mDeltaX) > 10) {\r\n                        status.trendX += status.totalX / mDeltaX;\r\n                    }\r\n                    if (Math.abs(mDeltaY) > 10) {\r\n                        status.trendY += status.totalY / mDeltaY;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        //触摸结束时\r\n        area.on(cc.Node.EventType.TOUCH_END, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                this.disposeTouchResult(areaStatus,touch);\r\n            });\r\n        });\r\n\r\n        //触摸取消时\r\n        area.on(cc.Node.EventType.TOUCH_CANCEL, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                this.disposeTouchResult(areaStatus,touch);\r\n            });\r\n        });\r\n    }\r\n    //执行触控结果\r\n    disposeTouchResult(areaStatus,touch){\r\n        //判断当前触摸正处于什么状态\r\n        let result : TouchStatus= areaStatus.touchMoveDetection(touch);\r\n        if(areaStatus.touchEvnet[result.direction]){\r\n            areaStatus.touchEvnet[result.direction].forEach(event => {\r\n                if(event && typeof event ===\"function\"){\r\n                    //告知结果和触摸信息\r\n                    event(result);\r\n                }\r\n            });\r\n        }\r\n        //移除结束的触摸\r\n        areaStatus.touchMap.delete(touch.getID());\r\n    }\r\n    /**\r\n     * 注册指定的回调函数\r\n     * @param direction 方向\r\n     * @param callback 返回一个触控事件\r\n     */\r\n    public on<T extends Function>(direction: TouchDirection, callback: T, area?: cc.Node) : T{\r\n        let areaStatus;\r\n        if(area&&this.areaMap.has(area)){\r\n            areaStatus = this.areaMap.get(area);\r\n        }else{\r\n            areaStatus = this.globalAreaStatus;\r\n        }\r\n        //增加回调函数\r\n        if(!areaStatus.touchEvnet[direction]){\r\n            areaStatus.touchEvnet[direction] = [];\r\n        }\r\n        areaStatus.touchEvnet[direction].push(callback);\r\n        return callback;\r\n    }\r\n    \r\n}\r\n//区域状态\r\nclass AreaStatus{\r\n    public touchEvnet;\r\n    //触摸状态映射\r\n    public touchMap;\r\n\r\n    constructor(){\r\n        this.touchMap = new Map();\r\n        this.touchEvnet = [];\r\n    }\r\n\r\n    //触摸移动检测\r\n    touchMoveDetection(touch: cc.Touch){\r\n        if (this.touchMap.has(touch.getID())) {\r\n            let status: TouchStatus = this.touchMap.get(touch.getID());\r\n            //检查是否为有效触摸\r\n            let isMoveValid = false;\r\n            //触摸的方向，按照上下左右的顺序排列\r\n            let direction : TouchDirection= TouchDirection.No;\r\n            //如果移动的总距离超过10\r\n            if (Math.abs(status.totalY) > 10 || Math.abs(status.totalX) > 10) {\r\n                //趋势不都为0时\r\n                if (status.trendX != 0 || status.trendY != 0) {\r\n                    //检查移动的趋势\r\n                    if (status.trendX === 0) {\r\n                        isMoveValid = true;\r\n                        //检查总移动距离\r\n                        if (status.totalY > 0) {\r\n                            direction = TouchDirection.Up;\r\n                        } else {\r\n                            direction = TouchDirection.Down;\r\n                        }\r\n                    } else {\r\n                        //在X轴移动趋势不为0的情况下，检查移动趋势是否达到有效判断范围内\r\n                        if (Math.abs(status.trendX / status.trendY) > 2) {\r\n                            //有效的触摸轨迹\r\n                            isMoveValid = true;\r\n                            //X轴方向向右移动\r\n                            if (status.totalX > 0) {\r\n                                direction = TouchDirection.Right;\r\n                            } else {\r\n                                direction = TouchDirection.Left;\r\n                            }\r\n                        }\r\n                    }\r\n                    //如果之前的检查没有通过\r\n                    if (!isMoveValid) {\r\n                        if (status.trendY === 0) {\r\n                            isMoveValid = true;\r\n                            if (status.totalY > 0) {\r\n                                direction = TouchDirection.Right;\r\n                            } else {\r\n                                direction = TouchDirection.Left;\r\n                            }\r\n                        } else {\r\n                            if (Math.abs(status.trendY / status.trendX) > 2) {\r\n                                //有效的触摸轨迹\r\n                                isMoveValid = true;\r\n                                //Y轴方向向上移动\r\n                                if (status.totalY > 0) {\r\n                                    direction = TouchDirection.Up;\r\n                                } else {\r\n                                    direction = TouchDirection.Down;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //如果之前的检查判断为无效则表明没有发生移动\r\n            if (isMoveValid) {\r\n                switch (direction) {\r\n                    case TouchDirection.No:\r\n                        status.direction = TouchDirection.No;\r\n                        return status;\r\n                    case TouchDirection.Up:\r\n                        status.direction = TouchDirection.Up;\r\n                        return status;\r\n                    case TouchDirection.Down:\r\n                        status.direction = TouchDirection.Down;\r\n                        return status;\r\n                    case TouchDirection.Left:\r\n                        status.direction = TouchDirection.Left;\r\n                        return status;\r\n                    case TouchDirection.Right:\r\n                        status.direction = TouchDirection.Right;\r\n                        return status;\r\n                }\r\n            } else {\r\n                status.direction = TouchDirection.No;\r\n                return status;\r\n            }\r\n        }\r\n    }\r\n}\r\n//传递触摸状态\r\nexport class TouchStatus {\r\n    //触摸\r\n    public touch : cc.Touch;\r\n    //方向\r\n    public direction : TouchDirection;\r\n    /**\r\n     * 触摸开始的X坐标\r\n     */\r\n    public sPosX: number;\r\n    /**\r\n     * 触摸开始的Y坐标\r\n     */\r\n    public sPosY: number;\r\n    /**\r\n     * 最后一次的X坐标\r\n     */\r\n    public lPosX: number;\r\n    /**\r\n     * 最后一次的Y坐标\r\n     */\r\n    public lPosY: number;\r\n    /**\r\n     * X轴移动总距离\r\n     */\r\n    public totalX: number;\r\n    /**\r\n     * Y轴移动总距离\r\n     */\r\n    public totalY: number;\r\n    /**\r\n     * 触摸的总时间\r\n     */\r\n    public totalTime: number;\r\n    /**\r\n     * 趋向于X轴方向移动\r\n     */\r\n    public trendX;\r\n    /**\r\n     * 趋向于Y轴方向移动\r\n     */\r\n    public trendY;\r\n}\r\nexport enum TouchDirection{\r\n    No = -1,\r\n    Up = 0,\r\n    Down = 1,\r\n    Left = 2,\r\n    Right = 3\r\n}","import {__IC_SignalManager, ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport { MainModel } from \"../context/MainModel\";\r\nimport { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport Food from \"../view/Food\";\r\nimport { MainUtil,__IC_Util } from \"../util/MainUtil\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\n\r\n//引用注入装饰器\r\nexport class UpdateCommand extends Command{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(cc.Node,\"Scene\")\r\n    sceneNode : cc.Node;\r\n    @inject(__IC_Util,\"Main\")\r\n    mUtl:MainUtil;\r\n\r\n    tickcount:number = 0;\r\n    timecount:number = 0;\r\n    //执行\r\n    execute(dt){\r\n        this.update(dt);\r\n    }\r\n\r\n    update(dt){\r\n        this.mMdl.timer += dt\r\n        if (this.mMdl.timer >= this.mMdl.lastTimer + this.mMdl.timePeriod) {\r\n            this.mMdl.lastTimer = this.mMdl.timer\r\n            this.newNode()\r\n            // 难度加成\r\n            if (this.mMdl.timePeriod >= this.mMdl.minTimePeriod && this.mMdl.score > 0 && (this.mMdl.currentLevel < this.mMdl.harderRatios.length - 1)) {\r\n                const [level, ratio] = this.mMdl.harderRatios[this.mMdl.currentLevel + 1]\r\n                if (this.mMdl.score >= level) {\r\n                    this.mMdl.currentLevel++\r\n                    this.mMdl.timePeriod -= ratio\r\n                    console.log(this.mMdl.timePeriod)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    newNode() {\r\n        //获取食物实例\r\n        let food = this.getPoolNode()\r\n        this.sceneNode.addChild(food);\r\n        //获取对象的食物组件\r\n        let foodComponent = food.getComponent(Food)\r\n        foodComponent.randomProps()\r\n        return food\r\n    }\r\n\r\n    getPoolNode() {\r\n        //从食物对象池中获取一个实例\r\n        let foodNode = this.mMdl.foodPool.get()\r\n        //将食物实例放入当前食物节点列表\r\n        this.mMdl.currentFoodNodes.push(foodNode)\r\n        return foodNode\r\n    }\r\n\r\n\r\n}","/**\r\n * 微信API接口\r\n */\r\nexport default class WxApi{\r\n    static get isRunInWeiXin(){\r\n        if(cc.sys.platform === cc.sys.WECHAT_GAME){\r\n            return true\r\n        }else{\r\n            WxApi.errorLog();\r\n            return false;\r\n        } \r\n    }\r\n\r\n    static errorLog(func){\r\n        console.warn(\"[请在微信环境内调用微信接口]\");\r\n    }\r\n}","export function spriteRes(resourceUrl) {\n\treturn new Promise((resolve, reject) => {\n\t\tcc.loader.loadRes(resourceUrl, cc.SpriteFrame, (err, spriteFrame) => {\n\t\t\tif (err) throw err\n\t\t\tresolve(spriteFrame)\n\t\t})\n\t})\n}\n\nexport function randomCoin() {\n\treturn Math.round(Math.random())\n}\n\nexport function randomNumber(size) {\n\treturn Math.floor(Math.random() * size)\n}\n\nexport function randomValue(...values) {\n\treturn values[randomNumber(values.length)]\n}\n\n"],"sourceRoot":"/source/","file":"project.js"}