{"version":3,"sources":["assets/scripts/project/view/Animal.ts","assets/scripts/project/util/AudioManager.ts","assets/scripts/project/util/AudioUtil.ts","assets/scripts/project/impl/Begin.ts","assets/scripts/lib/framework/Bind/BindConst.ts","assets/scripts/lib/framework/Bind/Binder.ts","assets/scripts/lib/framework/Bind/Binding.ts","assets/scripts/lib/framework/Command/CommandBinder.ts","assets/scripts/lib/framework/Command/CommandBinding.ts","assets/scripts/lib/framework/Command/CommandConst.ts","assets/scripts/lib/framework/Command/Command.ts","assets/scripts/project/Common.ts","assets/scripts/lib/framework/Context/Context.ts","assets/scripts/lib/framework/Decorator/DecoratorClassBinder.ts","assets/scripts/lib/framework/Decorator/DecoratorClassBinding.ts","assets/scripts/lib/framework/Decorator/DecoratorClass.ts","assets/scripts/lib/framework/Decorator/DecoratorConst.ts","assets/scripts/project/view/Food.ts","assets/scripts/project/command/GameOverCommand.ts","assets/scripts/project/command/GenerateCommand.ts","assets/scripts/lib/framework/Command/ICommandBinder.ts","assets/scripts/lib/framework/Context/IRoot.ts","assets/scripts/lib/framework/Injector/InjectBinder.ts","assets/scripts/lib/framework/Injector/InjectBinding.ts","assets/scripts/lib/framework/Injector/InjectConst.ts","assets/scripts/lib/framework/Injector/InjectDecorator.ts","assets/scripts/lib/framework/Injector/InjectFactory.ts","assets/scripts/lib/framework/Injector/Injector.ts","assets/scripts/project/command/InputControlCommand.ts","assets/scripts/project/Model/InputModel.ts","assets/scripts/lib/extensions/IocComponet.ts","assets/scripts/lib/framework/IocConst.ts","assets/scripts/lib/extensions/IocRoot.ts","assets/scripts/lib/extensions/IocView.ts","assets/scripts/project/view/LogicNode.ts","assets/scripts/project/wxgame/login/Login.js","assets/scripts/project/command/LookRankCommand.ts","assets/scripts/project/context/MainContext.ts","assets/scripts/project/Model/MainModel.ts","assets/scripts/project/view/MainNode.ts","assets/scripts/project/context/MainRoot.ts","assets/scripts/project/signal/MainSignalEnum.ts","assets/scripts/project/signal/MainSignalManager.ts","assets/scripts/project/util/MainUtil.ts","assets/scripts/project/util/Manager.ts","assets/scripts/project/command/MatchCommand.ts","assets/scripts/project/util/Model.ts","assets/scripts/project/view/PauseNode.ts","assets/scripts/project/PersistRoot.ts","assets/scripts/lib/extensions/Pool.ts","assets/scripts/project/util/PrefabManager.ts","assets/scripts/project/helper/PrefabPool.ts","assets/scripts/lib/extensions/Prototype.ts","assets/scripts/project/wxgame/rank/Rank.js","assets/scripts/project/command/RestartCommand.ts","assets/scripts/lib/framework/Signal/SignalManager.ts","assets/scripts/lib/framework/Signal/Signal.ts","assets/scripts/project/util/Singleton.ts","assets/scripts/lib/extensions/Stack.ts","assets/scripts/project/command/StartCommand.ts","assets/scripts/project/wxgame/rank/TipsUiView.ts","assets/scripts/project/util/TouchUtil.ts","assets/scripts/project/command/UpdateCommand.ts","assets/scripts/project/util/Util.ts","assets/scripts/project/wxgame/WxGameApi.js","assets/scripts/project/util/index.ts"],"names":["IocComponet_1","require","InjectDecorator_1","Model_1","_a","cc","_decorator","ccclass","property","Animal","_super","_this","apply","this","arguments","type","__extends","prototype","onLoad","call","start","rePositonAnimal","i","mMdl","animalTextureRect","width","height","offsetRatio","x","y","node","setPosition","__decorate","inject","__IC_Model","ModelType","Main","IocComponet","exports","default","AudioManager","isInit","onConstructor","playLoopCount","audioMap","Map","play","key","hasAudio","clip","getAudio","audios","length","playBgm","bgm","loop","has","get","setAudio","value","set","Singleton","AudioUtil","Begin","beginGame","director","loadScene","lookRank","Component","BindingConst","NULL","Symbol","Binding_1","BindConst_1","__IC_Binder","Object","defineProperty","IConstructorName","Binder","init","_bindings","resolver","binding","resolveBinding","dict","bindingName","name","existingBinding","delete","bind","getRawBinding","unbind","checkKey","Binding","checkAbstract","getBinding","getBindingMap","__IC_Binding","_resolver","_key","_value","_name","to","toName","isConstructor","constructorName","InjectBinder_1","CommandBinding_1","Command_1","Pool_1","CommandConst_1","CommandBinder","pools","activeCommands","Set","activeSequences","usePooling","getPool","isPooled","that_1","values","push","forEach","myPool","makePoolFromType","poolType","injectBinder","Pool","CommandConst","COMMAND_POOL","pool","getInstance","CommandBinding","invokeCommand","cmd","args","depth","command","createCommand","sequenceId","trackCommand","executeCommand","data","getCommand","msg","toString","Error","isClean","injector","deploy","add","__IC_Command","isSequence","execute","onDispose","trigger","_i","next","aa","a","releaseCommand","disposeOfSequencedData","isOnce","isRetain","t","constructor","returnInstance","__IC_InjectBinder","SignalCommandBinder","addListener","signal","toSingleton","createCommandForSignal","_isSequence","_isOnce","Pooled","ICommandBinder_1","Command","_clean","_retain","clean","retain","release","restore","uninject","__IC_CommandBinder","Common","persistRootNode","root","shareTickets","isHasWxRank","maxScore","saveScoreFunc","userOpenId","session_key","unionId","CommandBinder_1","IocConst_1","__IC_Context","Context","firstContext","getRoot","crossContextBinder","addCrossContext","setRoot","addCore","_injectBinder","InjectBinder","_crossContextBinder","_commandBinder","context","removeCrossContext","childContext","restart","instantiateCore","mapBindings","postBindings","launch","toValue","Binder_1","DecoratorClass_1","DecoratorClassBinding_1","Prototype_1","DecoratorClassBinder","_decoratorClassBufferMap","target","extendsList","Prototype","getPrototypeList","injectClass","DecoratorClass","list","bindingMaps_1","size","inside","j","DecoratorClassBinding","insideDict","insideDict_1","insideDic","_property","toProperty","_list","DecoratorClassBinder_1","DecoratorConst","DECORATOR_CLASS_BINDER","Animal_1","IocView_1","MainSignalEnum_1","Util_1","Manager_1","Food","speed","accel","moveY","Food_1","reuse","unuse","clear","update","dt","inited","onCollisionEnter","other","self","otherComponent","getComponent","selfComponent","sMgr","MainSignalEnum","Match","dispatch","GameSignalEnum","onMatch","resPoolNode","onNotMatch","foodNode","index","currentFoodNodes","indexOf","splice","foodPool","res","randomProps","baseIndex","track","mUtl","randomCoin","lastFoodIndex","lastTrack","randomRange","map","foodDatas","foodIndex","randomValue","foodData","Sprite","spriteFrame","getSceneSize","__IC_Util","UtilType","__IC_Manager","ManagerType","Audio","IocView","GameOverCommand","gameOver","PrefabPool_1","GenerateCommand","generateTouchArea","generateAnimalNodes","area","Node","sceneNode","addChild","tUtl","registerTouchArea","foodPrefab","pauseFlag","Promise","all","spriteRes","image","then","that","animalDatas","animalData","spriteFrames","animalNode","instantiate","animalPrefab","animal","sprite","animalsNode","Touch","Prefab","__IC_Root","Injector_1","InjectBinding_1","DecoratorConst_1","ClassBinder","_injector","Injector","binder","injectClassBinder","instance","tryInject","InjectBinding","unbindAllMark","unbinds","isUnbind","InjectConst_1","_isUnbind","_bindingType","InjectConst","BindingType","DEFAULT","_isInject","_args","toArgs","VALUE","SINGLETON","unBind","setValue","o","toInject","injectNoNameFunc","injectToNameFunc","_constructor","_target","injectFunc","InjectFactory","bindingType","singletonOf","valueOf","instanceOf","createFromValue","generateImplicit","c","ToString","InjectFactory_1","factory","decoratorUnInject","tryInjectHere","isValueConstructor","isKeyConstructor","isInject","attemptConstructorInjection","decoratorInject","injectBinding","getInjectValue","injv","TouchUtil_1","InputControlCommand","on","TouchDirection","Up","status","sPosX","areaOnMove","Down","Left","sPosY","Right","direction","rotateAnimals","isRotationing","iMdl","waitingHandle","aMgr","rotateAction","scaleBy","rotateDur","lastAction","runAction","sequence","callFunc","resetAnimalsNode","children","animalsNodeChildren","switchIndex","setScale","one","two","temp","Input","InputModel","BubbleType","Context_1","IocRoot_1","_requiresContext","_registerWithContext","enabled","activeInHierarchy","autoRegisterWithContext","registeredWithContext","shouldRegister","bubbleToContext","Add","view","finalTry","loopLimiter","parent","IocRoot","iocContext","success","Remove","Enable","Disable","requiresContext","IocError","IC_ERROR","onDestroy","SignalManager_1","__IC_SignalManager","LogicNode","inj","Update","Class","extends","properties","_WxGameApi2","isRunInWeiXin","playBGM","console","info","wx","login","fail","launchOptionsSync","_common2","saveScore","getLaunchOptionsSync","scene","shareTicket","score","Number","getOpenDataContext","postMessage","message","function","LookRankCommand","StartCommand_1","MainSignalManager_1","MainModel_1","UpdateCommand_1","GenerateCommand_1","MainUtil_1","RestartCommand_1","LookRankCommand_1","MatchCommand_1","PrefabManager_1","InputControlCommand_1","InputModel_1","AudioUtil_1","AudioManager_1","MainContext","MainSignalManager","MainModel","Instance","MainUtil","TouchUtil","signalMgr","commandBinder","Start","StartCommand","UpdateCommand","Generate","Restart","RestartCommand","LookRank","MatchCommand","InputControl","timer","lastTimer","timePeriod","initTimePeriod","minTimePeriod","lastScore","currentLevel","harderRatios","MainNode","Common_1","MainRoot","SignalManager","winSize","resourceUrl","resolve","reject","loader","loadRes","SpriteFrame","err","Math","round","random","randomNumber","floor","PauseNode_1","match","gainPoint","scoreNode","Label","string","pauseNode","active","stopAllCurrent","PauseNode","onRestartClicked","onLookRankClicked","MainContext_1","PersistRoot","prefabs","clips","game","addPersistRootNode","loadPrefab","loadAudio","prefab","setPrefab","audio","AudioClip","AudioSource","PoolOverflowBehavior","BindingConstraintType","PoolInflationType","Stack_1","__IC_InstanceProvider","instancesAvailable","Stack","instancesInUse","constraint","POOL","uniqueValues","overflowBehavior","EXCEPTION","inflationType","DOUBLE","failIf","isProtetype","_instanceCount","addList","item","remove","removeInstance","removeList","retv","pop","instancesToCreate","instanceCount","WARNING","warn","INCREMENT","instanceProvider","newInstance","condition","PrefabManager","prefabMap","hasPrefab","getPrefab","PrefabPool","nodePool","NodePool","put","hasPrototypeList","constructor_1","types","__proto__","startsWith","AddPrototype","prototypeMap","Array","from","tpye","extendSet","subContextView","tipsUiNode","rankType","shareCount","updateShareMenu","withShareTicket","switchRank","event","switchBtn","switchBar","getChildByName","moveRange","moveBy","v2","ticket","showTipsUi","getShareInfo","backhome","shareApp","shareAppMessage","title","imageUrl","isExist","content","tipsUiView","display","revive","clearAllCurrent","Signal_1","_signal_dic","symbol","_signal","Signal","__IC_Signal","_listener","_onceListener","action","concat","callback","addUnique","addOnceListener","removeAllListeners","listeners","isUnique","getTypes","clazz","classMap","getInstanceOrCreate","destroyInstance","Item","_next","_size","_header","top","newItem","tmp","lanuch","getCollisionManager","resMgr","mainNode","avatar","animals","pause","TipsUiView","label","text","onClicked","RichText","areaMap","isGlobal","areaStatus","AreaStatus","globalAreaStatus","EventType","TOUCH_START","getTouches","touch","getLocationX","sPoxY","getLocationY","TouchStatus","No","totalX","totalY","trendX","trendY","touchMap","getID","TOUCH_MOVE","mDeltaX","getDelta","mDeltaY","abs","disposeTouchResult","TOUCH_END","TOUCH_CANCEL","result","touchMoveDetection","touchEvnet","isMoveValid","trend","tickcount","timecount","newNode","level","ratio","food","getPoolNode","foodComponent","WxGameApi","func","bgmUrl","createInnerAudioContext","src","autoplay","onShow","url","successCallback","failCallback","sys","platform","WECHAT_GAME","errorLog"],"mappings":"0lBAAA,IAAAA,EAAAC,EAAA,oCACAC,EAAAD,EAAA,gDAEAE,EAAAF,EAAA,iBAEMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNC,EAAA,SAAAC,GADA,SAAAD,IAAA,IAAAE,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAMIF,EAAAI,KAAA,KAsCJ,OA3CoCC,UAAAP,EAAAC,GAOhCD,EAAAQ,UAAAC,OAAA,WACIR,EAAAO,UAAAC,OAAAC,KAAAN,OAEJJ,EAAAQ,UAAAG,MAAA,WACIV,EAAAO,UAAAG,MAAAD,KAAAN,OAIJJ,EAAAQ,UAAAI,gBAAA,SAAAC,GACQ,IAAAlB,EAAAS,KAAAU,KAAAC,kBAAAC,EAAArB,EAAAqB,MAAAC,EAAAtB,EAAAsB,OAIJC,GACIC,EAAA,EACAC,EAAA,GAEJ,IAAAP,IAAAK,GACIC,GAAA,EACAC,EAAA,IAEJ,IAAAP,IAAAK,GACIC,EAAA,EACAC,EAAA,IAEJ,IAAAP,IAAAK,GACIC,EAAA,EACAC,GAAA,IAEJ,IAAAP,IAAAK,GACIC,GAAA,EACAC,GAAA,IAEJhB,KAAAiB,KAAAC,YAAAJ,EAAAC,EAAAH,EAAA,EAAAE,EAAAE,EAAAH,EAAA,IAtCJM,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACgB3B,EAAAQ,UAAA,YAAA,GAGjBe,YADCxB,GACQC,EAAAQ,UAAA,YAAA,GALQR,EAAAuB,YADpBzB,GACoBE,GAArB,CAAAT,EAAAqC,aAAqBC,EAAAC,QAAA9B,iTCRrB,IAGA+B,EAAA,SAAA9B,GAAA,SAAA8B,IAAA,IAAA7B,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YACWF,EAAA8B,QAAA,IA2DX,OA5D0CzB,UAAAwB,EAAA9B,GAO5B8B,EAAAvB,UAAAyB,cAAA,WACN7B,KAAA8B,cAAA,EACA9B,KAAA+B,SAAA,IAAAC,KAGGL,EAAAvB,UAAA6B,KAAA,SAAAC,GACH,GAAAlC,KAAAmC,SAAAD,GAAA,CACI,IAAAE,EAAApC,KAAAqC,SAAAH,GAEA,GAAAlC,KAAAsC,OAAAC,SACIvC,KAAAsC,OAAAtC,KAAA8B,gBACI9B,KAAAsC,OAAAtC,KAAA8B,eAAAM,KAAAA,EACApC,KAAAsC,OAAAtC,KAAA8B,eAAAG,QAEAjC,KAAA8B,cAAA,EAEJ9B,KAAA8B,cAAA9B,KAAAsC,OAAAC,OAAA,EACIvC,KAAA8B,eAAA,EAEA9B,KAAA8B,cAAA,KAmBTH,EAAAvB,UAAAoC,QAAA,WACHxC,KAAAyC,IAAAL,OACIpC,KAAAyC,IAAAC,MAAA,EACA1C,KAAAyC,IAAAR,SAGRN,EAAAvB,UAAA+B,SAAA,SAAAD,GACI,OAAAlC,KAAA+B,SAAAY,IAAAT,IAEJP,EAAAvB,UAAAiC,SAAA,SAAAH,GACI,OAAAlC,KAAA+B,SAAAa,IAAAV,IAEJP,EAAAvB,UAAAyC,SAAA,SAAAX,EAAAY,GACI9C,KAAA+B,SAAAgB,IAAAb,EAAAY,IAERnB,EA5DA,CAHAvC,EAAA,eA+DA4D,gNC/DA,IAGAC,EAAA,SAAApD,GAAA,SAAAoD,mDAEA,OAF+B9C,UAAA8C,EAAApD,GAE/BoD,EAFA,CAHA7D,EAAA,eAKA4D,WAFavB,EAAAwB,UAAAA,mLCFP,IAAA1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNwD,GAHM3D,EAAAI,SAGN,SAAAE,GAAA,SAAAqD,mDAgBA,OAhBmC/C,UAAA+C,EAAArD,GAK/BqD,EAAA9C,UAAAC,OAAA,aAIA6C,EAAA9C,UAAA+C,UAAA,WACI3D,GAAA4D,SAAAC,UAAA,SAGJH,EAAA9C,UAAAkD,SAAA,WACI9D,GAAA4D,SAAAC,UAAA,SAdaH,EAAA/B,YADpBzB,GACoBwD,GAArB,CAAA1D,GAAA+D,YAAqB9B,EAAAC,QAAAwB,kKCHjB,SAAAM,GAEiBA,EAAAC,KAAAC,OAAA,QAFjB,CAGAjC,EAAA+B,eAAA/B,EAAA+B,4KCJJ,IAAAG,EAAAvE,EAAA,aACAwE,EAAAxE,EAAA,eAaAyE,EAAA,SAAAhE,GAAA,SAAAgE,mDAEA,OAFiC1D,UAAA0D,EAAAhE,GAC7BiE,OAAAC,eAAAF,EAAAzD,UAAA,mBAAAwC,IAAA,WAAA,MAAA,2CACJiB,EAFA,CAZAzE,EAAA,eAcA4E,kBAFavC,EAAAoC,YAAAA,EAGb,IAAAI,EAAA,WAKI,SAAAA,IACIjE,KAAAkE,OAwIR,OAnIID,EAAA7D,UAAA8D,KAAA,WAEIlE,KAAAmE,UAAA,IAAAnC,KAMJiC,EAAA7D,UAAAgE,SAAA,SAAAC,GACI,IAAAnC,EAAAmC,EAAAnC,IACAlC,KAAAsE,eAAAD,EAAAnC,IAOJ+B,EAAA7D,UAAAkE,eAAA,SAAAD,EAAAnC,GAEI,IACAqC,EADAC,EAAA,MAAAH,EAAAI,KAAAb,EAAAJ,aAAAC,KAAAY,EAAAI,KAGA,GAAAzE,KAAAmE,UAAAxB,IAAAT,IAII,IAFAqC,EAAAvE,KAAAmE,UAAAvB,IAAAV,IAEAS,IAAA6B,GAAA,CAEI,IAAAE,EAAAH,EAAA3B,IAAA4B,GAEAE,GAAAL,IAEIK,EAAA5B,OAEIyB,EAAAI,OAAAH,UAMZD,EAAA,IAAAvC,IAEAhC,KAAAmE,UAAApB,IAAAb,EAAAqC,GAIJA,EAAA5B,IAAAiB,EAAAJ,aAAAC,OAAAc,EAAA3B,IAAAgB,EAAAJ,aAAAC,QAAAY,GAEIE,EAAAI,OAAAf,EAAAJ,aAAAC,MAIJc,EAAA5B,IAAA6B,IACID,EAAAxB,IAAAyB,EAAAH,IAQRJ,EAAA7D,UAAAwE,KAAA,SAAA1C,GAEI,IAAAmC,EAAArE,KAAA6E,gBAIA,OADAR,EAAAO,KAAA1C,GACAmC,GAOJJ,EAAA7D,UAAA0E,OAAA,SAAA5C,EAAAuC,GACI,IAAAM,EAAApB,EAAAqB,QAAAC,cAAA/C,GAEA,GAAAlC,KAAAmE,UAAAxB,IAAAoC,GAAA,CAEI,IAAAR,EAAAvE,KAAAmE,UAAAvB,IAAAmC,GAEAP,OAAA,EAEIA,EADJC,GAGIb,EAAAJ,aAAAC,KAEJc,EAAA5B,IAAA6B,IACID,EAAAI,OAAAH,KAOZP,EAAA7D,UAAAyE,cAAA,WACI,OAAA,IAAAlB,EAAAqB,QAAAhF,KAAAoE,SAAAQ,KAAA5E,QAOJiE,EAAA7D,UAAA8E,WAAA,SAAAhD,EAAAuC,GAEI,GAAAzE,KAAAmE,UAAAxB,IAAAT,GAAA,CAEI,IAAAqC,EAAAvE,KAAAmE,UAAAvB,IAAAV,GAMA,OAJAuC,IACIA,EAAAb,EAAAJ,aAAAC,MAGJc,EAAA5B,IAAA8B,GAEIF,EAAA3B,IAAA6B,GAGA,OAQZR,EAAA7D,UAAA+E,cAAA,SAAAjD,GACI,GAAAlC,KAAAmE,UAAAxB,IAAAT,GACI,OAAAlC,KAAAmE,UAAAvB,IAAAV,IAGZ+B,EA9IA,GAAaxC,EAAAwC,OAAAA,sOCjBb,IAWAmB,EAAA,SAAAvF,GAAA,SAAAuF,mDAEA,OAFkCjF,UAAAiF,EAAAvF,GAC9BiE,OAAAC,eAAAqB,EAAAhF,UAAA,mBAAAwC,IAAA,WAAA,MAAA,4CACJwC,EAFA,CAXAhG,EAAA,eAaA4E,kBAFavC,EAAA2D,aAAAA,EAGb,IAAAJ,EAAA,WAgBI,SAAAA,EAAAZ,GACIpE,KAAAqF,UAAAjB,EAEApE,KAAAsF,KAAA,KACAtF,KAAAuF,OAAA,KACAvF,KAAAwF,MAAA,KA+DR,OA9EI1B,OAAAC,eAAAiB,EAAA5E,UAAA,OAAAwC,IAAA,WACI,OAAA5C,KAAAsF,sCAEJxB,OAAAC,eAAAiB,EAAA5E,UAAA,SAAAwC,IAAA,WACI,OAAA5C,KAAAuF,wCAEJzB,OAAAC,eAAAiB,EAAA5E,UAAA,QAAAwC,IAAA,WACI,OAAA5C,KAAAwF,uCAeJR,EAAA5E,UAAAwE,KAAA,SAAA1C,GAEI,OADAlC,KAAAsF,KAAAN,EAAAC,cAAA/C,GACAlC,MAMJgF,EAAA5E,UAAAqF,GAAA,SAAA3C,GAII,OAHA9C,KAAAuF,OAAAzC,EACA,MAAA9C,KAAAqF,WACIrF,KAAAqF,UAAArF,MACJA,MAOJgF,EAAA5E,UAAAsF,OAAA,SAAAjB,GAII,OAHAzE,KAAAwF,MAAAf,EACA,MAAAzE,KAAAqF,WACIrF,KAAAqF,UAAArF,MACJA,MAGJ8D,OAAAC,eAAAiB,EAAA5E,UAAA,oBAAAwC,IAAA,WACI,OAAAoC,EAAAW,cAAA3F,KAAAsF,uCAGJxB,OAAAC,eAAAiB,EAAA5E,UAAA,sBAAAwC,IAAA,WACI,OAAAoC,EAAAW,cAAA3F,KAAAuF,yCAEUP,EAAAW,cAAA,SAAA7C,GAEV,MAAA,mBAAAA,KAIAA,EAAA1C,WAKU4E,EAAAC,cAAA,SAAA/C,GAUV,OAPAA,EAAA0D,gBACI1D,EAAA0D,gBAGA1D,GAKZ8C,EApFA,GAAavD,EAAAuD,QAAAA,kMCdb,IAAArB,EAAAvE,EAAA,mBAIAyG,EAAAzG,EAAA,4BAIA0G,EAAA1G,EAAA,oBASA2G,EAAA3G,EAAA,aAIA4G,EAAA5G,EAAA,yBAGA6G,EAAA7G,EAAA,kBAGAC,EAAAD,EAAA,+BAeA8G,EAAA,SAAArG,GAAA,SAAAqG,IAAA,IAAApG,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAMcF,EAAAqG,MAAA,IAAAnE,IAGAlC,EAAAsG,eAAA,IAAAC,IAEAvG,EAAAwG,gBAAA,IAAAtE,IAEHlC,EAAAyG,YAAA,IAwLX,OArMmCpG,UAAA+F,EAAArG,GAcxBqG,EAAA9F,UAAAoG,QAAA,SAAAtG,GACH,OAAAF,KAAAmG,MAAAxD,IAAAzC,GACIF,KAAAmG,MAAAvD,IAAA1C,GACJ,MAGGgG,EAAA9F,UAAAgE,SAAA,SAAAC,GAAP,IAAAvE,EAAAE,KAEI,GADAH,EAAAO,UAAAgE,SAAA9D,KAAAN,KAAAqE,GACArE,KAAAuG,YAAAlC,EAAAoC,UACI,MAAApC,EAAAvB,MAAA,CACI,IAAA4D,EAAA1G,KAEA2G,EAAAtC,EAAAvB,MACA,IAAA6D,EAAApE,SACIoE,MACAC,KAAAvC,EAAAvB,OAGJ6D,GAAAA,EAAApE,OAAA,GACIoE,EAAAE,QAAA,SAAA/D,GAEI,GAAA,GAAA4D,EAAAP,MAAAxD,IAAAG,GAAA,CACI,IAAAgE,EAAAhH,EAAAiH,iBAAAjE,GACA4D,EAAAP,MAAApD,IAAAD,EAAAgE,QAOdZ,EAAA9F,UAAA2G,iBAAA,SAAA7G,GAEN,IAAA8G,EAAA9G,EAEAF,KAAAiH,aAAArC,KAAA1E,GAAAuF,GAAAvF,GAGAF,KAAAiH,aAAArC,KAAAoB,EAAAkB,MAAAzB,GAAAO,EAAAkB,MAAAxB,OAAAO,EAAAkB,aAAAC,cACA,IAAAC,EAAArH,KAAAiH,aAAAK,YAAAtB,EAAAkB,KAAAjB,EAAAkB,aAAAC,cAIA,OAHApH,KAAAiH,aAAAnC,OAAAkB,EAAAkB,KAAAjB,EAAAkB,aAAAC,cACAC,EAAAzC,KAAAoC,GAEAK,GAGJnB,EAAA9F,UAAAyE,cAAA,WACI,OAAA,IAAAiB,EAAAyB,eAAAvH,KAAAoE,SAAAQ,KAAA5E,QAEJkG,EAAA9F,UAAAwE,KAAA,SAAA1C,GACI,OAAArC,EAAAO,UAAAwE,KAAAtE,KAAAN,KAAAkC,IAGMgE,EAAA9F,UAAAoH,cAAA,SAAAC,EAAApD,EAAAqD,EAAAC,GACN,IAAAC,EAAA5H,KAAA6H,cAAAJ,EAAAC,GAIA,OAHAE,EAAAE,WAAAH,EACA3H,KAAA+H,aAAAH,EAAAvD,GACArE,KAAAgI,eAAAJ,EAAAF,GACAE,GAGM1B,EAAA9F,UAAAyH,cAAA,SAAAJ,EAAAQ,GACN,IAAAL,EAAA5H,KAAAkI,WAAAT,GAEA,GAAA,MAAAG,EAAA,CACI,IAAAO,EAAA,aAKA,MAJA,MAAAF,IACIE,GAAA,gBAAAF,EAAAG,YAEJD,GAAA,uLACA,IAAAE,MAAAF,GAIJ,OADAP,EAAAK,KAAAA,EACAL,GAGM1B,EAAA9F,UAAA8H,WAAA,SAAAhI,GAEN,GAAAF,KAAAuG,YAAAvG,KAAAmG,MAAAxD,IAAAzC,GAAA,CACI,IAAAmH,EAAArH,KAAAmG,MAAAvD,IAAA1C,GAeA,OAdA0H,EAAAP,EAAAC,eAIIM,EAAAU,UACItI,KAAAiH,aAAAsB,SAAAnH,OAAAwG,EAAA,MACAA,EAAAY,WAIJZ,EAAA5H,KAAAiH,aAAAK,YAAApH,EAAA,MAEAmH,EAAAoB,IAAAb,IAEJA,EAEA5H,KAAAiH,aAAArC,KAAAmB,EAAA2C,cAAAjD,GAAAvF,GACA,IAAA0H,EAAA5H,KAAAiH,aAAAK,YAAAvB,EAAA2C,aAAA,MAEA,OADA1I,KAAAiH,aAAAnC,OAAAiB,EAAA2C,aAAA,MACAd,GAGE1B,EAAA9F,UAAA2H,aAAA,SAAAH,EAAAvD,GACNA,EAAAsE,WACI3I,KAAAsG,gBAAAvD,IAAA6E,EAAAvD,GAEArE,KAAAoG,eAAAqC,IAAAb,IAIE1B,EAAA9F,UAAA4H,eAAA,SAAAJ,EAAAF,GACN,MAAAE,GAGAA,EAAAgB,QAAA7I,MAAA6H,EAAAF,IAOGxB,EAAA9F,UAAAyI,UAAA,SAAAC,GAA4B,IAAA,IAAApB,KAAAqB,EAAA,EAAAA,EAAA9I,UAAAsC,OAAAwG,IAAArB,EAAAqB,EAAA,GAAA9I,UAAA8I,GAE/B,IAAA1E,EAAArE,KAAAkF,WAAA4D,EAAA,MACA,GAAA,MAAAzE,EAEI,GAAAA,EAAAsE,WAEI3I,KAAAgJ,KAAA3E,EAAAqD,EAAA,QAKA,IAFA,IACAuB,EADA5E,EAAAvB,MACAP,OAAA,EACA2G,EAAA,EAAAA,EAAAD,EAAAC,IACIlJ,KAAAgJ,KAAA3E,EAAAqD,EAAAwB,IAMNhD,EAAA9F,UAAA4I,KAAA,SAAA3E,EAAAqD,EAAAC,GACN,IAAAhB,EAAAtC,EAAAvB,MAMA,GALA,IAAA6D,EAAApE,SACIoE,MACAC,KAAAvC,EAAAvB,OAGJ6E,EAAAhB,EAAApE,OAAA,CACI,IAAAkF,EAAAd,EAAAgB,GACAC,EAAA5H,KAAAwH,cAAAC,EAAApD,EAAAqD,EAAAC,GACA3H,KAAAmJ,eAAAvB,QAEA5H,KAAAoJ,uBAAA1B,GAEArD,EAAAgF,QAEIrJ,KAAA8E,OAAAT,EAAA,OAKF6B,EAAA9F,UAAAgJ,uBAAA,SAAAnB,KAIH/B,EAAA9F,UAAA+I,eAAA,SAAAvB,GAEH,IAAAA,EAAA0B,SAAA,CAEI,IAAAC,EAAA3B,EAAA4B,YAIA,GAHAxJ,KAAAuG,YAAAvG,KAAAmG,MAAAxD,IAAA4G,IACIvJ,KAAAmG,MAAAvD,IAAA2G,GAAAE,eAAA7B,GAEJ5H,KAAAoG,eAAAzD,IAAAiF,GACI5H,KAAAoG,eAAAzB,OAAAiD,QACG,GAAA5H,KAAAsG,gBAAA3D,IAAAiF,GAAA,CACH,IAAAvD,EAAArE,KAAAsG,gBAAA1D,IAAAgF,GACAK,EAAAL,EAAAK,KACAjI,KAAAsG,gBAAA3B,OAAAiD,GACA5H,KAAAgJ,KAAA3E,EAAA4D,EAAAL,EAAAE,WAAA,MA9LZ3G,YADC9B,EAAA+B,OAAAyE,EAAA6D,oBACkCxD,EAAA9F,UAAA,oBAAA,GAkMvC8F,EArMA,CAZA9G,EAAA,kBAYA6E,QAAaxC,EAAAyE,cAAAA,EAsMb,IAAAyD,EAAA,SAAA9J,GAAA,SAAA8J,IAAA,IAAA7J,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAEWF,EAAAyG,YAAA,IA2GX,OA7GyCpG,UAAAwJ,EAAA9J,GAIrC8J,EAAAvJ,UAAAkE,eAAA,SAAAD,EAAAnC,IACIrC,EAAAO,UAAAkE,eAAAhE,KAAAN,KAAAqE,EAAAnC,GAEAlC,KAAAmE,UAAAxB,IAAAT,KACIA,EACA0H,YAAA5J,KAAA6I,UAAAjE,KAAA5E,QAID2J,EAAAvJ,UAAAwE,KAAA,SAAA9B,GAEH,IAAAuB,EAAArE,KAAAiH,aAAA/B,WAAApC,EAAA,MACA+G,EAAA,KAWA,OATAlG,EAAAqB,QAAAW,cAAA7C,KAEI,MAAAuB,IACIA,EAAArE,KAAAiH,aAAArC,KAAA9B,IACAgH,cAEJD,EAAA7J,KAAAiH,aAAAK,YAAAxE,EAAA,OAGJ+G,EACIhK,EAAAO,UAAAwE,KAAAtE,KAAAN,KAAA6J,GAEAhK,EAAAO,UAAAwE,KAAAtE,KAAAN,KAAA8C,IAID6G,EAAAvJ,UAAA8E,WAAA,SAAAhD,EAAAuC,GACH,IAAAoF,EASA,OALIA,EAFJlG,EAAAqB,QAAAW,cAAAzD,GAEIlC,KAAAiH,aAAAK,YAAApF,EAAAuC,GAGAvC,EAEJrC,EAAAO,UAAA8E,WAAA5E,KAAAN,KAAA6J,EAAApF,IAEMkF,EAAAvJ,UAAAoH,cAAA,SAAAC,EAAApD,EAAAqD,EAAAC,GACNtD,EAAAnC,IAAA,IACA0F,EAAA5H,KAAA+J,uBAAAtC,EAAAC,GAIA,OAHAE,EAAAE,WAAAH,EACA3H,KAAA+H,aAAAH,EAAAvD,GACArE,KAAAgI,eAAAJ,EAAAF,GACAE,GAGM+B,EAAAvJ,UAAA2J,uBAAA,SAAAtC,EAAAC,GAGN,GAAA,MAAAA,EAOI,IAAArB,IAmCJ,IAAAuB,EA5CA5H,KA4CAkI,WAAAT,GAOA,OANAG,EAAAK,KAAAP,EAMAE,GAER+B,EA7GA,CA6GAzD,GA7GazE,EAAAkI,oBAAAA,obChPb,IAEApC,EAAA,SAAA1H,GAAA,SAAA0H,mDA6BA,OA7BoCpH,UAAAoH,EAAA1H,GAQhCiE,OAAAC,eAAAwD,EAAAnH,UAAA,cAAAwC,IAAA,WACI,OAAA5C,KAAAgK,6CAEJlG,OAAAC,eAAAwD,EAAAnH,UAAA,UAAAwC,IAAA,WACI,OAAA5C,KAAAiK,yCAEG1C,EAAAnH,UAAAqF,GAAA,SAAA3C,GACH,OAAAjD,EAAAO,UAAAqF,GAAAnF,KAAAN,KAAA8C,IAEGyE,EAAAnH,UAAAsF,OAAA,SAAAjB,GACH,OAAA5E,EAAAO,UAAAsF,OAAApF,KAAAN,KAAAyE,IAKG8C,EAAAnH,UAAA8J,OAAA,WAIH,OAFAlK,KAAAyG,UAAA,EACAzG,KAAAqF,UAAArF,MACAA,MAERuH,EA7BA,CAFAnI,EAAA,mBA+BA4F,SA7BavD,EAAA8F,eAAAA,mMCDb,SAAAJ,GAGIA,EAAA,aAAA,eAHJ,CAIA1F,EAAA0F,eAAA1F,EAAA0F,8KCLA,IAAAgD,EAAA/K,EAAA,oBACAyG,EAAAzG,EAAA,4BACAC,EAAAD,EAAA,+BAqBAsJ,EAAA,SAAA7I,GAAA,SAAA6I,mDAEA,OAFkCvI,UAAAuI,EAAA7I,GAC9BiE,OAAAC,eAAA2E,EAAAtI,UAAA,mBAAAwC,IAAA,WAAA,MAAA,4CACJ8F,EAFA,CApBAtJ,EAAA,eAsBA4E,kBAFavC,EAAAiH,aAAAA,EAGb,IAAA0B,EAAA,WAAA,SAAAA,IAUYpK,KAAAqK,QAAA,EAUArK,KAAAsK,SAAA,EAuBZ,OAhCWF,EAAAhK,UAAAoI,OAAA,WACHxI,KAAAqK,QAAA,GAEGD,EAAAhK,UAAAmK,MAAA,WACHvK,KAAAqK,QAAA,GAEJvG,OAAAC,eAAAqG,EAAAhK,UAAA,WAAAwC,IAAA,WACI,OAAA5C,KAAAqK,wCAIGD,EAAAhK,UAAAoK,OAAA,WAEHxK,KAAAsK,SAAA,GAEGF,EAAAhK,UAAAqK,QAAA,WAEHzK,KAAAsK,SAAA,GAEJxG,OAAAC,eAAAqG,EAAAhK,UAAA,YAAAwC,IAAA,WACI,OAAA5C,KAAAsK,yCAGGF,EAAAhK,UAAAsK,QAAA,WAEH1K,KAAAiH,aAAAsB,SAAAoC,SAAA3K,MACAA,KAAAuK,SAGGH,EAAAhK,UAAAwI,QAAA,WAAQ,IAAA,IAAAlB,KAAAqB,EAAA,EAAAA,EAAA9I,UAAAsC,OAAAwG,IAAArB,EAAAqB,GAAA9I,UAAA8I,IArCf5H,YADF9B,EAAA+B,OAAAyE,EAAA6D,oBACsCU,EAAAhK,UAAA,oBAAA,GAGvCe,YADC9B,EAAA+B,OAAA+I,EAAAS,qBACsCR,EAAAhK,UAAA,qBAAA,GAqCxCgK,EA3CA,GAAa3I,EAAA2I,QAAAA,kTCvBZ,IAAAS,EAAA,WAAA,SAAAA,KAcD,OAbWA,EAAAjJ,QAAA,EACAiJ,EAAAC,gBAAA,KACAD,EAAAE,KAAA,KACAF,EAAAG,gBACAH,EAAAI,aAAA,EACAJ,EAAAK,SAAA,EACAL,EAAAM,cAAA,KAEAN,EAAAO,WAAA,EAEAP,EAAAQ,YAAA,GAEAR,EAAAS,QAAA,EACXT,EAdC,GAAsBpJ,EAAAC,QAAAmJ,8JCFvB,IAAAhF,EAAAzG,EAAA,4BACAmM,EAAAnM,EAAA,4BACAoM,EAAApM,EAAA,eACA+K,EAAA/K,EAAA,6BAeAqM,EAAA,SAAA5L,GAAA,SAAA4L,mDAEA,OAFkCtL,UAAAsL,EAAA5L,GAC9BiE,OAAAC,eAAA0H,EAAArL,UAAA,mBAAAwC,IAAA,WAAA,MAAA,4CACJ6I,EAFA,CAEAD,EAAAxH,kBAFavC,EAAAgK,aAAAA,EAIb,IAAAC,EAAA,WAqCI,SAAAA,EAAAX,GACI,MAAAW,EAAAC,cAAA,MAAAD,EAAAC,aAAAC,WACIF,EAAAC,aAAA3L,KACAA,KAAA6L,mBAAA7L,KAAAiH,cAETyE,EAAAC,aAAAG,gBAAA9L,MAGKA,KAAA+L,QAAAhB,GAEA/K,KAAAgM,UAEAhM,KAAAO,QA2DR,OArGIuD,OAAAC,eAAA2H,EAAAtL,UAAA,gBAAAwC,IAAA,WAII,OAHA5C,KAAAiM,gBACIjM,KAAAiM,cAAA,IAAApG,EAAAqG,cAEJlM,KAAAiM,+CAGJnI,OAAAC,eAAA2H,EAAAtL,UAAA,sBAIAwC,IAAA,WACI,OAAA5C,KAAAmM,qBALJpJ,IAAA,SAAAD,GACI9C,KAAAmM,oBAAArJ,mCAQJgB,OAAAC,eAAA2H,EAAAtL,UAAA,iBAAAwC,IAAA,WAKI,OAAA5C,KAAAoM,gDAKJV,EAAAtL,UAAAwL,QAAA,WACI,OAAA5L,KAAA+K,MAkBGW,EAAAtL,UAAA0L,gBAAA,SAAAO,GAGT,OADMA,EAAAR,mBAAA7L,KAAAiH,aACNjH,MAGS0L,EAAAtL,UAAAkM,mBAAA,SAAAC,KAQAb,EAAAtL,UAAA2L,QAAA,SAAAhB,GAEH,OADA/K,KAAA+K,KAAAA,EACA/K,MAEG0L,EAAAtL,UAAAoM,QAAA,WAIH,OAHAxM,KAAAgM,UACAhM,KAAAO,QAEAP,MAEG0L,EAAAtL,UAAAG,MAAA,WAMH,OALAP,KAAAyM,kBACAzM,KAAA0M,cACA1M,KAAA2M,eACA3M,KAAA4M,SAEA5M,MAGG0L,EAAAtL,UAAAwM,OAAA,aAMGlB,EAAAtL,UAAAqM,gBAAA,WAENzM,KAAAoM,eAAApM,KAAAiH,aAAAK,YAAA6C,EAAAS,mBAAA,OAEMc,EAAAtL,UAAAsM,YAAA,aAGAhB,EAAAtL,UAAAuM,aAAA,aAGAjB,EAAAtL,UAAA4L,QAAA,WAENhM,KAAAiH,aAAArC,KAAAiB,EAAA6D,mBAAAmD,QAAA7M,KAAAiH,cAEAjH,KAAAiH,aAAArC,KAAAuF,EAAAS,oBAAAnF,GAAA8F,EAAA5B,qBAAAG,eAGR4B,EA5GA,GAAajK,EAAAiK,QAAAA,kVCvBb,IAAAoB,EAAA1N,EAAA,kBACAwE,EAAAxE,EAAA,qBACA2N,EAAA3N,EAAA,oBACA4N,EAAA5N,EAAA,2BAEA6N,EAAA7N,EAAA,8BAEA8N,EAAA,SAAArN,GAAA,SAAAqN,mDA8JA,OA9J0C/M,UAAA+M,EAAArN,GAMtCqN,EAAA9M,UAAA8D,KAAA,WAEIlE,KAAAmE,UAAA,IAAAnC,IAEAhC,KAAAmN,yBAAA,IAAAnL,KAGGkL,EAAA9M,UAAAuC,IAAA,SAAAT,GACH,OAAAlC,KAAAmE,UAAAxB,IAAAT,IAGGgL,EAAA9M,UAAAwC,IAAA,SAAAwK,GAEH,KAAAA,aAAAtJ,QAAiC,MAAA,IAAAuE,MAAA,6BAAA+E,EAAA,UAEjC,IAAApN,KAAAmN,yBAAAxK,IAAAyK,GAAA,CAEI,IAAAC,EAAAJ,EAAAK,UAAAC,iBAAAH,GAEAI,EAAA,IAAAT,EAAAU,eACAC,KACAnJ,OAAA,EAEAoJ,KACA,GAAAN,GAAAA,EAAA9K,OAAA,EACI,IAAA,IAAA9B,EAAA,EAAAA,EAAA4M,EAAA9K,OAAA9B,KACI8D,EAJRvE,KAIQmF,cAAAkI,EAAA5M,MACA8D,EAAAqJ,KAAA,GACIrJ,EAAAsC,QAAA,SAAAgH,GACIF,EAAA/G,KAAAiH,KAKhB,IAAAA,OAAA,EACA,GAAAF,GAAAA,EAAApL,OAAA,EACI,IAAA9B,EAAA,EAAAA,EAAAkN,EAAApL,OAAA9B,IAEI,IADAoN,EAAAF,EAAAlN,KACAoN,EAAAD,KAAA,EAEI,IADA,IAAAjH,EAAAkH,EAAAlH,SACAmH,EAAA,EAAAA,EAAAD,EAAAD,KAAAE,IAAA,CACI,IAAAzJ,EAAAsC,EAAAqC,OACA0E,EAAA9G,KAAAvC,EAAAvB,OAKhB0K,EAAAE,KAAAA,EAEA1N,KAAAmN,yBAAApK,IAAAqK,EAAAI,GAGJ,OAAAxN,KAAAmN,yBAAAvK,IAAAwK,IAGGF,EAAA9M,UAAAwE,KAAA,SAAA1C,GACH,OAAArC,EAAAO,UAAAwE,KAAAtE,KAAAN,KAAAkC,IAGGgL,EAAA9M,UAAA8E,WAAA,SAAAhD,EAAAuC,GACH,OAAA5E,EAAAO,UAAA8E,WAAA5E,KAAAN,KAAAkC,EAAAuC,IAGGyI,EAAA9M,UAAAyE,cAAA,WACH,OAAA,IAAAmI,EAAAe,sBAAA/N,KAAAoE,SAAAQ,KAAA5E,QAGGkN,EAAA9M,UAAAgE,SAAA,SAAAC,GACHxE,EAAAO,UAAAgE,SAAA9D,KAAAN,KAAAqE,IAOJ6I,EAAA9M,UAAAkE,eAAA,SAAAD,EAAAnC,GAEI,GAAAmC,EAAA1E,SAAA,CAEA,IACA4E,EA4CAyJ,EA7CAxJ,EAAA,MAAAH,EAAAI,KAAAb,EAAAJ,aAAAC,KAAAY,EAAAI,KAGA,GAAAzE,KAAAmE,UAAAxB,IAAAT,IAII,IAFAqC,EAAAvE,KAAAmE,UAAAvB,IAAAV,IAEAS,IAAA6B,GAAA,CAEI,IAAAyJ,EAAA1J,EAAA3B,IAAA4B,GAEA,GAAAyJ,EAAAtL,IAAA0B,EAAA1E,WACI+E,EAAAuJ,EAAArL,IAAAyB,EAAA1E,YAII+E,GAAAL,IAEIK,EAAA5B,OAEIyB,EAAAI,OAAAH,UAQpBD,EAAA,IAAAvC,IAEAhC,KAAAmE,UAAApB,IAAAb,EAAAqC,GAIJ,GAAAA,EAAA5B,IAAAiB,EAAAJ,aAAAC,MAAA,CACI,IAAAyK,EAAA3J,EAAA3B,IAAAgB,EAAAJ,aAAAC,MACA,GAAAyK,EAAAvL,IAAA0B,EAAA1E,UAAA,CACI,IAAA+E,EAAAwJ,EAAAtL,IAAAyB,EAAA1E,UACA0E,EAAA1E,WAAA0E,GAEI6J,EAAAvJ,OAAAf,EAAAJ,aAAAC,OAOZc,EAAA5B,IAAA6B,IASIwJ,EAAAzJ,EAAA3B,IAAA4B,IAEA7B,IAAA0B,EAAA1E,WAEIqO,EAAAjL,IAAAsB,EAAA1E,SAAA0E,KAXJ2J,EAAA,IAAAhM,KAEAe,IAAAsB,EAAA1E,SAAA0E,GAEAE,EAAAxB,IAAAyB,EAAAwJ,MAeRd,EAAA9M,UAAA+E,cAAA,SAAAjD,GACI,GAAAlC,KAAAmE,UAAAxB,IAAAT,GACI,OAAAlC,KAAAmE,UAAAvB,IAAAV,IAGZgL,EA9JA,CA8JAJ,EAAA7I,QA9JaxC,EAAAyL,qBAAAA,kXCPb,IAEAa,EAAA,SAAAlO,GAAA,SAAAkO,mDAwBA,OAxB2C5N,UAAA4N,EAAAlO,GAEvCiE,OAAAC,eAAAgK,EAAA3N,UAAA,YAAAwC,IAAA,WACI,OAAA5C,KAAAmO,2CAOJJ,EAAA3N,UAAAgO,WAAA,SAAAzO,GAII,OAHAK,KAAAmO,UAAAxO,EACA,MAAAK,KAAAqF,WACIrF,KAAAqF,UAAArF,MACJA,MAGJ+N,EAAA3N,UAAAqF,GAAA,SAAA3C,GACI,OAAAjD,EAAAO,UAAAqF,GAAAnF,KAAAN,KAAA8C,IAGJiL,EAAA3N,UAAAsF,OAAA,SAAAjB,GACI,OAAA5E,EAAAO,UAAAsF,OAAApF,KAAAN,KAAAyE,IAERsJ,EAxBA,CAFA3O,EAAA,mBA0BA4F,SAxBavD,EAAAsM,sBAAAA,uMCEb,IAAAN,EAAA,WAAA,SAAAA,KASA,OANI3J,OAAAC,eAAA0J,EAAArN,UAAA,QAAAwC,IAAA,WACI,OAAA5C,KAAAqO,OAEJtL,IAAA,SAAAD,GACI9C,KAAAqO,MAAAvL,mCAER2K,EATA,GAAahM,EAAAgM,eAAAA,4KCJb,IAAAa,EAAAlP,EAAA,2BACA,SAAAmP,GAKiBA,EAAAC,uBAAA,IAAAF,EAAApB,sBALjB,CAMAzL,EAAA8M,iBAAA9M,EAAA8M,yNCPA,IAAAlP,EAAAD,EAAA,gDAEAqP,EAAArP,EAAA,YAEAsP,EAAAtP,EAAA,gCACAuP,EAAAvP,EAAA,4BACAE,EAAAF,EAAA,iBACAwP,EAAAxP,EAAA,gBACAyP,EAAAzP,EAAA,mBAGMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNoP,GAHMvP,EAAAI,SAGN,SAAAE,GADA,SAAAiP,IAAA,IAAAhP,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAYQF,EAAAiP,MAAA,EACGjP,EAAAkP,MAAA,EAEClP,EAAAmP,MAAA,EACRnP,EAAAI,KAAA,WA2EJ,OA1FkCC,UAAA2O,EAAAjP,GAAbqP,EAAAJ,EAiBjBA,EAAA1O,UAAAC,OAAA,WAAAR,EAAAO,UAAAC,OAAAC,KAAAN,OACA8O,EAAA1O,UAAAG,MAAA,WAAAV,EAAAO,UAAAG,MAAAD,KAAAN,OACA8O,EAAA1O,UAAA+O,MAAA,aACAL,EAAA1O,UAAAgP,MAAA,aACON,EAAA1O,UAAAiP,MAAA,WACHrP,KAAA+O,MAAA,IACA/O,KAAAgP,MAAA,IACAhP,KAAAiP,MAAA,EACAjP,KAAAiB,KAAAF,EAAA,EACAf,KAAAiB,KAAAD,EAAA,GAEJ8N,EAAA1O,UAAAkP,OAAA,SAAAC,GACCvP,KAAAwP,SACAxP,KAAA+O,OAAA/O,KAAAgP,MAAAO,EACAvP,KAAAiP,MAAAjP,KAAA+O,MAAAQ,EACGvP,KAAAiB,KAAAD,GAAAhB,KAAAiP,QAGJH,EAAA1O,UAAAqP,iBAAA,SAAAC,EAAAC,GACI,GAAA3P,KAAAwP,OAAA,CACA,IAAAI,EAAAF,EAAAG,aAAApB,EAAA/M,SACAoO,EAAAH,EAAAE,aAAAX,GACAU,GAAAE,GAAAF,EAAA1P,OAAA4P,EAAA5P,MAEIF,KAAA+P,KAAAnN,IAAA+L,EAAAqB,eAAAC,OAAAC,SAAAvB,EAAAwB,eAAAC,QAAApQ,KAAAiB,MACAjB,KAAAqQ,YAAArQ,KAAAiB,OAGAjB,KAAA+P,KAAAnN,IAAA+L,EAAAqB,eAAAC,OAAAC,SAAAvB,EAAAwB,eAAAG,YAEJtQ,KAAAwP,QAAA,IAGJV,EAAA1O,UAAAiQ,YAAA,SAAAE,GACI,IAAAC,EAAAxQ,KAAAU,KAAA+P,iBAAAC,QAAAH,GAIA,OAHA,IAAAC,GACIxQ,KAAAU,KAAA+P,iBAAAE,OAAAH,EAAA,GAEJxQ,KAAAU,KAAAkQ,SAAAC,IAAAN,IAGJzB,EAAA1O,UAAA0Q,YAAA,WAAA,MAAAhR,EAAAE,KACIA,KAAAwP,QAAA,EACA,IAIAuB,EAJAC,EAAAhR,KAAAiR,KAAAC,cAEA,IAAAlR,KAAAU,KAAAyQ,gBAAoCnR,KAAAU,KAAAyQ,cAAAH,IACpC,IAAAhR,KAAAU,KAAA0Q,YAAgCpR,KAAAU,KAAA0Q,UAAAJ,GAWhC,IAAAK,IANIN,EAFJC,IAAAhR,KAAAU,KAAA0Q,UAEIpR,KAAAU,KAAAyQ,cAGAH,EAAAhR,KAAAU,KAAAyQ,cAAA,EAAAnR,KAAAU,KAAAyQ,cAAA,GAGJ,EAAAJ,EAAA,GAAAO,IAAA,SAAA7Q,GAGI,OAFAA,EAAA,IAAWA,EAAAX,EAAAY,KAAA6Q,UAAAhP,OAAA9B,GACXA,GAAAX,EAAAY,KAAA6Q,UAAAhP,SAAqC9B,GAAAX,EAAAY,KAAA6Q,UAAAhP,QACrC9B,IAEJ+Q,GAAAjS,EAAAS,KAAAiR,MAAAQ,YAAA1R,MAAAR,EAAA8R,GACArR,KAAAU,KAAAyQ,cAAAK,EACAxR,KAAAU,KAAA0Q,UAAAJ,EACAhR,KAAA0R,SAAA1R,KAAAU,KAAA6Q,UAAAC,GACA,IAAAjB,EAAAvQ,KAAAiB,KACAjB,KAAAE,KAAAF,KAAA0R,SAAAxR,KACAqQ,EAAAV,aAAArQ,GAAAmS,QAAAC,YAAA5R,KAAA0R,SAAAE,YACA,IAAA7Q,GAAAiQ,EAAA,GAAA,IAAAhR,KAAAU,KAAAC,kBAAAC,MAAA,GACA2P,EAAArP,YAAAH,EAAAf,KAAAiR,KAAAY,eAAAhR,OAAA,GACAb,KAAAwP,QAAA,GAtFJrO,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACgBuN,EAAA1O,UAAA,YAAA,GAEjBe,YADC9B,EAAA+B,OAAAwN,EAAAkD,UAAAlD,EAAAmD,SAAAxQ,OACeuN,EAAA1O,UAAA,YAAA,GAEhBe,YADC9B,EAAA+B,OAAAyN,EAAAmD,aAAAnD,EAAAoD,YAAAC,QACmBpD,EAAA1O,UAAA,YAAA,GANH0O,EAAAI,EAAA/N,YADpBzB,GACoBoP,GAArB,CAAAJ,EAAAyD,UAAqB1Q,EAAAC,QAAAoN,iaCdrB,IAGAsD,EAAA,SAAAvS,GAAA,SAAAuS,mDASA,OATqCjS,UAAAiS,EAAAvS,GACjCuS,EAAAhS,UAAAwI,QAAA,aAIAwJ,EAAAhS,UAAAiS,SAAA,WAEI7S,GAAA4D,SAAAC,UAAA,UAER+O,EATA,CAHAhT,EAAA,uCAYAgL,SATa3I,EAAA2Q,gBAAAA,6NCHb,IAAArM,EAAA3G,EAAA,uCACAC,EAAAD,EAAA,gDAGAqP,EAAArP,EAAA,kBACAE,EAAAF,EAAA,iBACAkT,EAAAlT,EAAA,wBAEAwP,EAAAxP,EAAA,gBAMAmT,EAAA,SAAA1S,GAAA,SAAA0S,mDA4DA,OA5DqCpS,UAAAoS,EAAA1S,GAiBjC0S,EAAAnS,UAAAwI,QAAA,WAEI5I,KAAAkE,OACAlE,KAAAwS,oBACAxS,KAAAyS,uBAGJF,EAAAnS,UAAAoS,kBAAA,WACI,IAAAE,EAAA,IAAAlT,GAAAmT,KAAA,aACA3S,KAAA4S,UAAAC,SAAAH,GACAA,EAAA9R,MAAAZ,KAAAiR,KAAAY,eAAAjR,MACA8R,EAAA7R,OAAAb,KAAAiR,KAAAY,eAAAhR,OACAb,KAAA8S,KAAAC,kBAAAL,GAAA,IAEJH,EAAAnS,UAAA8D,KAAA,WAAA,IAAApE,EAAAE,KAMI,OALAA,KAAAU,KAAA+P,oBACAzQ,KAAAU,KAAAkQ,SAAA,IAAA0B,EAAA5Q,QAAA,OAAA1B,KAAAgT,YACAhT,KAAAU,KAAAuS,WAAA,EACAjT,KAAAU,KAAAyQ,eAAA,EACAnR,KAAAU,KAAA0Q,WAAA,EACA8B,QAAAC,IAAAnT,KAAAU,KAAA6Q,UAAAD,IAAA,SAAAI,GAAA,OAAA5R,EAAAmR,KAAAmC,UAAA1B,EAAA2B,OAAAC,KAAA,SAAA1B,GAAAF,EAAAE,YAAAA,QAGJW,EAAAnS,UAAAqS,oBAAA,WACI,IAAAc,EAAAvT,KACAkT,QAAAC,IAAAI,EAAA7S,KAAA8S,YAAAlC,IAAA,SAAAmC,GAAA,OAAAF,EAAAtC,KAAAmC,UAAAK,EAAAJ,UACKC,KAAA,SAAAI,GACGA,GAAAA,EAAAnR,OAAA,GACImR,EAAA7M,QAAA,SAAA+K,EAAAnR,GACI,IAAAgT,EAAAF,EAAA7S,KAAA8S,YAAA/S,GACAkT,EAAAnU,GAAAoU,YAAAL,EAAAM,cACAC,EAAAH,EAAA9D,aAAApB,EAAA/M,SACAqS,EAAAJ,EAAA9D,aAAArQ,GAAAmS,QAEA4B,EAAAS,YAAAnB,SAAAc,GAEAI,EAAAnC,YAAAA,EACAkC,EAAA5T,KAAAuT,EAAAvT,KACA4T,EAAAtT,gBAAAC,QArDpBU,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACgBgR,EAAAnS,UAAA,YAAA,GAEjBe,YADC9B,EAAA+B,OAAAwN,EAAAkD,UAAAlD,EAAAmD,SAAAxQ,OACegR,EAAAnS,UAAA,YAAA,GAEhBe,YADC9B,EAAA+B,OAAAwN,EAAAkD,UAAAlD,EAAAmD,SAAAkC,QACgB1B,EAAAnS,UAAA,YAAA,GAEjBe,YADC9B,EAAA+B,OAAA5B,GAAAmT,KAAA,UACmBJ,EAAAnS,UAAA,iBAAA,GAEpBe,YADC9B,EAAA+B,OAAA5B,GAAAmT,KAAA,YACqBJ,EAAAnS,UAAA,mBAAA,GAEtBe,YADC9B,EAAA+B,OAAA5B,GAAA0U,OAAA,WACwB3B,EAAAnS,UAAA,oBAAA,GAEzBe,YADC9B,EAAA+B,OAAA5B,GAAA0U,OAAA,SACsB3B,EAAAnS,UAAA,kBAAA,GA8C3BmS,EA5DA,CAAAxM,EAAAqE,SAAa3I,EAAA8Q,gBAAAA,wYCXb,IAMA3H,EAAA,SAAA/K,GAAA,SAAA+K,mDAEA,OAFwCzK,UAAAyK,EAAA/K,GACpCiE,OAAAC,eAAA6G,EAAA,mBAAAhI,IAAA,WAAA,MAAA,kDACJgI,EAFA,CANAxL,EAAA,eAQA4E,kBAFavC,EAAAmJ,mBAAAA,kLCPb,IACAuJ,EAAA,SAAAtU,GAAA,SAAAsU,mDAEA,OAF+BhU,UAAAgU,EAAAtU,GAC3BiE,OAAAC,eAAAoQ,EAAA/T,UAAA,mBAAAwC,IAAA,WAAA,MAAA,yCACJuR,EAFA,CADA/U,EAAA,eAGA4E,kBAFavC,EAAA0S,UAAAA,gMCHb,IAAArH,EAAA1N,EAAA,kBACAuE,EAAAvE,EAAA,mBACAwE,EAAAxE,EAAA,qBACAgV,EAAAhV,EAAA,cACAiV,EAAAjV,EAAA,mBACAkV,EAAAlV,EAAA,+BACAoM,EAAApM,EAAA,eAIAmV,EAAAD,EAAA/F,eAAAC,uBAYA9E,EAAA,SAAA7J,GAAA,SAAA6J,mDAEA,OAFuCvJ,UAAAuJ,EAAA7J,GACnCiE,OAAAC,eAAA2F,EAAAtJ,UAAA,mBAAAwC,IAAA,WAAA,MAAA,iDACJ8G,EAFA,CAEA8B,EAAAxH,kBAFavC,EAAAiI,kBAAAA,EAGb,IAAAwC,EAAA,SAAArM,GAGI,SAAAqM,IAAA,IAAApM,EAAAD,EAAAS,KAAAN,OAAAA,YAEIF,EAAA0U,UAAA,IAAAJ,EAAAK,SACA3U,EAAA0U,UAAAE,OAAA5U,EACAA,EAAA0U,UAAAG,kBAAAJ,IA+CR,OAtDkCpU,UAAA+L,EAAArM,GAS9BiE,OAAAC,eAAAmI,EAAA9L,UAAA,YAAAwC,IAAA,WACI,OAAA5C,KAAAwU,2CAGGtI,EAAA9L,UAAAkH,YAAA,SAAApF,EAAAuC,GAGHA,IAASA,EAAAb,EAAAJ,aAAAC,MAET,IAAAY,EAAArE,KAAAkF,WAAAvB,EAAAqB,QAAAC,cAAA/C,GAAAuC,GAEA,GAAA,MAAAJ,EAAqB,MAAA,IAAAgE,MAAA,+CAAAnG,EAAA,WAAAuC,GAGrB,IAAAmQ,EAAA5U,KAAAwU,UAAAZ,YAAAvP,GAAA,GAGA,OADArE,KAAAwU,UAAAK,UAAAxQ,EAAAuQ,GACAA,GAGG1I,EAAA9L,UAAA8E,WAAA,SAAAhD,EAAAuC,GACH,OAAA5E,EAAAO,UAAA8E,WAAA5E,KAAAN,KAAAkC,EAAAuC,IAGGyH,EAAA9L,UAAAwE,KAAA,SAAA1C,GACH,OAAArC,EAAAO,UAAAwE,KAAAtE,KAAAN,KAAAkC,IAEGgK,EAAA9L,UAAAyE,cAAA,WACH,OAAA,IAAAwP,EAAAS,cAAA9U,KAAAoE,SAAAQ,KAAA5E,QAEGkM,EAAA9L,UAAA2U,cAAA,WACH,IAAAxB,EAAAvT,KACAgV,KACChV,KAAAmE,UAAA0C,QAAA,SAAAtC,GACGA,EAAAsC,QAAA,SAAAxC,GACIA,EAAA4Q,UACID,EAAApO,KAAAvC,OAKZ2Q,EAAAnO,QAAA,SAAAxC,GACIkP,EAAAzO,OAAAT,EAAAnC,IAAAmC,EAAAI,SAGZyH,EAtDA,CAsDAY,EAAA7I,QAtDaxC,EAAAyK,aAAAA,iYCzBb,IAAAvI,EAAAvE,EAAA,mBACA8V,EAAA9V,EAAA,iBAEA0V,EAAA,SAAAjV,GAAA,SAAAiV,IAAA,IAAAhV,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YACcF,EAAAqV,WAAA,EAEArV,EAAAsV,aAAAF,EAAAG,YAAAC,YAAAC,QAEAzV,EAAA0V,WAAA,IAkFd,OAvFmCrV,UAAA2U,EAAAjV,GAmB/BiE,OAAAC,eAAA+Q,EAAA1U,UAAA,YAAAwC,IAAA,WACI,OAAA5C,KAAAwV,2CAGJ1R,OAAAC,eAAA+Q,EAAA1U,UAAA,QAAAwC,IAAA,WACI,OAAA5C,KAAAyV,uCAEJ3R,OAAAC,eAAA+Q,EAAA1U,UAAA,eAAAwC,IAAA,WACI,OAAA5C,KAAAoV,8CAEJtR,OAAAC,eAAA+Q,EAAA1U,UAAA,YAAAwC,IAAA,WACI,OAAA5C,KAAAmV,2CAKGL,EAAA1U,UAAAsV,OAAA,WAKH,OAJA1V,KAAAyV,MAAAxV,UACA,MAAAD,KAAAqF,WACIrF,KAAAqF,UAAArF,MAEJA,MAKA8U,EAAA1U,UAAA0J,YAAA,WAGN,OAAA9J,KAAAoV,eAAAF,EAAAG,YAAAC,YAAAK,MACU3V,MAGJA,KAAAoV,aAAAF,EAAAG,YAAAC,YAAAM,UACN,MAAA5V,KAAAqF,WACCrF,KAAAqF,UAAArF,MAEDA,OAKS8U,EAAA1U,UAAAyV,OAAA,WAEH,OADA7V,KAAAmV,WAAA,EACAnV,MAEG8U,EAAA1U,UAAAyM,QAAA,SAAA/J,GAGH,OAFA9C,KAAAoV,aAAAF,EAAAG,YAAAC,YAAAK,MACA3V,KAAA8V,SAAAhT,GACA9C,MAEG8U,EAAA1U,UAAA0V,SAAA,SAAAC,GAGH,OADA/V,KAAAyF,GAAAsQ,GACA/V,MAEG8U,EAAA1U,UAAA4V,SAAA,SAAAlT,GAGH,OADA9C,KAAAwV,UAAA1S,EACA9C,MAGG8U,EAAA1U,UAAAqF,GAAA,SAAA3C,GACH,OAAAjD,EAAAO,UAAAqF,GAAAnF,KAAAN,KAAA8C,IAEGgS,EAAA1U,UAAAsF,OAAA,SAAAjB,GACH,OAAA5E,EAAAO,UAAAsF,OAAApF,KAAAN,KAAAyE,IAERqQ,EAvFA,CAuFAnR,EAAAqB,SAvFavD,EAAAqT,cAAAA,+NCHb,SAAAO,IAEI,SAAAC,GAGIA,EAAA,QAAA,UAGAA,EAAA,UAAA,YAGAA,EAAA,MAAA,SATJ,CAUAD,EAAAC,cAAAD,EAAAC,iBAZJ,CAaA7T,EAAA4T,cAAA5T,EAAA4T,6LCbA,IAAAf,EAAAlV,EAAA,+BACAuE,EAAAvE,EAAA,mBAEAmV,EAAAD,EAAA/F,eAAAC,uBAgCA/M,EAAAL,OAAA,WACI,OAAAnB,UAAAsC,QACI,KAAA,EACI,MACJ,KAAA,EACI,OAAA0T,EAAAhW,UAAA,IAEJ,KAAA,EACI,OAAAiW,EAAAjW,UAAA,GAAAA,UAAA,MAUZ,IAAAgW,EAAA,SAAAE,GACI,OAAA,SAAAC,EAAAjI,GACIkI,EAAAD,EAAAD,EAAAhI,KAOR+H,EAAA,SAAAC,EAAA3Q,GACI,OAAA,SAAA4Q,EAAAjI,GACIkI,EAAAD,EAAAD,EAAAhI,EAAA3I,KAWR,SAAA6Q,EAAAD,EAAAD,EAAAhI,EAAA3I,GAGI+O,EAAA3P,KAAAwR,EAAA5M,aAAA/D,GAAA9B,EAAAqB,QAAAC,cAAAkR,IAAA/H,WAAAD,GAAAzI,OAAAF,qPC7EJ,IAAA0P,EAAA9V,EAAA,iBACAuE,EAAAvE,EAAA,mBAKAkX,EAAA,WAAA,SAAAA,KA0FA,OApFWA,EAAAlW,UAAAwC,IAAA,SAAAyB,EAAAqD,GAEH,GAAA,MAAArD,EACL,MAAA,IAAAgE,MAAA,8CAKK,OAFAhE,EAAAkS,aAII,KAAArB,EAAAG,YAAAC,YAAAM,UACI,OAAA5V,KAAAwW,YAAAnS,EAAAqD,GAEJ,KAAAwN,EAAAG,YAAAC,YAAAK,MACI,OAAA3V,KAAAyW,QAAApS,GAKR,OAAArE,KAAA0W,WAAArS,EAAAqD,IAGG4O,EAAAlW,UAAAsW,WAAA,SAAArS,EAAAqD,GAET,GAAA,MAAArD,EAAAvB,MAEC,OAAA9C,KAAA2W,gBAAAtS,EAAAvB,MAAA4E,GAED,IAAA5E,EAAA9C,KAAA4W,iBAAAvS,EAAAnC,IAAAwF,GACA,OAAA1H,KAAA2W,gBAAA7T,EAAA4E,IAGS4O,EAAAlW,UAAAuW,gBAAA,SAAAE,EAAAnP,GAET,IAAAkN,EAAA,KACA,IAIEA,EAFD,MAAAlN,GAAA,GAAAA,EAAAnF,OAEC,IAAAsU,EAIA,IAAAA,EAAAnP,GAGF,MAAAnI,IAKA,OAAAqV,GAEY0B,EAAAlW,UAAAwW,iBAAA,SAAA1U,EAAAwF,GAGN,IAAAxF,EAAQ,OAAA,KAER,GAAAyB,EAAAqB,QAAAW,cAAAzD,GAEI,OAAAlC,KAAA2W,gBAAAzU,EAAAwF,GAEJ,MAAA,IAAAW,MAAA,4EAAAnG,EAAA4U,aAGGR,EAAAlW,UAAAoW,YAAA,SAAAnS,EAAAqD,GAET,GAAA,MAAArD,EAAAvB,MAAA,CAEU,IAAAiT,EAAA/V,KAAA2W,gBAAAtS,EAAAvB,MAAA4E,GACA,GAAA,MAAAqO,EACI,OAAA,KACJ1R,EAAAyR,SAAAC,QAIT1R,EAAAyR,SAAA9V,KAAA4W,iBAAAvS,EAAAnC,IAAAwF,IAED,OAAArD,EAAAvB,OAEYwT,EAAAlW,UAAAqW,QAAA,SAAApS,GAEN,OAAAA,EAAAvB,OAERwT,EA1FA,GAAa7U,EAAA6U,cAAAA,yNCPb,IAAAS,EAAA3X,EAAA,mBAGA8V,EAAA9V,EAAA,iBAKAqV,EAAA,WAKI,SAAAA,IACIzU,KAAAgX,QAAA,IAAAD,EAAAT,cA6KR,OA3KW7B,EAAArU,UAAAuK,SAAA,SAAAyC,GAEH,IAAApN,KAAA0U,SAAAtH,EAAyB,MAAA,IAAA/E,MAAA,qEAEzB,IAAAnI,SAAAkN,EACA,GAAA,WAAAlN,GAAA,YAAAA,GAAA,WAAAA,GAAA,WAAAA,GAAA,cAAAA,GAAA,aAAAA,EAEI,OAAAkN,EAGJ,IAAAI,EAAAxN,KAAA2U,kBAAA/R,IAAAwK,GACApN,KAAAiX,kBAAA7J,EAAAI,IAEIiH,EAAArU,UAAA6W,kBAAA,SAAA7J,EAAAI,GACJ,IAAA+F,EAAAvT,KAEAwN,EAAAE,KAAA7G,QAAA,SAAAxC,GAEIkP,EAAAmB,OAAAxP,WAAAb,EAAAvB,MAAAuB,EAAAI,QAII2I,EAAA/I,EAAA1E,UAAA,SAKL8U,EAAArU,UAAAwT,YAAA,SAAAvP,EAAA6S,GAEH,IAAAlX,KAAA0U,SAAA1U,KAAAgX,QAA+B,MAAA,IAAA3O,MAAA,mGAE/B,IAAAmB,EAAA,KAEAoL,EAAA,KAeA,GAbAvQ,EAAA8S,mBAEI3N,EAAAnF,EAAAvB,MAGA8R,EAAAvQ,EAAAvB,OAGJ0G,GAAAnF,EAAA+S,mBAEI5N,EAAAnF,EAAAnC,MAGJ0S,GAAApL,EAAA,CAEI,IAAA9B,EAAArD,EAAAqD,KACAkN,EAAA5U,KAAAgX,QAAApU,IAAAyB,EAAAqD,GAEAwP,GAEIlX,KAAA6U,UAAAxQ,EAAAuQ,GAGR,OAAAA,GAEGH,EAAArU,UAAAyU,UAAA,SAAAxQ,EAAA+I,GAgBH,OAbA,MAAAA,IAEI/I,EAAAgT,WAEIjK,EAAApN,KAAAoB,OAAAgM,GAAA,IAGJ/I,EAAAkS,aAAArB,EAAAG,YAAAC,YAAAM,WAAAvR,EAAAkS,aAAArB,EAAAG,YAAAC,YAAAK,OAGItR,EAAA2R,UAAA,IAGR5I,GAGGqH,EAAArU,UAAAgB,OAAA,SAAAgM,EAAAkK,GAEH,IAAAtX,KAAA0U,SAAAtH,EAAyB,MAAA,IAAA/E,MAAA,qEAEzB,IAAAnI,SAAAkN,EACA,GAAA,WAAAlN,GAAA,YAAAA,GAAA,WAAAA,GAAA,WAAAA,GAAA,cAAAA,GAAA,aAAAA,EAEI,OAAAkN,EAKJ,IAAAI,EAAAxN,KAAA2U,kBAAA/R,IAAAwK,GASA,OAHApN,KAAAuX,gBAAAnK,EAAAI,GAGAJ,GAKIqH,EAAArU,UAAAmX,gBAAA,SAAAnK,EAAAI,GACJ,IAAA+F,EAAAvT,KAEAwN,EAAAE,KAAA7G,QAAA,SAAAxC,GAGI,IAAAmT,EAAAjE,EAAAmB,OAAAxP,WAAAb,EAAAvB,MAAAuB,EAAAI,MAEA,GAAA+S,EAAA,CACI,IAAA5C,EAAArB,EAAAkE,eAAAD,EAAAtV,IAAAsV,EAAA/S,MAEA2I,EAAA/I,EAAA1E,UAAAiV,MAQJH,EAAArU,UAAAqX,eAAA,SAAAvX,EAAAuE,GAEJ,IAAAJ,EAAArE,KAAA0U,OAAAxP,WAAAhF,EAAAuE,GACA,IAAAJ,EAAY,OAAA,KAIZ,GAAAA,EAAAkS,cAAArB,EAAAG,YAAAC,YAAAK,MAAA,CAEI,GAAAtR,EAAAgT,SAAA,CAII,IAAAK,EAAA1X,KAAAoB,OAAAiD,EAAAvB,OAAA,GAMA,OALAuB,EAAA2R,UAAA,GAKA0B,EAEA,OAAArT,EAAAvB,MAGF,OAAAuB,EAAAkS,aAAArB,EAAAG,YAAAC,YAAAM,YAEFvR,EAAA8S,oBAAA,MAAA9S,EAAAvB,QAEI9C,KAAA4T,YAAAvP,GAAA,GAEJA,EAAAvB,OAEA9C,KAAA4T,YAAAvP,GAAA,IAeZoQ,EAnLA,GAAahT,EAAAgT,SAAAA,qPCRb,IAAA1O,EAAA3G,EAAA,uCAEAC,EAAAD,EAAA,gDACAqP,EAAArP,EAAA,kBACAE,EAAAF,EAAA,iBACAuY,EAAAvY,EAAA,qBAEAwP,EAAAxP,EAAA,gBACAyP,EAAAzP,EAAA,mBAMAwY,EAAA,SAAA/X,GAAA,SAAA+X,mDAkGA,OAlGyCzX,UAAAyX,EAAA/X,GAYrC+X,EAAAxX,UAAAwI,QAAA,WACI,IAAA2K,EAAAvT,KAEAA,KAAA8S,KAAA+E,GAAAF,EAAAG,eAAAC,GAAA,SAAAC,GACIA,EAAAC,OAAA,EACI1E,EAAA2E,WAAAP,EAAAG,eAAAC,IAEAxE,EAAA2E,WAAAP,EAAAG,eAAAK,QAGRnY,KAAA8S,KAAA+E,GAAAF,EAAAG,eAAAK,KAAA,SAAAH,GACIA,EAAAC,OAAA,EACI1E,EAAA2E,WAAAP,EAAAG,eAAAC,IAEAxE,EAAA2E,WAAAP,EAAAG,eAAAK,QAGRnY,KAAA8S,KAAA+E,GAAAF,EAAAG,eAAAM,KAAA,SAAAJ,GACIA,EAAAK,OAAA,EACI9E,EAAA2E,WAAAP,EAAAG,eAAAM,MAEA7E,EAAA2E,WAAAP,EAAAG,eAAAQ,SAGRtY,KAAA8S,KAAA+E,GAAAF,EAAAG,eAAAQ,MAAA,SAAAN,GACIA,EAAAK,OAAA,EACI9E,EAAA2E,WAAAP,EAAAG,eAAAM,MAEA7E,EAAA2E,WAAAP,EAAAG,eAAAQ,UAKZV,EAAAxX,UAAA8X,WAAA,SAAAK,GAEIvY,KAAAU,KAAAuS,YACAsF,IAAAZ,EAAAG,eAAAM,MAAAG,IAAAZ,EAAAG,eAAAQ,MACItY,KAAAwY,cAAA,GACGD,IAAAZ,EAAAG,eAAAC,IAAAQ,IAAAZ,EAAAG,eAAAK,MACHnY,KAAAwY,cAAA,KAIRZ,EAAAxX,UAAAoY,cAAA,SAAAD,GAAA,IAAAzY,EAAAE,KAEI,GAAAA,KAAAU,KAAA+X,cACIzY,KAAA0Y,KAAAC,cAAA3Y,KAAAwY,cAAAD,OADJ,CAKAvY,KAAA4Y,KAAA3W,KAAA,QACA,IAAAsR,EAAAvT,KACAA,KAAAU,KAAA+X,eAAA,EACM,IAAAlZ,EAAAgZ,GAAA,GAAA,KAAA,EAAA,GAAAxX,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GACNsZ,EAAArZ,GAAAsZ,QAAA9Y,KAAAU,KAAAqY,UAAAhY,EAAAC,GACAhB,KAAA0Y,KAAAM,WAAAhZ,KAAAgU,YAAAiF,UAAAzZ,GAAA0Z,SAAAL,EAAArZ,GAAA2Z,SAAA,WACI5F,EAAA6F,iBAAAb,GACAhF,EAAAS,YAAAqF,UAAAvZ,EAAAkU,YAAAqF,SAAA9W,OAAA,GAEIgR,EAAAS,YAAAqF,SAAAxS,QAAA,SAAA8M,EAAAlT,GAAA,OAAAkT,EAAA9D,aAAApB,EAAA/M,SAAAlB,gBAAAC,KAEJ8S,EAAA7S,KAAA+X,eAAA,EAEA3Y,EAAA4Y,KAAAC,eACI7Y,EAAA4Y,KAAAC,sBAKZf,EAAAxX,UAAAgZ,iBAAA,SAAAb,GACI,IAAAe,EAAAtZ,KAAAgU,YAAAqF,SACAd,GAIIvY,KAAAuZ,YAAAD,EAAA,EAAA,GACAtZ,KAAAuZ,YAAAD,EAAA,EAAA,KAJAtZ,KAAAuZ,YAAAD,EAAA,EAAA,GACAtZ,KAAAuZ,YAAAD,EAAA,EAAA,IAKJtZ,KAAAgU,YAAAwF,SAAA,EAAA,IAGJ5B,EAAAxX,UAAAmZ,YAAA,SAAA7L,EAAA+L,EAAAC,GACI,IAAAC,EAAAjM,EAAAgM,GACAhM,EAAAgM,GAAAhM,EAAA+L,GACA/L,EAAA+L,GAAAE,GA9FJxY,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACgBqW,EAAAxX,UAAA,YAAA,GAEjBe,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAsY,QACiBhC,EAAAxX,UAAA,YAAA,GAElBe,YADC9B,EAAA+B,OAAA5B,GAAAmT,KAAA,YACqBiF,EAAAxX,UAAA,mBAAA,GAEtBe,YADC9B,EAAA+B,OAAAwN,EAAAkD,UAAAlD,EAAAmD,SAAAkC,QACgB2D,EAAAxX,UAAA,YAAA,GAEjBe,YADC9B,EAAA+B,OAAAyN,EAAAmD,aAAAnD,EAAAoD,YAAAC,QACmB0F,EAAAxX,UAAA,YAAA,GAwFxBwX,EAlGA,CAAA7R,EAAAqE,SAAa3I,EAAAmW,oBAAAA,wZCdb,IAGAiC,EAAA,SAAAha,GAAA,SAAAga,mDASA,OATgC1Z,UAAA0Z,EAAAha,GAK5Bga,EAAAzZ,UAAAyB,cAAA,WACI7B,KAAAgZ,WAAA,KACAhZ,KAAA2Y,cAAA,MAERkB,EATA,CAHAza,EAAA,qBAYA4D,WATavB,EAAAoY,WAAAA,qMCHb,IAwGAC,EAxGAC,EAAA3a,EAAA,gCACA4a,EAAA5a,EAAA,aACOM,EAAAF,GAAAC,WAAAC,QAEP8B,EAAA,SAAA3B,GADA,SAAA2B,IAAA,IAAA1B,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGSF,EAAAma,kBAAA,EAQEna,EAAAoa,sBAAA,IAwFX,OAlGiC/Z,UAAAqB,EAAA3B,GAGhCiE,OAAAC,eAAAvC,EAAApB,UAAA,mBAAAwC,IAAA,WAEC,OAAA5C,KAAAia,kBAEDlX,IAAA,SAAAD,GACC9C,KAAAia,iBAAAnX,mCAGDgB,OAAAC,eAAAvC,EAAApB,UAAA,2BAAAwC,IAAA,WAEC,OAAA5C,KAAAka,sBAEDnX,IAAA,SAAAD,GACC9C,KAAAka,qBAAApX,mCAEDgB,OAAAC,eAAAvC,EAAApB,UAAA,kBAAAwC,IAAA,WAAA,OAAA5C,KAAAma,SAAAna,KAAAiB,KAAAmZ,mDAGG5Y,EAAApB,UAAAC,OAAA,WACFL,KAAAqa,0BAAAra,KAAAsa,uBAAAta,KAAAua,gBACCva,KAAAwa,gBAAAxa,KAAA8Z,EAAAW,KAAA,IAGFjZ,EAAApB,UAAAG,MAAA,WACCP,KAAAqa,0BAAAra,KAAAsa,uBAAAta,KAAAua,gBACCva,KAAAwa,gBAAAxa,KAAA8Z,EAAAW,KAAA,IAGWjZ,EAAApB,UAAAoa,gBAAA,SAAAE,EAAAxa,EAAAya,GAKX,IAHA,IACAC,EAAA,EACA3Z,EAAAyZ,EAAAzZ,KACA,MAAAA,EAAA4Z,QAAAD,EAHA,KAOC,GAFAA,IAEA,OADA3Z,EAAAA,EAAA4Z,QACAhL,aAAAmK,EAAAc,SAAA,CAEC,IAAAC,EAAA9Z,EAAA4O,aAAAmK,EAAAc,SACA,GAAA,MAAAC,EAAA1O,QAAA,CAEC,IAAAA,EAAA0O,EAAA1O,QACA2O,GAAA,EAEA,OAAA9a,GAEC,KAAA4Z,EAAAW,IAECpO,EAAAR,mBAAAtD,SAAAnH,OAAApB,MAAA,GAEAA,KAAAsa,uBAAA,EACA,MACD,KAAAR,EAAAmB,OAGA,KAAAnB,EAAAoB,OAGA,KAAApB,EAAAqB,QAEC,MACD,QACCH,GAAA,EAIF,GAAAA,EAEC,QAKJ,GAAAhb,KAAAob,iBAAAT,GAAAza,GAAA4Z,EAAAW,IAAA,CAGC,GAAA,MAAAV,EAAArO,QAAAC,aAIC,YADA3L,KAAAsa,uBAAA,GAID,IAAAnS,OAAA,EAQA,MA9DD,KAuDCyS,EACCzS,EAAA,uDAGAA,EAAA,2HACAA,GAAA,WAAAuS,EAAAtS,YAED,IAAAC,MAAAF,KA/FS3G,EAAAL,YADZzB,GACY8B,GAAb,CAAAhC,GAAA+D,WAAa9B,EAAAD,YAAAA,EAoGb,SAAAsY,GAECA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,QAAA,GAAA,UALD,CAMAA,EAAArY,EAAAqY,aAAArY,EAAAqY,4OC9GA,SAAAuB,GACiBA,EAAAC,SAAA,kDADjB,CAEA7Z,EAAA4Z,WAAA5Z,EAAA4Z,cACA,IAAArX,EAAA,WAEA,OAFA,aAAA,GAAsBvC,EAAAuC,iBAAAA,8JCHtB,IAAA+V,EAAA3a,EAAA,gCAEMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAENob,GAFMvb,EAAAI,SAEN,SAAAE,GAAA,SAAAib,mDAeA,OAf6B3a,UAAA2a,EAAAjb,GASzBiE,OAAAC,eAAA+W,EAAA1a,UAAA,kBAAAwC,IAAA,WAAA,OAAA,mCAEAkY,EAAA1a,UAAAmb,UAAA,WACI,MAAAvb,KAAAqM,SAAA,MAAA0N,EAAArO,QAAAC,cACIoO,EAAArO,QAAAC,aAAAW,mBAAAtM,KAAAqM,UAbCyO,EAAA3Z,YADZzB,GACYob,GAAb,CAAAtb,GAAA+D,YAAa9B,EAAAqZ,QAAAA,sMCJb,IAAA3b,EAAAC,EAAA,iBACAC,EAAAD,EAAA,yCACAoc,EAAApc,EAAA,qCAEOM,EAAAF,GAAAC,WAAAC,QAEPyS,EAAA,SAAAtS,GAAA,SAAAsS,mDAYA,OAZ6BhS,UAAAgS,EAAAtS,GAIzBsS,EAAA/R,UAAAC,OAAA,WACIR,EAAAO,UAAAC,OAAAC,KAAAN,OAGJmS,EAAA/R,UAAAG,MAAA,WACIV,EAAAO,UAAAG,MAAAD,KAAAN,OAPJmB,YADC9B,EAAA+B,OAAAoa,EAAAC,qBACqBtJ,EAAA/R,UAAA,YAAA,GAFb+R,EAAAhR,YADZzB,GACYyS,GAAb,CAAAhT,EAAAqC,aAAaC,EAAA0Q,QAAAA,6SCLb,IAAA9S,EAAAD,EAAA,gDAEAuP,EAAAvP,EAAA,4BAEAyG,EAAAzG,EAAA,6CACAE,EAAAF,EAAA,iBACAsP,EAAAtP,EAAA,gCAEMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNgc,GAHMnc,EAAAI,SAGN,SAAAE,GAAA,SAAA6b,mDAmBA,OAnBuCvb,UAAAub,EAAA7b,GAMnC6b,EAAAtb,UAAAC,OAAA,WACIR,EAAAO,UAAAC,OAAAC,KAAAN,MAEAA,KAAA2b,IAAA/W,KAAApF,GAAAmT,MAAAjN,OAAA,aAAAmH,QAAA7M,KAAAiB,MAAA4U,UAEJ6F,EAAAtb,UAAAG,MAAA,WACIV,EAAAO,UAAAG,MAAAD,KAAAN,OAEJ0b,EAAAtb,UAAAkP,OAAA,SAAAC,GACIvP,KAAA+P,OAAA/P,KAAAU,KAAAuS,WACIjT,KAAA+P,KAAAnN,IAAA+L,EAAAqB,eAAA4L,QAAA1L,SAAAX,IAdRpO,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACgBma,EAAAtb,UAAA,YAAA,GAEjBe,YADC9B,EAAA+B,OAAAyE,EAAA6D,oBACkBgS,EAAAtb,UAAA,WAAA,GAJFsb,EAAAva,YADpBzB,GACoBgc,GAArB,CAAAhN,EAAAyD,UAAqB1Q,EAAAC,QAAAga,iVCZrB,QAAAtc,EAAA,qBACAA,EAAA,oEAEAI,GAAAqc,OACIC,QAAAtc,GAAA+D,UAEAwY,cAIA1b,OAAA,WACI2b,EAAAta,QAAAua,gBACAD,EAAAta,QAAAwa,QAAA,kHACAC,QAAAC,KAAA,0CACAC,GAAAC,OACItB,QAAA,SAAAnK,GACIsL,QAAAC,KAAA,6BAAAvL,IAEJ0L,KAAA,SAAA1L,GACIsL,QAAAC,KAAA,6BAAAvL,MAIR7Q,KAAAwc,oBAEAC,EAAA/a,QAAAyJ,gBAEIsR,EAAA/a,QAAAyJ,cAAAnL,KAAA0c,aAIRF,kBAAA,WACIC,EAAA/a,QAAAsJ,eAAAyR,EAAA/a,QAAAsJ,iBACA,IAAAoR,EAAAC,GAAAM,uBAEA,OADAR,QAAAC,KAAA,yCAAAA,GACAA,EAAAQ,OACI,KAAA,KACIR,EAAAS,aACIJ,EAAA/a,QAAAsJ,aAAApE,KAAAwV,EAAAS,eAQhBH,UAAA,SAAA5Z,GACI,IAAAga,EAAAC,OAAAja,GAEAga,GAAAA,EAAAL,EAAA/a,QAAAwJ,WACIuR,EAAA/a,QAAAwJ,SAAA4R,GAEJX,QAAAC,KAAA,6EAAAU,GAEAT,GAAAW,qBAAAC,aACIC,SACIhd,KAAA,UACAid,SAAA,OACAld,UAAA,QACAgI,KAAAwU,EAAA/a,QAAAwJ,6OC3DhB,IAAAnF,EAAA3G,EAAA,uCAEAC,EAAAD,EAAA,gDACAyG,EAAAzG,EAAA,6CAGAge,EAAA,SAAAvd,GAAA,SAAAud,mDAcA,OAdqCjd,UAAAid,EAAAvd,GAIjCud,EAAAhd,UAAAwI,QAAA,WAEI5I,KAAAsD,YAGJ8Z,EAAAhd,UAAAkD,SAAA,WACItD,KAAA2b,IAAA5G,gBAEAvV,GAAA4D,SAAAC,UAAA,SAVJlC,YADC9B,EAAA+B,OAAAyE,EAAA6D,oBACkB0T,EAAAhd,UAAA,WAAA,GAYvBgd,EAdA,CAAArX,EAAAqE,SAAa3I,EAAA2b,gBAAAA,iVCNb,IAAAC,EAAAje,EAAA,2BACAoc,EAAApc,EAAA,4CACA2a,EAAA3a,EAAA,uCACAke,EAAAle,EAAA,+BACAme,EAAAne,EAAA,sBACAoe,EAAApe,EAAA,4BACAqe,EAAAre,EAAA,8BACAuP,EAAAvP,EAAA,4BACAse,EAAAte,EAAA,oBACAue,EAAAve,EAAA,6BACAwe,EAAAxe,EAAA,8BACAye,EAAAze,EAAA,2BACA0e,EAAA1e,EAAA,yBACAyP,EAAAzP,EAAA,mBACAE,EAAAF,EAAA,iBACAuY,EAAAvY,EAAA,qBACA2e,EAAA3e,EAAA,kCACA4e,EAAA5e,EAAA,uBACAwP,EAAAxP,EAAA,gBACA6e,EAAA7e,EAAA,qBACA8e,EAAA9e,EAAA,wBAEA+e,EAAA,SAAAte,GACI,SAAAse,EAAApT,GACI,OAAAlL,EAAAS,KAAAN,KAAA+K,IAAA/K,KA8CR,OAhDiCG,UAAAge,EAAAte,GAK7Bse,EAAA/d,UAAA4L,QAAA,WACInM,EAAAO,UAAA4L,QAAA1L,KAAAN,MAEAA,KAAAiH,aAAArC,KAAA4W,EAAAC,oBAAAhW,GAAA6X,EAAAc,mBAAAtU,cAEA9J,KAAAiH,aAAArC,KAAAtF,EAAA+B,YAAAwL,QAAA0Q,EAAAc,UAAAC,UAAA5Y,OAAApG,EAAAgC,UAAAC,MACAvB,KAAAiH,aAAArC,KAAAtF,EAAA+B,YAAAwL,QAAAmR,EAAAnE,WAAAyE,UAAA5Y,OAAApG,EAAAgC,UAAAsY,OAEA5Z,KAAAiH,aAAArC,KAAAgK,EAAAkD,WAAAjF,QAAA6Q,EAAAa,SAAAD,UAAA5Y,OAAAkJ,EAAAmD,SAAAxQ,MACAvB,KAAAiH,aAAArC,KAAAgK,EAAAkD,WAAAjF,QAAA8K,EAAA6G,UAAAF,UAAA5Y,OAAAkJ,EAAAmD,SAAAkC,OACAjU,KAAAiH,aAAArC,KAAAgK,EAAAkD,WAAAjF,QAAAoR,EAAAhb,UAAAqb,UAAA5Y,OAAAkJ,EAAAmD,SAAAG,OAGAlS,KAAAiH,aAAArC,KAAAiK,EAAAmD,cAAAnF,QAAAiR,EAAApc,QAAA4c,UAAA5Y,OAAAmJ,EAAAoD,YAAAiC,QACAlU,KAAAiH,aAAArC,KAAAiK,EAAAmD,cAAAnF,QAAAqR,EAAAxc,QAAA4c,UAAA5Y,OAAAmJ,EAAAoD,YAAAC,QAKJiM,EAAA/d,UAAAsM,YAAA,WACI7M,EAAAO,UAAAsM,YAAApM,KAAAN,MAEA,IAAAye,EAAAze,KAAAiH,aAAAK,YAAAkU,EAAAC,mBAAA,MAEAzb,KAAA0e,cAAA9Z,KAAA6Z,EAAA7b,IAAA+L,EAAAqB,eAAA2O,QAAAlZ,GAAA4X,EAAAuB,cAEA5e,KAAA0e,cAAA9Z,KAAA6Z,EAAA7b,IAAA+L,EAAAqB,eAAA4L,SAAAnW,GAAA+X,EAAAqB,eAAA3U,SAEAlK,KAAA0e,cAAA9Z,KAAA6Z,EAAA7b,IAAA+L,EAAAqB,eAAA8O,WAAArZ,GAAAgY,EAAAlL,iBAEAvS,KAAA0e,cAAA9Z,KAAA6Z,EAAA7b,IAAA+L,EAAAqB,eAAA+O,UAAAtZ,GAAAkY,EAAAqB,gBAEAhf,KAAA0e,cAAA9Z,KAAA6Z,EAAA7b,IAAA+L,EAAAqB,eAAAiP,WAAAxZ,GAAAmY,EAAAR,iBAEApd,KAAA0e,cAAA9Z,KAAA6Z,EAAA7b,IAAA+L,EAAAqB,eAAAC,QAAAxK,GAAAoY,EAAAqB,cAEAlf,KAAA0e,cAAA9Z,KAAA6Z,EAAA7b,IAAA+L,EAAAqB,eAAAmP,eAAA1Z,GAAAsY,EAAAnG,sBAEJuG,EAAA/d,UAAAG,MAAA,WAGI,OAFAV,EAAAO,UAAAG,MAAAD,KAAAN,MAEAA,MAERme,EAhDA,CAgDApE,EAAArO,SAhDajK,EAAA0c,YAAAA,m+BCtBb,IAOAE,EAAA,SAAAxe,GAAA,SAAAwe,IAAA,IAAAve,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAEWF,EAAA8Q,SAAA,KAEA9Q,EAAA2Q,oBAEA3Q,EAAAqR,cAAA,EAEArR,EAAAsR,UAAA,EACAtR,EAAAsQ,QAAA,KACAtQ,EAAAwQ,WAAA,KAEAxQ,EAAA0T,cACHH,MAAA,eACAnT,KAAA,MAEAmT,MAAA,eACAnT,KAAA,MAEAmT,MAAA,iBACAnT,KAAA,MAEAmT,MAAA,cACAnT,KAAA,MAEGJ,EAAAyR,YACH8B,MAAA,kBACAnT,KAAA,IACA0R,YAAA,OAEAyB,MAAA,kBACAnT,KAAA,IACA0R,YAAA,OAEAyB,MAAA,oBACAnT,KAAA,IACA0R,YAAA,OAEAyB,MAAA,iBACAnT,KAAA,IACA0R,YAAA,OAEG9R,EAAAiZ,UAAA,GACAjZ,EAAA2Y,eAAA,EACA3Y,EAAAa,mBAAAC,MAAA,IAAAC,OAAA,KAEAf,EAAAmT,WAAA,EACAnT,EAAAsf,MAAA,EACAtf,EAAAuf,UAAA,EACAvf,EAAAwf,WAAA,IACAxf,EAAAyf,eAAA,EACAzf,EAAA0f,cAAA,GACA1f,EAAAgd,MAAA,EACAhd,EAAA2f,UAAA,EACA3f,EAAAoL,SAAA,EACApL,EAAA4f,aAAA,EACA5f,EAAA6f,aAAA,WAEH,IADA,IAAAjS,KACAjN,EAAA,EAAAA,GAAA,GAAAA,IACIiN,EAAAjN,IAAA,GAAAA,EAAA,IAEJ,OAAAiN,EALG,KAOX,OA/D+BvN,UAAAke,EAAAxe,GA+D/Bwe,EA/DA,CAPAjf,EAAA,qBAsEA4D,WA/DavB,EAAA4c,UAAAA,+LCLb,IAAAhf,EAAAD,EAAA,gDACAsP,EAAAtP,EAAA,gCACAE,EAAAF,EAAA,iBACAyG,EAAAzG,EAAA,6CACAuP,EAAAvP,EAAA,4BAEMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNkgB,GAHMrgB,EAAAI,SAGN,SAAAE,GAAA,SAAA+f,mDAqBA,OArBsCzf,UAAAyf,EAAA/f,GAMlC+f,EAAAxf,UAAAC,OAAA,WACIR,EAAAO,UAAAC,OAAAC,KAAAN,OAGJ4f,EAAAxf,UAAAG,MAAA,WACIV,EAAAO,UAAAG,MAAAD,KAAAN,MAEAA,KAAA2b,IAAA/W,KAAApF,GAAAmT,MAAAjN,OAAA,YAAAmH,QAAA7M,KAAAiB,MAAA4U,SAEA7V,KAAA+P,KAAAnN,IAAA+L,EAAAqB,eAAA2O,OAAAzO,YAGJ0P,EAAAxf,UAAAkP,OAAA,SAAAC,KAhBApO,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACeqe,EAAAxf,UAAA,YAAA,GAEhBe,YADC9B,EAAA+B,OAAAyE,EAAA6D,oBACkBkW,EAAAxf,UAAA,WAAA,GAJFwf,EAAAze,YADpBzB,GACoBkgB,GAArB,CAAAlR,EAAAyD,UAAqB1Q,EAAAC,QAAAke,wYCTrB,IAAA5F,EAAA5a,EAAA,gCAGAygB,EAAAzgB,EAAA,aAEMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNogB,GAHMvgB,EAAAI,SAGN,SAAAE,GAAA,SAAAigB,mDAeA,OAfsC3f,UAAA2f,EAAAjgB,GAIlCigB,EAAA1f,UAAAC,OAAA,WAEIL,KAAAqM,QAAAwT,EAAAne,QAAAoJ,gBAAAuB,SAIJyT,EAAA1f,UAAAG,MAAA,WACIP,KAAAqM,SAXayT,EAAA3e,YADpBzB,GACoBogB,GAArB,CAAA9F,EAAAc,UAAqBrZ,EAAAC,QAAAoe,yOCTrB,SAAA9P,GAEIA,EAAA,MAAA,QAEAA,EAAA,OAAA,SAEAA,EAAA,SAAA,oBAEAA,EAAA,QAAA,UAEAA,EAAA,SAAA,WAEAA,EAAA,MAAA,QAEAA,EAAA,aAAA,eAdJ,CAeAvO,EAAAuO,iBAAAvO,EAAAuO,oBAEA,SAAAG,GACIA,EAAA,QAAA,UACAA,EAAA,WAAA,aAFJ,CAGA1O,EAAA0O,iBAAA1O,EAAA0O,oMCrBA,IAEAiO,EAAA,SAAAve,GAAA,SAAAue,IAAA,IAAAte,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YACIF,EAAAsc,KAAA,kCACJ,OAFuCjc,UAAAie,EAAAve,GAEvCue,EAFA,CAFAhf,EAAA,4CAIA2gB,eAFate,EAAA2c,kBAAAA,0NCFb,IAGAG,EAAA,SAAA1e,GAAA,SAAA0e,mDAwBA,OAxB8Bpe,UAAAoe,EAAA1e,GACnB0e,EAAAne,UAAAyR,aAAA,WACH,OAAArS,GAAAwgB,SAEGzB,EAAAne,UAAAgT,UAAA,SAAA6M,GACH,OAAA,IAAA/M,QAAA,SAAAgN,EAAAC,GACI3gB,GAAA4gB,OAAAC,QAAAJ,EAAAzgB,GAAA8gB,YAAA,SAAAC,EAAA3O,GACI,GAAA2O,EAAS,MAAAA,EACTL,EAAAtO,QAKL2M,EAAAne,UAAA8Q,WAAA,WACH,OAAAsP,KAAAC,MAAAD,KAAAE,WAGGnC,EAAAne,UAAAugB,aAAA,SAAA/S,GACH,OAAA4S,KAAAI,MAAAJ,KAAAE,SAAA9S,IAGG2Q,EAAAne,UAAAqR,YAAA,WAAY,IAAA,IAAA9K,KAAAoC,EAAA,EAAAA,EAAA9I,UAAAsC,OAAAwG,IAAApC,EAAAoC,GAAA9I,UAAA8I,GACf,OAAApC,EAAA3G,KAAA2gB,aAAAha,EAAApE,UAERgc,EAxBA,CAHAnf,EAAA,eA2BA4D,WAxBavB,EAAA8c,SAAAA,uLCHb,IAEAvM,EAAA,SAAAnS,GAAA,SAAAmS,mDAIA,OAJkC7R,UAAA6R,EAAAnS,GAC9BiE,OAAAC,eAAAiO,EAAA5R,UAAA,mBAAAwC,IAAA,WACI,MAAA,4CAERoP,EAJA,CAFA5S,EAAA,gCAMA4E,kBAJavC,EAAAuQ,aAAAA,EAWb,SAAAC,GACIA,EAAA,OAAA,SACAA,EAAA,MAAA,QAFJ,CAGAxQ,EAAAwQ,cAAAxQ,EAAAwQ,gOChBA,IAAAlM,EAAA3G,EAAA,uCACAC,EAAAD,EAAA,gDAEAygB,EAAAzgB,EAAA,aACA8P,EAAA9P,EAAA,gBACAuP,EAAAvP,EAAA,4BACAE,EAAAF,EAAA,iBACAyhB,EAAAzhB,EAAA,qBACAyP,EAAAzP,EAAA,mBAIA8f,EAAA,SAAArf,GAAA,SAAAqf,mDAsDA,OAtDkC/e,UAAA+e,EAAArf,GAU9Bqf,EAAA9e,UAAAwI,QAAA,SAAAkY,GAEI,OAAAA,GACI,KAAAnS,EAAAwB,eAAAC,QACIpQ,KAAAoQ,UACA,MACJ,KAAAzB,EAAAwB,eAAAG,WACItQ,KAAAsQ,eAKZ4O,EAAA9e,UAAA2gB,UAAA,WACI/gB,KAAA4Y,KAAA3W,KAAA,SACAjC,KAAAU,KAAAoc,QACA9c,KAAAghB,UAAAnR,aAAArQ,GAAAyhB,OAAAC,OAAA,UAAAnE,OAAA/c,KAAAU,KAAAoc,QAEJoC,EAAA9e,UAAAgQ,QAAA,WACIpQ,KAAA+gB,aAGJ7B,EAAA9e,UAAAkQ,WAAA,WACItQ,KAAAU,KAAAuS,WAAA,EACAjT,KAAAmhB,UAAAC,QAAA,EACAphB,KAAAmhB,UAAAtR,aAAAgR,EAAAnf,SAAAob,MAAAoE,OAAA,GAAAnE,OAAA/c,KAAAU,KAAAoc,OACA9c,KAAAqhB,iBAEAxB,EAAAne,QAAAyJ,eACI0U,EAAAne,QAAAyJ,cAAAnL,KAAAU,KAAAoc,OAEJ9c,KAAAU,KAAA+e,UAAAzf,KAAAU,KAAAoc,MACA9c,KAAAU,KAAAoc,MAAA,EACA9c,KAAAghB,UAAAnR,aAAArQ,GAAAyhB,OAAAC,OAAA,UAAAnE,OAAA/c,KAAAU,KAAAoc,QAGJoC,EAAA9e,UAAAihB,eAAA,WAGIrhB,KAAAU,KAAA+P,kBAAAzQ,KAAAU,KAAA+P,iBAAAlO,OAAA,GACIvC,KAAAU,KAAA+P,iBAAA5J,QAAA,SAAA0J,GACIA,EAAAV,aAAAX,EAAAxN,SAAA8N,QAAA,KAhDZrO,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACgB2d,EAAA9e,UAAA,YAAA,GAEjBe,YADC9B,EAAA+B,OAAAyN,EAAAmD,aAAAnD,EAAAoD,YAAAC,QACmBgN,EAAA9e,UAAA,YAAA,GAEpBe,YADC9B,EAAA+B,OAAA5B,GAAAmT,KAAA,UACmBuM,EAAA9e,UAAA,iBAAA,GAEpBe,YADC9B,EAAA+B,OAAA5B,GAAAmT,KAAA,UACmBuM,EAAA9e,UAAA,iBAAA,GA8CxB8e,EAtDA,CAAAnZ,EAAAqE,SAAa3I,EAAAyd,aAAAA,qbCZb,IAEA7d,EAAA,SAAAxB,GAAA,SAAAwB,mDAIA,OAJgClB,UAAAkB,EAAAxB,GAC5BiE,OAAAC,eAAA1C,EAAAjB,UAAA,mBAAAwC,IAAA,WACI,MAAA,0CAERvB,EAJA,CAFAjC,EAAA,gCAMA4E,kBAJavC,EAAAJ,WAAAA,EAWb,SAAAC,GACIA,EAAA,KAAA,OACAA,EAAA,MAAA,QAFJ,CAGAG,EAAAH,YAAAG,EAAAH,wNChBA,IAAAjC,EAAAD,EAAA,gDACAsP,EAAAtP,EAAA,gCACAuP,EAAAvP,EAAA,4BACAE,EAAAF,EAAA,iBAGMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGN2hB,EAAA,SAAAzhB,GADA,SAAAyhB,IAAA,IAAAxhB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAKIF,EAAAgd,MAAA,OAkBJ,OAtBuC3c,UAAAmhB,EAAAzhB,GAMnCyhB,EAAAlhB,UAAAC,OAAA,WACIR,EAAAO,UAAAC,OAAAC,KAAAN,OAGJshB,EAAAlhB,UAAAG,MAAA,WACIV,EAAAO,UAAAG,MAAAD,KAAAN,OAGJshB,EAAAlhB,UAAAmhB,iBAAA,WACIvhB,KAAA+P,KAAAnN,IAAA+L,EAAAqB,eAAA+O,SAAA7O,YAGJoR,EAAAlhB,UAAAohB,kBAAA,WACIxhB,KAAA+P,KAAAnN,IAAA+L,EAAAqB,eAAAiP,UAAA/O,YAjBJ/O,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACa+f,EAAAlhB,UAAA,YAAA,GAEde,YADCxB,EAAAH,GAAAyhB,QACqBK,EAAAlhB,UAAA,aAAA,GAJLkhB,EAAAngB,YADpBzB,GACoB4hB,GAArB,CAAA5S,EAAAyD,SAAqB1Q,EAAAC,QAAA4f,mVCTrB,IAAAzB,EAAAzgB,EAAA,YACA0e,EAAA1e,EAAA,wBAEAqiB,EAAAriB,EAAA,yBACA8e,EAAA9e,EAAA,uBAEMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGN+hB,EAAA,SAAA7hB,GADA,SAAA6hB,IAAA,IAAA5hB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAKIF,EAAA6hB,WAEA7hB,EAAA8hB,SAEA9hB,EAAAwC,UAEAxC,EAAA2C,IAAA,OAmCJ,OA7CyCtC,UAAAuhB,EAAA7hB,GAarC6hB,EAAAthB,UAAAC,OAAA,WAEIwf,EAAAne,QAAAE,SACAie,EAAAne,QAAAE,QAAA,EAGAie,EAAAne,QAAAoJ,kBACItL,GAAAqiB,KAAAC,mBAAA9hB,KAAAiB,MACA4e,EAAAne,QAAAoJ,gBAAA9K,MAEJA,KAAAqM,QAAA,IAAAoV,EAAAtD,YAAAne,MACAA,KAAA+hB,aACA/hB,KAAAgiB,cAEJN,EAAAthB,UAAA2hB,WAAA,WACI/hB,KAAA2hB,QAAA9a,QAAA,SAAAob,GACInE,EAAApc,QAAA4c,SAAA4D,UAAAD,EAAAxd,KAAAwd,MAGRP,EAAAthB,UAAA4hB,UAAA,WACIhiB,KAAA4hB,MAAA/a,QAAA,SAAAsb,GACIjE,EAAAxc,QAAA4c,SAAAzb,SAAAsf,EAAA1d,KAAA0d,KAEJjE,EAAAxc,QAAA4c,SAAA7b,IAAAzC,KAAAyC,IACAyb,EAAAxc,QAAA4c,SAAAhc,OAAAtC,KAAAsC,OACA4b,EAAAxc,QAAA4c,SAAA9b,WAGJkf,EAAAthB,UAAAG,MAAA,aArCAY,YADCxB,GAAAH,GAAA0U,UAC8BwN,EAAAthB,UAAA,eAAA,GAE/Be,YADCxB,GAAAH,GAAA4iB,aAC+BV,EAAAthB,UAAA,aAAA,GAEhCe,YADCxB,GAAAH,GAAA6iB,eACkCX,EAAAthB,UAAA,cAAA,GAEnCe,YADCxB,EAAAH,GAAA6iB,cACyBX,EAAAthB,UAAA,WAAA,GAVTshB,EAAAvgB,YADpBzB,GACoBgiB,GAArB,CAAAliB,GAAA+D,WAAqB9B,EAAAC,QAAAggB,6RCTrB,IAKAY,EAWAC,EASAC,EAzBAC,EAAArjB,EAAA,WACAoM,EAAApM,EAAA,yBACAC,EAAAD,EAAA,yCACA6N,EAAA7N,EAAA,gBAEA,SAAAkjB,GAGIA,EAAAA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,OAAA,GAAA,UATJ,CAUAA,EAAA7gB,EAAA6gB,uBAAA7gB,EAAA6gB,0BACA,SAAAC,GAGIA,EAAAA,EAAA,IAAA,GAAA,MAEAA,EAAAA,EAAA,KAAA,GAAA,OAEAA,EAAAA,EAAA,KAAA,GAAA,OAPJ,CAQAA,EAAA9gB,EAAA8gB,wBAAA9gB,EAAA8gB,2BACA,SAAAC,GAGIA,EAAAA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,OAAA,GAAA,SANJ,CAOAA,EAAA/gB,EAAA+gB,oBAAA/gB,EAAA+gB,uBAmCA,IAAAE,EAAA,SAAA7iB,GAAA,SAAA6iB,mDAGA,OAH2CviB,UAAAuiB,EAAA7iB,GAEvCiE,OAAAC,eAAA2e,EAAAtiB,UAAA,mBAAAwC,IAAA,WAAA,MAAA,qDACJ8f,EAHA,CAGAlX,EAAAxH,kBAHavC,EAAAihB,sBAAAA,EAgFb,IAAAxb,EAAA,WAAA,SAAAA,IAOclH,KAAA2iB,mBAAA,IAAAF,EAAAG,MAGA5iB,KAAA6iB,eAAA,IAAAxc,IAkNd,OAhMWa,EAAA9G,UAAA8G,KAAA,WAEHlH,KAAA4N,KAAA,EACA5N,KAAA8iB,WAAAP,EAAAQ,KACA/iB,KAAAgjB,cAAA,EAEAhjB,KAAAijB,iBAAAX,EAAAY,UACAljB,KAAAmjB,cAAAX,EAAAY,QAEGlc,EAAA9G,UAAAwE,KAAA,SAAA1E,GACHF,KAAAgH,SAAA9G,GAGGgH,EAAA9G,UAAAqI,IAAA,SAAA3F,GAMH,OAHA9C,KAAAqjB,QAAApW,EAAAK,UAAAgW,YAAAxgB,EAAA9C,KAAAgH,UAAA,sFAAAhH,KAAAgH,SAAA,wBAAAlE,GACA9C,KAAAujB,iBACAvjB,KAAA2iB,mBAAA/b,KAAA9D,GACA9C,MAEGkH,EAAA9G,UAAAojB,QAAA,SAAA9V,GAAP,IAAA5N,EAAAE,KAOI,OALA0N,GAAAA,EAAAnL,OAAA,GACImL,EAAA7G,QAAA,SAAA4c,GACI3jB,EAAA2I,IAAAgb,KAGRzjB,MAEGkH,EAAA9G,UAAAsjB,OAAA,SAAA5gB,GAIH,OAFA9C,KAAAujB,iBACAvjB,KAAA2jB,eAAA7gB,GACA9C,MAGGkH,EAAA9G,UAAAwjB,WAAA,SAAAlW,GAAP,IAAA5N,EAAAE,KAOI,OALA0N,GAAAA,EAAAnL,OAAA,GACImL,EAAA7G,QAAA,SAAA4c,GACI3jB,EAAA4jB,OAAAD,KAGRzjB,MAGJ8D,OAAAC,eAAAmD,EAAA9G,UAAA,SAAAwC,IAAA,WAEI,OAAA5C,KAAAsH,+CAMJxD,OAAAC,eAAAmD,EAAA9G,UAAA,iBAAAwC,IAAA,WAEI,OAAA5C,KAAAujB,gDAGGrc,EAAA9G,UAAAkH,YAAA,WAGH,GAAAtH,KAAA2iB,mBAAA/U,KAAA,EAAA,CAEI,IAAAiW,EAAA7jB,KAAA2iB,mBAAAmB,MAEA,OADA9jB,KAAA6iB,eAAApa,IAAAob,GACAA,EAGJ,IAAAE,EAAA,EAGA,GAAA/jB,KAAA4N,KAAA,EAAA,CAEI,GAAA,GAAA5N,KAAAgkB,cAeI,OAPAhkB,KAAAqjB,OAAArjB,KAAAijB,kBAAAX,EAAAY,UAAA,oDAAAljB,KAAAgH,UAGAhH,KAAAijB,kBAAAX,EAAA2B,SAEI9H,QAAA+H,KAAA,6DAAAlkB,KAAAgH,UAEJ,KAZA+c,EAAA/jB,KAAA4N,UAoBAmW,EAFJ,GAAA/jB,KAAAgkB,eAAAhkB,KAAAmjB,eAAAX,EAAA2B,UAEI,EAIAnkB,KAAAgkB,cAIR,GAAAD,EAAA,EAAA,CAEI/jB,KAAAqjB,OAAA,MAAArjB,KAAAokB,iBAAA,mBAAApkB,KAAAgH,SAAA,8BAEA,IAAA,IAAAkC,EAAA,EAAAA,EAAA6a,EAAA7a,IAAA,CAEI,IAAAmb,EAAArkB,KAAAokB,iBAAA9c,YAAAtH,KAAAgH,UACAhH,KAAAyI,IAAA4b,GAEJ,OAAArkB,KAAAsH,cAIJ,OAAA,MAGGJ,EAAA9G,UAAAqJ,eAAA,SAAA3G,GAEH9C,KAAA6iB,eAAAlgB,IAAAG,KAMKA,EAAA4H,UACD1K,KAAA6iB,eAAAle,OAAA7B,GACA9C,KAAA2iB,mBAAA/b,KAAA9D,KAIDoE,EAAA9G,UAAAmK,MAAA,WAEHvK,KAAA2iB,mBAAAtT,QACArP,KAAA6iB,eAAA,IAAAxc,IACArG,KAAAujB,eAAA,GAGJzf,OAAAC,eAAAmD,EAAA9G,UAAA,aAAAwC,IAAA,WAEI,OAAA5C,KAAA2iB,mBAAA/U,sCAIG1G,EAAA9G,UAAAsK,QAAA,WAEH1K,KAAAuK,QACAvK,KAAA4N,KAAA,GAGG1G,EAAA9G,UAAAoK,OAAA,WAEHxK,KAAAsJ,UAAA,GAGGpC,EAAA9G,UAAAqK,QAAA,WAEHzK,KAAAsJ,UAAA,GAUMpC,EAAA9G,UAAAujB,eAAA,SAAA7gB,GAEN9C,KAAAqjB,OAAAvgB,GAAA9C,KAAAgH,SAAA,uFAAAhH,KAAAgH,SAAAoB,WAAA,wBAAAtF,EAAAsF,YACApI,KAAA6iB,eAAAlgB,IAAAG,GAEI9C,KAAA6iB,eAAAle,OAAA7B,GAIA9C,KAAA2iB,mBAAAmB,OAIE5c,EAAA9G,UAAAijB,OAAA,SAAAiB,EAAApH,GAEN,GAAAoH,EAEI,MAAA,IAAAjc,MAAA6U,IArNR/b,YADC9B,EAAA+B,OAAAshB,IAC0Cxb,EAAA9G,UAAA,wBAAA,GAwN/C8G,EA5NA,GAAazF,EAAAyF,KAAAA,kTCnJb,IAGAqd,EAAA,SAAA1kB,GAAA,SAAA0kB,IAAA,IAAAzkB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YACWF,EAAA8B,QAAA,IAgBX,OAjB2CzB,UAAAokB,EAAA1kB,GAI7B0kB,EAAAnkB,UAAAyB,cAAA,WACN7B,KAAAwkB,UAAA,IAAAxiB,KAEJuiB,EAAAnkB,UAAAqkB,UAAA,SAAAviB,GACI,OAAAlC,KAAAwkB,UAAA7hB,IAAAT,IAEJqiB,EAAAnkB,UAAAskB,UAAA,SAAAxiB,GACI,OAAAlC,KAAAwkB,UAAA5hB,IAAAV,IAEJqiB,EAAAnkB,UAAA8hB,UAAA,SAAAhgB,EAAAY,GACI9C,KAAAwkB,UAAAzhB,IAAAb,EAAAY,IAGRyhB,EAjBA,CAHAnlB,EAAA,eAoBA4D,kNCjBA,IAAA2hB,EAAA,WAKC,SAAAA,EAAAzkB,EAAA+hB,GACCjiB,KAAAE,KAAAA,EACAF,KAAAiiB,OAAAA,EACAjiB,KAAA4kB,SAAA,IAAAplB,GAAAqlB,SAAA3kB,GAwBF,OAnBCykB,EAAAvkB,UAAAwC,IAAA,WACC,IAAA3B,EAAA,KAOG,OALIA,EADJjB,KAAA4kB,SAAAhX,OAAA,EACI5N,KAAA4kB,SAAAhiB,MAEApD,GAAAoU,YAAA5T,KAAAiiB,SAEPb,QAAA,EACGngB,GAMJ0jB,EAAAvkB,UAAAyQ,IAAA,SAAA5P,GACCA,EAAAmgB,QAAA,EACAphB,KAAA4kB,SAAAE,IAAA7jB,IAGF0jB,EAhCA,+KCAA,IAAArX,EAAA,WAAA,SAAAA,KA2FA,OAnFkBA,EAAAgW,YAAA,SAAApjB,EAAAE,GAEV,OAAAF,aAAAE,GAiBUkN,EAAAC,iBAAA,SAAAH,GACV,IAAAmG,EAAAvT,KACA,IAAAA,KAAA+kB,iBAAA3X,GAAA,CACI,IAAAC,OAAA,EAEAA,KAQA,IANA,IAKA2X,EALAC,KAGA7kB,EAAAgN,EAAA8X,UAKI9kB,IAEI4kB,EAAA5kB,EAAAoJ,eAEA1F,QAEAkhB,EAAAvgB,KAAA0gB,WAAA,WACI9X,EAAAzG,KAAAoe,GACAC,EAAAre,KAAAoe,GAEAC,EAAApe,QAAA,SAAA3G,GACIqT,EAAA6R,aAAAllB,EAAA8kB,MAGR5kB,EAAAA,EAAA8kB,UAOZ,IAAAve,EAAA3G,KAAAqlB,aAAAziB,IAAAwK,EAAA5D,aACA,OAAA8b,MAAAC,KAAA5e,IAKU2G,EAAA8X,aAAA,SAAAI,EAAAplB,GACV,IAAAqlB,EACAzlB,KAAAqlB,aAAA1iB,IAAA6iB,GACIC,EAAAzlB,KAAAqlB,aAAAziB,IAAA4iB,IAEAC,EAAA,IAAApf,IACArG,KAAAqlB,aAAAtiB,IAAAyiB,EAAAC,IAGJA,EAAAhd,IAAArI,IAMUkN,EAAAyX,iBAAA,SAAA3X,GACV,QAAApN,KAAAqlB,aAAA1iB,IAAAyK,EAAA5D,cAnFW8D,EAAA+X,aAAA,IAAArjB,IAyFnBsL,EA3FA,GAAa7L,EAAA6L,UAAAA,uGCHb,QAAAlO,EAAA,qBACAA,EAAA,oEAEAI,GAAAqc,OACIC,QAAAtc,GAAA+D,UAEAwY,YACI2J,eAAAlmB,GAAAmT,KACAgT,WAAAnmB,GAAAmT,MAKJtS,OAAA,WAEIL,KAAA4lB,SAAA,EACA5lB,KAAA6lB,WAAA,EAEA7J,EAAAta,QAAAua,eACII,GAAAyJ,iBACIC,iBAAA,EACA/K,QAAA,aAGAuB,KAAA,gBASZhc,MAAA,WAGIyb,EAAAta,QAAAua,eAEII,GAAAW,qBAAAC,aACIC,SACIhd,KAAA,UACAid,SAAA,QACAld,UAAA,UACAgI,MACIrH,MAAAZ,KAAA0lB,eAAA9kB,MACAC,OAAAb,KAAA0lB,eAAA7kB,YAOpBmlB,WAAA,SAAAC,GAEI,IAAAC,EAAAD,EAAA7Y,OACA+Y,EAAAF,EAAA7Y,OAAAgZ,eAAA,UACAC,EAAAH,EAAAtlB,MAAAulB,EAAAvlB,MAAA,GAQA,OALAZ,KAAA4lB,SAAA,EACI5lB,KAAA4lB,UAAA,EAEA5lB,KAAA4lB,SAAA,EAEJ5lB,KAAA4lB,UACI,KAAA,EACIO,EAAAlN,UAAAzZ,GAAA8mB,OAAA,KAAA9mB,GAAA+mB,IAAAF,EAAA,KACArK,EAAAta,QAAAua,eAGII,GAAAW,qBAAAC,aACIC,SACIhd,KAAA,UACAid,SAAA,SACAld,UAAA,SACAgI,KAAA,MAIZ,MACJ,KAAA,EAEI,GADAke,EAAAlN,UAAAzZ,GAAA8mB,OAAA,KAAA9mB,GAAA+mB,GAAAF,EAAA,KACArK,EAAAta,QAAAua,cAAA,CACI,IAAAuK,OAAA,EACA/J,EAAA/a,QAAAsJ,cAAAyR,EAAA/a,QAAAsJ,aAAAzI,OAAA,GACIikB,EAAA/J,EAAA/a,QAAAsJ,aAAAhL,KAAA6lB,aAOI7lB,KAAA6lB,YAAApJ,EAAA/a,QAAAsJ,aAAAzI,OAAA,EACIvC,KAAA6lB,WAAA,EAEA7lB,KAAA6lB,YAAA,GAPJpJ,EAAA/a,QAAAsJ,gBACAhL,KAAA6lB,WAAA,GAWJ7lB,KAAAymB,WAAA,mDAAA,0DAGJD,GAAA,IAAAA,EACInK,GAAAqK,cACI7J,YAAA2J,EACAxL,QAAA,SAAAnK,KAGA0L,KAAA,SAAAgE,OAKJiG,EAAA,GAIJnK,GAAAW,qBAAAC,aACIC,SACIhd,KAAA,UACAid,SAAA,SACAld,UAAA,QACAgI,KAAAue,QAWxBG,SAAA,WACInnB,GAAA4D,SAAAC,UAAA,UAGJujB,SAAA,WACI,GAAA5K,EAAAta,QAAAua,cAAA,CAEAI,GAAAwK,iBACIC,MAAA,mDACAC,SAAA,wCACA/L,QAAA,SAAAnK,GAGI,GAAAA,EAAA7F,cAAA,KAAA6F,EAAA7F,cAKI,GAAA6F,EAAA7F,aAAAzI,OAAA,EAGI,IAFA,IAAAykB,GAAA,EAEAvmB,EAAA,EAAAA,EAAAoQ,EAAA7F,aAAAzI,OAAA9B,IAAA,CACI,IAAA,IAAAqN,EAAA,EAAAA,EAAA2O,EAAA/a,QAAAsJ,aAAAzI,OAAAuL,IAEI,GAAA+C,EAAA7F,aAAAvK,KAAAgc,EAAA/a,QAAAsJ,aAAA8C,GAAA,CACIkZ,GAAA,EACA,MAGRA,GAEIvK,EAAA/a,QAAAsJ,aAAApE,KAAAiK,EAAA7F,aAAAvK,YAMpB8b,KAAA,SAAA1L,SAOR4V,WAAA,SAAAK,EAAAG,GACI,IAAAjnB,KAAA2lB,WAAAvE,OAAA,CACIphB,KAAA2lB,WAAAvE,QAAA,EACA,IAAA8F,EAAAlnB,KAAA2lB,WAAA9V,aAAA,cACAqX,GACIA,EAAAC,QAAAL,EAAAG,mOCvLhB,IAAAlhB,EAAA3G,EAAA,uCACAC,EAAAD,EAAA,gDAEAE,EAAAF,EAAA,iBAGA4f,EAAA,SAAAnf,GAAA,SAAAmf,mDA2BA,OA3BoC7e,UAAA6e,EAAAnf,GAMhCmf,EAAA5e,UAAAwI,QAAA,WAGI5I,KAAAonB,UAGJpI,EAAA5e,UAAAgnB,OAAA,WAEIpnB,KAAAmhB,UAAAC,QAAA,EACAphB,KAAAqnB,kBACArnB,KAAAU,KAAAuS,WAAA,GAGJ+L,EAAA5e,UAAAinB,gBAAA,WAAA,IAAAvnB,EAAAE,KACIA,KAAAU,KAAA+P,kBAAAzQ,KAAAU,KAAA+P,iBAAAlO,OAAA,GACIvC,KAAAU,KAAA+P,iBAAA5J,QAAA,SAAA0J,GACIzQ,EAAAY,KAAAkQ,SAAAC,IAAAN,KAGRvQ,KAAAU,KAAA+P,qBAvBJtP,YADC9B,EAAA+B,OAAA5B,GAAAmT,KAAA,UACmBqM,EAAA5e,UAAA,iBAAA,GAEpBe,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACgByd,EAAA5e,UAAA,YAAA,GAuBrB4e,EA3BA,CAAAjZ,EAAAqE,SAAa3I,EAAAud,eAAAA,kTCNb,IAAAxT,EAAApM,EAAA,eACAkoB,EAAAloB,EAAA,YAOAqc,EAAA,SAAA5b,GAAA,SAAA4b,mDAEA,OAFwCtb,UAAAsb,EAAA5b,GACpCiE,OAAAC,eAAA0X,EAAA,mBAAA7Y,IAAA,WAAA,MAAA,kDACJ6Y,EAFA,CAEAjQ,EAAAxH,kBAFavC,EAAAga,mBAAAA,EAGb,IAAAsE,EAAA,WAAA,SAAAA,IAEI/f,KAAAunB,YAAA,IAAAvlB,IACAhC,KAAAoc,KAAA,2BA2BJ,OAzBW2D,EAAA3f,UAAAwC,IAAA,SAAA4kB,GAEH,GAAAxnB,KAAAunB,YAAA5kB,IAAA6kB,GAEI,OAAAxnB,KAAAunB,YAAA3kB,IAAA4kB,GAGA,IAAAC,EAAA,IAAAH,EAAAI,OAOA,MALA,iBAAAF,IAA6BC,EAAAhjB,KAAA+iB,GAI7BxnB,KAAAunB,YAAAxkB,IAAAykB,EAAAC,GACAA,GAID1H,EAAA3f,UAAAuE,OAAA,SAAA6iB,GAEH,GAAAxnB,KAAAunB,YAAA5kB,IAAA6kB,GAEI,OAAAxnB,KAAAunB,YAAA5iB,OAAA6iB,IAGZzH,EA9BA,GAAate,EAAAse,cAAAA,wMCXb,IAUA4H,EAAA,SAAA9nB,GAAA,SAAA8nB,mDAEA,OAFiCxnB,UAAAwnB,EAAA9nB,GAC7BiE,OAAAC,eAAA4jB,EAAA,mBAAA/kB,IAAA,WAAA,MAAA,2CACJ+kB,EAFA,CAVAvoB,EAAA,eAYA4E,kBAFavC,EAAAkmB,YAAAA,EAIb,IAAAD,EAAA,WAAA,SAAAA,IAGW1nB,KAAA4nB,aACA5nB,KAAA6nB,iBAwDX,OAtDWH,EAAAtnB,UAAA8P,SAAA,WAAS,IAAA,IAAAxI,KAAAqB,EAAA,EAAAA,EAAA9I,UAAAsC,OAAAwG,IAAArB,EAAAqB,GAAA9I,UAAA8I,GACZ,IAAAwK,EAAAvT,KAEAuT,EAAAqU,WAAA,GAAArU,EAAAqU,UAAArlB,QACIvC,KAAA4nB,UAAA/gB,QAAA,SAAAihB,GACIA,EAAA/nB,WAAA,GAAAwT,GAAAwU,OAAArgB,MAIR6L,EAAAsU,eAAA,GAAAtU,EAAAsU,cAAAtlB,QACIvC,KAAA4nB,UAAA/gB,QAAA,SAAAihB,GACIA,EAAA/nB,WAAA,GAAAwT,GAAAwU,OAAArgB,MAGR1H,KAAA6nB,cAAAtlB,OAAA,GAEGmlB,EAAAtnB,UAAAwJ,YAAA,SAAAoe,GACHhoB,KAAA4nB,UAAA5nB,KAAAioB,UAAAjoB,KAAA4nB,UAAAI,IAEGN,EAAAtnB,UAAA8nB,gBAAA,SAAAF,GACHhoB,KAAA6nB,cAAA7nB,KAAAioB,UAAAjoB,KAAA6nB,cAAAG,IAGGN,EAAAtnB,UAAA+nB,mBAAA,WACHnoB,KAAA4nB,UAAArlB,OAAA,EACAvC,KAAA6nB,cAAAtlB,OAAA,GAGImlB,EAAAtnB,UAAA6nB,UAAA,SAAAG,EAAAJ,GAGJ,GAAAI,EAAA,CAGI,IADA,IAAAC,GAAA,EACA5nB,EAAA,EAAAA,EAAA2nB,EAAA7lB,OAAA9B,IAEI,GAAA2nB,EAAA3nB,KAAAunB,EAAA,CACIK,GAAA,EACA,MAGRA,GAEID,EAAAxhB,KAAAohB,GAGR,OAAAI,GAEGV,EAAAtnB,UAAAkoB,SAAA,WAIH,UAERZ,EA5DA,GAAajmB,EAAAimB,OAAAA,0LCdb,IAAA1kB,EAAA,WAII,SAAAA,IACI,IAAAulB,EAAAvoB,KAAAwJ,YAEA,GAAA+e,EAAA,CAGA,GAAAvlB,EAAAwlB,SAAA7lB,IAAA4lB,GACI,MAAA,IAAAlgB,MAAArI,KAAA,2DAEAgD,EAAAwlB,SAAAzlB,IAAAwlB,EAAAvoB,MACAA,KAAA6B,iBAoCZ,OAjCcmB,EAAA5C,UAAAyB,cAAA,aAGViC,OAAAC,eAAAf,EAAA,YAAAJ,IAAA,WACI,OAAAI,EAAAylB,oBAAAzoB,uCAGUgD,EAAA0lB,gBAAA,SAAAH,GACVvlB,EAAAwlB,SAAA7lB,IAAA4lB,KACIvlB,EAAAwlB,SAAA5lB,IAAA2lB,GAAAhN,YACAvY,EAAAwlB,SAAA7jB,OAAA4jB,KAIMvlB,EAAAylB,oBAAA,SAAAF,GAA+B,IAAA,IACzC3T,EADyClN,KAAAqB,EAAA,EAAAA,EAAA9I,UAAAsC,OAAAwG,IAAArB,EAAAqB,EAAA,GAAA9I,UAAA8I,GAEzC,OAAA/F,EAAAwlB,SAAA7lB,IAAA4lB,KACI3T,EAAA5R,EAAAwlB,SAAA5lB,IAAA2lB,IAEI3T,IAGRA,EAAA,IAAA2T,EAAA3jB,KAAA7E,MAAAwoB,QAAA,GAAAR,OAAArgB,gBAEA1E,GACIA,EAAAwlB,SAAAzlB,IAAAwlB,EAAA3T,GAEJA,IAGM5R,EAAA5C,UAAAmb,UAAA,aA7CKvY,EAAAwlB,SAAA,IAAAxmB,IAgDnBgB,EAlDA,GAAavB,EAAAuB,UAAAA,0JCeb,IAAA2lB,EAAA,WAGI,SAAAA,EAAA7lB,EAAAkG,QAAsB,IAAAA,IAAAA,EAAA,MAClBhJ,KAAAuF,OAAAzC,EACA9C,KAAA4oB,MAAA5f,EAcR,OAZIlF,OAAAC,eAAA4kB,EAAAvoB,UAAA,SAGAwC,IAAA,WACI,OAAA5C,KAAAuF,QAJJxC,IAAA,SAAAD,GACI9C,KAAAuF,OAAAzC,mCAKJgB,OAAAC,eAAA4kB,EAAAvoB,UAAA,QAGAwC,IAAA,WACI,OAAA5C,KAAA4oB,OAJJ7lB,IAAA,SAAAiG,GACIhJ,KAAA4oB,MAAA5f,mCAKR2f,EAnBA,GAAalnB,EAAAknB,KAAAA,EAqBb,IAAA/F,EAAA,WAGI,SAAAA,IADQ5iB,KAAA6oB,MAAA,EAEJ7oB,KAAA8oB,QAAA,IAAAH,EAAA,MAuDR,OArDI/F,EAAAxiB,UAAA2oB,IAAA,WACI,OAAA,IAAA/oB,KAAA6oB,MACI,KAEJ7oB,KAAA8oB,QAAA9f,KAAAlG,OASJ8f,EAAAxiB,UAAAwG,KAAA,SAAA6c,GACI,IAAAuF,EAAA,IAAAL,EAAAlF,GACAuF,EAAAhgB,KAAAhJ,KAAA8oB,QAAA9f,KACAhJ,KAAA8oB,QAAA9f,KAAAggB,EACAhpB,KAAA6oB,SAQJjG,EAAAxiB,UAAA0jB,IAAA,WACI,GAAA,IAAA9jB,KAAA6oB,MACI,OAAA,KAEJ,IAAApF,EAAAzjB,KAAA8oB,QAAA9f,KAIA,OAHAhJ,KAAA8oB,QAAA9f,KAAAya,EAAAza,KACAhJ,KAAA6oB,QACApF,EAAAza,KAAA,KACAya,EAAA3gB,OAEJ8f,EAAAxiB,UAAAiP,MAAA,WAGI,IAFA,IAAAoU,EACAwF,EAAAjpB,KAAA8oB,QACA,IAAA9oB,KAAA6oB,OAEII,EADAxF,EAAAwF,EAAAjgB,KAEAya,EAAAza,KAAA,KACAhJ,KAAA6oB,QAEJ7oB,KAAA8oB,QAAA,MAEJhlB,OAAAC,eAAA6e,EAAAxiB,UAAA,WAAAwC,IAAA,WACI,OAAA,IAAA5C,KAAA6oB,uCAGJ/kB,OAAAC,eAAA6e,EAAAxiB,UAAA,QAAAwC,IAAA,WACI,OAAA5C,KAAA6oB,uCAERjG,EA3DA,GAAanhB,EAAAmhB,MAAAA,wKCpCb,IAAApH,EAAApc,EAAA,4CACA2G,EAAA3G,EAAA,uCAEAC,EAAAD,EAAA,gDACAuP,EAAAvP,EAAA,4BAGAE,EAAAF,EAAA,iBACAyP,EAAAzP,EAAA,mBAEAyG,EAAAzG,EAAA,6CACAwP,EAAAxP,EAAA,gBAGAwf,EAAA,SAAA/e,GAAA,SAAA+e,mDA2EA,OA3EkCze,UAAAye,EAAA/e,GAkB9B+e,EAAAxe,UAAAwI,QAAA,WAGI5I,KAAAkpB,SACAlpB,KAAAO,SAEJqe,EAAAxe,UAAAG,MAAA,WACIP,KAAA+P,KAAAnN,IAAA+L,EAAAqB,eAAAmP,cAAAjP,YAGJ0O,EAAAxe,UAAA8oB,OAAA,WACI1pB,GAAA4D,SAAA+lB,sBACAhP,SAAA,EAEAna,KAAAqgB,UAEArgB,KAAA+P,KAAAnN,IAAA+L,EAAAqB,eAAA8O,UAAA5O,YAIJ0O,EAAAxe,UAAAigB,QAAA,WAaI,GAZArgB,KAAAopB,OAAAxnB,SAEI5B,KAAAopB,OAAA3E,UAAA,WACIzkB,KAAA2b,IAAA/W,KAAApF,GAAA0U,QAAAxO,OAAA,UAAAmH,QAAA7M,KAAAopB,OAAA1E,UAAA,WAEJ1kB,KAAAopB,OAAA3E,UAAA,SACIzkB,KAAA2b,IAAA/W,KAAApF,GAAA0U,QAAAxO,OAAA,QAAAmH,QAAA7M,KAAAopB,OAAA1E,UAAA,SAEJ1kB,KAAAopB,OAAAxnB,QAAA,IAIJ5B,KAAAopB,OAAA3E,UAAA,SAYI,MAAA,IAAApc,MAAA,6BAXA,IAAAuU,EAAApd,GAAAoU,YAAA5T,KAAAopB,OAAA1E,UAAA,UACA1kB,KAAAqpB,SAAAxW,SAAA+J,GACA,IAAA0M,EAAA1M,EAAAwJ,eAAA,UACAmD,EAAAD,EAAAlD,eAAA,WACAtJ,EAAAF,EAAAwJ,eAAA,SASJ,GAPIpmB,KAAA2b,IAAA/W,KAAApF,GAAAmT,MAAAjN,OAAA,SAAAmH,QAAA+P,GAAA/G,SACA7V,KAAA2b,IAAA/W,KAAApF,GAAAmT,MAAAjN,OAAA,UAAAmH,QAAAyc,GAAAzT,SACA7V,KAAA2b,IAAA/W,KAAApF,GAAAmT,MAAAjN,OAAA,WAAAmH,QAAA0c,GAAA1T,SACA7V,KAAA2b,IAAA/W,KAAApF,GAAAmT,MAAAjN,OAAA,SAAAmH,QAAAiQ,GAAAjH,UAIJ7V,KAAAopB,OAAA3E,UAAA,cAOI,MAAA,IAAApc,MAAA,mCANA,IAAAmhB,EAAAhqB,GAAAoU,YAAA5T,KAAAopB,OAAA1E,UAAA,eACA1kB,KAAAqpB,SAAAxW,SAAA2W,GACAA,EAAApI,QAAA,EAEAphB,KAAA2b,IAAA/W,KAAApF,GAAAmT,MAAAjN,OAAA,SAAAmH,QAAA2c,GAAA3T,UApER1U,YADC9B,EAAA+B,OAAAoa,EAAAC,qBACqBmD,EAAAxe,UAAA,YAAA,GAEtBe,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACgBqd,EAAAxe,UAAA,YAAA,GAEjBe,YADC9B,EAAA+B,OAAAwN,EAAAkD,UAAAlD,EAAAmD,SAAAxQ,OACgBqd,EAAAxe,UAAA,aAAA,GAGjBe,YADC9B,EAAA+B,OAAAyN,EAAAmD,aAAAnD,EAAAoD,YAAAiC,SACsB0K,EAAAxe,UAAA,cAAA,GAEvBe,YADC9B,EAAA+B,OAAAyE,EAAA6D,oBACkBkV,EAAAxe,UAAA,WAAA,GAEnBe,YADC9B,EAAA+B,OAAA5B,GAAAmT,KAAA,cACmBiM,EAAAxe,UAAA,iBAAA,GAEpBe,YADC9B,EAAA+B,OAAA5B,GAAAmT,KAAA,aACkBiM,EAAAxe,UAAA,gBAAA,GA4DvBwe,EA3EA,CAAA7Y,EAAAqE,SAAa3I,EAAAmd,aAAAA,ggBCdP,IAAArf,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGN8pB,EAAA,SAAA5pB,GADA,SAAA4pB,IAAA,IAAA3pB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAIIF,EAAA4pB,MAAA,KAGA5pB,EAAA6pB,KAAA,OAiBJ,OAvBwCxpB,UAAAspB,EAAA5pB,GAYpC4pB,EAAArpB,UAAAG,MAAA,aAGAkpB,EAAArpB,UAAA+mB,QAAA,SAAAL,EAAAG,GACIjnB,KAAA0pB,MAAAxI,OAAA4F,EACA9mB,KAAA2pB,KAAAzI,OAAA+F,GAEJwC,EAAArpB,UAAAwpB,UAAA,WACI5pB,KAAAiB,KAAAmgB,QAAA,GAjBJjgB,YADCxB,EAAAH,GAAAyhB,QACsBwI,EAAArpB,UAAA,aAAA,GAGvBe,YADCxB,EAAAH,GAAAqqB,WACwBJ,EAAArpB,UAAA,YAAA,GANRqpB,EAAAtoB,YADpBzB,GACoB+pB,GAArB,CAAAjqB,GAAA+D,WAAqB9B,EAAAC,QAAA+nB,kKCHrB,IAIAjL,EAAA,SAAA3e,GAAA,SAAA2e,mDA4HA,OA5H+Bre,UAAAqe,EAAA3e,GAK3B2e,EAAApe,UAAAyB,cAAA,WACI7B,KAAA8pB,QAAA,IAAA9nB,KAOGwc,EAAApe,UAAA2S,kBAAA,SAAAL,EAAAqX,GAAP,IACIC,EADJlqB,EAAAE,UAAuC,IAAA+pB,IAAAA,GAAA,GAGnC/pB,KAAA8pB,QAAAnnB,IAAA+P,GACIsX,EAAAhqB,KAAA8pB,QAAAlnB,IAAA8P,IAEAsX,EAAA,IAAAC,EACAjqB,KAAA8pB,QAAA/mB,IAAA2P,EAAAsX,IAGJD,IAAY/pB,KAAAkqB,iBAAAF,GAEZtX,EAAAmF,GAAArY,GAAAmT,KAAAwX,UAAAC,YAAA,SAAAnE,GACIA,EAAAoE,aACAxjB,QAAA,SAAAyjB,GACI,IAAArS,EAAAqS,EAAAC,eACAC,EAAAF,EAAAG,eACAzS,EAAA,IAAA0S,EACA1S,EAAAO,UAAAT,EAAA6S,GACA3S,EAAAsS,MAAAA,EACAtS,EAAAC,MAAAA,EACAD,EAAAK,MAAAmS,EACAxS,EAAA4S,OAAA,EACA5S,EAAA6S,OAAA,EACA7S,EAAA8S,OAAA,EACA9S,EAAA+S,OAAA,EAGAf,EAAAgB,SAAAjoB,IAAAunB,EAAAW,QAAAjT,OAIRtF,EAAAmF,GAAArY,GAAAmT,KAAAwX,UAAAe,WAAA,SAAAjF,GACIA,EAAAoE,aACAxjB,QAAA,SAAAyjB,GACI,GAAAN,EAAAgB,SAAAroB,IAAA2nB,EAAAW,SAAA,CACI,IAAAjT,EAAAgS,EAAAgB,SAAApoB,IAAA0nB,EAAAW,SACAE,EAAAb,EAAAc,WAAArqB,EACAsqB,EAAAf,EAAAc,WAAApqB,EACAgX,EAAA4S,QAAAO,EACAnT,EAAA6S,QAAAQ,EAGA7K,KAAA8K,IAAAH,GAAA,KACInT,EAAA8S,QAAA9S,EAAA4S,OAAAO,GAEJ3K,KAAA8K,IAAAD,GAAA,KACIrT,EAAA+S,QAAA/S,EAAA6S,OAAAQ,GAGJrT,EAAA4S,OAAA5S,EAAA4S,OAAA5S,EAAA6S,OAAA7S,EAAA6S,OAAA,KACI/qB,EAAAyrB,mBAAAvB,EAAAM,QAMhB5X,EAAAmF,GAAArY,GAAAmT,KAAAwX,UAAAqB,UAAA,SAAAvF,GACIA,EAAAoE,aACAxjB,QAAA,SAAAyjB,GACIN,EAAAgB,SAAAroB,IAAA2nB,EAAAW,UACInrB,EAAAyrB,mBAAAvB,EAAAM,OAMZ5X,EAAAmF,GAAArY,GAAAmT,KAAAwX,UAAAsB,aAAA,SAAAxF,GACIA,EAAAoE,aACAxjB,QAAA,SAAAyjB,GACIN,EAAAgB,SAAAroB,IAAA2nB,EAAAW,UACInrB,EAAAyrB,mBAAAvB,EAAAM,QAMhB9L,EAAApe,UAAAmrB,mBAAA,SAAAvB,EAAAM,GAEI,IAAAoB,EAAA1B,EAAA2B,mBAAArB,GACAoB,GAAA1B,EAAA4B,WAAAF,EAAAnT,YACIyR,EAAA4B,WAAAF,EAAAnT,WAAA1R,QAAA,SAAAof,GACIA,GAAA,mBAAAA,GAEIA,EAAAyF,KAKZ1B,EAAAgB,SAAArmB,OAAA2lB,EAAAW,UAOGzM,EAAApe,UAAAyX,GAAA,SAAAU,EAAAyP,EAAAtV,GACH,IAAAsX,EAWA,OATIA,EADJtX,GAAA1S,KAAA8pB,QAAAnnB,IAAA+P,GACI1S,KAAA8pB,QAAAlnB,IAAA8P,GAEA1S,KAAAkqB,kBAGJ0B,WAAArT,KACIyR,EAAA4B,WAAArT,OAEJyR,EAAA4B,WAAArT,GAAA3R,KAAAohB,GACAA,GAGRxJ,EA5HA,CAJApf,EAAA,eAgIA4D,WA5HavB,EAAA+c,UAAAA,EA8Hb,IA6IA1G,EA7IAmS,EAAA,WAKI,SAAAA,IACIjqB,KAAAgrB,SAAA,IAAAhpB,IACAhC,KAAA4rB,cA0FR,OAtFI3B,EAAA7pB,UAAAurB,mBAAA,SAAArB,GACI,IAAAtqB,KAAAgrB,SAAAroB,IAAA2nB,EAAAW,SAkFI,OAAA,KAjFA,IAAAjT,EAAAhY,KAAAgrB,SAAApoB,IAAA0nB,EAAAW,SAEAY,GAAA,EAEAtT,EAAAT,EAAA6S,GAEA,IAAAnK,KAAA8K,IAAAtT,EAAA4S,QAAA,IAAApK,KAAA8K,IAAAtT,EAAA6S,QAAA,MAEI,GAAA7S,EAAA8S,QAAA,GAAA9S,EAAA+S,QAAA,CAEI,GAAA,IAAA/S,EAAA8S,OACIe,GAAA,EAGItT,EADJP,EAAA6S,OAAA,EACI/S,EAAAC,GAEAD,EAAAK,SAED,CACH,IAAA2T,EAAA9T,EAAA4S,OAAA5S,EAAA6S,OAEArK,KAAA8K,IAAAQ,GAAA,IAEID,GAAA,EAGItT,EADJP,EAAA4S,OAAA,EACI9S,EAAAQ,MAEAR,EAAAM,MAKZ,IAAAyT,EACI,GAAA,IAAA7T,EAAA+S,OACIc,GAAA,EAEItT,EADJP,EAAA6S,OAAA,EACI/S,EAAAQ,MAEAR,EAAAM,SAED,CACH0T,EAAA9T,EAAA6S,OAAA7S,EAAA4S,OACApK,KAAA8K,IAAAQ,GAAA,IAEID,GAAA,EAGItT,EADJP,EAAA6S,OAAA,EACI/S,EAAAC,GAEAD,EAAAK,OAQxB,IAAA0T,EAoBI,OADA7T,EAAAO,UAAAT,EAAA6S,GACA3S,EAnBA,OAAAO,GACI,KAAAT,EAAA6S,GAEI,OADA3S,EAAAO,UAAAT,EAAA6S,GACA3S,EACJ,KAAAF,EAAAC,GAEI,OADAC,EAAAO,UAAAT,EAAAC,GACAC,EACJ,KAAAF,EAAAK,KAEI,OADAH,EAAAO,UAAAT,EAAAK,KACAH,EACJ,KAAAF,EAAAM,KAEI,OADAJ,EAAAO,UAAAT,EAAAM,KACAJ,EACJ,KAAAF,EAAAQ,MAEI,OADAN,EAAAO,UAAAT,EAAAQ,MACAN,IAUxBiS,EAjGA,GAmGAS,EAAA,WAyCA,OAzCA,aAAA,GAAajpB,EAAAipB,YAAAA,EA0Cb,SAAA5S,GACIA,EAAAA,EAAA,IAAA,GAAA,KACAA,EAAAA,EAAA,GAAA,GAAA,KACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QALJ,CAMAA,EAAArW,EAAAqW,iBAAArW,EAAAqW,qNCrRA,IAAA0D,EAAApc,EAAA,4CAEA2G,EAAA3G,EAAA,uCACAC,EAAAD,EAAA,gDACA8P,EAAA9P,EAAA,gBAEAE,EAAAF,EAAA,iBACAwP,EAAAxP,EAAA,gBAGAyf,EAAA,SAAAhf,GAAA,SAAAgf,IAAA,IAAA/e,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAUIF,EAAAisB,UAAA,EACAjsB,EAAAksB,UAAA,IA8CJ,OAzDmC7rB,UAAA0e,EAAAhf,GAa/Bgf,EAAAze,UAAAwI,QAAA,SAAA2G,GACIvP,KAAAsP,OAAAC,IAGJsP,EAAAze,UAAAkP,OAAA,SAAAC,GAEI,GADAvP,KAAAU,KAAA0e,OAAA7P,EACAvP,KAAAU,KAAA0e,OAAApf,KAAAU,KAAA2e,UAAArf,KAAAU,KAAA4e,aACItf,KAAAU,KAAA2e,UAAArf,KAAAU,KAAA0e,MACApf,KAAAisB,UAEAjsB,KAAAU,KAAA4e,YAAAtf,KAAAU,KAAA8e,eAAAxf,KAAAU,KAAAoc,MAAA,GAAA9c,KAAAU,KAAAgf,aAAA1f,KAAAU,KAAAif,aAAApd,OAAA,GAAA,CACQ,IAAAhD,EAAAS,KAAAU,KAAAif,aAAA3f,KAAAU,KAAAgf,aAAA,GAAAwM,EAAA3sB,EAAA,GAAA4sB,EAAA5sB,EAAA,GACJS,KAAAU,KAAAoc,OAAAoP,IACIlsB,KAAAU,KAAAgf,eACA1f,KAAAU,KAAA4e,YAAA6M,KAOhBtN,EAAAze,UAAA6rB,QAAA,WAEI,IAAAG,EAAApsB,KAAAqsB,cACAD,EAAAvR,QACI7a,KAAA4S,UAAAC,SAAAuZ,GAEJ,IAAAE,EAAAF,EAAAvc,aAAAX,EAAAxN,SAKA,OAHA4qB,EAAAjd,QAEAid,EAAAxb,cACAsb,GAGJvN,EAAAze,UAAAisB,YAAA,WAEI,IAAA9b,EAAAvQ,KAAAU,KAAAkQ,SAAAhO,MAGA,OADA5C,KAAAU,KAAA+P,iBAAA7J,KAAA2J,GACAA,GAnDJpP,YADC9B,EAAA+B,OAAAoa,EAAAC,qBACqBoD,EAAAze,UAAA,YAAA,GAEtBe,YADC9B,EAAA+B,OAAA9B,EAAA+B,WAAA/B,EAAAgC,UAAAC,OACgBsd,EAAAze,UAAA,YAAA,GAEjBe,YADC9B,EAAA+B,OAAA5B,GAAAmT,KAAA,UACmBkM,EAAAze,UAAA,iBAAA,GAEpBe,YADC9B,EAAA+B,OAAAwN,EAAAkD,UAAAlD,EAAAmD,SAAAxQ,OACasd,EAAAze,UAAA,YAAA,GAiDlBye,EAzDA,CAAA9Y,EAAAqE,SAAa3I,EAAAod,cAAAA,uYCVb,IAEA/M,EAAA,SAAAjS,GAAA,SAAAiS,mDAIA,OAJ+B3R,UAAA2R,EAAAjS,GAC3BiE,OAAAC,eAAA+N,EAAA1R,UAAA,mBAAAwC,IAAA,WACI,MAAA,yCAERkP,EAJA,CAFA1S,EAAA,gCAMA4E,kBAJavC,EAAAqQ,UAAAA,EAWb,SAAAC,GACIA,EAAA,KAAA,OACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QAHJ,CAIAtQ,EAAAsQ,WAAAtQ,EAAAsQ,gdCdqB,IAAAwa,EAAA,gKAUDzpB,MAAA,SAAA0pB,GACZrQ,QAAA+H,KAAA,qGAGWphB,MAAA,SAAA2pB,GACX,GAAAF,EAAAtQ,cAAA,CACA,IAAAxZ,EAAA4Z,GAAAqQ,0BAEAjqB,EAAAkqB,IAAAF,EACAhqB,EAAAC,MAAA,EACAD,EAAAmqB,UAAA,EACAnqB,EAAAR,OACAoa,GAAAwQ,OAAA,WACIpqB,EAAAR,4BAIQa,MAAA,SAAAgqB,EAAAC,EAAAC,2BA1BUpqB,IAAA,WACtB,OAAApD,GAAAytB,IAAAC,WAAA1tB,GAAAytB,IAAAE,cAGIZ,EAAAa,YACA,SANS,GAAA3rB,EAAAC,QAAA6qB,4ECUrB,SAAA5L,EAAA/S,GACC,OAAA4S,KAAAI,MAAAJ,KAAAE,SAAA9S,qGAdDnM,EAAA2R,UAAA,SAAA6M,GACC,OAAA,IAAA/M,QAAA,SAAAgN,EAAAC,GACC3gB,GAAA4gB,OAAAC,QAAAJ,EAAAzgB,GAAA8gB,YAAA,SAAAC,EAAA3O,GACC,GAAA2O,EAAS,MAAAA,EACTL,EAAAtO,QAKHnQ,EAAAyP,WAAA,WACC,OAAAsP,KAAAC,MAAAD,KAAAE,WAGDjf,EAAAkf,aAAAA,EAIAlf,EAAAgQ,YAAA,WAA4B,IAAA,IAAA9K,KAAAoC,EAAA,EAAAA,EAAA9I,UAAAsC,OAAAwG,IAAApC,EAAAoC,GAAA9I,UAAA8I,GAC3B,OAAApC,EAAAga,EAAAha,EAAApE","sourcesContent":["import { IocComponet } from \"../../lib/extensions/IocComponet\";\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\nimport { MainModel } from \"../Model/MainModel\";\nimport { __IC_Model, ModelType } from \"../util/Model\";\n\nconst {ccclass,property} = cc._decorator\n\n@ccclass\nexport default class Animal extends IocComponet {\n    @inject(__IC_Model,ModelType.Main)\n    mMdl : MainModel;\n\n    @property\n    type = ''\n\n    onLoad() {\n        super.onLoad();\n    }\n    start(){\n        super.start();\n    }\n\n    //重设动物坐标\n    rePositonAnimal(i) {\n        let {\n            width,\n            height\n        } = this.mMdl.animalTextureRect\n        let offsetRatio = {\n            x: 0,\n            y: 0\n        }\n        i === 0 && (offsetRatio = {\n            x: -1,\n            y: 1\n        })\n        i === 1 && (offsetRatio = {\n            x: 1,\n            y: 1\n        })\n        i === 2 && (offsetRatio = {\n            x: 1,\n            y: -1\n        })\n        i === 3 && (offsetRatio = {\n            x: -1,\n            y: -1\n        })\n        this.node.setPosition(offsetRatio.x * width / 2, offsetRatio.y * height / 2);\n    }\n\n}","import {Singleton} from \"./Singleton\";\r\nimport {IManager} from \"./Manager\";\r\n\r\nexport default class AudioManager extends Singleton implements IManager {\r\n    public isInit = false;\r\n    public bgm: cc.AudioSource;\r\n    public audios: Array < cc.AudioSource > ;\r\n    private audioMap: Map < any, any >\r\n    private playLoopCount;\r\n\r\n    protected onConstructor() {\r\n        this.playLoopCount = 0;\r\n        this.audioMap = new Map();\r\n    }\r\n\r\n    public play(key) {\r\n        if (this.hasAudio(key)) {\r\n            let clip = this.getAudio(key);\r\n            let isPlay = false;\r\n            if (this.audios.length != 0) {\r\n                if(this.audios[this.playLoopCount]){\r\n                    this.audios[this.playLoopCount].clip = clip;\r\n                    this.audios[this.playLoopCount].play();\r\n                }else{\r\n                    this.playLoopCount=0;\r\n                }\r\n                if(this.playLoopCount < this.audios.length - 1){\r\n                    this.playLoopCount+=1;\r\n                }else{\r\n                    this.playLoopCount=0;\r\n                }\r\n                //找到一个空闲的播放源进行播放\r\n/*                 for(let i =0;i<this.audios.length;i++){\r\n                    if (!this.audios[i].isPlaying) {\r\n                        this.audios[i].clip = clip;\r\n                        this.audios[i].play();\r\n                        isPlay = true;\r\n                        break;\r\n                    }\r\n                } */\r\n                //没有空闲的播放源\r\n/*                 if (!isPlay) {\r\n                    this.audios[0].clip = clip;\r\n                    this.audios[0].play();\r\n                } */\r\n            }\r\n        }\r\n    }\r\n    public playBgm() {\r\n        if (this.bgm.clip) {\r\n            this.bgm.loop = true;\r\n            this.bgm.play();\r\n        }\r\n    }\r\n    hasAudio(key): boolean {\r\n        return this.audioMap.has(key);\r\n    }\r\n    getAudio(key): cc.AudioClip {\r\n        return this.audioMap.get(key);\r\n    }\r\n    setAudio(key, value) {\r\n        this.audioMap.set(key, value);\r\n    }\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\nexport class AudioUtil extends Singleton implements IUtil{\r\n\r\n}","\nconst {ccclass, property} = cc._decorator\n\n@ccclass\nexport default class Begin extends cc.Component {\n\n/*     @property(cc.Node)\n    playButton = null */\n\n    onLoad () {\n        \n    }\n\n    beginGame() {\n        cc.director.loadScene('Game')\n    }\n\n    lookRank(){\n        cc.director.loadScene(\"Rank\");\n    }\n}","//namespace ioc{\r\n    export module BindingConst{\r\n        //定义空常量\r\n        export const NULL = Symbol(\"NULL\");\r\n    }\r\n//}","import { IBinding,Binding } from \"./Binding\"\r\nimport {BindingConst} from \"./BindConst\"\r\nimport {IConstructorName} from \"../IocConst\"\r\n\r\nexport interface IBinder {\r\n    bind(key) : IBinding;\r\n    unbind(key, name);\r\n    //根据绑定器实例生成一个空的绑定状态\r\n    getRawBinding() : IBinding;\r\n    //获取绑定状态\r\n    getBinding(key : any, name : any) : IBinding;\r\n    getBindingMap(key : any) : Map<any,IBinding>;\r\n    resolveBinding( binding : IBinding,  key : any);\r\n}\r\nexport class __IC_Binder extends IConstructorName{\r\n    get constructorName(){return \"IBinder\";}\r\n}\r\nexport class Binder implements IBinder {\r\n    //绑定状态映射字典\r\n    protected _bindings: any;\r\n    //绑定状态白名单\r\n    //protected _bindingWhitelist : Array<object> ;\r\n    constructor() {\r\n        this.init();\r\n    }\r\n    /**\r\n     * 初始化函数，通过重写该函数指定映射字典的实例\r\n     */\r\n    init(){\r\n        //初始化绑定状态映射\r\n        this._bindings = new Map < any, Map < any, IBinding >> ();\r\n    }\r\n    /**\r\n     * 解析器，将正在绑定中的状态信息解析，使之成为可存储的数据绑定到映射字典。\r\n     * @param binding 绑定的状态\r\n     */\r\n    resolver(binding: IBinding) {\r\n        let key = binding.key;\r\n        this.resolveBinding(binding,key);\r\n    }\r\n    /**\r\n     * 解析绑定状态\r\n     * @param binding 绑定状态\r\n     * @param key 键值\r\n     */\r\n    resolveBinding( binding : IBinding,  key : any){\r\n        //检查绑定状态是否存在别名\r\n        let bindingName = (binding.name == null) ? BindingConst.NULL : binding.name;\r\n        let dict : Map<any,IBinding>;\r\n        //检查绑定状态字典已经存在键值\r\n        if ((this._bindings.has(key))) {\r\n            //获取绑定映射\r\n            dict = this._bindings.get(key);\r\n            //检查绑定映射是否存在别名\r\n            if (dict.has(bindingName)) {\r\n                //获取已经存在的绑定映射\r\n                let existingBinding = dict.get(bindingName);\r\n                //检查合法性\r\n                if (existingBinding != binding) {\r\n                    //如果绑定值为空\r\n                    if (!existingBinding.value) {\r\n                        //移除无效的绑定别名\r\n                        dict.delete(bindingName);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //创建绑定映射\r\n            dict = new Map<any,IBinding>();\r\n            //添加绑定映射\r\n            this._bindings.set(key, dict);\r\n        }\r\n\r\n        //如果存在默认绑定状态并且等于当前绑定状态\r\n        if (dict.has(BindingConst.NULL) && dict.get(BindingConst.NULL) === binding) {\r\n            //删除默认绑定\r\n            dict.delete(BindingConst.NULL);\r\n        }\r\n\r\n        //添加或覆盖绑定状态\r\n        if (!dict.has(bindingName)) {\r\n            dict.set(bindingName, binding);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 绑定信号容器\r\n     * @param key 键值，可以是需要执行的全局信号名称或枚举\r\n     */\r\n    bind(key) : IBinding{\r\n        //创建一个绑定中状态\r\n        let binding = this.getRawBinding();\r\n        \r\n        //绑定标志\r\n        binding.bind(key);\r\n        return binding;\r\n    }\r\n    /**\r\n     * 解除绑定信号容器\r\n     * @param key 键值，需要绑定的键值\r\n     * @param name 别名，被绑定变量的别名\r\n     */\r\n    unbind(key, name) {\r\n        let checkKey = Binding.checkAbstract(key);\r\n        //如果绑定映射字典内包含键值\r\n        if (this._bindings.has(checkKey)) {\r\n            //直接获取键值映射的值\r\n            let dict = this._bindings.get(checkKey);\r\n            //检查是否存指定别名\r\n            let bindingName;\r\n            if(name){\r\n                bindingName = name;\r\n            }else{\r\n                bindingName = BindingConst.NULL;\r\n            }\r\n            if (dict.has(bindingName)) {\r\n                dict.delete(bindingName);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 生成默认的绑定状态\r\n     */\r\n    getRawBinding(): IBinding{\r\n        return new Binding(this.resolver.bind(this));\r\n    }\r\n    /**\r\n     * 根据键值和别名获取绑定器中的绑定状态\r\n     * @param key 键值\r\n     * @param name 别名\r\n     */\r\n    getBinding(key : any, name : any) : IBinding{\r\n        //查找是否存在键值\r\n        if(this._bindings.has (key))\r\n        {\r\n            let dict = this._bindings.get(key);\r\n            //如果别名不存在则使用默认值\r\n            if(!name){\r\n                name = BindingConst.NULL\r\n            }\r\n            //查找绑定状态是否存在别名\r\n            if (dict.has(name))\r\n            {\r\n                return dict.get(name);\r\n            }\r\n            else{\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取绑定状态映射表，返回键值的所有绑定状态\r\n     * @param key 被绑定的键值\r\n     */\r\n    getBindingMap(key : any) : any{\r\n        if(this._bindings.has(key)){\r\n            return this._bindings.get(key);\r\n        }\r\n    }\r\n}\r\n//}","import { IConstructorName } from \"../IocConst\";\r\n\r\n//namespace ioc {\r\nexport interface IBinding {\r\n    name: any;\r\n    key: any;\r\n    value: any;\r\n    bind(k:any):IBinding;\r\n    to(v:any):IBinding;\r\n    toName(n:any):IBinding;\r\n}\r\nexport class __IC_Binding extends IConstructorName{\r\n    get constructorName(){return \"IBinding\";}\r\n}\r\nexport class Binding implements IBinding {\r\n    protected _key: any;\r\n    protected _value: any;\r\n    protected _name: any;\r\n    protected _resolver: any;\r\n\r\n    public get key() {\r\n        return this._key;\r\n    }\r\n    public get value() {\r\n        return this._value;\r\n    }\r\n    public get name() {\r\n        return this._name;\r\n    }\r\n\r\n    constructor(resolver: any) {\r\n        this._resolver = resolver;\r\n\r\n        this._key = null;\r\n        this._value = null;\r\n        this._name = null;\r\n    }\r\n\r\n    /**\r\n     * 绑定标志到键值，返回此时的绑定状态。\r\n     * @param key 标志值，可以是需要执行的全局信号名称或枚举\r\n     */\r\n    bind(key) :IBinding{\r\n        this._key = Binding.checkAbstract(key);\r\n        return this;\r\n    }\r\n    /**\r\n     * 从正在绑定状态映射到实例，返回此时的绑定状态。\r\n     * @param value 绑定映射的值\r\n     */\r\n    to(value):IBinding {\r\n        this._value = value;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 实例的别名，用于区分不同的实例，返回此时的绑定状态。\r\n     * @param name 实例的别名\r\n     */\r\n    toName(name):IBinding {\r\n        this._name = name;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n    //判断是否为构造函数\r\n    public get isKeyConstructor():boolean{\r\n        return Binding.isConstructor(this._key);\r\n    }\r\n    //判断是否为构造函数\r\n    public get isValueConstructor():boolean{\r\n        return Binding.isConstructor(this._value);\r\n    }\r\n    public static isConstructor(value : object):boolean{\r\n        //如果不是一个函数则绝对不是构造函数\r\n        if(typeof value !== \"function\"){\r\n            return false;\r\n        }\r\n        //如果不能直接获取原型则不是构造函数\r\n        if(!value.prototype){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    public static checkAbstract(key){\r\n        //检查被绑定的对象是否为虚类\r\n        let constructorName;\r\n        if(key.constructorName){\r\n            constructorName = key.constructorName;\r\n            //console.info(\"[转化虚拟类]\"+ constructorName);\r\n        }else{\r\n            constructorName = key;\r\n            //console.info(\"[非虚拟类]\"+ constructorName.constructor.name);\r\n        }\r\n        return constructorName;\r\n    }\r\n}\r\n//}","import {\r\n    IBinding,\r\n    Binding\r\n} from \"../Bind/Binding\"\r\nimport {\r\n    __IC_InjectBinder,\r\n    IInjectBinder\r\n} from \"../Injector/InjectBinder\";\r\nimport {\r\n    CommandBinding\r\n} from \"./CommandBinding\";\r\nimport {\r\n    ISignal\r\n} from \"../Signal/Signal\"\r\nimport {\r\n    InjectBinding\r\n} from \"../Injector/InjectBinding\";\r\nimport {\r\n    ICommand,\r\n    __IC_Command\r\n} from \"./Command\";\r\nimport {\r\n    Pool\r\n} from \"../../Extensions/Pool\";\r\nimport {\r\n    CommandConst\r\n} from \"./CommandConst\"\r\nimport {\r\n    inject\r\n} from \"../Injector/InjectDecorator\";\r\nimport {\r\n    Binder\r\n} from \"../Bind/Binder\";\r\nimport {\r\n    ICommandBinder\r\n} from \"./ICommandBinder\";\r\n//全局注入数据绑定器\r\n\r\n\r\n/**\r\n * 指令绑定器\r\n */\r\nexport class CommandBinder extends Binder implements ICommandBinder {\r\n    //注入绑定器\r\n    @inject(__IC_InjectBinder)\r\n    public injectBinder: IInjectBinder;\r\n\r\n    //指令池\r\n    protected pools: Map < object, Pool >= new Map < object, Pool > ();\r\n\r\n    // Tracker for parallel commands in progress\r\n    protected activeCommands: Set < ICommand >= new Set < ICommand > ();\r\n    // Tracker for sequences in progress\r\n    protected activeSequences: Map < ICommand, CommandBinding > = new Map < ICommand, CommandBinding > ();\r\n    //是否使用池\r\n    public usePooling: boolean = false;\r\n    public getPool(type: object): Pool {\r\n        if (this.pools.has(type))\r\n            return this.pools.get(type);\r\n        return null;\r\n    }\r\n\r\n    public resolver(binding: IBinding) {\r\n        super.resolver(binding);\r\n        if (this.usePooling && (binding as CommandBinding).isPooled) {\r\n            if (binding.value != null) {\r\n                let that = this;\r\n                //检查被绑定的值是否有效\r\n                let values: object[] = binding.value as object[];\r\n                if (values.length === 0) {\r\n                    values = [];\r\n                    values.push(binding.value);\r\n                }\r\n\r\n                if (values && values.length > 0) {\r\n                    values.forEach((value) => {\r\n                        //如果找不到对应的池则创建\r\n                        if (that.pools.has(value) == false) {\r\n                            let myPool = this.makePoolFromType(value);\r\n                            that.pools.set(value, myPool);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    protected makePoolFromType(type): Pool {\r\n        //池构造函数作为类型使用\r\n        let poolType = type;\r\n        //预制实例缓存\r\n        this.injectBinder.bind(type).to(type);\r\n\r\n        //获取一个池实例\r\n        this.injectBinder.bind(Pool).to(Pool).toName(CommandConst.COMMAND_POOL);\r\n        let pool: Pool = this.injectBinder.getInstance(Pool, CommandConst.COMMAND_POOL) as Pool;\r\n        this.injectBinder.unbind(Pool, CommandConst.COMMAND_POOL);\r\n        pool.bind(poolType);\r\n\r\n        return pool;\r\n    }\r\n    //绑定状态映射字典\r\n    getRawBinding(): IBinding {\r\n        return new CommandBinding(this.resolver.bind(this));\r\n    }\r\n    bind(key: any): CommandBinding {\r\n        return super.bind(key) as CommandBinding;\r\n    }\r\n    //调用指令\r\n    protected invokeCommand(cmd: object, binding: CommandBinding, args, depth: number): ICommand {\r\n        let command: ICommand = this.createCommand(cmd, args);\r\n        command.sequenceId = depth;\r\n        this.trackCommand(command, binding);\r\n        this.executeCommand(command,args);\r\n        return command;\r\n    }\r\n    //\r\n    protected createCommand(cmd: object, data: object): ICommand {\r\n        let command: ICommand = this.getCommand(cmd);\r\n\r\n        if (command == null) {\r\n            let msg: string = \"A Command \";\r\n            if (data != null) {\r\n                msg += \"tied to data \" + data.toString();\r\n            }\r\n            msg += \" could not be instantiated.\\nThis might be caused by a null pointer during instantiation or failing to override Execute (generally you shouldn't have constructor code in Commands).\";\r\n            throw new Error(msg);\r\n        }\r\n\r\n        command.data = data;\r\n        return command;\r\n    }\r\n    //获取指令实例\r\n    protected getCommand(type: object): ICommand {\r\n        //如果使用池则检查是否已经存在相应的实例\r\n        if (this.usePooling && this.pools.has(type)) {\r\n            let pool: Pool = this.pools.get(type);\r\n            let command: ICommand = pool.getInstance() as ICommand;\r\n            //是否存在对应的实例\r\n            if(command){\r\n                //检查是否已经清理\r\n                if (command.isClean) {\r\n                    this.injectBinder.injector.inject(command, null);\r\n                    command.deploy();\r\n                }\r\n            }else{\r\n                //获取实例\r\n                command = this.injectBinder.getInstance(type,null);\r\n                //为池添加实例缓存\r\n                pool.add(command);\r\n            }\r\n            return command;\r\n        } else {\r\n            this.injectBinder.bind(__IC_Command).to(type);\r\n            let command: ICommand = this.injectBinder.getInstance(__IC_Command, null);\r\n            this.injectBinder.unbind(__IC_Command, null);\r\n            return command;\r\n        }\r\n    }\r\n    protected trackCommand(command: ICommand, binding: CommandBinding) {\r\n        if (binding.isSequence) {\r\n            this.activeSequences.set(command, binding);\r\n        } else {\r\n            this.activeCommands.add(command);\r\n        }\r\n    }\r\n    //执行指令\r\n    protected executeCommand(command: ICommand,args) {\r\n        if (command == null) {\r\n            return;\r\n        }\r\n        command.execute(...args);\r\n    }\r\n    /**\r\n     * 信号调用回掉函数\r\n     * @param trigger 触发的信号\r\n     * @param data 数据\r\n     */\r\n    public onDispose(trigger: object , ...args) {\r\n        //尝试获取绑定状态\r\n        let binding: CommandBinding = this.getBinding(trigger, null) as CommandBinding;\r\n        if (binding != null) {\r\n            //是否处于执行序列中\r\n            if (binding.isSequence) {\r\n                //加入执行队列\r\n                this.next(binding, args, 0,);\r\n            } else {\r\n                //获取被绑定的指令对象\r\n                let values: object[] = binding.value as object[];\r\n                let aa = values.length + 1;\r\n                for (let a = 0; a < aa; a++) {\r\n                    this.next(binding, args , a,);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //下一次即将执行的指令\r\n    protected next(binding: CommandBinding, args, depth: number) {\r\n        let values: object[] = binding.value as object[];\r\n        if (values.length === 0) {\r\n            values = [];\r\n            values.push(binding.value);\r\n        }\r\n\r\n        if (depth < values.length) {\r\n            let cmd = values[depth];\r\n            let command: ICommand = this.invokeCommand(cmd, binding, args, depth);\r\n            this.releaseCommand(command);\r\n        } else {\r\n            this.disposeOfSequencedData(args);\r\n            //是否仅执行一次\r\n            if (binding.isOnce) {\r\n                //解除绑定\r\n                this.unbind(binding, null);\r\n            }\r\n        }\r\n    }\r\n    //EventCommandBinder (and perhaps other sub-classes) use this method to dispose of the data in sequenced commands\r\n    protected disposeOfSequencedData(data: object) {\r\n        //No-op. Override if necessary.\r\n    }\r\n    //释放指令，使其进入池\r\n    public releaseCommand(command: ICommand) {\r\n        //有时会需要执行一些耗时的异步操作，如果指令被用户保持则不进行释放，默认情况下都是自动释放的\r\n        if (!command.isRetain) {\r\n            //使用构造函数作为类型\r\n            let t = command.constructor;\r\n            if (this.usePooling && this.pools.has(t)) {\r\n                this.pools.get(t).returnInstance(command);\r\n            }\r\n            if (this.activeCommands.has(command)) {\r\n                this.activeCommands.delete(command);\r\n            } else if (this.activeSequences.has(command)) {\r\n                let binding: CommandBinding = this.activeSequences.get(command);\r\n                let data = command.data;\r\n                this.activeSequences.delete(command);\r\n                this.next(binding, data, command.sequenceId + 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class SignalCommandBinder extends CommandBinder {\r\n    //启用池\r\n    public usePooling : boolean = true;\r\n    //重写解析绑定状态函数\r\n    resolveBinding(binding: IBinding, key: any) {\r\n        super.resolveBinding(binding, key);\r\n        //如果已经存在了则不能再次绑定\r\n        if (this._bindings.has(key)) {\r\n            let signal: ISignal = key;\r\n            signal.addListener(this.onDispose.bind(this)); //Do normal bits, then assign the commandlistener to be reactTo\r\n        }\r\n    }\r\n    //重写绑定方法\r\n    public bind(value: object): CommandBinding {\r\n        //获取绑定状态\r\n        let binding: InjectBinding = this.injectBinder.getBinding(value, null);\r\n        let signal: ISignal = null;\r\n        //检查参数值是否为构造函数\r\n        if (Binding.isConstructor(value)) {\r\n            //如果尚未进行注入则注入一个单例\r\n            if (binding == null) {\r\n                binding = this.injectBinder.bind(value);\r\n                binding.toSingleton();\r\n            }\r\n            signal = this.injectBinder.getInstance(value, null) as ISignal;\r\n        }\r\n        //如果信号存在则绑定信号，否则直接绑定值\r\n        if (signal) {\r\n            return super.bind(signal);\r\n        } else {\r\n            return super.bind(value);\r\n        }\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key: any, name: any): CommandBinding {\r\n        let signal;\r\n        //检查键值是否为构造函数\r\n        if (Binding.isConstructor(key)) {\r\n            //参数应该是一个信号或信号的构造函数，而不是其他的值\r\n            signal = this.injectBinder.getInstance(key, name);\r\n        } else {\r\n            //信号是一个实例\r\n            signal = key;\r\n        }\r\n        return super.getBinding(signal, name) as CommandBinding;\r\n    }\r\n    protected invokeCommand(cmd, binding: CommandBinding, args, depth: number): ICommand {\r\n        let signal: ISignal = binding.key;\r\n        let command: ICommand = this.createCommandForSignal(cmd, args); //Special signal-only command creation\r\n        command.sequenceId = depth;\r\n        this.trackCommand(command, binding);\r\n        this.executeCommand(command,args);\r\n        return command;\r\n    }\r\n    // Create a Command and bind its injectable parameters to the Signal types\r\n    protected createCommandForSignal(cmd, args): ICommand {\r\n        let that = this;\r\n\r\n        if (args != null) {\r\n\r\n            let signalData: [] = args as[];\r\n\r\n            //Iterate each signal type, in order. \r\n            //Iterate values and find a match\r\n            //If we cannot find a match, throw an error\r\n            let injectedTypes = new Set < any > ();\r\n            let values = [signalData];\r\n\r\n            /* if(signalTypes&&signalTypes.length>0){\r\n            signalTypes.forEach((type)=>{\r\n                if (!injectedTypes.has(type)) // Do not allow more than one injection of the same Type\r\n                {\r\n                    let foundValue : boolean= false;\r\n                    for(let i = 0;i<values.length;i++){\r\n                        if (values[i] != null)\r\n                        {\r\n                            that.injectBinder.bind(type).toValue(values[i]).toInject(false);\r\n                            injectedTypes.add(type);\r\n                            //values[i]=null;\r\n                            foundValue = true;\r\n                            break;\r\n                        }\r\n                        else //Do not allow null injections\r\n                        {\r\n                            throw new Error(\"SignalCommandBinder attempted to bind a null value from a signal to Command: \" + cmd.GetType() + \" to type: \" + type);\r\n                        }\r\n                    }\r\n                    if (!foundValue)\r\n                    {\r\n                        throw new Error(\"Could not find an unused injectable value to inject in to Command: \" + cmd.GetType() + \" for Type: \" + type);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    throw new Error(\"SignalCommandBinder: You have attempted to map more than one value of type: \" + type +\r\n                        \" in Command: \" + cmd.GetType() + \". Only the first value of a type will be injected. You may want to place your values in a VO, instead.\");\r\n                }\r\n            })\r\n            }*/\r\n        }\r\n        let command: ICommand = that.getCommand(cmd);\r\n        command.data = args;\r\n/*         if (signalTypes && signalTypes.length > 0) {\r\n            signalTypes.forEach((typeToRemove) => {\r\n                that.injectBinder.unbind(typeToRemove, null);\r\n            })\r\n        } */\r\n        return command;\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\n\r\nexport class CommandBinding extends Binding{\r\n    //是否在执行序列中\r\n    protected _isSequence : boolean;\r\n    //是否仅执行一次\r\n    protected _isOnce : boolean;\r\n    //是否在对象池中\r\n    public isPooled : boolean\r\n    \r\n    public get isSequence() : boolean{\r\n        return this._isSequence\r\n    }\r\n    public get isOnce() : boolean{\r\n        return this._isOnce;\r\n    }\r\n    public to(value) : CommandBinding{\r\n        return super.to(value) as CommandBinding\r\n    }\r\n    public toName(name) : CommandBinding{\r\n        return super.toName(name) as CommandBinding;\r\n    }\r\n    /**\r\n     * 是否进入池\r\n     */\r\n    public Pooled()\r\n    {\r\n        this.isPooled = true;\r\n        this._resolver (this);\r\n        return this;\r\n    }\r\n}","//注入状态类型枚举\r\nexport enum CommandConst\r\n{\r\n    /// Temporary marker for any pool instantiated by the CommandBinder\r\n    COMMAND_POOL = \"COMMAND_POOL\",\r\n}","import { ICommandBinder, __IC_CommandBinder } from \"./ICommandBinder\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../Injector/InjectBinder\";\r\nimport { inject } from \"../Injector/InjectDecorator\";\r\nimport { IConstructorName } from \"../IocConst\";\r\n\r\nexport interface ICommand{\r\n    commandBinder : ICommandBinder;\r\n    injectBinder : IInjectBinder;\r\n    //执行指令\r\n    execute(...args);\r\n    //本条指令的操作ID，用于在队列中寻找下一条指令\r\n    sequenceId : number;\r\n    data : any;\r\n    args : any;\r\n    deploy();\r\n    clean();\r\n    isClean : boolean;\r\n    isRetain : boolean;\r\n    //执行异步操作时可以使用保留指令\r\n    retain();\r\n    //释放被异步操作锁定的指令\r\n    release();\r\n}\r\nexport class __IC_Command extends IConstructorName{\r\n    get constructorName(){return \"ICommand\";}\r\n}\r\nexport class Command implements ICommand{\r\n    // The InjectionBinder for this Context\r\n\t@inject(__IC_InjectBinder)\r\n    public injectBinder : IInjectBinder;\r\n    // Back reference to the CommandBinder that instantiated this Commmand\r\n\t@inject(__IC_CommandBinder)\r\n\tpublic  commandBinder : ICommandBinder;\r\n    public sequenceId;\r\n    public data;\r\n    public args;\r\n    private _clean = false;\r\n    public deploy(){\r\n        this._clean = false;\r\n    }\r\n    public clean(){\r\n        this._clean = true;\r\n    }\r\n    public get isClean(){\r\n        return this._clean;\r\n    };\r\n    private _retain = false;\r\n    //保持指令\r\n    public retain()\r\n    {\r\n        this._retain = true;\r\n    }\r\n    public release()\r\n    {\r\n        this._retain = false\r\n    }\r\n    public get isRetain() : boolean{\r\n        return this._retain;\r\n    }\r\n    //重新释放\r\n    public restore()\r\n    {\r\n        this.injectBinder.injector.uninject (this);\r\n        this.clean();\r\n    }\r\n    //执行指令\r\n    public execute(...args){\r\n\r\n    }\r\n}","import PersistRoot from \"./PersistRoot\";\r\n\r\n//全局变量\r\n export default class  Common{\r\n    static isInit : boolean = false;\r\n    static persistRootNode : PersistRoot= null;\r\n    static root = null;\r\n    static shareTickets = [];\r\n    static isHasWxRank = false;\r\n    static maxScore = 0;\r\n    static saveScoreFunc = null;\r\n    //用户的唯一标识\r\n    static userOpenId = 0;\r\n    //会话密钥\r\n    static session_key = \"\";\r\n    //用户全局唯一标识\r\n    static unionId = 0;\r\n}","import {IRoot} from \"./IRoot\"\r\nimport {__IC_InjectBinder,InjectBinder} from \"../Injector/InjectBinder\";\r\nimport {CommandBinder , SignalCommandBinder } from \"../Command/CommandBinder\";\r\nimport {IocError, IConstructorName} from \"../IocConst\"\r\nimport { __IC_CommandBinder } from \"../Command/ICommandBinder\";\r\n\r\nexport interface IContext {\r\n    start(): IContext;\r\n    restart() : IContext;\r\n    //启动\r\n    launch();\r\n    /// Get the ContextView\r\n    getRoot(): any;\r\n    // Register a new context to this one\r\n    addCrossContext(context : IContext):IContext;\r\n    removeCrossContext(context : IContext);\r\n    //共用绑定器\r\n    crossContextBinder : InjectBinder;\r\n}\r\nexport class __IC_Context extends IConstructorName{\r\n    get constructorName(){return \"IContext\";}\r\n}\r\n\r\nexport class Context implements IContext {\r\n    //第一个被创建出来的环境容器\r\n    public static firstContext : IContext;\r\n    //应该以注入的方式获取\r\n    private _injectBinder : InjectBinder;\r\n    private _crossContextBinder : InjectBinder;\r\n    //注入绑定器\r\n    public get injectBinder(): InjectBinder {\r\n        if(!this._injectBinder){\r\n            this._injectBinder = new InjectBinder();\r\n        }\r\n        return this._injectBinder; \r\n    }\r\n    //设置全局注入绑定器\r\n    public set crossContextBinder(value){\r\n        this._crossContextBinder = value;\r\n    }\r\n    //这里使用注入绑定器代替全局绑定器\r\n    public get crossContextBinder(){\r\n        return this._crossContextBinder;\r\n    }\r\n    private _commandBinder : CommandBinder;\r\n    //指令绑定器\r\n    public get commandBinder(): CommandBinder {\r\n/*         //指令绑定器应该由注入产生\r\n        if(!this._commandBinder){\r\n            this._commandBinder = new CommandBinder();\r\n        } */\r\n        return this._commandBinder; \r\n    }\r\n    //根节点\r\n    root: IRoot;\r\n    //获取根节点\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n\r\n    constructor(root: any) {\r\n        if (Context.firstContext == null || Context.firstContext.getRoot() == null){\r\n            Context.firstContext = this;\r\n            this.crossContextBinder = this.injectBinder;\r\n\t\t}else{\r\n\t\t\tContext.firstContext.addCrossContext(this);\r\n        }\r\n        //设置根节点\r\n        this.setRoot(root);\r\n        //添加核心\r\n        this.addCore();\r\n        //启动环境容器\r\n        this.start();\r\n    }\r\n    //添加全局环境容器\r\n    public addCrossContext(context : IContext):IContext{\r\n        //共用注入绑定器\r\n        context.crossContextBinder= this.injectBinder;\r\n\t\treturn this;\r\n    }\r\n    //移除全局环境容器\r\n    public removeCrossContext(childContext: IContext)\r\n    {\r\n/*         if (childContext.crossContextBinder != null)\r\n        {\r\n            childContext.crossContextBinder = null;\r\n        } */\r\n    }\r\n\r\n    public setRoot(root: any): IContext {\r\n        this.root = root;\r\n        return this;\r\n    }\r\n    public restart() : IContext{\r\n        this.addCore();\r\n        this.start();\r\n        //console.info(\"[重启Ioc容器]\");\r\n        return this;\r\n    }\r\n    public start(): IContext {\r\n        this.instantiateCore();\r\n        this.mapBindings();\r\n        this.postBindings();\r\n        this.launch();\r\n\r\n        return this;\r\n    }\r\n    //启动容器\r\n    public launch() {\r\n        //console.info(\"Ioc容器启动\");\r\n    }\r\n    /**\r\n     * 初始化核心组件\r\n     */\r\n    protected instantiateCore() {\r\n        //实例化信号绑定器\r\n        this._commandBinder = this.injectBinder.getInstance(__IC_CommandBinder,null);\r\n    }\r\n    protected mapBindings() {\r\n\r\n    }\r\n    protected postBindings() {\r\n\r\n    }\r\n    protected addCore() {\r\n        //注入注入绑定器\r\n        this.injectBinder.bind(__IC_InjectBinder).toValue(this.injectBinder);\r\n        //注入信号绑定器\r\n        this.injectBinder.bind(__IC_CommandBinder).to(SignalCommandBinder).toSingleton();\r\n    }\r\n\r\n}\r\n//}","import {Binder} from \"../Bind/Binder\";\r\nimport {BindingConst} from \"../Bind/BindConst\";\r\nimport {DecoratorClass} from \"./DecoratorClass\";\r\nimport {DecoratorClassBinding} from \"./DecoratorClassBinding\";\r\nimport {IBinding, Binding} from \"../Bind/Binding\";\r\nimport { Prototype } from \"../../Extensions/Prototype\";\r\n\r\nexport class DecoratorClassBinder extends Binder {\r\n    //重写绑定状态映射字典Map< 被注入的类名, Map< 属性名 ，Map< 属性别名 , 绑定状态>>>\r\n    protected _bindings: Map < any, Map < any, Map < any, DecoratorClassBinding >>> ;\r\n    private _decoratorClassBufferMap : Map<any,DecoratorClass>;\r\n\r\n    //重写初始化函数\r\n    init() {\r\n        //初始化绑定状态映射\r\n        this._bindings = new Map < any, Map < any, Map < any, DecoratorClassBinding >>> ();\r\n        //初始化缓存映射\r\n        this._decoratorClassBufferMap = new Map<any,DecoratorClass>();\r\n    }\r\n    //检查是否存在指定的键值\r\n    public has(key):boolean{\r\n        return this._bindings.has(key);\r\n    }\r\n    //获取需要注入的类型数据\r\n    public get(target: any): DecoratorClass {\r\n        //检查是否为实例\r\n        if (!(target instanceof Object)) throw new Error(\"proto must is a object but\" + target + \"is not\");\r\n        //检查是否存在缓存\r\n        if(!this._decoratorClassBufferMap.has(target)){\r\n            //获取继承列表\r\n            let extendsList = Prototype.getPrototypeList(target);\r\n\r\n            let injectClass: DecoratorClass = new DecoratorClass();\r\n            let list = [];\r\n            let dict: Map < any, Map < any, DecoratorClassBinding >> ;\r\n            let that = this;\r\n            let bindingMaps = [];\r\n            if (extendsList && extendsList.length > 0) {\r\n                for(let i = 0 ; i<extendsList.length ; i++){\r\n                    dict = that.getBindingMap(extendsList[i]);\r\n                    if(dict&&dict.size>0){\r\n                        dict.forEach(function(inside) {\r\n                            bindingMaps.push(inside);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            let inside : Map<any,DecoratorClassBinding>;\r\n            if (bindingMaps && bindingMaps.length > 0) {\r\n                for(let i = 0; i <bindingMaps.length;i++){\r\n                    inside = bindingMaps[i];\r\n                    if(inside&&inside.size>0){\r\n                        let values = inside.values();\r\n                        for (let j =0;j<inside.size;j++) {\r\n                            let binding = values.next();\r\n                            list.push(binding.value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            injectClass.list = list;\r\n            //添加缓存\r\n            this._decoratorClassBufferMap.set(target,injectClass);\r\n        }\r\n        //从缓存映射中获取对应的列表\r\n        return this._decoratorClassBufferMap.get(target);\r\n    }\r\n    //重写绑定方法\r\n    public bind(key: any): DecoratorClassBinding {\r\n        return super.bind(key) as DecoratorClassBinding;\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key, name): DecoratorClassBinding {\r\n        return super.getBinding(key, name) as DecoratorClassBinding\r\n    }\r\n    //重写绑定获取方法\r\n    public getRawBinding(): IBinding {\r\n        return new DecoratorClassBinding(this.resolver.bind(this));\r\n    }\r\n    //重写解析器\r\n    public resolver(binding: IBinding) {\r\n        super.resolver(binding);\r\n    }\r\n    /**\r\n     * 重写解析绑定状态\r\n     * @param binding 绑定状态\r\n     * @param key 键值\r\n     */\r\n    resolveBinding(binding: DecoratorClassBinding, key: any) {\r\n        //绑定状态必须有属性名\r\n        if (!binding.property) return;\r\n        //检查绑定状态是否存在别名\r\n        let bindingName = (binding.name == null) ? BindingConst.NULL : binding.name;\r\n        let dict: Map < any, Map < any, DecoratorClassBinding >> ;\r\n        //检查绑定状态字典已经存在键值\r\n        if ((this._bindings.has(key))) {\r\n            //获取绑定映射\r\n            dict = this._bindings.get(key);\r\n            //检查绑定映射是否存在别名\r\n            if (dict.has(bindingName)) {\r\n                //获取内部映射\r\n                let insideDict = dict.get(bindingName);\r\n                //检查映射内是否存在属性名\r\n                if (insideDict.has(binding.property)) {\r\n                    let existingBinding = insideDict.get(binding.property);\r\n                    //如果存在绑定状态\r\n                    if (existingBinding) {\r\n                        //检查存在对应状态绑定是否于当前相等\r\n                        if (existingBinding != binding) {\r\n                            //如果绑定值为空\r\n                            if (!existingBinding.value) {\r\n                                //移除无效的绑定别名\r\n                                dict.delete(bindingName);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //创建绑定映射Map< 别名, Map< 属性名, 绑定状态 >\r\n            dict = new Map < any, Map < any, DecoratorClassBinding >> ();\r\n            //添加绑定映射\r\n            this._bindings.set(key, dict);\r\n        }\r\n\r\n        //如果存在默认绑定状态并且等于当前绑定状态\r\n        if (dict.has(BindingConst.NULL)) {\r\n            let insideDic = dict.get(BindingConst.NULL);\r\n            if (insideDic.has(binding.property)) {\r\n                let existingBinding = insideDic.get(binding.property);\r\n                if (binding.property === binding) {\r\n                    //删除默认绑定\r\n                    insideDic.delete(BindingConst.NULL);\r\n                }\r\n            }\r\n\r\n        }\r\n        let insideDict;\r\n        //添加或覆盖绑定状态\r\n        if (!dict.has(bindingName)) {\r\n            //创建内部映射\r\n            insideDict = new Map < any, DecoratorClassBinding > ();\r\n            //映射绑定状态\r\n            insideDict.set(binding.property, binding);\r\n            //映射绑定\r\n            dict.set(bindingName, insideDict);\r\n        } else {\r\n            //获取内部映射\r\n            insideDict = dict.get(bindingName);\r\n            //检查是否存在属性名映射\r\n            if (!insideDict.has(binding.property)) {\r\n                //映射绑定\r\n                insideDict.set(binding.property, binding)\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 重写获取绑定状态映射表，返回键值的所有绑定状态\r\n     * @param key 被绑定的键值\r\n     */\r\n    getBindingMap(key: any): Map < any, Map < any, DecoratorClassBinding >> {\r\n        if (this._bindings.has(key)) {\r\n            return this._bindings.get(key);\r\n        }\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\n\r\nexport class DecoratorClassBinding extends Binding{\r\n    protected _property: any;\r\n    public get property(){\r\n        return this._property;\r\n    }\r\n    \r\n    /**\r\n     * 从正在绑定状态映射到属性，返回此时的绑定状态。\r\n     * @param property 绑定映射的值\r\n     */\r\n    toProperty(property : any):DecoratorClassBinding {\r\n        this._property = property;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n    //重写绑定到值\r\n    to(value : any):DecoratorClassBinding{\r\n        return super.to(value) as DecoratorClassBinding;\r\n    }\r\n    //重写绑定别名\r\n    toName(name : any) : DecoratorClassBinding{\r\n        return super.toName(name) as DecoratorClassBinding;\r\n    }\r\n}","import { DecoratorClassBinding } from \"./DecoratorClassBinding\";\r\n/**\r\n * 存储装饰器获取的信息\r\n */\r\nexport class DecoratorClass{\r\n    //注入列表\r\n    private _list : DecoratorClassBinding[];\r\n    public get list(){\r\n        return this._list;\r\n    }\r\n    public set list(value : DecoratorClassBinding[]){\r\n        this._list = value;\r\n    }\r\n}","import { DecoratorClassBinder } from \"./DecoratorClassBinder\";\r\nexport module DecoratorConst {\r\n    /**\r\n     * 全局注册接入点\r\n     * 使用属性的类型和属性的别名识别被注入的属性\r\n     */\r\n    export const DECORATOR_CLASS_BINDER = new DecoratorClassBinder();\r\n}","import { inject } from '../../lib/framework/Injector/InjectDecorator';\nimport { MainModel} from '../Model/MainModel';\nimport Animal from './Animal';\nimport { MainUtil } from '../util/MainUtil';\nimport { IocView } from '../../lib/extensions/IocView';\nimport { GameSignalEnum, MainSignalEnum } from '../signal/MainSignalEnum';\nimport { __IC_Model, ModelType } from \"../util/Model\";\nimport { __IC_Util, UtilType } from '../util/Util';\nimport { __IC_Manager, ManagerType } from '../util/Manager';\nimport AudioManager from '../util/AudioManager';\n\nconst {ccclass, property} = cc._decorator\n\n@ccclass\nexport default class Food extends IocView {\n    @inject(__IC_Model,ModelType.Main)\n    mMdl : MainModel;\n    @inject(__IC_Util,UtilType.Main)\n    mUtl : MainUtil;\n    @inject(__IC_Manager,ManagerType.Audio)\n    aMgr : AudioManager;\n\n    inited;\n    foodData;\n\n\tpublic speed = 0;\n    public accel = 0;\n    \n    private moveY = 0\n    type = ''\n\n    onLoad() {super.onLoad();}\n    start(){super.start();}\n    reuse() {}\n    unuse() {}\n    public clear(){\n        this.speed = 100;\n        this.accel = 100;\n        this.moveY = 0;\n        this.node.x = 0;\n        this.node.y = 0;\n    }\n    update(dt) {\n    \tif (!this.inited) return\n    \tthis.speed += this.accel * dt\n    \tthis.moveY = this.speed * dt\n        this.node.y -= this.moveY\n    }\n\n    onCollisionEnter(other, self) {\n        if (!this.inited) return;\n        let otherComponent = other.getComponent(Animal);\n        let selfComponent = self.getComponent(Food);\n        if (otherComponent && selfComponent && otherComponent.type === selfComponent.type) {\n            //this.mMdl.onMatch()\n            this.sMgr.get(MainSignalEnum.Match).dispatch(GameSignalEnum.onMatch,this.node);\n            this.resPoolNode(this.node);\n        } else {\n            //this.mMdl.onNotMatch()\n            this.sMgr.get(MainSignalEnum.Match).dispatch(GameSignalEnum.onNotMatch);\n        }\n        this.inited = false;\n    }\n    //回收到资源池\n    resPoolNode(foodNode) {\n        let index = this.mMdl.currentFoodNodes.indexOf(foodNode)\n        if (index !== -1) {\n            this.mMdl.currentFoodNodes.splice(index, 1)\n        }\n        return this.mMdl.foodPool.res(foodNode)\n    }\n    //随机配置食物位置\n    randomProps() {\n        this.inited = false\n        let track = this.mUtl.randomCoin()\n        //记录最后的食物索引\n        if (this.mMdl.lastFoodIndex === -1) this.mMdl.lastFoodIndex = track\n        if (this.mMdl.lastTrack === -1) this.mMdl.lastTrack = track\n        let baseIndex\n        //如果当前轨道等于最后的轨道\n        if (track === this.mMdl.lastTrack) {\n            //创建与最后的轨道相同类型的食物\n            baseIndex = this.mMdl.lastFoodIndex\n        } else {\n            //检查当前的轨道与最后的食物之间的差值\n            baseIndex = track ? this.mMdl.lastFoodIndex + 1 : this.mMdl.lastFoodIndex - 1\n        }\n        //随机范围\n        let randomRange = [baseIndex - 1, baseIndex + 1].map(i => {\n            if (i < 0) i = this.mMdl.foodDatas.length + i\n            if (i >= this.mMdl.foodDatas.length) i = i - this.mMdl.foodDatas.length\n            return i\n        })\n        let foodIndex = this.mUtl.randomValue(...randomRange)\n        this.mMdl.lastFoodIndex = foodIndex\n        this.mMdl.lastTrack = track\n        this.foodData = this.mMdl.foodDatas[foodIndex]\n        let foodNode = this.node\n        this.type = this.foodData.type\n        foodNode.getComponent(cc.Sprite).spriteFrame = this.foodData.spriteFrame ;\n        let x = (track ? 1 : -1) * (this.mMdl.animalTextureRect.width / 2);\n        foodNode.setPosition(x , this.mUtl.getSceneSize().height/2);\n        this.inited = true\n    }\n}\n\n\n\n","import { Command } from \"../../lib/framework/Command/Command\";\r\n\r\n//引用注入装饰器\r\nexport class GameOverCommand extends Command{\r\n    execute(){\r\n        //console.info(\"[游戏结束]\");\r\n    }\r\n\r\n    gameOver() {\r\n\r\n        cc.director.loadScene('Begin')\r\n    }\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport Animal from \"../view/Animal\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\nimport { TouchUtil, TouchDirection, TouchStatus } from \"../util/TouchUtil\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\n\r\n/**\r\n * 生成视图节点命令\r\n * 这个命令用于生成游戏视图\r\n */\r\nexport class GenerateCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl : MainUtil;\r\n    @inject(__IC_Util,UtilType.Touch)\r\n    tUtl : TouchUtil;\r\n    @inject(cc.Node,\"Scene\")\r\n    sceneNode : cc.Node;\r\n    @inject(cc.Node,\"Animals\")\r\n    animalsNode : cc.Node;\r\n    @inject(cc.Prefab,\"Animal\")\r\n    animalPrefab : cc.Prefab;\r\n    @inject(cc.Prefab,\"Food\")\r\n    foodPrefab : cc.Prefab;\r\n\r\n\r\n    execute(){\r\n        //console.log(\"[视图节点生成指令]\");\r\n        this.init();\r\n        this.generateTouchArea();\r\n        this.generateAnimalNodes();\r\n    }\r\n    //生成触控区域\r\n    generateTouchArea(){\r\n        let area = new cc.Node(\"TouchArea\");\r\n        this.sceneNode.addChild(area);\r\n        area.width = this.mUtl.getSceneSize().width;\r\n        area.height = this.mUtl.getSceneSize().height;\r\n        this.tUtl.registerTouchArea(area,true);\r\n    }\r\n    init() {\r\n        this.mMdl.currentFoodNodes = [];\r\n        this.mMdl.foodPool = new PrefabPool('Food', this.foodPrefab)\r\n        this.mMdl.pauseFlag = false;\r\n        this.mMdl.lastFoodIndex = -1\r\n        this.mMdl.lastTrack = -1\r\n        return Promise.all(this.mMdl.foodDatas.map(foodData => this.mUtl.spriteRes(foodData.image).then(spriteFrame => { foodData.spriteFrame = spriteFrame })))\r\n    }\r\n    //生成动物节点\r\n    generateAnimalNodes() {\r\n        let that = this;\r\n        Promise.all(that.mMdl.animalDatas.map(animalData => that.mUtl.spriteRes(animalData.image)))\r\n            .then((spriteFrames) => {\r\n                if (spriteFrames && spriteFrames.length > 0) {\r\n                    spriteFrames.forEach((spriteFrame, i) => {\r\n                        let animalData = that.mMdl.animalDatas[i];\r\n                        let animalNode = cc.instantiate(that.animalPrefab);\r\n                        let animal = animalNode.getComponent(Animal);\r\n                        let sprite = animalNode.getComponent(cc.Sprite);\r\n                        //注意，未被添加到空间中的节点不会被初始化，所以这里需要先引入节点再执行节点的函数\r\n                        that.animalsNode.addChild(animalNode);\r\n\r\n                        sprite.spriteFrame = spriteFrame as cc.SpriteFrame;\r\n                        animal.type = animalData.type;\r\n                        animal.rePositonAnimal(i);\r\n                    })\r\n                }\r\n            })\r\n    }\r\n}","import { CommandBinding } from \"./CommandBinding\";\r\nimport { IBinding } from \"../Bind/Binding\";\r\nimport { Binder } from \"../Bind/Binder\";\r\nimport { IConstructorName } from \"../IocConst\";\r\n\r\nexport interface ICommandBinder{\r\n    bind (key : any) : CommandBinding;\r\n    getRawBinding():IBinding;\r\n}\r\nexport class __IC_CommandBinder extends IConstructorName{\r\n    static get constructorName(){return \"ICommandBinder\";}\r\n}","//namespace ioc{\r\nimport { IContext } from \"./Context\"\r\nimport { IConstructorName } from \"../IocConst\";\r\nexport class __IC_Root extends IConstructorName{\r\n    get constructorName(){return \"IRoot\";}\r\n}\r\nexport interface IRoot {\r\n    context: IContext;\r\n}\r\n//}","import {Binder, IBinder} from \"../Bind/Binder\"\r\nimport {IBinding, Binding} from \"../Bind/Binding\"\r\nimport {BindingConst} from \"../Bind/BindConst\"\r\nimport { Injector } from \"./Injector\";\r\nimport { InjectBinding } from \"./InjectBinding\";\r\nimport {DecoratorConst} from \"../Decorator/DecoratorConst\"\r\nimport {IocError, IConstructorName} from \"../IocConst\"\r\nimport { __IC_Model } from \"../../../project/util/Model\";\r\nimport { MainModel } from \"../../../project/Model/MainModel\";\r\n//全局注入数据绑定器\r\nconst ClassBinder = DecoratorConst.DECORATOR_CLASS_BINDER;\r\n\r\nexport interface IInjectBinder extends IBinder{\r\n    injector:Injector;\r\n    getInstance(key,name) : any;\r\n    getBinding(key, name) : InjectBinding;\r\n    bind(key:any):InjectBinding;\r\n    /**\r\n     * 解绑所有被标记了需要解绑的状态\r\n     */\r\n    unbindAllMark();\r\n} \r\nexport class __IC_InjectBinder extends IConstructorName{\r\n    get constructorName(){return \"IInjectBinder\";}\r\n}\r\nexport class InjectBinder extends Binder implements IInjectBinder {\r\n    //注入器\r\n    private _injector:Injector;\r\n    constructor(){\r\n        super();\r\n        this._injector = new Injector ();\r\n        this._injector.binder = this;\r\n        this._injector.injectClassBinder = ClassBinder;\r\n    }\r\n    public get injector() : Injector{\r\n        return this._injector;\r\n    }\r\n    //绑定状态映射字典\r\n    public getInstance(key,name) : any\r\n    {\r\n        //如果未设置别名则使用默认设置\r\n        if(!name)name = BindingConst.NULL;\r\n        //获取绑定状态\r\n        let binding : InjectBinding = this.getBinding (Binding.checkAbstract(key), name) as InjectBinding;\r\n        //尝试获取一个未绑定的键值对时抛出绑定失败异常\r\n        if (binding == null){throw new Error(\"InjectionBinder has no binding for:\\n\\tkey: \" + key + \"\\nname: \" + name);}\r\n        //根据绑定状态从注入器中获取实例\r\n        //console.info(\"[实例化]\"+binding.key);\r\n        let instance = this._injector.instantiate(binding,false);\r\n        //console.info(\"[尝试注入]\"+Binding.checkAbstract(binding.key));\r\n        this._injector.tryInject(binding,instance);\r\n        return instance;\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key, name) : InjectBinding{\r\n        return super.getBinding(key,name) as InjectBinding\r\n    }\r\n    //重写基类的绑定函数\r\n    public bind(key:any):InjectBinding{\r\n        return super.bind(key) as InjectBinding;\r\n    }\r\n    public getRawBinding() : IBinding{\r\n        return new InjectBinding(this.resolver.bind(this));\r\n    }\r\n    public unbindAllMark(){\r\n        let that = this;\r\n        let unbinds = [];\r\n        (this._bindings as Map < any, Map < any, InjectBinding >>).forEach(dict => {\r\n            dict.forEach(binding=>{\r\n                if(binding.isUnbind){\r\n                    unbinds.push(binding);\r\n                }\r\n            })\r\n        });\r\n        //解除被标记的绑定\r\n        unbinds.forEach(binding=>{\r\n            that.unbind(binding.key,binding.name);\r\n        })\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\nimport {InjectConst} from \"./InjectConst\";\r\n\r\nexport class InjectBinding extends Binding{\r\n    protected _isUnbind : boolean = false;\r\n    //默认绑定状态\r\n    protected _bindingType: InjectConst.BindingType = InjectConst.BindingType.DEFAULT;\r\n    //默认自动注入\r\n    protected _isInject: boolean = true;\r\n    //参数\r\n    protected _args: any;\r\n/*     //键值是否为构造函数\r\n    protected _isKeyConstructor = false;\r\n    //值是否为构造函数\r\n    protected _isValueConstructor = false; */\r\n\r\n/*     public get isKeyConstructor(){\r\n        return this._isKeyConstructor;\r\n    }\r\n    public get isValueConstructor(){\r\n        return this._isValueConstructor;\r\n    } */\r\n    public get isInject(){\r\n        return this._isInject;\r\n    }\r\n    //参数列表\r\n    public get args() {\r\n        return this._args;\r\n    }\r\n    public get bindingType(){\r\n        return this._bindingType;\r\n    }\r\n    public get isUnbind(){\r\n        return this._isUnbind;\r\n    }\r\n    /**\r\n     * 参数列表\r\n     */\r\n    public toArgs(){\r\n        this._args = arguments;\r\n        if (this._resolver != null){\r\n            this._resolver(this);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 设置为单例模式时，每次都会得到相同的实例\r\n     */\r\n\tpublic toSingleton(): InjectBinding\r\n\t{\r\n\t\t//如果已经存在一个值了, 那么这次映射就被视为多余的\r\n\t\tif (this._bindingType === InjectConst.BindingType.VALUE){\r\n            return this;\r\n        }\r\n        //设定为单例注入\r\n        this._bindingType = InjectConst.BindingType.SINGLETON;\r\n\t\tif (this._resolver != null){\r\n\t\t\tthis._resolver (this);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n    /**\r\n     * 设置为解绑时，调用解绑方法将会解绑所有被标记的绑定状态\r\n     */\r\n    public unBind(): InjectBinding{\r\n        this._isUnbind = true;\r\n        return this;\r\n    }\r\n    public toValue(value : any) : InjectBinding{\r\n        this._bindingType = InjectConst.BindingType.VALUE;\r\n        this.setValue(value);\r\n        return this;\r\n    }\r\n    public setValue(o : any) : InjectBinding\r\n    {\r\n        this.to(o);\r\n        return this;\r\n    }\r\n    public toInject( value : boolean) : InjectBinding\r\n    {\r\n        this._isInject = value;\r\n        return this;\r\n    }\r\n    //重写基类的赋值函数\r\n    public to(value : any) : InjectBinding{\r\n        return super.to(value) as InjectBinding;\r\n    }\r\n    public toName(name : any) : InjectBinding{\r\n        return super.toName(name) as InjectBinding;\r\n    }\r\n}","export module InjectConst {\r\n    //注入状态类型枚举\r\n    export const enum BindingType\r\n    {\r\n        /// 每次都会创建一个新的对象\r\n        DEFAULT = \"Default\",\r\n    \r\n        /// 总是使用同一个对象单例\r\n        SINGLETON = \"Singleton\",\r\n    \r\n        /// 总是相同的对象但参数不同\r\n        VALUE = \"Value\",\r\n    }\r\n}","import {DecoratorConst} from \"../Decorator/DecoratorConst\"\r\nimport { Binding } from \"../Bind/Binding\";\r\n//全局注入数据绑定器\r\nconst ClassBinder = DecoratorConst.DECORATOR_CLASS_BINDER;\r\n/**\r\n * 注入装饰器模块\r\n * 因为TS的类型系统仅可以用于检查语法错误，而在编译为JS后不再有类型系统，所以无法在TS中存储类型数据\r\n * 并且在微信环境下是无法使用反射库和动态代码，至少现在还不行。\r\n * 为了实现注入功能，这里采用类的构造函数作为类型数据，以构造函数的name属性作为类型的名称，又因接口没有构造函数\r\n * 所以统一采用添加 __IC_ 前缀的模拟接口名方式间接存储接口数据，因为装饰器会在程序运行的起始阶段执行，所以使用一个全局变量存储这些数据\r\n * @see 注意：所有的__IC_类均需要实现IConstructorName接口\r\n * @example\r\n * class{\r\n *  @inject(constructor)\r\n *  anyclass:T;\r\n * }\r\n */\r\nexport function inject < T > (str: string): Function;\r\n/**\r\n * 属性值注入装饰器\r\n * @param c 构造函数\r\n */\r\nexport function inject < T > (c: new() => T): Function;\r\n/**\r\n * 使用别名的方式注入属性值\r\n * @param name 属性值别名\r\n */\r\nexport function inject < T > (c: new() => T, name: any): Function;\r\nexport function inject < T > (str:string, name: any): Function;\r\n/**\r\n * 使用默认的方式注入属性值\r\n */\r\n//export function inject<T>(_target: Object, _key: any, _desc ? : any) : void;\r\n\r\n//利用重载的形式定义注入属性的方法\r\nexport function inject < T > (): any {\r\n    switch (arguments.length) {\r\n        case 0:\r\n            break;\r\n        case 1:\r\n            return injectNoNameFunc < T > (arguments[0]);\r\n            break;\r\n        case 2:\r\n            return injectToNameFunc < T > (arguments[0], arguments[1])\r\n            break;\r\n        case 3:\r\n            break;\r\n    }\r\n}\r\n/**\r\n * 无别名的属性装饰器\r\n * @param _constructor 类型T的构造函数\r\n */\r\nconst injectNoNameFunc = < T > (_constructor: new() => T | string) => {\r\n    return function (_target: any, _property: string) {\r\n        injectFunc(_target,_constructor,_property);\r\n    }\r\n}\r\n/**\r\n * 带别名的属性装饰器\r\n * @param _constructor 类型T的构造函数\r\n */\r\nconst injectToNameFunc = < T > (_constructor: new() => T | string, _name: any) => {\r\n    return function (_target: any, _property: string) {\r\n        injectFunc(_target,_constructor,_property,_name);\r\n    }\r\n\r\n}\r\n/**\r\n * \r\n * @param _target 被注入的目标类\r\n * @param _constructor 注入的类\r\n * @param _property 注入的类的属性名\r\n * @param _name 注入的类的别名\r\n */\r\nfunction injectFunc(_target,_constructor,_property,_name?){\r\n    //所有实现了IConstructorName的类都属于虚类，这里获取虚类对应的接口名作为键值传递给绑定器\r\n    //因为压缩代码会把所有对象的名称都压缩掉，所以这里使用构造函数作为键值\r\n    ClassBinder.bind(_target.constructor).to(Binding.checkAbstract(_constructor)).toProperty(_property).toName(_name);\r\n}","import { InjectBinding } from \"./InjectBinding\";\r\nimport {InjectConst} from \"./InjectConst\";\r\nimport { Binding } from \"../Bind/Binding\";\r\n/**\r\n * 注入工厂，负责从给定的构造函数创建对象\r\n * 可以创建单例\r\n */\r\nexport class InjectFactory{\r\n    /**\r\n     * 根据绑定状态和指定的参数创建或获取实例对象\r\n     * @param binding 绑定状态\r\n     * @param args 参数\r\n     */\r\n    public get(binding:InjectBinding,args : any[]):object{\r\n        //检查绑定状态是否有效\r\n        if (binding == null){\r\n\t\t\tthrow new Error (\"InjectorFactory cannot act on null binding\");\r\n        }\r\n        //判断注入状态类型\r\n        let bindingType : InjectConst.BindingType = binding.bindingType;\r\n        //根据不同的类型创建\r\n        switch (bindingType)\r\n        {\r\n            case InjectConst.BindingType.SINGLETON:\r\n                return this.singletonOf (binding, args);\r\n                break;\r\n            case InjectConst.BindingType.VALUE:\r\n                return this.valueOf (binding);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return this.instanceOf (binding, args);\r\n    }\r\n    // 生成一个新的实例\r\n\tprotected instanceOf( binding : InjectBinding, args : any[]) : any\r\n\t{\r\n\t\tif (binding.value != null)\r\n\t\t{\r\n\t\t\treturn this.createFromValue(binding.value, args);\r\n\t\t}\r\n\t\tlet value : any = this.generateImplicit(binding.key, args);\r\n\t\treturn this.createFromValue(value, args);\r\n    }\r\n    // Call the Activator to attempt instantiation the given object\r\n\tprotected createFromValue(c : new(...args)=> any, args : any[]) : any\r\n\t{\r\n\t\tlet instance = null;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (args == null || args.length == 0)\r\n\t\t\t{\r\n\t\t\t\tinstance = new c();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinstance = new c(args);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch\r\n\t\t{\r\n\t\t\t//No-op\r\n        }\r\n        //if(instance)console.info(\"[实例化]\"+instance.constructor.name);\r\n\t\treturn instance;\r\n    }\r\n    protected generateImplicit(key : any, args:any[]):any\r\n    {\r\n        //如果无法直接转换键值为构造函数\r\n        if(!key)return null;\r\n        //检查键值是否为构造函数\r\n        if (Binding.isConstructor(key))\r\n        {\r\n            return this.createFromValue(key, args);\r\n        }\r\n        throw new Error (\"InjectorFactory can't instantiate an Interface or Abstract Class. Class: \" + key.ToString());\r\n    }\r\n    // Generate a Singleton instance\r\n\tprotected singletonOf(binding : InjectBinding, args : any[])\r\n\t{\r\n\t\tif (binding.value != null)\r\n\t\t{\r\n            let o = this.createFromValue (binding.value, args);\r\n            if (o == null)\r\n                return null;\r\n            binding.setValue(o);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbinding.setValue(this.generateImplicit(binding.key, args));\r\n\t\t}\r\n\t\treturn binding.value;\r\n    }\r\n    protected valueOf(binding : InjectBinding)\r\n    {\r\n        return binding.value;\r\n    }\r\n}","import { InjectFactory } from \"./InjectFactory\"\r\nimport { InjectBinder } from \"./InjectBinder\";\r\nimport { InjectBinding } from \"./InjectBinding\";\r\nimport { InjectConst} from \"./InjectConst\";\r\nimport { DecoratorClass } from \"../Decorator/DecoratorClass\";\r\nimport { DecoratorClassBinder } from \"../Decorator/DecoratorClassBinder\";\r\nimport { Binding } from \"../Bind/Binding\";\r\n\r\nexport class Injector{\r\n    public factory : InjectFactory;\r\n    public binder : InjectBinder;\r\n    public injectClassBinder : DecoratorClassBinder;\r\n\r\n    constructor(){\r\n        this.factory = new InjectFactory();\r\n    }\r\n    public uninject(target)\r\n    {\r\n        if(!this.binder||!target)throw new Error(\"Attempt to inject into Injector without a Binder or null instance\");\r\n        //排除一些不能被注入的类型\r\n        let type : any = typeof target;\r\n        if (type === \"string\" || type === \"boolean\"||type === \"number\" ||type === \"symbol\"||type === \"undefined\" || type === \"function\")\r\n        {\r\n            return target;\r\n        }\r\n        //获取注入类\r\n        let injectClass : DecoratorClass = this.injectClassBinder.get(target);\r\n        this.decoratorUnInject (target, injectClass);\r\n    }\r\n    private decoratorUnInject(target : any, injectClass : DecoratorClass){\r\n        let that = this;\r\n        //遍历注入类\r\n        injectClass.list.forEach((binding)=>{\r\n            //尝试获绑定状态\r\n            let injectBinding = that.binder.getBinding(binding.value,binding.name);\r\n            //不能注入一个未绑定的值\r\n            if(injectBinding){\r\n                //将注入值赋给目标对象\r\n                target[binding.property] = null;\r\n            }\r\n        })\r\n    }\r\n    //实例化对象\r\n    public instantiate(binding : InjectBinding,tryInjectHere : boolean) : object{\r\n        //检查是否具备注入条件\r\n        if(!this.binder||!this.factory)throw new Error(\"Attempt to instantiate from Injector without a Binder or inject into Injector without a Factory\");\r\n        //构造函数\r\n        let constructor = null;\r\n        //实例对象\r\n        let instance : object = null;\r\n        //检查绑定状态的值是否为构造函数\r\n        if (binding.isValueConstructor){\r\n            //传入构造函数\r\n            constructor = binding.value;\r\n        }else{\r\n            //直接赋值\r\n            instance = binding.value;\r\n        }\r\n        //如果没有设置注入值但是键值是一个构造函数\r\n        if(!constructor&&binding.isKeyConstructor){\r\n            //指定绑定状态的键值为构造函数\r\n            constructor = binding.key;\r\n        }\r\n        //如果没有直接赋值实例并且存在构造函数\r\n        if(!instance && constructor){\r\n            //参数\r\n            let args = binding.args;\r\n            instance = this.factory.get(binding, args);\r\n            //如果尝试在这里直接注入\r\n            if (tryInjectHere)\r\n            {\r\n                this.tryInject(binding, instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    public tryInject(binding : InjectBinding, target : any)\r\n    {\r\n        //如果工厂不能创建实例则这里直接返回\r\n        if (target != null)\r\n        {\r\n            if (binding.isInject)\r\n            {\r\n                target = this.inject(target, false);\r\n            }\r\n\r\n            if (binding.bindingType == InjectConst.BindingType.SINGLETON || binding.bindingType == InjectConst.BindingType.VALUE)\r\n            {\r\n                //prevent double-injection\r\n                binding.toInject(false);\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    //注入目标中所有被@Inject标记的属性\r\n    public inject(target : object, attemptConstructorInjection : boolean) : any\r\n    {\r\n        if(!this.binder||!target)throw new Error(\"Attempt to inject into Injector without a Binder or null instance\");\r\n        //排除一些不能被注入的类型\r\n        let type : any = typeof target;\r\n        if (type === \"string\" || type === \"boolean\"||type === \"number\" ||type === \"symbol\"||type === \"undefined\" || type === \"function\")\r\n        {\r\n            return target;\r\n        }\r\n        //因为TS中无法获得类型名称，所以使用目标的构造函数名称代替类型名称\r\n        //let typeName : string = target.constructor;\r\n        //获取注入类\r\n        let injectClass : DecoratorClass = this.injectClassBinder.get(target);\r\n        //是否允许使用构造器注入\r\n        if (attemptConstructorInjection)\r\n        {\r\n            //target = performConstructorInject(target, reflection);\r\n        }\r\n        this.decoratorInject(target,injectClass);\r\n        //performSetterInject(target, reflection);\r\n        //postInject(target, reflection);\r\n        return target;\r\n    }\r\n    /**\r\n     * 装饰器注入，使用注入类进行注入\r\n     */\r\n    private decoratorInject(target : any, injectClass : DecoratorClass){\r\n        let that = this;\r\n        //遍历注入类\r\n        injectClass.list.forEach((binding)=>{\r\n            //console.info(\"[装饰器注入]\"+binding.value + \"[别名]\"+binding.name);\r\n            //尝试获绑定状态\r\n            let injectBinding = that.binder.getBinding(binding.value,binding.name);\r\n            //不能注入一个未绑定的值\r\n            if(injectBinding){\r\n                let instance = that.getInjectValue(injectBinding.key,injectBinding.name);\r\n                //将注入值赋给目标对象\r\n                target[binding.property] = instance;\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * 获取需要注入的值，这个过程会递归调用\r\n     * @see 注意循环依赖会严重消耗性能\r\n     */\r\n    private getInjectValue(type,name):object{\r\n        //尝试获取绑定状态\r\n        let binding = this.binder.getBinding(type,name);\r\n        if(!binding)return null;\r\n        //if(binding.key.name)console.info(\"[获取注入值]\"+binding.key.name+\"[别名]\"+name+\"[绑定状态]\"+binding.bindingType + \",\"+binding.isInject);\r\n        //else console.info(\"[获取注入值]\"+binding.key+\"[别名]\"+name+\"[绑定状态]\"+binding.bindingType + \"[需要注入]\"+binding.isInject);\r\n        //如果是值类型绑定\r\n        if(binding.bindingType === InjectConst.BindingType.VALUE){\r\n            //如果需要注入\r\n            if(binding.isInject){\r\n                //if(Binding.isConstructor(binding.value))console.info(\"[对值(构造函数))]\"+binding.value.constructor.name + \"[进行注入]\");\r\n                //else console.info(\"[对值(对象)]\"+binding.value.__proto__.constructor + \"[进行注入]\");\r\n\r\n                let injv = this.inject (binding.value, false);\r\n                binding.toInject (false);\r\n\r\n                //if(binding.key.name)console.info(\"[绑定状态]\"+binding.key.name+\"[完成注入]\"+binding.isInject);\r\n                //else console.info(\"[绑定状态]\"+binding.key+\"[完成注入]\"+binding.isInject);\r\n\r\n                return injv;\r\n            }else{\r\n                return binding.value;\r\n            }\r\n        //如果是单例注入\r\n        }else if (binding.bindingType == InjectConst.BindingType.SINGLETON){\r\n            //如果绑定状态的值是一个构造函数\r\n            if (binding.isValueConstructor || binding.value == null)\r\n            {\r\n                this.instantiate (binding, true);\r\n            }\r\n            return binding.value;\r\n        }else{\r\n            return this.instantiate(binding,true);\r\n        }\r\n    }\r\n    /*     //构造器注入，未实现\r\n    private performConstructorInject(){\r\n\r\n    } */\r\n    /* //属性设置器注入，未实现\r\n    performSetterInject(){\r\n\r\n    } */\r\n    /*     //方法注入，未实现\r\n    postInject(){\r\n\r\n    } */\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport Animal from \"../view/Animal\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { TouchUtil, TouchDirection, TouchStatus } from \"../util/TouchUtil\";\r\nimport { InputModel } from \"../Model/InputModel\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport AudioManager from \"../util/AudioManager\";\r\n\r\n/**\r\n * 输入控制指令\r\n */\r\nexport class InputControlCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Model,ModelType.Input)\r\n    iMdl : InputModel;\r\n    @inject(cc.Node,\"Animals\")\r\n    animalsNode : cc.Node;\r\n    @inject(__IC_Util,UtilType.Touch)\r\n    tUtl : TouchUtil;\r\n    @inject(__IC_Manager,ManagerType.Audio)\r\n    aMgr : AudioManager;\r\n\r\n    execute(){\r\n        let that = this;\r\n        //注册一个使用全局区域的上划回调\r\n        this.tUtl.on(TouchDirection.Up,(status:TouchStatus)=>{\r\n            if(status.sPosX>=0){\r\n                that.areaOnMove(TouchDirection.Up);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Down);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Down,(status:TouchStatus)=>{\r\n            if(status.sPosX>=0){\r\n                that.areaOnMove(TouchDirection.Up);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Down);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Left,(status:TouchStatus)=>{\r\n            if(status.sPosY>=0){\r\n                that.areaOnMove(TouchDirection.Left);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Right);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Right,(status:TouchStatus)=>{\r\n            if(status.sPosY>=0){\r\n                that.areaOnMove(TouchDirection.Left);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Right);\r\n            }\r\n        });\r\n    }\r\n\r\n    areaOnMove(direction : TouchDirection) {\r\n        //如果暂停标志位为真则直接返回\r\n        if (this.mMdl.pauseFlag) return\r\n        if (direction === TouchDirection.Left || direction === TouchDirection.Right) {\r\n            this.rotateAnimals(0)\r\n        } else if (direction === TouchDirection.Up || direction === TouchDirection.Down) {\r\n            this.rotateAnimals(1)\r\n        }\r\n    }\r\n    //旋转动物\r\n    rotateAnimals(direction) {\r\n        //如果正处于旋转中，则将缓存下一步操作\r\n        if (this.mMdl.isRotationing) {\r\n            this.iMdl.waitingHandle = this.rotateAnimals(direction);\r\n            return;\r\n        }\r\n        //播放跳跃音效\r\n        this.aMgr.play(\"Jump\");\r\n        let that = this;\r\n        this.mMdl.isRotationing = true\r\n        const [x, y] = direction ? [1, -1] : [-1, 1]\r\n        const rotateAction = cc.scaleBy(this.mMdl.rotateDur, x, y)\r\n        this.iMdl.lastAction = this.animalsNode.runAction(cc.sequence(rotateAction, cc.callFunc(() => {\r\n            that.resetAnimalsNode(direction);\r\n            if(that.animalsNode.children&&this.animalsNode.children.length>0){\r\n                //遍历并旋转所有动物节点\r\n                that.animalsNode.children.forEach((animalNode, i) => animalNode.getComponent(Animal).rePositonAnimal(i))\r\n            }\r\n            that.mMdl.isRotationing = false;\r\n            //执行之前等待中的操作\r\n            if(this.iMdl.waitingHandle){\r\n                this.iMdl.waitingHandle();\r\n            }\r\n        })));\r\n    }\r\n\r\n    resetAnimalsNode(direction) {\r\n        const animalsNodeChildren = this.animalsNode.children;\r\n        if (!direction) {\r\n            this.switchIndex(animalsNodeChildren, 0, 1)\r\n            this.switchIndex(animalsNodeChildren, 3, 2)\r\n        } else {\r\n            this.switchIndex(animalsNodeChildren, 0, 3)\r\n            this.switchIndex(animalsNodeChildren, 1, 2)\r\n        }\r\n        this.animalsNode.setScale(1, 1)\r\n    }\r\n\r\n    switchIndex(list, one, two) {\r\n        const temp = list[two]\r\n        list[two] = list[one]\r\n        list[one] = temp\r\n    }\r\n}","import { Singleton } from \"../util/Singleton\";\r\nimport { IModel } from \"../util/Model\";\r\n\r\nexport class InputModel extends Singleton implements IModel{\r\n    //等待中的操作\r\n    public waitingHandle;\r\n    public lastAction : cc.Action;\r\n\r\n    onConstructor(){\r\n        this.lastAction = null;\r\n        this.waitingHandle = null;\r\n    }\r\n}","import {Context, IContext} from \"../framework/Context/Context\"\r\nimport {IocRoot} from \"./IocRoot\"\r\nconst {ccclass} = cc._decorator\r\n@ccclass\r\nexport class IocComponet extends cc.Component{\r\n\tpublic registeredWithContext : boolean;\r\n\tprivate _requiresContext : boolean= true;\r\n\tpublic get requiresContext() : boolean\r\n\t{\r\n\t\treturn this._requiresContext;\r\n\t}\r\n\tpublic set requiresContext(value){\r\n\t\tthis._requiresContext = value;\r\n\t}\r\n\tprotected _registerWithContext : boolean = true;\r\n\tpublic get autoRegisterWithContext()\r\n\t{\r\n\t\treturn this._registerWithContext; \r\n\t}\r\n\tpublic set autoRegisterWithContext(value){\r\n\t\tthis._registerWithContext = value;\r\n\t}\r\n\tpublic get shouldRegister() :boolean { return this.enabled && this.node.activeInHierarchy; }\r\n\r\n\t//载入阶段尝试注入数据\r\n    onLoad(){\r\n\t\tif (this.autoRegisterWithContext && !this.registeredWithContext && this.shouldRegister)\r\n\t\t\tthis.bubbleToContext(this,BubbleType.Add, false);\r\n\t}\r\n\t//启动阶段尝试注入数据\r\n\tstart(){\r\n\t\tif (this.autoRegisterWithContext && !this.registeredWithContext && this.shouldRegister)\r\n\t\t\tthis.bubbleToContext(this, BubbleType.Add, true);\r\n\t}\r\n\r\n    protected bubbleToContext(view : cc.Component,type: BubbleType,finalTry:boolean)\r\n\t{\r\n\t\t\tconst LOOP_MAX : number= 100;\r\n\t\t\tlet loopLimiter : number= 0;\r\n\t\t\tlet node = view.node;\r\n\t\t\twhile (node.parent != null && loopLimiter < LOOP_MAX)\r\n\t\t\t{\r\n\t\t\t\tloopLimiter++;\r\n\t\t\t\tnode = node.parent;\r\n\t\t\t\tif (node.getComponent(IocRoot) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet iocContext : IocRoot = node.getComponent(IocRoot) as IocRoot;\r\n\t\t\t\t\tif (iocContext.context != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet context : IContext= iocContext.context;\r\n\t\t\t\t\t\tlet success : boolean= true;\r\n\r\n\t\t\t\t\t\tswitch (type)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase BubbleType.Add:\r\n\t\t\t\t\t\t\t\t//注入数据\r\n\t\t\t\t\t\t\t\tcontext.crossContextBinder.injector.inject(this,true);\r\n\t\t\t\t\t\t\t\t//context.addView(view);\r\n\t\t\t\t\t\t\t\tthis.registeredWithContext = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Remove:\r\n\t\t\t\t\t\t\t\t//context.removeView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Enable:\r\n\t\t\t\t\t\t\t\t//context.enableView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Disable:\r\n\t\t\t\t\t\t\t\t//context.disableView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tsuccess = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (success)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.requiresContext && finalTry && type == BubbleType.Add)\r\n\t\t\t{\r\n\t\t\t\t//last ditch. If there's a Context anywhere, we'll use it!\r\n\t\t\t\tif (Context.firstContext != null)\r\n\t\t\t\t{\r\n\t\t\t\t\t//Context.firstContext.addView(view);\r\n\t\t\t\t\tthis.registeredWithContext = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet msg : string;\r\n\t\t\t\tif(loopLimiter == LOOP_MAX){\r\n\t\t\t\t\tmsg = \"A view couldn't find a context. Loop limit reached.\"\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tmsg = \"A view was added with no context. Views must be added into the hierarchy of their ContextView lest all hell break loose.\";\r\n\t\t\t\t\tmsg += \"\\nView: \" + view.toString();\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(msg);\r\n\t\t\t}\r\n\t\t}\r\n}\r\n\r\nexport enum BubbleType\r\n{\r\n\tAdd,\r\n\tRemove,\r\n\tEnable,\r\n\tDisable\r\n}","export module IocError{\r\n    export const IC_ERROR = \"can't implement class that is only as interface\";\r\n}\r\nexport abstract class IConstructorName{\r\n    abstract get constructorName() : string;\r\n}","import {Context, IContext} from \"../framework/Context/Context\"\r\n\r\nconst {ccclass, property} = cc._decorator\r\n@ccclass\r\nexport class IocRoot extends cc.Component{\r\n    public context : IContext;\r\n\r\n    public requiresContext : boolean;\r\n\r\n    public registeredWithContext : boolean;\r\n\r\n    public autoRegisterWithContext : boolean;\r\n\r\n    public get shouldRegister() {return true;}\r\n\r\n    onDestroy(){\r\n        if (this.context != null && Context.firstContext != null)\r\n            Context.firstContext.removeCrossContext(this.context);\r\n    }\r\n}","import { IocComponet } from \"./IocComponet\";\r\nimport { inject } from \"../framework/Injector/InjectDecorator\";\r\nimport { __IC_SignalManager, ISignalManager } from \"../framework/Signal/SignalManager\";\r\n\r\nconst {ccclass} = cc._decorator\r\n@ccclass\r\nexport class IocView extends IocComponet{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n\r\n    onLoad(){\r\n        super.onLoad();\r\n    }\r\n    \r\n    start(){\r\n        super.start();\r\n    }\r\n\r\n}","import { IocComponet } from \"../../lib/extensions/IocComponet\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { __IC_SignalManager, ISignalManager } from \"../../lib/framework/Signal/SignalManager\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class LogicNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    onLoad(){\r\n        super.onLoad();\r\n        //注册节点\r\n        this.inj.bind(cc.Node).toName(\"LogicNode\").toValue(this.node).unBind();\r\n    }\r\n    start(){\r\n        super.start();\r\n    }\r\n    update(dt){\r\n        if(this.sMgr && !this.mMdl.pauseFlag){\r\n            this.sMgr.get(MainSignalEnum.Update).dispatch(dt);\r\n        }\r\n    }\r\n}","import Common from \"../../common\";\r\nimport WxGameApi from \"../WxGameApi\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad(){\r\n        if(!WxGameApi.isRunInWeiXin)return;\r\n        WxGameApi.playBGM(\"https://636f-common-510ecc-1257233686.tcb.qcloud.la/bgm.mp3?sign=13c065e7d82084906a0147ece1d1e47f&t=1538131480\");\r\n        console.info(\"[登入微信平台]\");\r\n        wx.login({\r\n            success(res){\r\n                console.info(\"[登录成功]\" + res);\r\n            },\r\n            fail(res){\r\n                console.info(\"[登录失败]\" + res);\r\n            }\r\n        });\r\n        //同步启动选项\r\n        this.launchOptionsSync();\r\n        //设置存储分数的方法并获取最高分\r\n        if(!Common.saveScoreFunc){\r\n            //获取最高分数据后绑定存储分数的方法\r\n            Common.saveScoreFunc = this.saveScore;\r\n        }\r\n\r\n    },\r\n    launchOptionsSync(){\r\n        if(!Common.shareTickets)Common.shareTickets=[];\r\n        let info = wx.getLaunchOptionsSync();\r\n        console.info(\"[同步启动选项]\"+info);\r\n        switch(info.scene){\r\n            case 1044:\r\n                if(info.shareTicket){\r\n                    Common.shareTickets.push(info.shareTicket);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    //存储游戏分数\r\n    saveScore(value){\r\n        let score =  Number(value);\r\n        //检查是否为最高分\r\n        if(score&&score>Common.maxScore){\r\n            Common.maxScore = score;\r\n        }\r\n        console.info(\"[通知开发数据容器存储分数]\"+score);\r\n        //发送存储分数消息告知开放数据容器\r\n        wx.getOpenDataContext().postMessage({\r\n            message:{\r\n                type: \"command\",\r\n                function: \"save\",\r\n                arguments : \"score\",\r\n                data: Common.maxScore,\r\n            }\r\n        });\r\n    }\r\n});","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport Common from \"../Common\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IInjectBinder, __IC_InjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\n\r\n//引用注入装饰器\r\nexport class LookRankCommand extends Command{\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    execute(){\r\n        //console.info(\"[查看排行榜开始]\");\r\n        this.lookRank();\r\n    }\r\n\r\n    lookRank(){\r\n        this.inj.unbindAllMark();\r\n        //let a = Common.persistRootNode;\r\n        cc.director.loadScene('Rank')\r\n    }\r\n}","import {StartCommand} from \"../command/StartCommand\"\r\nimport { __IC_SignalManager, ISignalManager } from \"../../Lib/Framework/Signal/SignalManager\";\r\nimport {IContext,Context} from \"../../Lib/Framework/Context/Context\"\r\nimport { MainSignalManager } from \"../signal/MainSignalManager\"\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { UpdateCommand } from \"../command/UpdateCommand\";\r\nimport { GenerateCommand } from \"../command/GenerateCommand\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport { RestartCommand } from \"../command/RestartCommand\";\r\nimport { LookRankCommand } from \"../command/LookRankCommand\";\r\nimport { MatchCommand } from \"../command/MatchCommand\";\r\nimport PrefabManager from \"../util/PrefabManager\";\r\nimport { ManagerType, __IC_Manager } from \"../util/Manager\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { TouchUtil } from \"../util/TouchUtil\";\r\nimport { InputControlCommand } from \"../command/InputControlCommand\";\r\nimport { InputModel } from \"../Model/InputModel\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { AudioUtil } from \"../util/AudioUtil\";\r\nimport AudioManager from \"../util/AudioManager\";\r\n\r\nexport class MainContext extends Context{\r\n    constructor(root: any){\r\n        super(root);\r\n    }\r\n    //添加核心\r\n    addCore(){\r\n        super.addCore();\r\n        //注入信号管理器单例\r\n        this.injectBinder.bind(__IC_SignalManager).to(MainSignalManager).toSingleton();\r\n        //绑定数据\r\n        this.injectBinder.bind(__IC_Model).toValue(MainModel.Instance).toName(ModelType.Main);\r\n        this.injectBinder.bind(__IC_Model).toValue(InputModel.Instance).toName(ModelType.Input);\r\n        //绑定工具\r\n        this.injectBinder.bind(__IC_Util).toValue(MainUtil.Instance).toName(UtilType.Main);\r\n        this.injectBinder.bind(__IC_Util).toValue(TouchUtil.Instance).toName(UtilType.Touch);\r\n        this.injectBinder.bind(__IC_Util).toValue(AudioUtil.Instance).toName(UtilType.Audio);\r\n\r\n        //绑定管理器\r\n        this.injectBinder.bind(__IC_Manager).toValue(PrefabManager.Instance).toName(ManagerType.Prefab);\r\n        this.injectBinder.bind(__IC_Manager).toValue(AudioManager.Instance).toName(ManagerType.Audio);\r\n\r\n        //console.info(\"添加核心\");\r\n    }\r\n    //映射绑定\r\n    mapBindings(){\r\n        super.mapBindings();\r\n        //console.info(\"映射绑定\");\r\n        let signalMgr : ISignalManager= this.injectBinder.getInstance(__IC_SignalManager,null);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Start)).to(StartCommand);\r\n        //绑定更新信号到更新命令,并使用池进行缓存\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Update)).to(UpdateCommand).Pooled();\r\n        //生成游戏视图节点\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Generate)).to(GenerateCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Restart)).to(RestartCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.LookRank)).to(LookRankCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Match)).to(MatchCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.InputControl)).to(InputControlCommand);\r\n    }\r\n    start() : IContext{\r\n        super.start();\r\n        //console.info(\"[启动环境]\");\r\n        return this;\r\n    } \r\n}\r\n","import { Singleton } from \"../util/Singleton\";\r\nimport { IModel } from \"../util/Model\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\n\r\n/**\r\n * 应该将需要生命周期较长的变量存储在数据模型里，然后在其他类中通过注入的方式获取数据模型\r\n */\r\nexport class MainModel extends Singleton implements IModel{\r\n    //食物对象池，减少创建对象的开销\r\n    public foodPool : PrefabPool= null;\r\n    //当前的食物节点列表\r\n    public currentFoodNodes = [];\r\n    //最后的食物索引\r\n    public lastFoodIndex = 0;\r\n    //最后的轨道\r\n    public lastTrack = 0;\r\n    public onMatch = null;\r\n    public onNotMatch = null;\r\n\r\n    public animalDatas = [{\r\n        image: 'animals/bird',\r\n        type: '0'      \r\n    }, {\r\n        image: 'animals/bear',\r\n        type: '1'   \r\n    }, {\r\n        image: 'animals/rabbit',\r\n        type: '2'   \r\n    }, {\r\n        image: 'animals/dog',\r\n        type: '3'   \r\n    }]\r\n    public foodDatas = [{\r\n        image: 'foods/food-bird',\r\n        type: '0',\r\n        spriteFrame : null\r\n    }, {\r\n        image: 'foods/food-bear',\r\n        type: '1',\r\n        spriteFrame : null \r\n    }, {\r\n        image: 'foods/food-rabbit',\r\n        type: '2',\r\n        spriteFrame : null\r\n    }, {\r\n        image: 'foods/food-dog',\r\n        type: '3',\r\n        spriteFrame : null\r\n    }]\r\n    public rotateDur = 0.1\r\n    public isRotationing = false\r\n    public animalTextureRect = { width: 264, height: 268  }\r\n\r\n    public pauseFlag = true;\r\n    public timer = 0\r\n    public lastTimer = 0\r\n    public timePeriod = 2.8\r\n    public initTimePeriod = 0\r\n    public minTimePeriod = 0.6\r\n    public score = 0\r\n    public lastScore = 0;\r\n    public maxScore = 0;\r\n    public currentLevel = 0\r\n    public harderRatios = (() => {\r\n        const list = []\r\n        for (let i = 0; i <= 10; i++) {\r\n            list[i] = [i * 10, 0.2]\r\n        }\r\n        return list\r\n    })();\r\n}","import {__IC_SignalManager,ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport {MainModel} from '../Model/MainModel';\r\nimport { inject } from '../../lib/framework/Injector/InjectDecorator';\r\nimport { IocView } from '../../lib/extensions/IocView';\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class MainNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl: MainModel;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n        //注册节点\r\n        this.inj.bind(cc.Node).toName(\"MainNode\").toValue(this.node).unBind();\r\n        //执行开始信号\r\n        this.sMgr.get(MainSignalEnum.Start).dispatch();\r\n    }\r\n\r\n    update(dt) {\r\n\r\n    }\r\n}","import {IRoot} from \"../../Lib/Framework/Context/IRoot\"\r\nimport {IContext} from \"../../Lib/Framework/Context/Context\"\r\nimport {IocRoot} from \"../../lib/extensions/IocRoot\"\r\nimport {MainContext} from \"./MainContext\"\r\nimport PersistRoot from \"../PersistRoot\";\r\nimport Common from \"../Common\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainRoot extends IocRoot implements IRoot {\r\n    //环境容器\r\n    public context: IContext;\r\n\r\n    onLoad () {\r\n        //let context = new MainContext(this);\r\n        this.context = Common.persistRootNode.context;\r\n        //this.context.restart();\r\n    }\r\n\r\n    start () {\r\n        if(this.context){\r\n            //console.info(this.context.getRoot().node.name);\r\n        }\r\n    }\r\n}\r\n\r\n","//主要的信号枚举类型,注意要确保不出现重复的字符串\r\nexport enum MainSignalEnum{\r\n    //开始命令\r\n    Start = \"Start\",\r\n    //更新命令\r\n    Update = \"Update\",\r\n    //生成视图节点命令\r\n    Generate = \"GenerateViewNodes\",\r\n    //重新开始\r\n    Restart = \"Restart\",\r\n    //查看排行榜\r\n    LookRank = \"LookRank\",\r\n    //记分逻辑\r\n    Match = \"Match\",\r\n    //输入控制\r\n    InputControl = \"InputControl\",\r\n}\r\n\r\nexport enum GameSignalEnum{\r\n    onMatch = \"OnMatch\",\r\n    onNotMatch = \"OnNotMatch\"\r\n}","import {SignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\n\r\nexport class MainSignalManager extends SignalManager{\r\n    info : string = \"this is a main signal manager\";\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\nexport class MainUtil extends Singleton implements IUtil{\r\n    public getSceneSize(){\r\n        return cc.winSize;\r\n    }\r\n    public spriteRes(resourceUrl) {\r\n        return new Promise((resolve, reject) => {\r\n            cc.loader.loadRes(resourceUrl, cc.SpriteFrame, (err, spriteFrame) => {\r\n                if (err) throw err\r\n                resolve(spriteFrame)\r\n            })\r\n        })\r\n    }\r\n    \r\n    public randomCoin() {\r\n        return Math.round(Math.random())\r\n    }\r\n    \r\n    public randomNumber(size) {\r\n        return Math.floor(Math.random() * size)\r\n    }\r\n    \r\n    public randomValue(...values) {\r\n        return values[this.randomNumber(values.length)]\r\n    }\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Manager extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IManager\";\r\n    }\r\n}\r\nexport interface IManager{\r\n\r\n}\r\n/**\r\n * 管理器类型枚举\r\n */\r\nexport enum ManagerType{\r\n    Prefab = \"Prefab\",\r\n    Audio = \"Audio\",\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport Common from \"../Common\";\r\nimport Food from \"../view/Food\";\r\nimport { GameSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport PauseNode from \"../view/PauseNode\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport AudioManager from \"../util/AudioManager\";\r\n\r\n//引用注入装饰器\r\nexport class MatchCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Manager,ManagerType.Audio)\r\n    aMgr : AudioManager;\r\n    @inject(cc.Node,\"Score\")\r\n    scoreNode : cc.Node;\r\n    @inject(cc.Node,\"Pause\")\r\n    pauseNode : cc.Node;\r\n\r\n    execute(match){\r\n        //console.info(\"[游戏判断]\");\r\n        switch(match){\r\n            case GameSignalEnum.onMatch:\r\n                this.onMatch();\r\n                break;\r\n            case GameSignalEnum.onNotMatch:\r\n                this.onNotMatch();\r\n                break;\r\n        }\r\n    }\r\n    //增加分数\r\n    gainPoint() {\r\n        this.aMgr.play(\"Score\");\r\n        this.mMdl.score++\r\n        this.scoreNode.getComponent(cc.Label).string = 'Score: ' + Number(this.mMdl.score)\r\n    }\r\n    onMatch() {\r\n        this.gainPoint()\r\n    }\r\n\r\n    onNotMatch() {\r\n        this.mMdl.pauseFlag = true\r\n        this.pauseNode.active = true\r\n        this.pauseNode.getComponent(PauseNode).score.string = \"\" + Number(this.mMdl.score);\r\n        this.stopAllCurrent()\r\n        //console.info(\"[游戏结算]\"+this.mMdl.score);\r\n        if(Common.saveScoreFunc){\r\n            Common.saveScoreFunc(this.mMdl.score);\r\n        }\r\n        this.mMdl.lastScore = this.mMdl.score;\r\n        this.mMdl.score = 0;\r\n        this.scoreNode.getComponent(cc.Label).string = 'Score: ' + Number(this.mMdl.score)\r\n    }\r\n\r\n    stopAllCurrent() {\r\n        //console.info(\"[停止当前游戏进程]\");\r\n        //let a = Common.persistRootNode;\r\n        if(this.mMdl.currentFoodNodes&&this.mMdl.currentFoodNodes.length>0){\r\n            this.mMdl.currentFoodNodes.forEach(foodNode => {\r\n                foodNode.getComponent(Food).inited = false\r\n            })\r\n        }\r\n    }\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Model extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IModel\"\r\n    }\r\n}\r\nexport interface IModel{\r\n\r\n}\r\n/**\r\n * 数据模型类型枚举\r\n */\r\nexport enum ModelType{\r\n    Main = \"Main\",\r\n    Input = \"Input\",\r\n}","import { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PauseNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl:MainModel\r\n    @property(cc.Label)\r\n    score:cc.Label = null;\r\n\r\n    onLoad () {\r\n        super.onLoad();\r\n    }\r\n\r\n    start () {\r\n        super.start();\r\n    }\r\n    //重新开始按钮被点击时\r\n    onRestartClicked(){\r\n        this.sMgr.get(MainSignalEnum.Restart).dispatch();\r\n    }\r\n    //排行榜按钮被点击时\r\n    onLookRankClicked(){\r\n        this.sMgr.get(MainSignalEnum.LookRank).dispatch();\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import Common from \"./Common\";\r\nimport PrefabManager from \"./util/PrefabManager\";\r\nimport { IRoot } from \"../lib/framework/Context/IRoot\";\r\nimport { MainContext } from \"./context/MainContext\";\r\nimport AudioManager from \"./util/AudioManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PersistRoot extends cc.Component implements IRoot {\r\n    public context;\r\n\r\n    @property([cc.Prefab])\r\n    prefabs: Array<cc.Prefab> = [];\r\n    @property([cc.AudioClip])\r\n    clips: Array<cc.AudioClip> = [];\r\n    @property([cc.AudioSource])\r\n    audios: Array<cc.AudioSource> = [];\r\n    @property(cc.AudioSource)\r\n    bgm:cc.AudioSource = null;\r\n\r\n\r\n    onLoad () {\r\n        //防止重复执行初始化\r\n        if(Common.isInit)return;\r\n        Common.isInit = true;\r\n        //console.info(\"[初始化常驻节点]\");\r\n        //配置为常驻节点\r\n        if(!Common.persistRootNode){\r\n            cc.game.addPersistRootNode(this.node);\r\n            Common.persistRootNode = this;\r\n        }\r\n        this.context = new MainContext(this)\r\n        this.loadPrefab();\r\n        this.loadAudio();\r\n    }\r\n    loadPrefab(){\r\n        this.prefabs.forEach(prefab => {\r\n            PrefabManager.Instance.setPrefab(prefab.name,prefab);\r\n        });\r\n    }\r\n    loadAudio(){\r\n        this.clips.forEach(audio=>{\r\n            AudioManager.Instance.setAudio(audio.name,audio);\r\n        });\r\n        AudioManager.Instance.bgm = this.bgm;\r\n        AudioManager.Instance.audios = this.audios;\r\n        AudioManager.Instance.playBgm();\r\n\r\n    }\r\n    start () {\r\n        \r\n    }\r\n    // update (dt) {}\r\n}\r\n","import {Stack} from \"./Stack\"\r\nimport { IConstructorName } from \"../framework/IocConst\";\r\nimport {inject} from \"../framework/Injector/InjectDecorator\";\r\nimport {Prototype} from \"./Prototype\"\r\n\r\nexport enum PoolOverflowBehavior\r\n{\r\n    /// Requesting more than the fixed size will throw an exception.\r\n    EXCEPTION,\r\n    \r\n    /// Requesting more than the fixed size will throw a warning.\r\n    WARNING,\r\n\r\n    /// Requesting more than the fixed size will return null and not throw an error.\r\n    IGNORE\r\n}\r\nexport enum BindingConstraintType\r\n{\r\n    /// Constrains a SemiBinding to carry no more than one item in its Value\r\n    ONE,\r\n    /// Constrains a SemiBinding to carry a list of items in its Value\r\n    MANY,\r\n    /// Instructs the Binding to apply a Pool instead of a SemiBinding\r\n    POOL,\r\n}\r\nexport enum PoolInflationType\r\n{\r\n    /// When a dynamic pool inflates, add one to the pool.\r\n    INCREMENT,\r\n\r\n    /// When a dynamic pool inflates, double the size of the pool\r\n    DOUBLE\r\n}\r\nexport interface IPoolable\r\n{\r\n    /// <summary>\r\n    /// Clean up this instance for reuse.\r\n    /// </summary>\r\n    /// Restore methods should clean up the instance sufficiently to remove prior state.\r\n    restore ();\r\n\r\n    /// <summary>\r\n    /// Keep this instance from being returned to the pool \r\n    /// </summary>\r\n    retain ();\r\n\r\n    /// <summary>\r\n    /// Release this instance back to the pool.\r\n    /// </summary>\r\n    /// Release methods should clean up the instance sufficiently to remove prior state.\r\n    release();\r\n\r\n    /// <summary>\r\n    /// Is this instance retained?\r\n    /// </summary>\r\n    /// <value><c>true</c> if retained; otherwise, <c>false</c>.</value>\r\n    isRetain : boolean;\r\n}\r\nexport interface IInstanceProvider{\r\n    /// Retrieve an Instance based on the key.\r\n    /// ex. `injectionBinder.Get<cISomeInterface>();`\r\n    //getInstance<T>() : T;\r\n\r\n    /// Retrieve an Instance based on the key.\r\n    /// ex. `injectionBinder.Get(typeof(ISomeInterface));`\r\n    getInstance(key : object) : object;\r\n}\r\nexport class __IC_InstanceProvider extends IConstructorName{\r\n    //getInstance<T>() : T{return;} \r\n    get constructorName(){return \"IInstanceProvider\";}\r\n}\r\nexport interface IManagedList\r\n{\r\n    /// Add a value to this List. \r\n    add( value : object) : IManagedList;\r\n\r\n    /// Add a set of values to this List. \r\n    add( list : object[]) : IManagedList;\r\n\r\n    /// Remove a value from this List. \r\n    remove( value : object) : IManagedList;\r\n\r\n    /// Remove a set of values from this List. \r\n    remove( list : object[]) : IManagedList;\r\n\r\n    /// Retrieve the value of this List.\r\n    /// If the constraint is MANY, the value will be an Array.\r\n    /// If the constraint is POOL, this becomes a synonym for GetInstance().\r\n    value : object;\r\n}\r\nexport interface IPool extends IManagedList\r\n{\r\n    /// A class that provides instances to the pool when it needs them.\r\n    /// This can be the InjectionBinder, or any class you write that satisfies the IInstanceProvider\r\n    /// interface.\r\n    instanceProvider : IInstanceProvider;\r\n\r\n    /// The object Type of the first object added to the pool.\r\n    /// Pool objects must be of the same concrete type. This property enforces that requirement. \r\n    poolType : object;\r\n    /// <summary>\r\n    /// Gets an instance from the pool if one is available.\r\n    /// </summary>\r\n    /// <returns>The instance.</returns>\r\n    getInstance() : object;\r\n\r\n    /// <summary>\r\n    /// Returns an instance to the pool.\r\n    /// </summary>\r\n    /// If the instance being released implements IPoolable, the Release() method will be called.\r\n    /// <param name=\"value\">The instance to be return to the pool.</param>\r\n    returnInstance (value : object);\r\n\r\n    /// <summary>\r\n    /// Remove all instance references from the Pool.\r\n    /// </summary>\r\n    clean ();\r\n\r\n    /// <summary>\r\n    /// Returns the count of non-committed instances\r\n    /// </summary>\r\n    available : number;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the size of the pool.\r\n    /// </summary>\r\n    /// <value>The pool size. '0' is a special value indicating infinite size. Infinite pools expand as necessary to accomodate requirement.</value>\r\n    size : number;\r\n\r\n    /// <summary>\r\n    /// Returns the total number of instances currently managed by this pool.\r\n    /// </summary>\r\n    instanceCount : number;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the overflow behavior of this pool.\r\n    /// </summary>\r\n    /// <value>A PoolOverflowBehavior value.</value>\r\n    overflowBehavior : PoolOverflowBehavior;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the type of inflation for infinite-sized pools.\r\n    /// </summary>\r\n    /// By default, a pool doubles its InstanceCount.\r\n    /// <value>A PoolInflationType value.</value>\r\n    inflationType : PoolInflationType;\r\n}\r\nexport class Pool implements IPool, IPoolable\r\n{\r\n\r\n    @inject(__IC_InstanceProvider)\r\n    public instanceProvider : IInstanceProvider\r\n\r\n    /// Stack of instances still in the Pool.\r\n    protected instancesAvailable : Stack<any> = new Stack<any> ();\r\n\r\n    /// A HashSet of the objects checked out of the Pool.\r\n    protected instancesInUse :Set<object>= new Set<object> ();\r\n\r\n    protected _instanceCount : number;\r\n\r\n    public size : number;\r\n\r\n    public overflowBehavior : PoolOverflowBehavior;\r\n\r\n    public inflationType : PoolInflationType;\r\n\r\n    public uniqueValues : boolean;\r\n\r\n    public constraint : any;\r\n\r\n    public poolType : object;\r\n    \r\n    public isRetain : boolean;\r\n\r\n    public Pool ()\r\n    {\r\n        this.size = 0;\r\n        this.constraint = BindingConstraintType.POOL;\r\n        this.uniqueValues = true;\r\n        \r\n        this.overflowBehavior = PoolOverflowBehavior.EXCEPTION;\r\n        this.inflationType = PoolInflationType.DOUBLE;\r\n    }\r\n    public bind(type){\r\n        this.poolType = type;\r\n    }\r\n\r\n    public add ( value : object) : IManagedList\r\n    {\r\n        //检查对象原型是否相同\r\n        this.failIf(!Prototype.isProtetype(value,this.poolType) , \" Pool Type mismatch. Pools must consist of a common concrete type.\\n\\t\\tPool type: \" + this.poolType + \"\\n\\t\\tMismatch type: \" + value);\r\n        this._instanceCount++;\r\n        this.instancesAvailable.push (value);\r\n        return this;\r\n    }\r\n    public addList (list : object[]) : IManagedList\r\n    {\r\n        if(list&&list.length>0){\r\n            list.forEach((item : object)=>{\r\n                this.add (item);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    public remove (value : object) : IManagedList\r\n    {\r\n        this._instanceCount--;\r\n        this.removeInstance (value);\r\n        return this;\r\n    }\r\n\r\n    public removeList (list : object[]) : IManagedList\r\n    {\r\n        if(list&&list.length>0){\r\n            list.forEach((item : object)=>{\r\n                this.remove(item);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public get value() : object\r\n    {\r\n        return this.getInstance ();\r\n    }\r\n\r\n    /// The object Type of the first object added to the pool.\r\n    /// Pool objects must be of the same concrete type. This property enforces that requirement. \r\n\r\n    public get instanceCount() : number\r\n    {\r\n        return this._instanceCount;\r\n    }\r\n\r\n    public getInstance () : object\r\n    {\r\n        // Is an instance available?\r\n        if (this.instancesAvailable.size > 0)\r\n        {\r\n            let retv : object = this.instancesAvailable.pop ();\r\n            this.instancesInUse.add (retv);\r\n            return retv;\r\n        }\r\n\r\n        let instancesToCreate : number = 0;\r\n\r\n        //New fixed-size pool. Populate.\r\n        if (this.size > 0)\r\n        {\r\n            if (this.instanceCount == 0)\r\n            {\r\n                //New pool. Add instances.\r\n                instancesToCreate = this.size;\r\n            }\r\n            else\r\n            {\r\n                //Illegal overflow. Report and return null\r\n                this.failIf (this.overflowBehavior == PoolOverflowBehavior.EXCEPTION,\r\n                    \"A pool has overflowed its limit.\\n\\t\\tPool type: \" + this.poolType);\r\n\r\n                if (this.overflowBehavior == PoolOverflowBehavior.WARNING)\r\n                {\r\n                    console.warn (\"WARNING: A pool has overflowed its limit.\\n\\t\\tPool type: \" + this.poolType);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //Zero-sized pools will expand.\r\n            if (this.instanceCount == 0 || this.inflationType == PoolInflationType.INCREMENT)\r\n            {\r\n                instancesToCreate = 1;\r\n            }\r\n            else\r\n            {\r\n                instancesToCreate = this.instanceCount;\r\n            }\r\n        }\r\n\r\n        if (instancesToCreate > 0)\r\n        {\r\n            this.failIf (this.instanceProvider == null, \"A Pool of type: \" + this.poolType + \" has no instance provider.\");\r\n\r\n            for (let a = 0; a < instancesToCreate; a++)\r\n            {\r\n                let newInstance : object= this.instanceProvider.getInstance (this.poolType);\r\n                this.add (newInstance);\r\n            }\r\n            return this.getInstance ();\r\n        }\r\n\r\n        //If not, return null\r\n        return null;\r\n    }\r\n\r\n    public returnInstance ( value : object)\r\n    {\r\n        if (this.instancesInUse.has (value))\r\n        {\r\n            /* if (value extends IPoolable)\r\n            {\r\n                (value as IPoolable).Restore ();\r\n            } */\r\n            (value as IPoolable).restore ();\r\n            this.instancesInUse.delete (value);\r\n            this.instancesAvailable.push (value);\r\n        }\r\n    }\r\n\r\n    public clean()\r\n    {\r\n        this.instancesAvailable.clear();\r\n        this.instancesInUse = new Set<object> ();\r\n        this._instanceCount = 0;\r\n    }\r\n\r\n    public get available() : number\r\n    {\r\n        return this.instancesAvailable.size;\r\n\r\n    }\r\n\r\n    public restore ()\r\n    {\r\n        this.clean ();\r\n        this.size = 0;\r\n    }\r\n\r\n    public retain()\r\n    {\r\n        this.isRetain = true;\r\n    }\r\n\r\n    public release()\r\n    {\r\n        this.isRetain = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Permanently removes an instance from the Pool\r\n    /// </summary>\r\n    /// In the event that the removed Instance is in use, it is removed from instancesInUse.\r\n    /// Otherwise, it is presumed inactive, and the next available object is popped from\r\n    /// instancesAvailable.\r\n    /// <param name=\"value\">An instance to remove permanently from the Pool.</param>\r\n    protected removeInstance(value : object)\r\n    {\r\n        this.failIf (value != this.poolType, \"Attempt to remove a instance from a pool that is of the wrong Type:\\n\\t\\tPool type: \" + this.poolType.toString() + \"\\n\\t\\tInstance type: \" + value.toString());\r\n        if (this.instancesInUse.has(value))\r\n        {\r\n            this.instancesInUse.delete (value);\r\n        }\r\n        else\r\n        {\r\n            this.instancesAvailable.pop ();\r\n        }\r\n    }\r\n\r\n    protected failIf(condition : boolean, message : string)\r\n    {\r\n        if (condition)\r\n        {\r\n            throw new Error(message);\r\n        }\r\n    }\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IManager } from \"./Manager\";\r\n\r\nexport default class PrefabManager extends Singleton implements IManager{\r\n    public isInit = false;\r\n    private prefabMap : Map<any,any>\r\n\r\n    protected onConstructor(){\r\n        this.prefabMap = new Map();\r\n    }\r\n    hasPrefab(key):boolean{\r\n        return this.prefabMap.has(key);\r\n    }\r\n    getPrefab(key):cc.Prefab{\r\n        return this.prefabMap.get(key);\r\n    }\r\n    setPrefab(key,value){\r\n        this.prefabMap.set(key,value);\r\n    }\r\n\r\n}","/**\n * 简单的对象池\n */\nexport default class PrefabPool {\n\ttype;\n\tprefab;\n\tnodePool : cc.NodePool;\n\n\tconstructor(type, prefab) {\n\t\tthis.type = type\n\t\tthis.prefab = prefab\n\t\tthis.nodePool = new cc.NodePool(type)\n\t}\n\t/**\n\t * 获取节点\n\t */\n\tget() {\n\t\tlet node : cc.Node= null\n\t    if (this.nodePool.size() > 0) {\n\t        node = this.nodePool.get()\n\t    } else {\n\t        node = cc.instantiate(this.prefab)\n\t\t}\n\t\tnode.active = true;\n\t    return node\n\t}\n\t/**\n\t * 回收节点\n\t * @param node \n\t */\n\tres(node : cc.Node) {\n\t\tnode.active = false;\n\t\tthis.nodePool.put(node)\n\t}\n\n}","/**\r\n * 原型缓存字典，用于检测一个对象的基类\r\n */\r\nexport class Prototype {\r\n    //继承映射表\r\n    private static prototypeMap = new Map<Object,Set<Object>>();\r\n    /**\r\n     * 基类检测函数\r\n     * @param instance 实例\r\n     * @param prototype 基类\r\n     */\r\n    public static isProtetype(type, prototype): boolean {\r\n        //let b = type instanceof prototype;\r\n        return type instanceof prototype;\r\n/*         if(!(type instanceof Object))return false;\r\n        let constructor = type.constructor;\r\n        if(this.prototypeMap.has(constructor)){\r\n            let sett = this.prototypeMap.get(constructor);\r\n            if(sett.has(prototype)){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return false; */\r\n    }\r\n    /**\r\n     * 获取继承列表\r\n     * @param instance 实例\r\n     */\r\n    public static getPrototypeList(target) {\r\n        let that = this;\r\n        if(!this.hasPrototypeList(target)){\r\n            let extendsList;\r\n            //获取继承列表\r\n            extendsList = [];\r\n            //用构造函数代替类型来使用\r\n            let types = [];\r\n            //types.push(target.constructor);\r\n            //继承类型\r\n            let prototype = target.__proto__;\r\n            //构造函数\r\n            let constructor;\r\n            while (true) {\r\n                //如果继承存在\r\n                if (prototype) {\r\n                    //因为压缩代码会把所有对象的名称都压缩掉，所以这里使用构造函数作为键值\r\n                    constructor = prototype.constructor;\r\n                    //搜索到基类一层\r\n                    if (constructor === Object) break;\r\n                    //排除以__IC__开头模拟接口的临时替代类型\r\n                    if (!constructor.name.startsWith(\"__IC_\")) {\r\n                        extendsList.push(constructor);\r\n                        types.push(constructor);\r\n                        //为每一个类都添加继承关系\r\n                        types.forEach(type => {\r\n                            that.AddPrototype(type,constructor);\r\n                        });\r\n                    }\r\n                    prototype = prototype.__proto__;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }            \r\n        let values = this.prototypeMap.get(target.constructor);\r\n        return Array.from(values);\r\n    }\r\n    /**\r\n     * 添加继承关系\r\n     */\r\n    public static AddPrototype(tpye,prototype){\r\n        let extendSet : Set<Object>;\r\n        if(this.prototypeMap.has(tpye)){\r\n            extendSet = this.prototypeMap.get(tpye);\r\n        }else{\r\n            extendSet = new Set();\r\n            this.prototypeMap.set(tpye,extendSet);\r\n        }\r\n        //为继承队列加入新的继承\r\n        extendSet.add(prototype);\r\n    }\r\n    /**\r\n     * 是否存在继承列表\r\n     * @param instance 实例\r\n     */\r\n    public static hasPrototypeList(target) {\r\n        if(this.prototypeMap.has(target.constructor)){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}","import Common from \"../../common\";\r\nimport WxGameApi from \"../WxGameApi\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        subContextView: cc.Node,\r\n        tipsUiNode: cc.Node\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        let that = this;\r\n        this.rankType = 0;\r\n        this.shareCount = 0;\r\n        //设置转发选项\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            wx.updateShareMenu({\r\n                withShareTicket: true,\r\n                success() {\r\n                    //console.info(\"设置转发选项成功\");\r\n                },\r\n                fail() {\r\n                    //console.info(\"设置转发选项失败\");\r\n                }\r\n            })\r\n        }\r\n        //this.subContextView.enabled = false;\r\n        //console.info(\"[初始化功能]\");\r\n    },\r\n\r\n    start() {\r\n        //console.info(\"[主域进入排行榜界面]\");\r\n        //发送启动消息告知开发数据容器\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            //console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"start\",\r\n                    arguments: \"default\",\r\n                    data: {\r\n                        width: this.subContextView.width,\r\n                        height: this.subContextView.height\r\n                    },\r\n                }\r\n            });\r\n        }\r\n    },\r\n    //切换排行榜\r\n    switchRank(event) {\r\n        //获取切换按钮\r\n        let switchBtn = event.target;\r\n        let switchBar = event.target.getChildByName(\"Switch\");\r\n        let moveRange = switchBtn.width - switchBar.width - 10;\r\n        let that = this;\r\n        //循环切换排行榜类型\r\n        if (this.rankType < 1) {\r\n            this.rankType += 1;\r\n        } else {\r\n            this.rankType = 0;\r\n        }\r\n        switch (this.rankType) {\r\n            case 0:\r\n                switchBar.runAction(cc.moveBy(0.125, cc.v2(-moveRange, 0)));\r\n                if (WxGameApi.isRunInWeiXin) {\r\n                    //console.info(\"[显示好友排行]\");\r\n                    //切换到显示好友排行\r\n                    wx.getOpenDataContext().postMessage({\r\n                        message: {\r\n                            type: \"command\",\r\n                            function: \"switch\",\r\n                            arguments: \"friend\",\r\n                            data: \"\",\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            case 1:\r\n                switchBar.runAction(cc.moveBy(0.125, cc.v2(moveRange, 0)));\r\n                if (WxGameApi.isRunInWeiXin) {\r\n                    let ticket;\r\n                    if (Common.shareTickets && Common.shareTickets.length > 0) {\r\n                        ticket = Common.shareTickets[this.shareCount];\r\n                        if (!ticket) {\r\n                            //console.info(\"[意外的识别码缺失]\" + Common.shareTickets +\",\"+ this.shareCount);\r\n                            Common.shareTickets = [];\r\n                            this.shareCount = 0;\r\n                        } else {\r\n                            //循环切换群信息，索引是从0开始计算的，所以这里需要减一\r\n                            if (this.shareCount >= (Common.shareTickets.length - 1)) {\r\n                                this.shareCount = 0;\r\n                            } else {\r\n                                this.shareCount += 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.info(\"[未找到群信息]\");\r\n                        this.showTipsUi(\"无法显示群排行榜\", \"请先分享到群再查看\");\r\n                    }\r\n                    //验证群信息是否有效\r\n                    if(ticket&&ticket!=\"\"){\r\n                        wx.getShareInfo({\r\n                            shareTicket : ticket,\r\n                            success(res){\r\n                                //console.info(\"[有效的群信息]\" + ticket + \",\" + res);\r\n                            },\r\n                            fail(err){\r\n                                //console.info(\"[无效的群信息]\" + ticket + \",\" + err);\r\n                            }\r\n                        })\r\n                    }else{\r\n                        ticket = \"\";\r\n                    }\r\n                    //console.info(\"[显示群信息]\" + Common.shareTickets.length);\r\n                    //切换到显示群排行\r\n                    wx.getOpenDataContext().postMessage({\r\n                        message: {\r\n                            type: \"command\",\r\n                            function: \"switch\",\r\n                            arguments: \"group\",\r\n                            data: ticket,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        //console.info(\"[切换排行榜]\" + this.rankType);\r\n    },\r\n\r\n    backhome() {\r\n        cc.director.loadScene(\"Begin\");\r\n    },\r\n\r\n    shareApp() {\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        let that = this;\r\n        wx.shareAppMessage({\r\n            title: \"一起来玩游戏吧！\",\r\n            imageUrl: \"/resources/ui/rank/ui_rank_rabbit.png\",\r\n            success(res) {\r\n                //console.info(\"[转发成功]\" + res.shareTickets);\r\n                //没有获取到群消息\r\n                if (!res.shareTickets || res.shareTickets === \"\") {\r\n                    //console.info(\"[转发到个人用户]\");\r\n                } else {\r\n                    //console.info(\"[转发到微信群]\" + res.shareTickets);\r\n                    //如果存在群组信息\r\n                    if (res.shareTickets.length > 0) {\r\n                        let isExist = false;\r\n                        //保存群组信息\r\n                        for (let i = 0; i < res.shareTickets.length; i++) {\r\n                            for (let j = 0; j < Common.shareTickets.length; j++) {\r\n                                //检查是否存在重复的群识别号\r\n                                if (res.shareTickets[i] === Common.shareTickets[j]) {\r\n                                    isExist = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!isExist) {\r\n                                //console.info(\"[存储群识别码]\" + res.shareTickets[i]);\r\n                                Common.shareTickets.push(res.shareTickets[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            fail(res) {\r\n                //console.info(\"[转发失败]\");\r\n            }\r\n        });\r\n\r\n    },\r\n    //显示提示框\r\n    showTipsUi(title, content) {\r\n        if (!this.tipsUiNode.active) {\r\n            this.tipsUiNode.active = true;\r\n            let tipsUiView = this.tipsUiNode.getComponent(\"TipsUiView\");\r\n            if (tipsUiView) {\r\n                tipsUiView.display(title, content);\r\n            } else {\r\n                //console.info(\"[提示UI不存在]\");\r\n            }\r\n        }\r\n    },\r\n});","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\n\r\n//引用注入装饰器\r\nexport class RestartCommand extends Command{\r\n    @inject(cc.Node,\"Pause\")\r\n    pauseNode : cc.Node;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n\r\n    execute(){\r\n        //console.info(\"[重新开始]\");\r\n\r\n        this.revive();\r\n    }\r\n\r\n    revive() {\r\n        \r\n        this.pauseNode.active = false\r\n        this.clearAllCurrent()\r\n        this.mMdl.pauseFlag = false\r\n    }\r\n\r\n    clearAllCurrent() {\r\n        if(this.mMdl.currentFoodNodes&&this.mMdl.currentFoodNodes.length>0){\r\n            this.mMdl.currentFoodNodes.forEach(foodNode => {\r\n                this.mMdl.foodPool.res(foodNode)\r\n            })\r\n        }\r\n        this.mMdl.currentFoodNodes = []\r\n    }\r\n}","import { IConstructorName } from \"../IocConst\"\r\nimport { __IC_Signal , Signal, ISignal } from \"./Signal\"\r\n\r\nexport interface ISignalManager {\r\n    get(symbol) : ISignal;\r\n    delete(symbol);\r\n    info: string;\r\n}\r\nexport class __IC_SignalManager extends IConstructorName {\r\n    static get constructorName(){return \"ISignalManager\";}\r\n}\r\nexport class SignalManager implements ISignalManager {\r\n    //维护一个信号指令映射表，注意不再使用的信号应该及时释放掉\r\n    _signal_dic : Map<any,ISignal>= new Map < any, ISignal > ();\r\n    info: string = \"this is a signal manager\";\r\n\r\n    public get(symbol) : ISignal{\r\n        //检查全局信号字典内是否存在对应的信号名称或枚举\r\n        if (this._signal_dic.has(symbol)) {\r\n            //获取标志对应的信号\r\n            return this._signal_dic.get(symbol);\r\n        } else {\r\n            //创建一个信号\r\n            let _signal = new Signal();\r\n            //如果使用字符串作为信号识别名，则将其绑定给信号\r\n            if(typeof symbol == \"string\")_signal.name = symbol;\r\n            //设置根环境\r\n            //_signal.setRoot(this._context.getRoot);\r\n            //建立全局信号与标志值的映射关系\r\n            this._signal_dic.set(symbol, _signal);\r\n            return _signal;\r\n        }\r\n    };\r\n\r\n    public delete(symbol) {\r\n        //检查全局信号字典内是否存在对应的信号名称或枚举\r\n        if (this._signal_dic.has(symbol)) {\r\n            //获取标志对应的信号\r\n            return this._signal_dic.delete(symbol);\r\n        }\r\n    }\r\n}","import {IocError, IConstructorName} from \"../IocConst\"\r\nexport interface ISignal {\r\n    name;\r\n    dispatch(...args);\r\n    addListener(callback:Function);\r\n    addOnceListener(callback:Function);\r\n    removeAllListeners();\r\n    /// Returns a List<System.Type> representing the Types bindable to this Signal\r\n\tgetTypes() : object[];\r\n}\r\nexport class __IC_Signal extends IConstructorName {\r\n    static get constructorName(){return \"ISignal\";};\r\n}\r\n\r\nexport class Signal implements ISignal {\r\n    public name;\r\n    //回调监听\r\n    public _listener: Function[] = [];\r\n    public _onceListener: Function[] = [];\r\n    //执行信号\r\n    public dispatch(...args) {\r\n        let that = this;\r\n        //如果存在回调函数\r\n        if (that._listener&&that._listener.length != 0) {\r\n            this._listener.forEach(function (action) {\r\n                action(that,...args);\r\n            })\r\n        }\r\n        //如果存在单次回调\r\n        if (that._onceListener&&that._onceListener.length != 0)\r\n            this._listener.forEach(function (action) {\r\n                action(that,...args);\r\n            })\r\n        //清空单次执行的监听\r\n        this._onceListener.length = 0;\r\n    }\r\n    public addListener(callback:Function){\r\n        this._listener = this.addUnique(this._listener,callback);\r\n    }\r\n    public addOnceListener(callback:Function){\r\n        this._onceListener = this.addUnique(this._onceListener,callback);\r\n    }\r\n    //清空监听\r\n    public removeAllListeners(){\r\n        this._listener.length=0;\r\n        this._onceListener.length=0;\r\n    }\r\n    //不重复添加\r\n    private addUnique(listeners : Function[], callback : Function)\r\n    {\r\n        //检查监听回调是否存在\r\n        if (listeners)\r\n        {\r\n            let isUnique = false;\r\n            for(let i = 0;i<listeners.length;i++){\r\n                //检查是否存在重复项\r\n                if(listeners[i] === callback){\r\n                    isUnique = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!isUnique){\r\n                //放入回调\r\n                listeners.push(callback);\r\n            }\r\n        }\r\n        return listeners;\r\n    }\r\n    public getTypes() : object[]\r\n    {\r\n        let retv = [];\r\n        //retv.push(this);\r\n        return retv;\r\n    }\r\n}","export class Singleton {\r\n    /** 存放初始化过的构造函数,这里用数组来存放构造函数 **/\r\n    private static classMap: Map < any, any > = new Map();\r\n\r\n    constructor() {\r\n        let clazz: any = this.constructor;\r\n        //为空时，表示浏览器不支持这样读取构造函数\r\n        if (!clazz)\r\n            return;\r\n        // 防止重复实例化\r\n        if (Singleton.classMap.has(clazz))\r\n            throw new Error(this + \" 只允许实例化一次！\");\r\n        else {\r\n            Singleton.classMap.set(clazz, this);\r\n            this.onConstructor();\r\n        }\r\n    }\r\n    protected onConstructor() {\r\n\r\n    }\r\n    public static get Instance() {\r\n        return Singleton.getInstanceOrCreate(this);\r\n    }\r\n\r\n    public static destroyInstance(clazz: any): void {\r\n        if (Singleton.classMap.has(clazz)) {\r\n            Singleton.classMap.get(clazz).onDestroy();\r\n            Singleton.classMap.delete(clazz);\r\n        }\r\n    }\r\n\r\n    public static getInstanceOrCreate(clazz: any,...args): any {\r\n        let instance;\r\n        if (Singleton.classMap.has(clazz)) {\r\n            instance = Singleton.classMap.get(clazz);\r\n            if (instance) {\r\n                return instance;\r\n            }\r\n        }\r\n        instance = new clazz(...args);\r\n        //不是Singleton的子类，则手动添加Singleton构造器会自动添加到classMap\r\n        if (!(instance instanceof Singleton)) {\r\n            Singleton.classMap.set(clazz, instance);\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n\r\n    }\r\n}","export interface IStack<T> {\r\n    //获取栈顶元素\r\n    top(): T;\r\n    //压栈\r\n    push(item: T);\r\n    //出栈\r\n    pop(): T;\r\n    //清空\r\n    clear();\r\n    //是否空栈\r\n    isEmpty: boolean;\r\n    //栈大小\r\n    size: number;\r\n}\r\n\r\nexport class Item<T> {\r\n    private _value: T;\r\n    private _next: Item<T>;\r\n    constructor(value: T, next: Item<T> = null) {\r\n        this._value = value;\r\n        this._next = next;\r\n    }\r\n    set value(value: T) {\r\n        this._value = value;\r\n    }\r\n    get value(): T {\r\n        return this._value;\r\n    }\r\n    set next(next: Item<T>) {\r\n        this._next = next;\r\n    }\r\n    get next(): Item<T> {\r\n        return this._next;\r\n    }\r\n}\r\n\r\nexport class Stack<T> implements IStack<T> {\r\n    private _header: Item<T>;\r\n    private _size: number = 0;\r\n    constructor() {\r\n        this._header = new Item<T>(null);\r\n    }\r\n    top(): T {\r\n        if (this._size === 0) {\r\n            return null;\r\n        }\r\n        return this._header.next.value;\r\n    }\r\n\r\n    /**\r\n     * 入栈\r\n     * @param item 添加的元素\r\n     * 将header的下一个元素的引用赋值给新元素的next\r\n     * 再将新元素赋值给header的next\r\n     */\r\n    push(item: T) {\r\n        let newItem = new Item<T>(item);\r\n        newItem.next = this._header.next;\r\n        this._header.next = newItem;\r\n        this._size++;\r\n    }\r\n\r\n    /**\r\n     * 出栈\r\n     * 将header之后的第一个元素移除\r\n     * 同时修改header的next到下一个元素\r\n     */\r\n    pop(): T {\r\n        if (this._size === 0) {\r\n            return null;\r\n        }\r\n        let item = this._header.next;\r\n        this._header.next = item.next;\r\n        this._size--;\r\n        item.next = null;//清除引用\r\n        return item.value;\r\n    }\r\n    clear(){\r\n        let item;\r\n        let tmp = this._header;\r\n        while(this._size !== 0){\r\n            item = tmp.next;\r\n            tmp = item;\r\n            item.next = null;\r\n            this._size--;\r\n        }\r\n        this._header = null;\r\n    }\r\n    get isEmpty(): boolean {\r\n        return this._size === 0;\r\n    }\r\n\r\n    get size(): number {\r\n        return this._size;\r\n    }\r\n}","import {__IC_SignalManager, ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport { Command } from \"../../lib/framework/Command/Command\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport PrefabManager from \"../util/PrefabManager\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\n\r\n//引用注入装饰器\r\nexport class StartCommand extends Command{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtil : MainUtil;\r\n    //注入资源管理器\r\n    @inject(__IC_Manager,ManagerType.Prefab)\r\n    resMgr : PrefabManager;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n    @inject(cc.Node,\"LogicNode\")\r\n    logicNode : cc.Node;\r\n    @inject(cc.Node,\"MainNode\")\r\n    mainNode : cc.Node;\r\n\r\n    //执行\r\n    execute(){\r\n        //console.log(\"[开始指令]\");\r\n\r\n        this.lanuch();\r\n        this.start();\r\n    }\r\n    start(){\r\n        this.sMgr.get(MainSignalEnum.InputControl).dispatch();\r\n    }\r\n    //启动配置\r\n    lanuch(){\r\n        const manager = cc.director.getCollisionManager()\r\n        manager.enabled = true\r\n\r\n        this.loadRes();\r\n\r\n        this.sMgr.get(MainSignalEnum.Generate).dispatch();\r\n    }\r\n\r\n\r\n    loadRes(){\r\n        if(!this.resMgr.isInit){\r\n            //绑定预制件\r\n            if(this.resMgr.hasPrefab(\"Animal\")){\r\n                this.inj.bind(cc.Prefab).toName(\"Animal\").toValue(this.resMgr.getPrefab(\"Animal\"));\r\n            }\r\n            if(this.resMgr.hasPrefab(\"Food\")){\r\n                this.inj.bind(cc.Prefab).toName(\"Food\").toValue(this.resMgr.getPrefab(\"Food\"));\r\n            }\r\n            this.resMgr.isInit = true;\r\n        }\r\n        \r\n        //检查是否存在对应的资源\r\n        if(this.resMgr.hasPrefab(\"Scene\")){\r\n            let scene : cc.Node = cc.instantiate(this.resMgr.getPrefab(\"Scene\"));\r\n            this.mainNode.addChild(scene);\r\n            let avatar = scene.getChildByName(\"Avatar\");\r\n            let animals = avatar.getChildByName(\"Animals\");\r\n            let score = scene.getChildByName(\"Score\");\r\n\r\n            this.inj.bind(cc.Node).toName(\"Scene\").toValue(scene).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Avatar\").toValue(avatar).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Animals\").toValue(animals).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Score\").toValue(score).unBind();\r\n        }else{\r\n            throw new Error(\"Scene prefab is not found\");\r\n        }\r\n        if(this.resMgr.hasPrefab(\"PauseLayer\")){\r\n            let pause : cc.Node = cc.instantiate(this.resMgr.getPrefab(\"PauseLayer\"));\r\n            this.mainNode.addChild(pause);\r\n            pause.active = false;\r\n\r\n            this.inj.bind(cc.Node).toName(\"Pause\").toValue(pause).unBind();\r\n        }else{\r\n            throw new Error(\"Pause layer prefab is not found\");\r\n        }\r\n    }\r\n}","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TipsUiView extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    label: cc.Label = null;\r\n\r\n    @property(cc.RichText)\r\n    text: cc.RichText = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        \r\n    }\r\n    display(title,content){\r\n        this.label.string = title;\r\n        this.text.string = content;\r\n    }\r\n    onClicked(){\r\n        this.node.active = false;\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import {Singleton} from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\n\r\nexport class TouchUtil extends Singleton implements IUtil{\r\n    private areaMap;\r\n    //全局区域状态\r\n    private globalAreaStatus : AreaStatus;\r\n\r\n    onConstructor(){\r\n        this.areaMap = new Map();\r\n    }\r\n    /**\r\n     * 注册一个触摸区域，只有在区域内的触控才会被识别\r\n     * @param area 区域\r\n     * @param isGlobal 是否设为全局区域\r\n     */\r\n    public registerTouchArea(area: cc.Node,isGlobal:boolean = false) {\r\n        let areaStatus;\r\n        //尝试获取对应的区域状态\r\n        if(this.areaMap.has(area)){\r\n            areaStatus = this.areaMap.get(area);\r\n        }else{\r\n            areaStatus = new AreaStatus();\r\n            this.areaMap.set(area,areaStatus);\r\n        }\r\n        //设定全局区域\r\n        if(isGlobal)this.globalAreaStatus = areaStatus;\r\n        //触摸开始时\r\n        area.on(cc.Node.EventType.TOUCH_START, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                let sPosX = touch.getLocationX();\r\n                let sPoxY = touch.getLocationY();\r\n                let status = new TouchStatus();\r\n                status.direction = TouchDirection.No;\r\n                status.touch = touch;\r\n                status.sPosX = sPosX;\r\n                status.sPosY = sPoxY;\r\n                status.totalX = 0;\r\n                status.totalY = 0;\r\n                status.trendX = 0;\r\n                status.trendY = 0;\r\n\r\n                //绑定触摸ID到状态\r\n                areaStatus.touchMap.set(touch.getID(), status)\r\n            });\r\n        });\r\n        //触摸移动时\r\n        area.on(cc.Node.EventType.TOUCH_MOVE, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    let status: TouchStatus = areaStatus.touchMap.get(touch.getID());\r\n                    let mDeltaX = touch.getDelta().x;\r\n                    let mDeltaY = touch.getDelta().y;\r\n                    status.totalX += mDeltaX;\r\n                    status.totalY += mDeltaY;\r\n\r\n                    //如果触摸正在向左移动\r\n                    if (Math.abs(mDeltaX) > 10) {\r\n                        status.trendX += status.totalX / mDeltaX;\r\n                    }\r\n                    if (Math.abs(mDeltaY) > 10) {\r\n                        status.trendY += status.totalY / mDeltaY;\r\n                    }\r\n                    //如果触摸的长度超过10000则判断划动超长了\r\n                    if((status.totalX*status.totalX+status.totalY*status.totalY)>10000){\r\n                        this.disposeTouchResult(areaStatus,touch);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        //触摸结束时\r\n        area.on(cc.Node.EventType.TOUCH_END, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    this.disposeTouchResult(areaStatus,touch);\r\n                }\r\n            });\r\n        });\r\n\r\n        //触摸取消时\r\n        area.on(cc.Node.EventType.TOUCH_CANCEL, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    this.disposeTouchResult(areaStatus,touch);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    //执行触控结果\r\n    disposeTouchResult(areaStatus,touch){\r\n        //判断当前触摸正处于什么状态\r\n        let result : TouchStatus= areaStatus.touchMoveDetection(touch);\r\n        if(result&&areaStatus.touchEvnet[result.direction]){\r\n            areaStatus.touchEvnet[result.direction].forEach(event => {\r\n                if(event && typeof event ===\"function\"){\r\n                    //告知结果和触摸信息\r\n                    event(result);\r\n                }\r\n            });\r\n        }\r\n        //移除结束的触摸\r\n        areaStatus.touchMap.delete(touch.getID());\r\n    }\r\n    /**\r\n     * 注册指定的回调函数\r\n     * @param direction 方向\r\n     * @param callback 返回一个触控事件\r\n     */\r\n    public on<T extends Function>(direction: TouchDirection, callback: T, area?: cc.Node) : T{\r\n        let areaStatus;\r\n        if(area&&this.areaMap.has(area)){\r\n            areaStatus = this.areaMap.get(area);\r\n        }else{\r\n            areaStatus = this.globalAreaStatus;\r\n        }\r\n        //增加回调函数\r\n        if(!areaStatus.touchEvnet[direction]){\r\n            areaStatus.touchEvnet[direction] = [];\r\n        }\r\n        areaStatus.touchEvnet[direction].push(callback);\r\n        return callback;\r\n    }\r\n    \r\n}\r\n//区域状态\r\nclass AreaStatus{\r\n    public touchEvnet;\r\n    //触摸状态映射\r\n    public touchMap;\r\n\r\n    constructor(){\r\n        this.touchMap = new Map();\r\n        this.touchEvnet = [];\r\n    }\r\n\r\n    //触摸移动检测\r\n    touchMoveDetection(touch: cc.Touch){\r\n        if (this.touchMap.has(touch.getID())) {\r\n            let status: TouchStatus = this.touchMap.get(touch.getID());\r\n            //检查是否为有效触摸\r\n            let isMoveValid = false;\r\n            //触摸的方向，按照上下左右的顺序排列\r\n            let direction : TouchDirection= TouchDirection.No;\r\n            //如果移动的总距离超过10\r\n            if (Math.abs(status.totalX) > 10 || Math.abs(status.totalY) > 10) {\r\n                //趋势不都为0时\r\n                if (status.trendX != 0 || status.trendY != 0) {\r\n                    //检查移动的趋势\r\n                    if (status.trendX === 0) {\r\n                        isMoveValid = true;\r\n                        //检查总移动距离\r\n                        if (status.totalY > 0) {\r\n                            direction = TouchDirection.Up;\r\n                        } else {\r\n                            direction = TouchDirection.Down;\r\n                        }\r\n                    } else {\r\n                        let trend = status.totalX / status.totalY;\r\n                        //在X轴移动趋势不为0的情况下，检查移动趋势是否达到有效判断范围内\r\n                        if (Math.abs(trend) > 1) {\r\n                            //有效的触摸轨迹\r\n                            isMoveValid = true;\r\n                            //X轴方向向右移动\r\n                            if (status.totalX > 0) {\r\n                                direction = TouchDirection.Right;\r\n                            } else {\r\n                                direction = TouchDirection.Left;\r\n                            }\r\n                        }\r\n                    }\r\n                    //如果之前的检查没有通过\r\n                    if (!isMoveValid) {\r\n                        if (status.trendY === 0) {\r\n                            isMoveValid = true;\r\n                            if (status.totalY > 0) {\r\n                                direction = TouchDirection.Right;\r\n                            } else {\r\n                                direction = TouchDirection.Left;\r\n                            }\r\n                        } else {\r\n                            let trend = status.totalY / status.totalX;\r\n                            if (Math.abs(trend) > 1) {\r\n                                //有效的触摸轨迹\r\n                                isMoveValid = true;\r\n                                //Y轴方向向上移动\r\n                                if (status.totalY > 0) {\r\n                                    direction = TouchDirection.Up;\r\n                                } else {\r\n                                    direction = TouchDirection.Down;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //如果之前的检查判断为无效则表明没有发生移动\r\n            if (isMoveValid) {\r\n                switch (direction) {\r\n                    case TouchDirection.No:\r\n                        status.direction = TouchDirection.No;\r\n                        return status;\r\n                    case TouchDirection.Up:\r\n                        status.direction = TouchDirection.Up;\r\n                        return status;\r\n                    case TouchDirection.Down:\r\n                        status.direction = TouchDirection.Down;\r\n                        return status;\r\n                    case TouchDirection.Left:\r\n                        status.direction = TouchDirection.Left;\r\n                        return status;\r\n                    case TouchDirection.Right:\r\n                        status.direction = TouchDirection.Right;\r\n                        return status;\r\n                }\r\n            } else {\r\n                status.direction = TouchDirection.No;\r\n                return status;\r\n            }\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n//传递触摸状态\r\nexport class TouchStatus {\r\n    //触摸\r\n    public touch : cc.Touch;\r\n    //方向\r\n    public direction : TouchDirection;\r\n    /**\r\n     * 触摸开始的X坐标\r\n     */\r\n    public sPosX: number;\r\n    /**\r\n     * 触摸开始的Y坐标\r\n     */\r\n    public sPosY: number;\r\n    /**\r\n     * 最后一次的X坐标\r\n     */\r\n    public lPosX: number;\r\n    /**\r\n     * 最后一次的Y坐标\r\n     */\r\n    public lPosY: number;\r\n    /**\r\n     * X轴移动总距离\r\n     */\r\n    public totalX: number;\r\n    /**\r\n     * Y轴移动总距离\r\n     */\r\n    public totalY: number;\r\n    /**\r\n     * 触摸的总时间\r\n     */\r\n    public totalTime: number;\r\n    /**\r\n     * 趋向于X轴方向移动\r\n     */\r\n    public trendX;\r\n    /**\r\n     * 趋向于Y轴方向移动\r\n     */\r\n    public trendY;\r\n}\r\nexport enum TouchDirection{\r\n    No = -1,\r\n    Up = 0,\r\n    Down = 1,\r\n    Left = 2,\r\n    Right = 3\r\n}","import {__IC_SignalManager, ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport Food from \"../view/Food\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\n\r\n//引用注入装饰器\r\nexport class UpdateCommand extends Command{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(cc.Node,\"Scene\")\r\n    sceneNode : cc.Node;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl:MainUtil;\r\n\r\n    tickcount:number = 0;\r\n    timecount:number = 0;\r\n    //执行\r\n    execute(dt){\r\n        this.update(dt);\r\n    }\r\n\r\n    update(dt){\r\n        this.mMdl.timer += dt\r\n        if (this.mMdl.timer >= this.mMdl.lastTimer + this.mMdl.timePeriod) {\r\n            this.mMdl.lastTimer = this.mMdl.timer\r\n            this.newNode();\r\n            // 难度加成\r\n            if (this.mMdl.timePeriod >= this.mMdl.minTimePeriod && this.mMdl.score > 0 && (this.mMdl.currentLevel < this.mMdl.harderRatios.length - 1)) {\r\n                let [level, ratio] = this.mMdl.harderRatios[this.mMdl.currentLevel + 1]\r\n                if (this.mMdl.score >= level) {\r\n                    this.mMdl.currentLevel++\r\n                    this.mMdl.timePeriod -= ratio\r\n                    //console.log(this.mMdl.timePeriod)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    newNode() {\r\n        //获取食物实例\r\n        let food = this.getPoolNode()\r\n        if(!food.parent){\r\n            this.sceneNode.addChild(food);\r\n        }\r\n        let foodComponent : Food = food.getComponent(Food)\r\n        //初始化配置\r\n        foodComponent.clear();\r\n        //获取对象的食物组件\r\n        foodComponent.randomProps()\r\n        return food\r\n    }\r\n\r\n    getPoolNode() {\r\n        //从食物对象池中获取一个实例\r\n        let foodNode = this.mMdl.foodPool.get();\r\n        //将食物实例放入当前食物节点列表\r\n        this.mMdl.currentFoodNodes.push(foodNode)\r\n        return foodNode\r\n    }\r\n\r\n\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Util extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IUtil\";\r\n    }\r\n}\r\nexport interface IUtil{\r\n\r\n}\r\n/**\r\n * 工具类型枚举\r\n */\r\nexport enum UtilType{\r\n    Main = \"Main\",\r\n    Audio = \"Audio\",\r\n    Touch = \"Touch\",\r\n}","/**\r\n * 微信API接口\r\n */\r\nexport default class WxGameApi{\r\n    static get isRunInWeiXin(){\r\n        if(cc.sys.platform === cc.sys.WECHAT_GAME){\r\n            return true\r\n        }else{\r\n            WxGameApi.errorLog();\r\n            return false;\r\n        } \r\n    }\r\n\r\n    static errorLog(func){\r\n        console.warn(\"[请在微信环境内调用微信接口]\");\r\n    }\r\n\r\n    static playBGM(bgmUrl){\r\n        if(!WxGameApi.isRunInWeiXin)return;\r\n        let bgm  = wx.createInnerAudioContext()\r\n        // src 可以设置 http(s) 的路径，本地文件路径或者代码包文件路径\r\n        bgm .src = bgmUrl;      \r\n        bgm.loop = true;\r\n        bgm.autoplay = true;\r\n        bgm.play()\r\n        wx.onShow(()=>{\r\n            bgm.play();\r\n        });\r\n    }\r\n\r\n    static downFile(url,successCallback,failCallback){\r\n        /*         wx.downloadFile({\r\n            url : url,\r\n            header:\"\",\r\n            filePath:\"\",\r\n            success(res){\r\n                console.info(\"[下载成功]\" + res.statusCode);\r\n                console.info(\"[保存到路径]\" + res.tempFilePath);\r\n                wx.getFileSystemManager().readFile({\r\n                    filePath:res.tempFilePath,\r\n                    success(data){\r\n                        console.info(\"[成功获取]\" + data);\r\n                        successCallback(data);\r\n                    },\r\n                    fail(err){\r\n                        console.info(\"[获取失败]\" + err.errMsg);\r\n                        failCallback(err);\r\n                    }\r\n                })\r\n            },\r\n            fail(err){\r\n                console.info(\"[下载失败]\" + err.errMsg);\r\n            }\r\n        }); */\r\n    }\r\n}","export function spriteRes(resourceUrl) {\n\treturn new Promise((resolve, reject) => {\n\t\tcc.loader.loadRes(resourceUrl, cc.SpriteFrame, (err, spriteFrame) => {\n\t\t\tif (err) throw err\n\t\t\tresolve(spriteFrame)\n\t\t})\n\t})\n}\n\nexport function randomCoin() {\n\treturn Math.round(Math.random())\n}\n\nexport function randomNumber(size) {\n\treturn Math.floor(Math.random() * size)\n}\n\nexport function randomValue(...values) {\n\treturn values[randomNumber(values.length)]\n}\n\n"],"sourceRoot":"/source/","file":"project.js"}