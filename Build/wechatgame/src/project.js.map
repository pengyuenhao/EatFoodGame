{"version":3,"sources":["assets/scripts/lib/extensions/ActionExtension.ts","assets/scripts/project/view/Animal.ts","assets/scripts/project/view/ArrowTipView.ts","assets/scripts/project/util/AudioManager.ts","assets/scripts/project/util/AudioUtil.ts","assets/scripts/project/command/BackHomeCommand.ts","assets/scripts/project/impl/Begin.ts","assets/scripts/lib/framework/Bind/BindConst.ts","assets/scripts/lib/framework/Bind/Binder.ts","assets/scripts/lib/framework/Bind/Binding.ts","assets/scripts/lib/framework/Command/CommandBinder.ts","assets/scripts/lib/framework/Command/CommandBinding.ts","assets/scripts/lib/framework/Command/CommandConst.ts","assets/scripts/lib/framework/Command/Command.ts","assets/scripts/project/Common.ts","assets/scripts/lib/framework/Context/Context.ts","assets/scripts/project/view/CountDownView.ts","assets/scripts/lib/framework/Decorator/DecoratorClassBinder.ts","assets/scripts/lib/framework/Decorator/DecoratorClassBinding.ts","assets/scripts/lib/framework/Decorator/DecoratorClass.ts","assets/scripts/lib/framework/Decorator/DecoratorConst.ts","assets/scripts/project/view/Food.ts","assets/scripts/project/command/GenerateCommand.ts","assets/scripts/project/helper/Helper.ts","assets/scripts/lib/framework/Command/ICommandBinder.ts","assets/scripts/lib/framework/Context/IRoot.ts","assets/scripts/lib/framework/Injector/InjectBinder.ts","assets/scripts/lib/framework/Injector/InjectBinding.ts","assets/scripts/lib/framework/Injector/InjectConst.ts","assets/scripts/lib/framework/Injector/InjectDecorator.ts","assets/scripts/lib/framework/Injector/InjectFactory.ts","assets/scripts/lib/framework/Injector/Injector.ts","assets/scripts/project/command/InputControlCommand.ts","assets/scripts/project/Model/InputModel.ts","assets/scripts/lib/extensions/IocComponet.ts","assets/scripts/lib/framework/IocConst.ts","assets/scripts/lib/extensions/IocRoot.ts","assets/scripts/lib/extensions/IocView.ts","assets/scripts/project/view/LogicNode.ts","assets/scripts/project/wxgame/login/Login.js","assets/scripts/project/command/LookRankCommand.ts","assets/scripts/project/context/MainContext.ts","assets/scripts/project/Model/MainModel.ts","assets/scripts/project/view/MainNode.ts","assets/scripts/project/context/MainRoot.ts","assets/scripts/project/signal/MainSignalEnum.ts","assets/scripts/project/signal/MainSignalManager.ts","assets/scripts/project/util/MainUtil.ts","assets/scripts/project/util/Manager.ts","assets/scripts/project/command/MatchCommand.ts","assets/scripts/project/util/Model.ts","assets/scripts/project/impl/Option.ts","assets/scripts/project/view/PauseNode.ts","assets/scripts/project/PersistRoot.ts","assets/scripts/lib/extensions/Pool.ts","assets/scripts/project/util/PrefabManager.ts","assets/scripts/project/helper/PrefabPool.ts","assets/scripts/lib/extensions/Prototype.ts","assets/scripts/project/wxgame/rank/Rank.js","assets/scripts/project/command/RestartCommand.ts","assets/scripts/lib/framework/Signal/SignalManager.ts","assets/scripts/lib/framework/Signal/Signal.ts","assets/scripts/project/util/Singleton.ts","assets/scripts/lib/extensions/Stack.ts","assets/scripts/project/command/StartCommand.ts","assets/scripts/project/view/SwitchButton.ts","assets/scripts/project/wxgame/rank/TipsUiView.ts","assets/scripts/project/util/TouchUtil.ts","assets/scripts/project/command/UpdateCommand.ts","assets/scripts/project/util/Util.ts","assets/scripts/project/wxgame/WxGameApi.js","assets/scripts/project/util/index.ts","assets/scripts/Test/test.ts"],"names":["_a","cc","_decorator","ccclass","Shake","property","_super","_this","apply","this","arguments","_initial_x","_initial_y","_strength_x","_strength_y","_total_x","_total_y","__extends","Shake_1","create","duration","strength_x","strength_y","act","initWithDuration","prototype","ActionInterval","fgRangeRand","min","max","Math","random","update","time","randx","randy","getTarget","setPosition","startWithTarget","target","x","y","stop","Vec2","__decorate","exports","Fader","_color","color","Fader_1","_initColor","getR","_stepR","getG","_stepG","getB","_stepB","InjectDecorator_1","require","Model_1","IocView_1","Animal","type","onLoad","call","start","rePositonAnimal","i","mMdl","animalTextureRect","width","height","offsetRatio","node","inject","__IC_Model","ModelType","Main","IocView","default","ArrowTipView","force","cycle","isAutoPlay","left","right","completeList","isPlay","play","config","opacity","seq","repeatForever","sequence","spawn","moveBy","fadeOut","fadeIn","runAction","stopAllActions","complete","forEach","destroy","onComplete","push","dt","Number","Boolean","Node","Component","Singleton_1","Common_1","AudioManager","isInit","onConstructor","playLoopCount","audioMap","Map","key","hasAudio","clip","getAudio","audios","length","playBgm","bgm","loop","setVolume","volume","audio","WxGameApi","setBgmVolume","has","get","setAudio","value","set","Singleton","AudioUtil","Command_1","InjectBinder_1","BackHomeCommand","execute","gameOver","inj","unbindAllMark","director","loadScene","__IC_InjectBinder","Command","Begin","beginGame","lookRank","option","event","BindingConst","NULL","Symbol","Binding_1","BindConst_1","__IC_Binder","Object","defineProperty","IConstructorName","Binder","init","_bindings","resolver","binding","resolveBinding","dict","bindingName","name","existingBinding","delete","bind","getRawBinding","unbind","checkKey","Binding","checkAbstract","getBinding","getBindingMap","__IC_Binding","_resolver","_key","_value","_name","to","toName","isConstructor","constructorName","CommandBinding_1","Pool_1","CommandConst_1","CommandBinder","pools","activeCommands","Set","activeSequences","usePooling","getPool","isPooled","that_1","values","myPool","makePoolFromType","poolType","injectBinder","Pool","CommandConst","COMMAND_POOL","pool","getInstance","CommandBinding","invokeCommand","cmd","args","depth","command","createCommand","sequenceId","trackCommand","executeCommand","data","getCommand","msg","toString","Error","isClean","injector","deploy","add","__IC_Command","isSequence","onDispose","trigger","_i","next","aa","a","releaseCommand","disposeOfSequencedData","isOnce","isRetain","t","constructor","returnInstance","SignalCommandBinder","addListener","signal","toSingleton","createCommandForSignal","_isSequence","_isOnce","Pooled","ICommandBinder_1","_clean","_retain","clean","retain","release","restore","uninject","__IC_CommandBinder","Common","operatorMode","enableAudio","viedo","viedoHandle","version","persistRootNode","root","shareTickets","isHasWxRank","maxScore","userOpenId","session_key","unionId","CommandBinder_1","IocConst_1","__IC_Context","Context","firstContext","getRoot","crossContextBinder","addCrossContext","setRoot","addCore","_injectBinder","InjectBinder","_crossContextBinder","_commandBinder","context","removeCrossContext","childContext","restart","instantiateCore","mapBindings","postBindings","launch","toValue","ActionExtension_1","CountDownView","label","getComponent","Label","step","stepDur","before","floor","after","scale","scaleActions","scaleBy","fadeActions","string","Binder_1","DecoratorClass_1","DecoratorClassBinding_1","Prototype_1","DecoratorClassBinder","_decoratorClassBufferMap","extendsList","Prototype","getPrototypeList","injectClass","DecoratorClass","list","bindingMaps_1","size","inside","j","DecoratorClassBinding","insideDict","insideDict_1","insideDic","_property","toProperty","_list","DecoratorClassBinder_1","DecoratorConst","DECORATOR_CLASS_BINDER","Animal_1","MainSignalEnum_1","Util_1","Manager_1","Food","speed","accel","strength","moveY","Food_1","reuse","unuse","isHide","inited","onCollisionEnter","other","self","otherComponent","selfComponent","sMgr","MainSignalEnum","Match","dispatch","GameSignalEnum","onMatch","resPoolNode","onNotMatch","foodNode","index","currentFoodNodes","indexOf","splice","foodPool","res","randomProps","baseIndex","track","mUtl","randomCoin","lastFoodIndex","lastTrack","randomRange","map","foodDatas","foodIndex","randomValue","foodData","Sprite","spriteFrame","getSceneSize","__IC_Util","UtilType","__IC_Manager","ManagerType","Audio","PrefabPool_1","GenerateCommand","then","generateTouchArea","generateAnimals","area","sceneNode","addChild","tUtl","registerTouchArea","foodPrefab","p1","loadFoodRes","p2","loadAnimalRes","Promise","all","that","resolve","reject","spriteRes","image","spriteFrames","animalDatas","animalData","animalNode","instantiate","animalPrefab","animal","sprite","animalsNode","Touch","Prefab","Helper","getAllInfo","obj","getInfo","console","info","depthTab","item","p","v","__IC_Root","Injector_1","InjectBinding_1","DecoratorConst_1","ClassBinder","_injector","Injector","binder","injectClassBinder","instance","tryInject","InjectBinding","unbinds","isUnbind","InjectConst_1","_isUnbind","_bindingType","InjectConst","BindingType","DEFAULT","_isInject","_args","toArgs","VALUE","SINGLETON","unBind","setValue","o","toInject","injectNoNameFunc","injectToNameFunc","_constructor","_target","injectFunc","InjectFactory","bindingType","singletonOf","valueOf","instanceOf","createFromValue","generateImplicit","c","ToString","InjectFactory_1","factory","decoratorUnInject","tryInjectHere","isValueConstructor","isKeyConstructor","isInject","attemptConstructorInjection","decoratorInject","injectBinding","getInjectValue","injv","TouchUtil_1","InputControlCommand","xRange","avatarNode","yRange","on","TouchDirection","Up","status","sPosX","areaOnMove","Down","Left","sPosY","Right","direction","pauseFlag","readyFlag","rotateAnimals","isRotationing","iMdl","waitingDirection","aMgr","byScaleSpin","byRotateSpin","rotateAction","scaleTo","rotateDur","rotateActionEnd","lastAction","callFunc","resetAnimalsNode","children","setScale","undefined","rotateBy","animalAction_1","animalsNodeChildren","switchIndex","one","two","temp","Input","InputModel","BubbleType","Context_1","IocRoot_1","IocComponet","_requiresContext","_registerWithContext","enabled","activeInHierarchy","autoRegisterWithContext","registeredWithContext","shouldRegister","bubbleToContext","Add","view","finalTry","loopLimiter","parent","IocRoot","iocContext","success","Remove","Enable","Disable","requiresContext","IocError","IC_ERROR","onDestroy","IocComponet_1","SignalManager_1","__IC_SignalManager","LogicNode","Update","Class","extends","properties","_common2","_WxGameApi2","isRunInWeiXin","getCachePromise","url","getOrCacheResFile","resPath","playBGM","Date","getSeconds","diff","wx","login","fail","launchOptionsSync","preloadFriendInfo","preloadGroupInfo","getOpenDataContext","postMessage","message","function","getLaunchOptionsSync","scene","shareTicket","LookRankCommand","StartCommand_1","MainSignalManager_1","MainModel_1","UpdateCommand_1","GenerateCommand_1","MainUtil_1","RestartCommand_1","LookRankCommand_1","MatchCommand_1","PrefabManager_1","InputControlCommand_1","InputModel_1","AudioUtil_1","AudioManager_1","BackHomeCommand_1","MainContext","MainSignalManager","MainModel","Instance","MainUtil","TouchUtil","signalMgr","commandBinder","Start","StartCommand","UpdateCommand","Generate","Restart","RestartCommand","LookRank","MatchCommand","InputControl","BackHome","isLookVideo","score","timer","lastTimer","timePeriod","currentLevel","initTimePeriod","minTimePeriod","lastScore","harderRatios","MainNode","onHide","onShow","emitter","MainRoot","SignalManager","winSize","resourceUrl","loader","loadRes","SpriteFrame","err","round","randomNumber","PauseNode_1","match","gainPoint","scoreNode","saveScore","pauseNode","active","show","updateScore","stopAllCurrent","Option","setTimeout","modeSwitchButton","setStatus","audioSwitchButton","backHome","modeSwitch","audioSwitch","PauseNode","mainButton","mainTop","mainBotton","playVideo","replayFrame","onRestartClicked","onLookRankClicked","onBackHomeClicked","MainContext_1","PersistRoot","prefabs","clips","game","setFrameRate","getFrameRate","addPersistRootNode","loadPrefab","loadAudio","prefab","setPrefab","AudioClip","AudioSource","PoolOverflowBehavior","BindingConstraintType","PoolInflationType","Stack_1","__IC_InstanceProvider","instancesAvailable","Stack","instancesInUse","constraint","POOL","uniqueValues","overflowBehavior","EXCEPTION","inflationType","DOUBLE","failIf","isProtetype","_instanceCount","addList","remove","removeInstance","removeList","retv","pop","instancesToCreate","instanceCount","WARNING","warn","INCREMENT","instanceProvider","newInstance","clear","condition","PrefabManager","prefabMap","hasPrefab","getPrefab","PrefabPool","nodePool","NodePool","put","hasPrototypeList","constructor_1","types","__proto__","startsWith","AddPrototype","prototypeMap","Array","from","tpye","extendSet","subContextView","tipsUiNode","rankType","shareCount","updateShareMenu","withShareTicket","switchRank","switchBtn","switchBar","getChildByName","moveRange","v2","hideShowTipsUi","ticket","showTipsUi","getShareInfo","backhome","shareApp","shareAppMessage","title","imageUrl","isExist","content","tipsUiView","display","CountDownView_1","ArrowTipView_1","isPlayVideo","revive","width_1","height_1","x_1","y_1","url_1","checkCacheExistFile","result","clearAllCurrent","isResult","waitStartTime","waitDurTime","preMgr","arrowTip","countDown","mainNode","Signal_1","_signal_dic","symbol","_signal","Signal","__IC_Signal","_listener","_onceListener","action","concat","callback","addUnique","addOnceListener","removeAllListeners","listeners","isUnique","getTypes","clazz","classMap","getInstanceOrCreate","destroyInstance","Item","_next","_size","_header","top","newItem","tmp","lanuch","getCollisionManager","avatar","animals","foodArea","pause","SwitchButton","switchContent","_switchStatus","_isSwitching","switchToStatus","position","switch","TipsUiView","text","onClicked","RichText","areaMap","isGlobal","areaStatus","AreaStatus","globalAreaStatus","EventType","TOUCH_START","getTouches","touch","getLocationX","sPoxY","getLocationY","TouchStatus","No","totalX","totalY","trendX","trendY","touchMap","getID","TOUCH_MOVE","mDeltaX","getDelta","mDeltaY","abs","disposeTouchResult","TOUCH_END","TOUCH_CANCEL","touchMoveDetection","touchEvnet","isMoveValid","trend","tickcount","timecount","newNode","level","ratio","food","getPoolNode","foodComponent","func","bgmUrl","createInnerAudioContext","src","autoplay","w","h","overtime","isPlayFinish","video","createVideo","poster","objectFit","controls","muted","onEnded","onerror","path","successCallback","failCallback","userPath","downloadFile","header","filePath","statusCode","getFileSystemManager","saveFile","tempFilePath","savedFilePath","errMsg","access","readFile","isAllowDownload","downFile","env","USER_DATA_PATH","sys","platform","WECHAT_GAME","errorLog","Test","s","l","isSort","m","str","element","error"],"mappings":"4mBAAM,IAAAA,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAENC,GAFMJ,EAAAK,SAEN,SAAAC,GADA,SAAAF,IAAA,IAAAG,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAEYF,EAAAI,WAAA,EACAJ,EAAAK,WAAA,EACAL,EAAAM,YAAA,EACAN,EAAAO,YAAA,EACAP,EAAAQ,SAAA,EACAR,EAAAS,SAAA,UA6CZ,OAnD2BC,UAAAb,EAAAE,GAAdY,EAAAd,EAcKA,EAAAe,OAAA,SAAAC,EAAAC,EAAAC,GACV,IAAAC,EAAA,IAAAL,EAEA,OADAK,EAAAC,iBAAAJ,EAAAC,EAAAC,GACAC,GAEGnB,EAAAqB,UAAAD,iBAAA,SAAAJ,EAAAC,EAAAC,GAIH,OAHArB,GAAAyB,eAAAD,UAAA,iBAAAjB,MAAAC,KAAAC,WACAD,KAAAI,YAAAQ,EACAZ,KAAAK,YAAAQ,GACA,GAEGlB,EAAAqB,UAAAE,YAAA,SAAAC,EAAAC,GAEH,OADAC,KAAAC,UACAF,EAAAD,GAAAA,GAEGxB,EAAAqB,UAAAO,OAAA,SAAAC,GACH,IAAAC,EAAAzB,KAAAkB,aAAAlB,KAAAI,YAAAJ,KAAAI,aACAsB,EAAA1B,KAAAkB,aAAAlB,KAAAK,YAAAL,KAAAK,aAGAL,KAAA2B,YAAAC,YAAAH,EAAAzB,KAAAE,WAAAwB,EAAA1B,KAAAG,aAMGR,EAAAqB,UAAAa,gBAAA,SAAAC,GACHtC,GAAAyB,eAAAD,UAAA,gBAAAjB,MAAAC,KAAAC,WACAD,KAAAE,WAAA4B,EAAAC,EACA/B,KAAAG,WAAA2B,EAAAE,GAEGrC,EAAAqB,UAAAiB,KAAA,WAEHjC,KAAA2B,YAAAC,YAAA,IAAApC,GAAA0C,KAAAlC,KAAAE,WAAAF,KAAAG,aAEAX,GAAAyB,eAAAD,UAAA,KAAAjB,MAAAC,OAjDKL,EAAAc,EAAA0B,YADZzC,GACYC,GAAb,CAAAH,GAAAyB,iBAAamB,EAAAzC,MAAAA,EAqDb,IAAA0C,EAAA,SAAAxC,GADA,SAAAwC,IAAA,IAAAvC,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGYF,EAAAwC,OAAA9C,GAAA+C,MAAA,IAAA,IAAA,aAuCZ,OAzC2B/B,UAAA6B,EAAAxC,GAAd2C,EAAAH,EAYKA,EAAA3B,OAAA,SAAAC,EAAA4B,GACV,IAAAzB,EAAA,IAAA0B,EAEA,OADA1B,EAAAC,iBAAAJ,EAAA4B,GACAzB,GAEGuB,EAAArB,UAAAD,iBAAA,SAAAJ,EAAA4B,GAGH,OAFA/C,GAAAyB,eAAAD,UAAA,iBAAAjB,MAAAC,KAAAC,WACAD,KAAAsC,OAAAC,GACA,GAEGF,EAAArB,UAAAO,OAAA,SAAAC,GACHxB,KAAA2B,YAAAY,MAAA/C,GAAA+C,MAAAvC,KAAAyC,WAAAC,OAAA1C,KAAA2C,OAAAnB,EAAAxB,KAAAyC,WAAAG,OAAA5C,KAAA6C,OAAArB,EAAAxB,KAAAyC,WAAAK,OAAA9C,KAAA+C,OAAAvB,IAMGa,EAAArB,UAAAa,gBAAA,SAAAC,GACHtC,GAAAyB,eAAAD,UAAA,gBAAAjB,MAAAC,KAAAC,WAEAD,KAAAyC,WAAAzC,KAAA2B,YAAAY,MACAvC,KAAA2C,OAAA3C,KAAAsC,OAAAI,OAAAZ,EAAAS,MAAAG,OACA1C,KAAA6C,OAAA7C,KAAAsC,OAAAM,OAAAd,EAAAS,MAAAK,OACA5C,KAAA+C,OAAA/C,KAAAsC,OAAAQ,OAAAhB,EAAAS,MAAAO,QAEGT,EAAArB,UAAAiB,KAAA,WACHjC,KAAA2B,YAAAY,MAAAvC,KAAAsC,OACA9C,GAAAyB,eAAAD,UAAA,KAAAjB,MAAAC,OAvCKqC,EAAAG,EAAAL,YADZzC,GACY2C,GAAb,CAAA7C,GAAAyB,gBAAamB,EAAAC,MAAAA,4JCvDb,IAAAW,EAAAC,EAAA,gDAEAC,EAAAD,EAAA,iBACAE,EAAAF,EAAA,gCAEM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAE,EAAAL,EAAAK,SAGNwD,EAAA,SAAAvD,GADA,SAAAuD,IAAA,IAAAtD,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAMIF,EAAAuD,KAAA,KAsCJ,OA3CoC7C,UAAA4C,EAAAvD,GAOhCuD,EAAApC,UAAAsC,OAAA,WACIzD,EAAAmB,UAAAsC,OAAAC,KAAAvD,OAEJoD,EAAApC,UAAAwC,MAAA,WACI3D,EAAAmB,UAAAwC,MAAAD,KAAAvD,OAIJoD,EAAApC,UAAAyC,gBAAA,SAAAC,GACQ,IAAAnE,EAAAS,KAAA2D,KAAAC,kBAAAC,EAAAtE,EAAAsE,MAAAC,EAAAvE,EAAAuE,OAIJC,GACIhC,EAAA,EACAC,EAAA,GAEJ,IAAA0B,IAAAK,GACIhC,GAAA,EACAC,EAAA,IAEJ,IAAA0B,IAAAK,GACIhC,EAAA,EACAC,EAAA,IAEJ,IAAA0B,IAAAK,GACIhC,EAAA,EACAC,GAAA,IAEJ,IAAA0B,IAAAK,GACIhC,GAAA,EACAC,GAAA,IAEJhC,KAAAgE,KAAApC,YAAAmC,EAAAhC,EAAA8B,EAAA,EAAAE,EAAA/B,EAAA8B,EAAA,IAtCJ3B,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACgBhB,EAAApC,UAAA,YAAA,GAGjBmB,YADCvC,GACQwD,EAAApC,UAAA,YAAA,GALQoC,EAAAjB,YADpBzC,GACoB0D,GAArB,CAAAD,EAAAkB,SAAqBjC,EAAAkC,QAAAlB,ySCEf,IAAA7D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAE,EAAAL,EAAAK,SAMN2E,EAAA,SAAA1E,GADA,SAAA0E,IAAA,IAAAzE,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGWF,EAAA0E,MAAA,IAEA1E,EAAA2E,MAAA,EAEA3E,EAAAa,SAAA,EAEAb,EAAA4E,YAAA,EAEA5E,EAAA6E,KAAA,KAEA7E,EAAA8E,MAAA,OA6FX,OAzG0CpE,UAAA+D,EAAA1E,GAgBtC0E,EAAAvD,UAAAsC,OAAA,WACItD,KAAA6E,gBACA7E,KAAA8E,QAAA,GAGJP,EAAAvD,UAAAwC,MAAA,WACIxD,KAAA0E,YACI1E,KAAA+E,QAIRR,EAAAvD,UAAAgE,OAAA,SAAAR,EAAAC,EAAA9D,GAII,OAHAX,KAAAwE,MAAAA,EACAxE,KAAAyE,MAAAA,EACAzE,KAAAW,SAAAA,EACAX,MAGJuE,EAAAvD,UAAA+D,KAAA,WAGI,GAFA/E,KAAA8E,QAAA,EAEA9E,KAAA2E,KAAA,CACI3E,KAAA2E,KAAAM,QAAA,EAEA,IAAAC,EAAA1F,GAAA2F,cAAA3F,GAAA4F,SAAA5F,GAAA6F,MAAA7F,GAAA8F,OAAA,EAAAtF,KAAAwE,MAAA,GAAAhF,GAAA+F,QAAA,IAAA/F,GAAAgG,OAAA,IAAAxF,KAAAyE,OAAAjF,GAAA6F,MAAA7F,GAAA8F,OAAAtF,KAAAyE,OAAAzE,KAAAwE,MAAA,GAAAhF,GAAA+F,QAAA,GAAAvF,KAAAyE,UAYAzE,KAAA2E,KAAAc,UAAAP,GAEJ,GAAAlF,KAAA4E,MAAA,CACI5E,KAAA4E,MAAAK,QAAA,EAEAC,EAAA1F,GAAA2F,cAAA3F,GAAA4F,SAAA5F,GAAA6F,MAAA7F,GAAA8F,OAAA,GAAAtF,KAAAwE,MAAA,GAAAhF,GAAA+F,QAAA,IAAA/F,GAAAgG,OAAA,IAAAxF,KAAAyE,OAAAjF,GAAA6F,MAAA7F,GAAA8F,OAAAtF,KAAAyE,MAAAzE,KAAAwE,MAAA,GAAAhF,GAAA+F,QAAA,GAAAvF,KAAAyE,UAYAzE,KAAA4E,MAAAa,UAAAP,GAEJ,OAAAlF,MAGJuE,EAAAvD,UAAAiB,KAAA,WACIjC,KAAA2E,MACI3E,KAAA2E,KAAAe,iBAEJ1F,KAAA4E,OACI5E,KAAA4E,MAAAc,iBAEJ1F,KAAA2F,YAGIpB,EAAAvD,UAAA2E,SAAA,WACJ3F,KAAA8E,QAAA,EAEA9E,KAAA6E,aAAAe,QAAA,SAAAD,GACIA,MAEJ3F,KAAAgE,KAAA6B,WAGJtB,EAAAvD,UAAA8E,WAAA,SAAAH,GAEI,OADA3F,KAAA6E,aAAAkB,KAAAJ,GACA3F,MAEJuE,EAAAvD,UAAAO,OAAA,SAAAyE,IACIhG,KAAAW,UAAAX,KAAAW,SAAA,EACIX,KAAAiC,OAGAjC,KAAAW,UAAAqF,GApGR7D,YADCvC,EAAAqG,SAC0B1B,EAAAvD,UAAA,aAAA,GAE3BmB,YADCvC,EAAAqG,SACwB1B,EAAAvD,UAAA,aAAA,GAEzBmB,YADCvC,EAAAqG,SAC2B1B,EAAAvD,UAAA,gBAAA,GAE5BmB,YADCvC,EAAAsG,UACkC3B,EAAAvD,UAAA,kBAAA,GAEnCmB,YADCvC,EAAAJ,GAAA2G,OAC2B5B,EAAAvD,UAAA,YAAA,GAE5BmB,YADCvC,EAAAJ,GAAA2G,OAC4B5B,EAAAvD,UAAA,aAAA,GAZZuD,EAAApC,YADpBzC,GACoB6E,GAArB,CAAA/E,GAAA4G,WAAqBhE,EAAAkC,QAAAC,wKChBrB,IAAA8B,EAAApD,EAAA,eAEAqD,EAAArD,EAAA,aAEAsD,EAAA,SAAA1G,GAAA,SAAA0G,IAAA,IAAAzG,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YACWF,EAAA0G,QAAA,IAuDX,OAxD0ChG,UAAA+F,EAAA1G,GAO5B0G,EAAAvF,UAAAyF,cAAA,WACNzG,KAAA0G,cAAA,EACA1G,KAAA2G,SAAA,IAAAC,KAGGL,EAAAvF,UAAA+D,KAAA,SAAA8B,GACH,GAAA7G,KAAA8G,SAAAD,GAAA,CACI,IAAAE,EAAA/G,KAAAgH,SAAAH,GAEA,GAAA7G,KAAAiH,OAAAC,SACIlH,KAAAiH,OAAAjH,KAAA0G,gBACI1G,KAAAiH,OAAAjH,KAAA0G,eAAAK,KAAAA,EACA/G,KAAAiH,OAAAjH,KAAA0G,eAAA3B,QAEA/E,KAAA0G,cAAA,EAEJ1G,KAAA0G,cAAA1G,KAAAiH,OAAAC,OAAA,EACIlH,KAAA0G,eAAA,EAEA1G,KAAA0G,cAAA,KAKTH,EAAAvF,UAAAmG,QAAA,WACHnH,KAAAoH,IAAAL,OACI/G,KAAAoH,IAAAC,MAAA,EACArH,KAAAoH,IAAArC,SAGDwB,EAAAvF,UAAAsG,UAAA,SAAAC,GAEH,GAAAvH,KAAAiH,OAAAC,QACIlH,KAAAiH,OAAArB,QAAA,SAAA4B,GACIA,EAAAD,OAAAA,IAIRjB,EAAAhC,QAAAmD,UAAAC,aAAAH,IAEJhB,EAAAvF,UAAA8F,SAAA,SAAAD,GACI,OAAA7G,KAAA2G,SAAAgB,IAAAd,IAEJN,EAAAvF,UAAAgG,SAAA,SAAAH,GACI,OAAA7G,KAAA2G,SAAAiB,IAAAf,IAEJN,EAAAvF,UAAA6G,SAAA,SAAAhB,EAAAiB,GACI9H,KAAA2G,SAAAoB,IAAAlB,EAAAiB,IAERvB,EAxDA,CAwDAF,EAAA2B,qOC5DA,IAGAC,EAAA,SAAApI,GAAA,SAAAoI,mDAEA,OAF+BzH,UAAAyH,EAAApI,GAE/BoI,EAFA,CAHAhF,EAAA,eAKA+E,WAFa5F,EAAA6F,UAAAA,uMCHb,IAAAC,EAAAjF,EAAA,uCACAD,EAAAC,EAAA,gDACAkF,EAAAlF,EAAA,6CAGAmF,EAAA,SAAAvI,GAAA,SAAAuI,mDAaA,OAbqC5H,UAAA4H,EAAAvI,GAIjCuI,EAAApH,UAAAqH,QAAA,WAEIrI,KAAAsI,YAGJF,EAAApH,UAAAsH,SAAA,WACItI,KAAAuI,IAAAC,gBACAhJ,GAAAiJ,SAAAC,UAAA,UATJvG,YADCa,EAAAiB,OAAAkE,EAAAQ,oBACkBP,EAAApH,UAAA,WAAA,GAWvBoH,EAbA,CAAAF,EAAAU,SAAaxG,EAAAgG,gBAAAA,qUCHP,IAAA7I,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNmJ,GAHMtJ,EAAAK,SAGN,SAAAC,GAAA,SAAAgJ,mDAoBA,OApBmCrI,UAAAqI,EAAAhJ,GAK/BgJ,EAAA7H,UAAAsC,OAAA,aAIAuF,EAAA7H,UAAA8H,UAAA,WACItJ,GAAAiJ,SAAAC,UAAA,SAGJG,EAAA7H,UAAA+H,SAAA,WACIvJ,GAAAiJ,SAAAC,UAAA,SAGJG,EAAA7H,UAAAgI,OAAA,SAAAC,GACIzJ,GAAAiJ,SAAAC,UAAA,WAlBaG,EAAA1G,YADpBzC,GACoBmJ,GAArB,CAAArJ,GAAA4G,YAAqBhE,EAAAkC,QAAAuE,kKCJjB,SAAAK,GAEiBA,EAAAC,KAAAC,OAAA,QAFjB,CAGAhH,EAAA8G,eAAA9G,EAAA8G,4KCJJ,IAAAG,EAAApG,EAAA,aACAqG,EAAArG,EAAA,eAaAsG,EAAA,SAAA1J,GAAA,SAAA0J,mDAEA,OAFiC/I,UAAA+I,EAAA1J,GAC7B2J,OAAAC,eAAAF,EAAAvI,UAAA,mBAAA4G,IAAA,WAAA,MAAA,2CACJ2B,EAFA,CAZAtG,EAAA,eAcAyG,kBAFatH,EAAAmH,YAAAA,EAGb,IAAAI,EAAA,WAKI,SAAAA,IACI3J,KAAA4J,OAwIR,OAnIID,EAAA3I,UAAA4I,KAAA,WAEI5J,KAAA6J,UAAA,IAAAjD,KAMJ+C,EAAA3I,UAAA8I,SAAA,SAAAC,GACI,IAAAlD,EAAAkD,EAAAlD,IACA7G,KAAAgK,eAAAD,EAAAlD,IAOJ8C,EAAA3I,UAAAgJ,eAAA,SAAAD,EAAAlD,GAEI,IACAoD,EADAC,EAAA,MAAAH,EAAAI,KAAAb,EAAAJ,aAAAC,KAAAY,EAAAI,KAGA,GAAAnK,KAAA6J,UAAAlC,IAAAd,IAII,IAFAoD,EAAAjK,KAAA6J,UAAAjC,IAAAf,IAEAc,IAAAuC,GAAA,CAEI,IAAAE,EAAAH,EAAArC,IAAAsC,GAEAE,GAAAL,IAEIK,EAAAtC,OAEImC,EAAAI,OAAAH,UAMZD,EAAA,IAAArD,IAEA5G,KAAA6J,UAAA9B,IAAAlB,EAAAoD,GAIJA,EAAAtC,IAAA2B,EAAAJ,aAAAC,OAAAc,EAAArC,IAAA0B,EAAAJ,aAAAC,QAAAY,GAEIE,EAAAI,OAAAf,EAAAJ,aAAAC,MAIJc,EAAAtC,IAAAuC,IACID,EAAAlC,IAAAmC,EAAAH,IAQRJ,EAAA3I,UAAAsJ,KAAA,SAAAzD,GAEI,IAAAkD,EAAA/J,KAAAuK,gBAIA,OADAR,EAAAO,KAAAzD,GACAkD,GAOJJ,EAAA3I,UAAAwJ,OAAA,SAAA3D,EAAAsD,GACI,IAAAM,EAAApB,EAAAqB,QAAAC,cAAA9D,GAEA,GAAA7G,KAAA6J,UAAAlC,IAAA8C,GAAA,CAEI,IAAAR,EAAAjK,KAAA6J,UAAAjC,IAAA6C,GAEAP,OAAA,EAEIA,EADJC,GAGIb,EAAAJ,aAAAC,KAEJc,EAAAtC,IAAAuC,IACID,EAAAI,OAAAH,KAOZP,EAAA3I,UAAAuJ,cAAA,WACI,OAAA,IAAAlB,EAAAqB,QAAA1K,KAAA8J,SAAAQ,KAAAtK,QAOJ2J,EAAA3I,UAAA4J,WAAA,SAAA/D,EAAAsD,GAEI,GAAAnK,KAAA6J,UAAAlC,IAAAd,GAAA,CAEI,IAAAoD,EAAAjK,KAAA6J,UAAAjC,IAAAf,GAMA,OAJAsD,IACIA,EAAAb,EAAAJ,aAAAC,MAGJc,EAAAtC,IAAAwC,GAEIF,EAAArC,IAAAuC,GAGA,OAQZR,EAAA3I,UAAA6J,cAAA,SAAAhE,GACI,GAAA7G,KAAA6J,UAAAlC,IAAAd,GACI,OAAA7G,KAAA6J,UAAAjC,IAAAf,IAGZ8C,EA9IA,GAAavH,EAAAuH,OAAAA,sOCjBb,IAWAmB,EAAA,SAAAjL,GAAA,SAAAiL,mDAEA,OAFkCtK,UAAAsK,EAAAjL,GAC9B2J,OAAAC,eAAAqB,EAAA9J,UAAA,mBAAA4G,IAAA,WAAA,MAAA,4CACJkD,EAFA,CAXA7H,EAAA,eAaAyG,kBAFatH,EAAA0I,aAAAA,EAGb,IAAAJ,EAAA,WAgBI,SAAAA,EAAAZ,GACI9J,KAAA+K,UAAAjB,EAEA9J,KAAAgL,KAAA,KACAhL,KAAAiL,OAAA,KACAjL,KAAAkL,MAAA,KA+DR,OA9EI1B,OAAAC,eAAAiB,EAAA1J,UAAA,OAAA4G,IAAA,WACI,OAAA5H,KAAAgL,sCAEJxB,OAAAC,eAAAiB,EAAA1J,UAAA,SAAA4G,IAAA,WACI,OAAA5H,KAAAiL,wCAEJzB,OAAAC,eAAAiB,EAAA1J,UAAA,QAAA4G,IAAA,WACI,OAAA5H,KAAAkL,uCAeJR,EAAA1J,UAAAsJ,KAAA,SAAAzD,GAEI,OADA7G,KAAAgL,KAAAN,EAAAC,cAAA9D,GACA7G,MAMJ0K,EAAA1J,UAAAmK,GAAA,SAAArD,GAII,OAHA9H,KAAAiL,OAAAnD,EACA,MAAA9H,KAAA+K,WACI/K,KAAA+K,UAAA/K,MACJA,MAOJ0K,EAAA1J,UAAAoK,OAAA,SAAAjB,GAII,OAHAnK,KAAAkL,MAAAf,EACA,MAAAnK,KAAA+K,WACI/K,KAAA+K,UAAA/K,MACJA,MAGJwJ,OAAAC,eAAAiB,EAAA1J,UAAA,oBAAA4G,IAAA,WACI,OAAA8C,EAAAW,cAAArL,KAAAgL,uCAGJxB,OAAAC,eAAAiB,EAAA1J,UAAA,sBAAA4G,IAAA,WACI,OAAA8C,EAAAW,cAAArL,KAAAiL,yCAEUP,EAAAW,cAAA,SAAAvD,GAEV,MAAA,mBAAAA,KAIAA,EAAA9G,WAKU0J,EAAAC,cAAA,SAAA9D,GAUV,OAPAA,EAAAyE,gBACIzE,EAAAyE,gBAGAzE,GAKZ6D,EApFA,GAAatI,EAAAsI,QAAAA,kMCdb,IAAArB,EAAApG,EAAA,mBAIAkF,EAAAlF,EAAA,4BAIAsI,EAAAtI,EAAA,oBASAiF,EAAAjF,EAAA,aAIAuI,EAAAvI,EAAA,yBAGAwI,EAAAxI,EAAA,kBAGAD,EAAAC,EAAA,+BAeAyI,EAAA,SAAA7L,GAAA,SAAA6L,IAAA,IAAA5L,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAMcF,EAAA6L,MAAA,IAAA/E,IAGA9G,EAAA8L,eAAA,IAAAC,IAEA/L,EAAAgM,gBAAA,IAAAlF,IAEH9G,EAAAiM,YAAA,IAwLX,OArMmCvL,UAAAkL,EAAA7L,GAcxB6L,EAAA1K,UAAAgL,QAAA,SAAA3I,GACH,OAAArD,KAAA2L,MAAAhE,IAAAtE,GACIrD,KAAA2L,MAAA/D,IAAAvE,GACJ,MAGGqI,EAAA1K,UAAA8I,SAAA,SAAAC,GAAP,IAAAjK,EAAAE,KAEI,GADAH,EAAAmB,UAAA8I,SAAAvG,KAAAvD,KAAA+J,GACA/J,KAAA+L,YAAAhC,EAAAkC,UACI,MAAAlC,EAAAjC,MAAA,CACI,IAAAoE,EAAAlM,KAEAmM,EAAApC,EAAAjC,MACA,IAAAqE,EAAAjF,SACIiF,MACApG,KAAAgE,EAAAjC,OAGJqE,GAAAA,EAAAjF,OAAA,GACIiF,EAAAvG,QAAA,SAAAkC,GAEI,GAAA,GAAAoE,EAAAP,MAAAhE,IAAAG,GAAA,CACI,IAAAsE,EAAAtM,EAAAuM,iBAAAvE,GACAoE,EAAAP,MAAA5D,IAAAD,EAAAsE,QAOdV,EAAA1K,UAAAqL,iBAAA,SAAAhJ,GAEN,IAAAiJ,EAAAjJ,EAEArD,KAAAuM,aAAAjC,KAAAjH,GAAA8H,GAAA9H,GAGArD,KAAAuM,aAAAjC,KAAAkB,EAAAgB,MAAArB,GAAAK,EAAAgB,MAAApB,OAAAK,EAAAgB,aAAAC,cACA,IAAAC,EAAA3M,KAAAuM,aAAAK,YAAApB,EAAAgB,KAAAf,EAAAgB,aAAAC,cAIA,OAHA1M,KAAAuM,aAAA/B,OAAAgB,EAAAgB,KAAAf,EAAAgB,aAAAC,cACAC,EAAArC,KAAAgC,GAEAK,GAGJjB,EAAA1K,UAAAuJ,cAAA,WACI,OAAA,IAAAgB,EAAAsB,eAAA7M,KAAA8J,SAAAQ,KAAAtK,QAEJ0L,EAAA1K,UAAAsJ,KAAA,SAAAzD,GACI,OAAAhH,EAAAmB,UAAAsJ,KAAA/G,KAAAvD,KAAA6G,IAGM6E,EAAA1K,UAAA8L,cAAA,SAAAC,EAAAhD,EAAAiD,EAAAC,GACN,IAAAC,EAAAlN,KAAAmN,cAAAJ,EAAAC,GAIA,OAHAE,EAAAE,WAAAH,EACAjN,KAAAqN,aAAAH,EAAAnD,GACA/J,KAAAsN,eAAAJ,EAAAF,GACAE,GAGMxB,EAAA1K,UAAAmM,cAAA,SAAAJ,EAAAQ,GACN,IAAAL,EAAAlN,KAAAwN,WAAAT,GAEA,GAAA,MAAAG,EAAA,CACI,IAAAO,EAAA,aAKA,MAJA,MAAAF,IACIE,GAAA,gBAAAF,EAAAG,YAEJD,GAAA,uLACA,IAAAE,MAAAF,GAIJ,OADAP,EAAAK,KAAAA,EACAL,GAGMxB,EAAA1K,UAAAwM,WAAA,SAAAnK,GAEN,GAAArD,KAAA+L,YAAA/L,KAAA2L,MAAAhE,IAAAtE,GAAA,CACI,IAAAsJ,EAAA3M,KAAA2L,MAAA/D,IAAAvE,GAeA,OAdA6J,EAAAP,EAAAC,eAIIM,EAAAU,UACI5N,KAAAuM,aAAAsB,SAAA5J,OAAAiJ,EAAA,MACAA,EAAAY,WAIJZ,EAAAlN,KAAAuM,aAAAK,YAAAvJ,EAAA,MAEAsJ,EAAAoB,IAAAb,IAEJA,EAEAlN,KAAAuM,aAAAjC,KAAApC,EAAA8F,cAAA7C,GAAA9H,GACA,IAAA6J,EAAAlN,KAAAuM,aAAAK,YAAA1E,EAAA8F,aAAA,MAEA,OADAhO,KAAAuM,aAAA/B,OAAAtC,EAAA8F,aAAA,MACAd,GAGExB,EAAA1K,UAAAqM,aAAA,SAAAH,EAAAnD,GACNA,EAAAkE,WACIjO,KAAA8L,gBAAA/D,IAAAmF,EAAAnD,GAEA/J,KAAA4L,eAAAmC,IAAAb,IAIExB,EAAA1K,UAAAsM,eAAA,SAAAJ,EAAAF,GACN,MAAAE,GAGAA,EAAA7E,QAAAtI,MAAAmN,EAAAF,IAOGtB,EAAA1K,UAAAkN,UAAA,SAAAC,GAA4B,IAAA,IAAAnB,KAAAoB,EAAA,EAAAA,EAAAnO,UAAAiH,OAAAkH,IAAApB,EAAAoB,EAAA,GAAAnO,UAAAmO,GAE/B,IAAArE,EAAA/J,KAAA4K,WAAAuD,EAAA,MACA,GAAA,MAAApE,EAEI,GAAAA,EAAAkE,WAEIjO,KAAAqO,KAAAtE,EAAAiD,EAAA,QAKA,IAFA,IACAsB,EADAvE,EAAAjC,MACAZ,OAAA,EACAqH,EAAA,EAAAA,EAAAD,EAAAC,IACIvO,KAAAqO,KAAAtE,EAAAiD,EAAAuB,IAMN7C,EAAA1K,UAAAqN,KAAA,SAAAtE,EAAAiD,EAAAC,GACN,IAAAd,EAAApC,EAAAjC,MAMA,GALA,IAAAqE,EAAAjF,SACIiF,MACApG,KAAAgE,EAAAjC,OAGJmF,EAAAd,EAAAjF,OAAA,CACI,IAAA6F,EAAAZ,EAAAc,GACAC,EAAAlN,KAAA8M,cAAAC,EAAAhD,EAAAiD,EAAAC,GACAjN,KAAAwO,eAAAtB,QAEAlN,KAAAyO,uBAAAzB,GAEAjD,EAAA2E,QAEI1O,KAAAwK,OAAAT,EAAA,OAKF2B,EAAA1K,UAAAyN,uBAAA,SAAAlB,KAIH7B,EAAA1K,UAAAwN,eAAA,SAAAtB,GAEH,IAAAA,EAAAyB,SAAA,CAEI,IAAAC,EAAA1B,EAAA2B,YAIA,GAHA7O,KAAA+L,YAAA/L,KAAA2L,MAAAhE,IAAAiH,IACI5O,KAAA2L,MAAA/D,IAAAgH,GAAAE,eAAA5B,GAEJlN,KAAA4L,eAAAjE,IAAAuF,GACIlN,KAAA4L,eAAAvB,OAAA6C,QACG,GAAAlN,KAAA8L,gBAAAnE,IAAAuF,GAAA,CACH,IAAAnD,EAAA/J,KAAA8L,gBAAAlE,IAAAsF,GACAK,EAAAL,EAAAK,KACAvN,KAAA8L,gBAAAzB,OAAA6C,GACAlN,KAAAqO,KAAAtE,EAAAwD,EAAAL,EAAAE,WAAA,MA9LZjL,YADCa,EAAAiB,OAAAkE,EAAAQ,oBACkC+C,EAAA1K,UAAA,oBAAA,GAkMvC0K,EArMA,CAZAzI,EAAA,kBAYA0G,QAAavH,EAAAsJ,cAAAA,EAsMb,IAAAqD,EAAA,SAAAlP,GAAA,SAAAkP,IAAA,IAAAjP,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAEWF,EAAAiM,YAAA,IA2GX,OA7GyCvL,UAAAuO,EAAAlP,GAIrCkP,EAAA/N,UAAAgJ,eAAA,SAAAD,EAAAlD,IACIhH,EAAAmB,UAAAgJ,eAAAzG,KAAAvD,KAAA+J,EAAAlD,GAEA7G,KAAA6J,UAAAlC,IAAAd,KACIA,EACAmI,YAAAhP,KAAAkO,UAAA5D,KAAAtK,QAID+O,EAAA/N,UAAAsJ,KAAA,SAAAxC,GAEH,IAAAiC,EAAA/J,KAAAuM,aAAA3B,WAAA9C,EAAA,MACAmH,EAAA,KAWA,OATA5F,EAAAqB,QAAAW,cAAAvD,KAEI,MAAAiC,IACIA,EAAA/J,KAAAuM,aAAAjC,KAAAxC,IACAoH,cAEJD,EAAAjP,KAAAuM,aAAAK,YAAA9E,EAAA,OAGJmH,EACIpP,EAAAmB,UAAAsJ,KAAA/G,KAAAvD,KAAAiP,GAEApP,EAAAmB,UAAAsJ,KAAA/G,KAAAvD,KAAA8H,IAIDiH,EAAA/N,UAAA4J,WAAA,SAAA/D,EAAAsD,GACH,IAAA8E,EASA,OALIA,EAFJ5F,EAAAqB,QAAAW,cAAAxE,GAEI7G,KAAAuM,aAAAK,YAAA/F,EAAAsD,GAGAtD,EAEJhH,EAAAmB,UAAA4J,WAAArH,KAAAvD,KAAAiP,EAAA9E,IAEM4E,EAAA/N,UAAA8L,cAAA,SAAAC,EAAAhD,EAAAiD,EAAAC,GACNlD,EAAAlD,IAAA,IACAqG,EAAAlN,KAAAmP,uBAAApC,EAAAC,GAIA,OAHAE,EAAAE,WAAAH,EACAjN,KAAAqN,aAAAH,EAAAnD,GACA/J,KAAAsN,eAAAJ,EAAAF,GACAE,GAGM6B,EAAA/N,UAAAmO,uBAAA,SAAApC,EAAAC,GAGN,GAAA,MAAAA,EAOI,IAAAnB,IAmCJ,IAAAqB,EA5CAlN,KA4CAwN,WAAAT,GAOA,OANAG,EAAAK,KAAAP,EAMAE,GAER6B,EA7GA,CA6GArD,GA7GatJ,EAAA2M,oBAAAA,obChPb,IAEAlC,EAAA,SAAAhN,GAAA,SAAAgN,mDA6BA,OA7BoCrM,UAAAqM,EAAAhN,GAQhC2J,OAAAC,eAAAoD,EAAA7L,UAAA,cAAA4G,IAAA,WACI,OAAA5H,KAAAoP,6CAEJ5F,OAAAC,eAAAoD,EAAA7L,UAAA,UAAA4G,IAAA,WACI,OAAA5H,KAAAqP,yCAEGxC,EAAA7L,UAAAmK,GAAA,SAAArD,GACH,OAAAjI,EAAAmB,UAAAmK,GAAA5H,KAAAvD,KAAA8H,IAEG+E,EAAA7L,UAAAoK,OAAA,SAAAjB,GACH,OAAAtK,EAAAmB,UAAAoK,OAAA7H,KAAAvD,KAAAmK,IAKG0C,EAAA7L,UAAAsO,OAAA,WAIH,OAFAtP,KAAAiM,UAAA,EACAjM,KAAA+K,UAAA/K,MACAA,MAER6M,EA7BA,CAFA5J,EAAA,mBA+BAyH,SA7BatI,EAAAyK,eAAAA,mMCDb,SAAAJ,GAGIA,EAAA,aAAA,eAHJ,CAIArK,EAAAqK,eAAArK,EAAAqK,8KCLA,IAAA8C,EAAAtM,EAAA,oBACAkF,EAAAlF,EAAA,4BACAD,EAAAC,EAAA,+BAqBA+K,EAAA,SAAAnO,GAAA,SAAAmO,mDAEA,OAFkCxN,UAAAwN,EAAAnO,GAC9B2J,OAAAC,eAAAuE,EAAAhN,UAAA,mBAAA4G,IAAA,WAAA,MAAA,4CACJoG,EAFA,CApBA/K,EAAA,eAsBAyG,kBAFatH,EAAA4L,aAAAA,EAGb,IAAApF,EAAA,WAAA,SAAAA,IAUY5I,KAAAwP,QAAA,EAUAxP,KAAAyP,SAAA,EAuBZ,OAhCW7G,EAAA5H,UAAA8M,OAAA,WACH9N,KAAAwP,QAAA,GAEG5G,EAAA5H,UAAA0O,MAAA,WACH1P,KAAAwP,QAAA,GAEJhG,OAAAC,eAAAb,EAAA5H,UAAA,WAAA4G,IAAA,WACI,OAAA5H,KAAAwP,wCAIG5G,EAAA5H,UAAA2O,OAAA,WAEH3P,KAAAyP,SAAA,GAEG7G,EAAA5H,UAAA4O,QAAA,WAEH5P,KAAAyP,SAAA,GAEJjG,OAAAC,eAAAb,EAAA5H,UAAA,YAAA4G,IAAA,WACI,OAAA5H,KAAAyP,yCAGG7G,EAAA5H,UAAA6O,QAAA,WAEH7P,KAAAuM,aAAAsB,SAAAiC,SAAA9P,MACAA,KAAA0P,SAGG9G,EAAA5H,UAAAqH,QAAA,WAAQ,IAAA,IAAA2E,KAAAoB,EAAA,EAAAA,EAAAnO,UAAAiH,OAAAkH,IAAApB,EAAAoB,GAAAnO,UAAAmO,IArCfjM,YADFa,EAAAiB,OAAAkE,EAAAQ,oBACsCC,EAAA5H,UAAA,oBAAA,GAGvCmB,YADCa,EAAAiB,OAAAsL,EAAAQ,qBACsCnH,EAAA5H,UAAA,qBAAA,GAqCxC4H,EA3CA,GAAaxG,EAAAwG,QAAAA,kTCvBZ,IAAAoH,EAAA,WAAA,SAAAA,KAoBD,OAlBWA,EAAAC,aAAA,EACAD,EAAAE,YAAA,EACAF,EAAAG,MAAA,KACAH,EAAAI,YAAA,KACAJ,EAAAvI,UAAA,KACAuI,EAAAK,QAAA,SACAL,EAAAxJ,QAAA,EACAwJ,EAAAM,gBAAA,KACAN,EAAAO,KAAA,KACAP,EAAAQ,gBACAR,EAAAS,aAAA,EACAT,EAAAU,SAAA,EAEAV,EAAAW,WAAA,EAEAX,EAAAY,YAAA,GAEAZ,EAAAa,QAAA,EACXb,EApBC,GAAsB5N,EAAAkC,QAAA0L,8JCFvB,IAAA7H,EAAAlF,EAAA,4BACA6N,EAAA7N,EAAA,4BACA8N,EAAA9N,EAAA,eACAsM,EAAAtM,EAAA,6BAeA+N,EAAA,SAAAnR,GAAA,SAAAmR,mDAEA,OAFkCxQ,UAAAwQ,EAAAnR,GAC9B2J,OAAAC,eAAAuH,EAAAhQ,UAAA,mBAAA4G,IAAA,WAAA,MAAA,4CACJoJ,EAFA,CAEAD,EAAArH,kBAFatH,EAAA4O,aAAAA,EAIb,IAAAC,EAAA,WAqCI,SAAAA,EAAAV,GACI,MAAAU,EAAAC,cAAA,MAAAD,EAAAC,aAAAC,WACIF,EAAAC,aAAAlR,KACAA,KAAAoR,mBAAApR,KAAAuM,cAET0E,EAAAC,aAAAG,gBAAArR,MAGKA,KAAAsR,QAAAf,GAEAvQ,KAAAuR,UAEAvR,KAAAwD,QA2DR,OArGIgG,OAAAC,eAAAwH,EAAAjQ,UAAA,gBAAA4G,IAAA,WAII,OAHA5H,KAAAwR,gBACIxR,KAAAwR,cAAA,IAAArJ,EAAAsJ,cAEJzR,KAAAwR,+CAGJhI,OAAAC,eAAAwH,EAAAjQ,UAAA,sBAIA4G,IAAA,WACI,OAAA5H,KAAA0R,qBALJ3J,IAAA,SAAAD,GACI9H,KAAA0R,oBAAA5J,mCAQJ0B,OAAAC,eAAAwH,EAAAjQ,UAAA,iBAAA4G,IAAA,WAKI,OAAA5H,KAAA2R,gDAKJV,EAAAjQ,UAAAmQ,QAAA,WACI,OAAAnR,KAAAuQ,MAkBGU,EAAAjQ,UAAAqQ,gBAAA,SAAAO,GAGT,OADMA,EAAAR,mBAAApR,KAAAuM,aACNvM,MAGSiR,EAAAjQ,UAAA6Q,mBAAA,SAAAC,KAQAb,EAAAjQ,UAAAsQ,QAAA,SAAAf,GAEH,OADAvQ,KAAAuQ,KAAAA,EACAvQ,MAEGiR,EAAAjQ,UAAA+Q,QAAA,WAIH,OAHA/R,KAAAuR,UACAvR,KAAAwD,QAEAxD,MAEGiR,EAAAjQ,UAAAwC,MAAA,WAMH,OALAxD,KAAAgS,kBACAhS,KAAAiS,cACAjS,KAAAkS,eACAlS,KAAAmS,SAEAnS,MAGGiR,EAAAjQ,UAAAmR,OAAA,aAMGlB,EAAAjQ,UAAAgR,gBAAA,WAENhS,KAAA2R,eAAA3R,KAAAuM,aAAAK,YAAA2C,EAAAQ,mBAAA,OAEMkB,EAAAjQ,UAAAiR,YAAA,aAGAhB,EAAAjQ,UAAAkR,aAAA,aAGAjB,EAAAjQ,UAAAuQ,QAAA,WAENvR,KAAAuM,aAAAjC,KAAAnC,EAAAQ,mBAAAyJ,QAAApS,KAAAuM,cAEAvM,KAAAuM,aAAAjC,KAAAiF,EAAAQ,oBAAA5E,GAAA2F,EAAA/B,qBAAAG,eAGR+B,EA5GA,GAAa7O,EAAA6O,QAAAA,oUCtBb,IAAAoB,EAAApP,EAAA,wCAEM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAE,EAAAL,EAAAK,SAGN0S,EAAA,SAAAzS,GADA,SAAAyS,IAAA,IAAAxS,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGYF,EAAAgI,MAAA,EAEAhI,EAAA0B,KAAA,EAEA1B,EAAA4E,YAAA,IAoFZ,OA1F2ClE,UAAA8R,EAAAzS,GAgBvCyS,EAAAtR,UAAAsC,OAAA,WAEItD,KAAAuS,MAAAvS,KAAAgE,KAAAwO,aAAAhT,GAAAiT,OACAzS,KAAA8E,QAAA,EACA9E,KAAA6E,iBAEJyN,EAAAtR,UAAAwC,MAAA,WAEIxD,KAAA0E,YAAmB1E,KAAA+E,QAOvBuN,EAAAtR,UAAAgE,OAAA,SAAAxB,EAAA7C,GAII,OAHAX,KAAAwB,KAAAb,EACAX,KAAA8H,MAAAtE,EAEAxD,MAGJsS,EAAAtR,UAAA+D,KAAA,WAUI,OATA/E,KAAA8E,QAAA,EAEA,IAAA9E,KAAA8H,OAAA,IAAA9H,KAAAwB,KACIxB,KAAA0S,KAAA,GAGA1S,KAAA0S,KAAA1S,KAAA8H,MAAA9H,KAAAwB,KACAxB,KAAA2S,QAAA3S,KAAAwB,KAAAxB,KAAA8H,OAEJ9H,MAEJsS,EAAAtR,UAAA8E,WAAA,SAAAH,GAEI,OADA3F,KAAA6E,aAAAkB,KAAAJ,GACA3F,MAEJsS,EAAAtR,UAAAO,OAAA,SAAAyE,GACI,GAAAhG,KAAA8E,OAEA,GAAA9E,KAAA8H,OAAA,GAAA9H,KAAA0S,KAAA,EAAA,CACI,IAAAE,EAAAvR,KAAAwR,MAAA7S,KAAA8H,OACA9H,KAAA8H,OAAA9B,EAAAhG,KAAA0S,KACA1S,KAAAwB,MAAAwE,EACA,IAAA8M,EAAAzR,KAAAwR,MAAA7S,KAAA8H,OAEA,GAAA8K,IAAAE,EAAA,CACI9S,KAAAgE,KAAA0B,iBACA1F,KAAAgE,KAAA+O,MAAA,GACA/S,KAAAgE,KAAAiB,QAAA,EAEA,IAAA+N,GAAAxT,GAAAyT,QAAA,IAAAjT,KAAA2S,QAAA,GAAAnT,GAAAyT,QAAA,EAAAjT,KAAA2S,QAAA,OACAO,GAAA1T,GAAAgG,OAAA,IAAAxF,KAAA2S,SAAAnT,GAAA+F,QAAA,EAAAvF,KAAA2S,UAGAG,GAAA,EACI9S,KAAAuS,MAAAY,OAAA,GAAAL,GAEA9S,KAAAgE,KAAAyB,UAAA4M,EAAA1S,MAAAe,OAAA,EAAAV,KAAA2S,QAAA,GAAA,KACA3S,KAAAuS,MAAAY,OAAA,QAEJnT,KAAAgE,KAAAyB,UAAAjG,GAAA4F,SAAA4N,IACAhT,KAAAgE,KAAAyB,UAAAjG,GAAA4F,SAAA8N,UAGJlT,KAAA8E,QAAA,EAEA9E,KAAA6E,aAAAe,QAAA,SAAAD,GACIA,MAEJ3F,KAAAgE,KAAA6B,WArFR1D,YADCvC,EAAAqG,SAC0BqM,EAAAtR,UAAA,aAAA,GAE3BmB,YADCvC,EAAAqG,SACwBqM,EAAAtR,UAAA,YAAA,GAEzBmB,YADCvC,EAAAsG,UACoCoM,EAAAtR,UAAA,kBAAA,GANpBsR,EAAAnQ,YADpBzC,GACoB4S,GAArB,CAAA9S,GAAA4G,WAAqBhE,EAAAkC,QAAAgO,gPCNrB,IAAAc,EAAAnQ,EAAA,kBACAqG,EAAArG,EAAA,qBACAoQ,EAAApQ,EAAA,oBACAqQ,EAAArQ,EAAA,2BAEAsQ,EAAAtQ,EAAA,8BAEAuQ,EAAA,SAAA3T,GAAA,SAAA2T,mDA8JA,OA9J0ChT,UAAAgT,EAAA3T,GAMtC2T,EAAAxS,UAAA4I,KAAA,WAEI5J,KAAA6J,UAAA,IAAAjD,IAEA5G,KAAAyT,yBAAA,IAAA7M,KAGG4M,EAAAxS,UAAA2G,IAAA,SAAAd,GACH,OAAA7G,KAAA6J,UAAAlC,IAAAd,IAGG2M,EAAAxS,UAAA4G,IAAA,SAAA9F,GAEH,KAAAA,aAAA0H,QAAiC,MAAA,IAAAmE,MAAA,6BAAA7L,EAAA,UAEjC,IAAA9B,KAAAyT,yBAAA9L,IAAA7F,GAAA,CAEI,IAAA4R,EAAAH,EAAAI,UAAAC,iBAAA9R,GAEA+R,EAAA,IAAAR,EAAAS,eACAC,KACA9J,OAAA,EAEA+J,KACA,GAAAN,GAAAA,EAAAxM,OAAA,EACI,IAAA,IAAAxD,EAAA,EAAAA,EAAAgQ,EAAAxM,OAAAxD,KACIuG,EAJRjK,KAIQ6K,cAAA6I,EAAAhQ,MACAuG,EAAAgK,KAAA,GACIhK,EAAArE,QAAA,SAAAsO,GACIF,EAAAjO,KAAAmO,KAKhB,IAAAA,OAAA,EACA,GAAAF,GAAAA,EAAA9M,OAAA,EACI,IAAAxD,EAAA,EAAAA,EAAAsQ,EAAA9M,OAAAxD,IAEI,IADAwQ,EAAAF,EAAAtQ,KACAwQ,EAAAD,KAAA,EAEI,IADA,IAAA9H,EAAA+H,EAAA/H,SACAgI,EAAA,EAAAA,EAAAD,EAAAD,KAAAE,IAAA,CACI,IAAApK,EAAAoC,EAAAkC,OACA0F,EAAAhO,KAAAgE,EAAAjC,OAKhB+L,EAAAE,KAAAA,EAEA/T,KAAAyT,yBAAA1L,IAAAjG,EAAA+R,GAGJ,OAAA7T,KAAAyT,yBAAA7L,IAAA9F,IAGG0R,EAAAxS,UAAAsJ,KAAA,SAAAzD,GACH,OAAAhH,EAAAmB,UAAAsJ,KAAA/G,KAAAvD,KAAA6G,IAGG2M,EAAAxS,UAAA4J,WAAA,SAAA/D,EAAAsD,GACH,OAAAtK,EAAAmB,UAAA4J,WAAArH,KAAAvD,KAAA6G,EAAAsD,IAGGqJ,EAAAxS,UAAAuJ,cAAA,WACH,OAAA,IAAA+I,EAAAc,sBAAApU,KAAA8J,SAAAQ,KAAAtK,QAGGwT,EAAAxS,UAAA8I,SAAA,SAAAC,GACHlK,EAAAmB,UAAA8I,SAAAvG,KAAAvD,KAAA+J,IAOJyJ,EAAAxS,UAAAgJ,eAAA,SAAAD,EAAAlD,GAEI,GAAAkD,EAAAnK,SAAA,CAEA,IACAqK,EA4CAoK,EA7CAnK,EAAA,MAAAH,EAAAI,KAAAb,EAAAJ,aAAAC,KAAAY,EAAAI,KAGA,GAAAnK,KAAA6J,UAAAlC,IAAAd,IAII,IAFAoD,EAAAjK,KAAA6J,UAAAjC,IAAAf,IAEAc,IAAAuC,GAAA,CAEI,IAAAoK,EAAArK,EAAArC,IAAAsC,GAEA,GAAAoK,EAAA3M,IAAAoC,EAAAnK,WACIwK,EAAAkK,EAAA1M,IAAAmC,EAAAnK,YAIIwK,GAAAL,IAEIK,EAAAtC,OAEImC,EAAAI,OAAAH,UAQpBD,EAAA,IAAArD,IAEA5G,KAAA6J,UAAA9B,IAAAlB,EAAAoD,GAIJ,GAAAA,EAAAtC,IAAA2B,EAAAJ,aAAAC,MAAA,CACI,IAAAoL,EAAAtK,EAAArC,IAAA0B,EAAAJ,aAAAC,MACA,GAAAoL,EAAA5M,IAAAoC,EAAAnK,UAAA,CACI,IAAAwK,EAAAmK,EAAA3M,IAAAmC,EAAAnK,UACAmK,EAAAnK,WAAAmK,GAEIwK,EAAAlK,OAAAf,EAAAJ,aAAAC,OAOZc,EAAAtC,IAAAuC,IASImK,EAAApK,EAAArC,IAAAsC,IAEAvC,IAAAoC,EAAAnK,WAEIyU,EAAAtM,IAAAgC,EAAAnK,SAAAmK,KAXJsK,EAAA,IAAAzN,KAEAmB,IAAAgC,EAAAnK,SAAAmK,GAEAE,EAAAlC,IAAAmC,EAAAmK,MAeRb,EAAAxS,UAAA6J,cAAA,SAAAhE,GACI,GAAA7G,KAAA6J,UAAAlC,IAAAd,GACI,OAAA7G,KAAA6J,UAAAjC,IAAAf,IAGZ2M,EA9JA,CA8JAJ,EAAAzJ,QA9JavH,EAAAoR,qBAAAA,kXCPb,IAEAY,EAAA,SAAAvU,GAAA,SAAAuU,mDAwBA,OAxB2C5T,UAAA4T,EAAAvU,GAEvC2J,OAAAC,eAAA2K,EAAApT,UAAA,YAAA4G,IAAA,WACI,OAAA5H,KAAAwU,2CAOJJ,EAAApT,UAAAyT,WAAA,SAAA7U,GAII,OAHAI,KAAAwU,UAAA5U,EACA,MAAAI,KAAA+K,WACI/K,KAAA+K,UAAA/K,MACJA,MAGJoU,EAAApT,UAAAmK,GAAA,SAAArD,GACI,OAAAjI,EAAAmB,UAAAmK,GAAA5H,KAAAvD,KAAA8H,IAGJsM,EAAApT,UAAAoK,OAAA,SAAAjB,GACI,OAAAtK,EAAAmB,UAAAoK,OAAA7H,KAAAvD,KAAAmK,IAERiK,EAxBA,CAFAnR,EAAA,mBA0BAyH,SAxBatI,EAAAgS,sBAAAA,uMCEb,IAAAN,EAAA,WAAA,SAAAA,KASA,OANItK,OAAAC,eAAAqK,EAAA9S,UAAA,QAAA4G,IAAA,WACI,OAAA5H,KAAA0U,OAEJ3M,IAAA,SAAAD,GACI9H,KAAA0U,MAAA5M,mCAERgM,EATA,GAAa1R,EAAA0R,eAAAA,4KCJb,IAAAa,EAAA1R,EAAA,2BACA,SAAA2R,GAKiBA,EAAAC,uBAAA,IAAAF,EAAAnB,sBALjB,CAMApR,EAAAwS,iBAAAxS,EAAAwS,yNCPA,IAAA5R,EAAAC,EAAA,gDAEA6R,EAAA7R,EAAA,YAEAE,EAAAF,EAAA,gCACA8R,EAAA9R,EAAA,4BACAC,EAAAD,EAAA,iBACA+R,EAAA/R,EAAA,gBACAgS,EAAAhS,EAAA,mBAEAoP,EAAApP,EAAA,wCAEM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNwV,GAHM3V,EAAAK,SAGN,SAAAC,GADA,SAAAqV,IAAA,IAAApV,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAYQF,EAAAqV,MAAA,EACGrV,EAAAsV,MAAA,EAEAtV,EAAAuV,SAAA,EAECvV,EAAAwV,MAAA,EACRxV,EAAAuD,KAAA,WAuFJ,OAxGkC7C,UAAA0U,EAAArV,GAAb0V,EAAAL,EAmBjBA,EAAAlU,UAAAsC,OAAA,WAAAzD,EAAAmB,UAAAsC,OAAAC,KAAAvD,OACAkV,EAAAlU,UAAAwC,MAAA,WAAA3D,EAAAmB,UAAAwC,MAAAD,KAAAvD,OACAkV,EAAAlU,UAAAwU,MAAA,aACAN,EAAAlU,UAAAyU,MAAA,aAEOP,EAAAlU,UAAA4I,KAAA,WACH5J,KAAAmV,MAAA,IACAnV,KAAAoV,MAAA,GACApV,KAAAqV,SAAA,GAEArV,KAAAsV,MAAA,EACAtV,KAAAgE,KAAAjC,EAAA,EACA/B,KAAAgE,KAAAhC,EAAA,GAEJkT,EAAAlU,UAAAO,OAAA,SAAAyE,GAEIhG,KAAA2D,KAAA+R,QACA1V,KAAA2V,SACA3V,KAAAoV,OAAApV,KAAAqV,SAAArP,EACHhG,KAAAmV,OAAAnV,KAAAoV,MAAApP,EACAhG,KAAAsV,MAAAtV,KAAAmV,MAAAnP,EACGhG,KAAAgE,KAAAhC,GAAAhC,KAAAsV,QAGJJ,EAAAlU,UAAA4U,iBAAA,SAAAC,EAAAC,GACI,GAAA9V,KAAA2V,OAAA,CACA,IAAAI,EAAAF,EAAArD,aAAAsC,EAAAxQ,SACA,GAAAyR,KACIA,EAAAF,EAAArD,aAAA+C,IADJ,CAKA,IAAAS,EAAAF,EAAAtD,aAAA+C,GACAQ,GAAAC,GAAAD,EAAA1S,OAAA2S,EAAA3S,MAEIrD,KAAAiW,KAAArO,IAAAmN,EAAAmB,eAAAC,OAAAC,SAAArB,EAAAsB,eAAAC,QAAAtW,KAAAgE,MACAhE,KAAAuW,YAAAvW,KAAAgE,MACA+R,EAAA/R,KAAAyB,UAAA4M,EAAA1S,MAAAe,OAAA,IAAA,IAAA,OAGAV,KAAAiW,KAAArO,IAAAmN,EAAAmB,eAAAC,OAAAC,SAAArB,EAAAsB,eAAAG,YAEJxW,KAAA2V,QAAA,KAGJT,EAAAlU,UAAAuV,YAAA,SAAAE,GACI,IAAAC,EAAA1W,KAAA2D,KAAAgT,iBAAAC,QAAAH,GAIA,OAHA,IAAAC,GACI1W,KAAA2D,KAAAgT,iBAAAE,OAAAH,EAAA,GAEJ1W,KAAA2D,KAAAmT,SAAAC,IAAAN,IAGJvB,EAAAlU,UAAAgW,YAAA,WAAA,MAAAlX,EAAAE,KACIA,KAAA2V,QAAA,EACA,IAIAsB,EAJAC,EAAAlX,KAAAmX,KAAAC,cAEA,IAAApX,KAAA2D,KAAA0T,gBAAoCrX,KAAA2D,KAAA0T,cAAAH,IACpC,IAAAlX,KAAA2D,KAAA2T,YAAgCtX,KAAA2D,KAAA2T,UAAAJ,GAWhC,IAAAK,IANIN,EAFJC,IAAAlX,KAAA2D,KAAA2T,UAEItX,KAAA2D,KAAA0T,cAGAH,EAAAlX,KAAA2D,KAAA0T,cAAA,EAAArX,KAAA2D,KAAA0T,cAAA,GAGJ,EAAAJ,EAAA,GAAAO,IAAA,SAAA9T,GAGI,OAFAA,EAAA,IAAWA,EAAA5D,EAAA6D,KAAA8T,UAAAvQ,OAAAxD,GACXA,GAAA5D,EAAA6D,KAAA8T,UAAAvQ,SAAqCxD,GAAA5D,EAAA6D,KAAA8T,UAAAvQ,QACrCxD,IAEJgU,GAAAnY,EAAAS,KAAAmX,MAAAQ,YAAA5X,MAAAR,EAAAgY,GACAvX,KAAA2D,KAAA0T,cAAAK,EACA1X,KAAA2D,KAAA2T,UAAAJ,EACAlX,KAAA4X,SAAA5X,KAAA2D,KAAA8T,UAAAC,GACA,IAAAjB,EAAAzW,KAAAgE,KACAhE,KAAAqD,KAAArD,KAAA4X,SAAAvU,KACAoT,EAAAjE,aAAAhT,GAAAqY,QAAAC,YAAA9X,KAAA4X,SAAAE,YACA,IAAA/V,GAAAmV,EAAA,GAAA,IAAAlX,KAAA2D,KAAAC,kBAAAC,MAAA,GACA4S,EAAA7U,YAAAG,EAAA/B,KAAAmX,KAAAY,eAAAjU,OAAA,GACA9D,KAAA2V,QAAA,GApGJxT,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACgB8Q,EAAAlU,UAAA,YAAA,GAEjBmB,YADCa,EAAAiB,OAAA+Q,EAAAgD,UAAAhD,EAAAiD,SAAA7T,OACe8Q,EAAAlU,UAAA,YAAA,GAEhBmB,YADCa,EAAAiB,OAAAgR,EAAAiD,aAAAjD,EAAAkD,YAAAC,QACmBlD,EAAAlU,UAAA,YAAA,GANHkU,EAAAK,EAAApT,YADpBzC,GACoBwV,GAArB,CAAA/R,EAAAkB,UAAqBjC,EAAAkC,QAAA4Q,0dCfrB,IAAAhN,EAAAjF,EAAA,uCACAD,EAAAC,EAAA,gDAGA6R,EAAA7R,EAAA,kBACAC,EAAAD,EAAA,iBACAoV,EAAApV,EAAA,wBAEA+R,EAAA/R,EAAA,gBAMAqV,EAAA,SAAAzY,GAAA,SAAAyY,mDAwFA,OAxFqC9X,UAAA8X,EAAAzY,GAiBjCyY,EAAAtX,UAAAqH,QAAA,SAAA1C,GAAA,IAAA7F,EAAAE,KAGIA,KAAA4J,OAAA2O,KAAA,WACIzY,EAAA0Y,oBACA1Y,EAAA2Y,kBACA9S,OAIR2S,EAAAtX,UAAAwX,kBAAA,WACI,IAAAE,EAAA,IAAAlZ,GAAA2G,KAAA,aACAnG,KAAA2Y,UAAAC,SAAAF,GACAA,EAAA7U,MAAA7D,KAAAmX,KAAAY,eAAAlU,MACA6U,EAAA5U,OAAA9D,KAAAmX,KAAAY,eAAAjU,OACA9D,KAAA6Y,KAAAC,kBAAAJ,GAAA,IAEJJ,EAAAtX,UAAA4I,KAAA,WACI5J,KAAA2D,KAAAgT,oBACA3W,KAAA2D,KAAAmT,SAAA,IAAAuB,EAAA/T,QAAA,OAAAtE,KAAA+Y,YACA,IAAAC,EAAAhZ,KAAAiZ,cACAC,EAAAlZ,KAAAmZ,gBACA,OAAAC,QAAAC,KAAAL,EAAAE,KAEIZ,EAAAtX,UAAAiY,YAAA,WACJ,IAAAK,EAAAtZ,KACA,OAAA,IAAAoZ,QAAA,SAAAG,EAAAC,GAEIJ,QAAAC,IAAAC,EAAA3V,KAAA8T,UAAAD,IAAA,SAAAI,GACI,OAAA0B,EAAAnC,KAAAsC,UAAA7B,EAAA8B,UAEJnB,KAAA,SAAAoB,GACIA,EAAA/T,QAAA,SAAAkS,EAAApU,GACI4V,EAAA3V,KAAA8T,UAAA/T,GAAAoU,YAAAA,IAGJyB,SAIJjB,EAAAtX,UAAAmY,cAAA,WACJ,IAAAG,EAAAtZ,KACA,OAAA,IAAAoZ,QAAA,SAAAG,EAAAC,GAEIJ,QAAAC,IAAAC,EAAA3V,KAAAiW,YAAApC,IAAA,SAAAqC,GACgB,OAAAP,EAAAnC,KAAAsC,UAAAI,EAAAH,UAEhBnB,KAAA,SAAAoB,GACIA,GACIA,EAAA/T,QAAA,SAAAkS,EAAApU,GACI4V,EAAA3V,KAAAiW,YAAAlW,GAAAoU,YAAAA,IAIRyB,SAIJjB,EAAAtX,UAAAyX,gBAAA,WACJ,IAAAa,EAAAtZ,KACAA,KAAA2D,KAAAiW,YAAAhU,QAAA,SAAAiU,EAAAnW,GACI,IAAAoW,EAAAta,GAAAua,YAAAT,EAAAU,cACAC,EAAAH,EAAAtH,aAAAsC,EAAAxQ,SACA4V,EAAAJ,EAAAtH,aAAAhT,GAAAqY,QAEAyB,EAAAa,YAAAvB,SAAAkB,GACAI,EAAApC,YAAA+B,EAAA/B,YACAmC,EAAA5W,KAAAwW,EAAAxW,KACA4W,EAAAxW,gBAAAC,MAnFRvB,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACekU,EAAAtX,UAAA,YAAA,GAEhBmB,YADCa,EAAAiB,OAAA+Q,EAAAgD,UAAAhD,EAAAiD,SAAA7T,OACckU,EAAAtX,UAAA,YAAA,GAEfmB,YADCa,EAAAiB,OAAA+Q,EAAAgD,UAAAhD,EAAAiD,SAAAmC,QACe9B,EAAAtX,UAAA,YAAA,GAEhBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,UACkBmS,EAAAtX,UAAA,iBAAA,GAEnBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,YACoBmS,EAAAtX,UAAA,mBAAA,GAErBmB,YADCa,EAAAiB,OAAAzE,GAAA6a,OAAA,WACuB/B,EAAAtX,UAAA,oBAAA,GAExBmB,YADCa,EAAAiB,OAAAzE,GAAA6a,OAAA,SACqB/B,EAAAtX,UAAA,kBAAA,GA0E1BsX,EAxFA,CAAApQ,EAAAU,SAAaxG,EAAAkW,gBAAAA,wXCdb,IAAAgC,EAAA,WAAA,SAAAA,KA8CA,OAzCkBA,EAAAC,WAAA,SAAAC,GACV,GAAA,iBAAAA,EAAA,CACA,IAAA5a,EAAA,iBACAA,GAAA0a,EAAAG,QAAAD,GACAE,QAAAC,KAAA/a,KAEW0a,EAAAG,QAAA,SAAAD,EAAAvN,GACX,IAAArN,EAAA,GACAgb,EAAA,GACA,IAAAJ,IAAAA,EAAA3L,aAAA,WAAA2L,EAAA3L,YAAA1E,KAA6D,MAAA,GAC7D,GAAA8C,EAAA,CAEI,GAAAA,EAAA,IAEI,OADArN,GAAA,MAAA4a,EAAA,aACA,GAGJ,IAAA,IAAA9W,EAAA,EAAAA,EAAAuJ,EAAAvJ,IACIkX,GAAA,UAGJA,GAAA,KACA3N,EAAA,EAGJ,IAAA,IAAA4N,KAAAL,EAAA,CACI,IAAAM,EAAAD,EACAE,EAAAP,EAAAK,GACA,GAAAE,GAAA,mBAAAA,EAEIA,EADAA,EACA5Q,KAAA,MAEJvK,GAAAgb,EAAA,MAAAE,EAAA,MAAAC,EAAA,KAEAA,GAAA,iBAAAA,IAEInb,GAAA0a,EAAAG,QAAAM,EAAA9N,EAAA,IAGR,OAAArN,GAER0a,EA9CA,GAAalY,EAAAkY,OAAAA,4KCGb,IAMAvK,EAAA,SAAAlQ,GAAA,SAAAkQ,mDAEA,OAFwCvP,UAAAuP,EAAAlQ,GACpC2J,OAAAC,eAAAsG,EAAA,mBAAAnI,IAAA,WAAA,MAAA,kDACJmI,EAFA,CANA9M,EAAA,eAQAyG,kBAFatH,EAAA2N,mBAAAA,kLCPb,IACAiL,EAAA,SAAAnb,GAAA,SAAAmb,mDAEA,OAF+Bxa,UAAAwa,EAAAnb,GAC3B2J,OAAAC,eAAAuR,EAAAha,UAAA,mBAAA4G,IAAA,WAAA,MAAA,yCACJoT,EAFA,CADA/X,EAAA,eAGAyG,kBAFatH,EAAA4Y,UAAAA,gMCHb,IAAA5H,EAAAnQ,EAAA,kBACAoG,EAAApG,EAAA,mBACAqG,EAAArG,EAAA,qBACAgY,EAAAhY,EAAA,cACAiY,EAAAjY,EAAA,mBACAkY,EAAAlY,EAAA,+BACA8N,EAAA9N,EAAA,eAIAmY,EAAAD,EAAAvG,eAAAC,uBAYAlM,EAAA,SAAA9I,GAAA,SAAA8I,mDAEA,OAFuCnI,UAAAmI,EAAA9I,GACnC2J,OAAAC,eAAAd,EAAA3H,UAAA,mBAAA4G,IAAA,WAAA,MAAA,iDACJe,EAFA,CAEAoI,EAAArH,kBAFatH,EAAAuG,kBAAAA,EAGb,IAAA8I,EAAA,SAAA5R,GAGI,SAAA4R,IAAA,IAAA3R,EAAAD,EAAA0D,KAAAvD,OAAAA,YAEIF,EAAAub,UAAA,IAAAJ,EAAAK,SACAxb,EAAAub,UAAAE,OAAAzb,EACAA,EAAAub,UAAAG,kBAAAJ,IA+CR,OAtDkC5a,UAAAiR,EAAA5R,GAS9B2J,OAAAC,eAAAgI,EAAAzQ,UAAA,YAAA4G,IAAA,WACI,OAAA5H,KAAAqb,2CAGG5J,EAAAzQ,UAAA4L,YAAA,SAAA/F,EAAAsD,GAGHA,IAASA,EAAAb,EAAAJ,aAAAC,MAET,IAAAY,EAAA/J,KAAA4K,WAAAvB,EAAAqB,QAAAC,cAAA9D,GAAAsD,GAEA,GAAA,MAAAJ,EAAqB,MAAA,IAAA4D,MAAA,+CAAA9G,EAAA,WAAAsD,GAGrB,IAAAsR,EAAAzb,KAAAqb,UAAAtB,YAAAhQ,GAAA,GAGA,OADA/J,KAAAqb,UAAAK,UAAA3R,EAAA0R,GACAA,GAGGhK,EAAAzQ,UAAA4J,WAAA,SAAA/D,EAAAsD,GACH,OAAAtK,EAAAmB,UAAA4J,WAAArH,KAAAvD,KAAA6G,EAAAsD,IAGGsH,EAAAzQ,UAAAsJ,KAAA,SAAAzD,GACH,OAAAhH,EAAAmB,UAAAsJ,KAAA/G,KAAAvD,KAAA6G,IAEG4K,EAAAzQ,UAAAuJ,cAAA,WACH,OAAA,IAAA2Q,EAAAS,cAAA3b,KAAA8J,SAAAQ,KAAAtK,QAEGyR,EAAAzQ,UAAAwH,cAAA,WACH,IAAA8Q,EAAAtZ,KACA4b,KACC5b,KAAA6J,UAAAjE,QAAA,SAAAqE,GACGA,EAAArE,QAAA,SAAAmE,GACIA,EAAA8R,UACID,EAAA7V,KAAAgE,OAKZ6R,EAAAhW,QAAA,SAAAmE,GACIuP,EAAA9O,OAAAT,EAAAlD,IAAAkD,EAAAI,SAGZsH,EAtDA,CAsDA2B,EAAAzJ,QAtDavH,EAAAqP,aAAAA,iYCzBb,IAAApI,EAAApG,EAAA,mBACA6Y,EAAA7Y,EAAA,iBAEA0Y,EAAA,SAAA9b,GAAA,SAAA8b,IAAA,IAAA7b,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YACcF,EAAAic,WAAA,EAEAjc,EAAAkc,aAAAF,EAAAG,YAAAC,YAAAC,QAEArc,EAAAsc,WAAA,IAkFd,OAvFmC5b,UAAAmb,EAAA9b,GAmB/B2J,OAAAC,eAAAkS,EAAA3a,UAAA,YAAA4G,IAAA,WACI,OAAA5H,KAAAoc,2CAGJ5S,OAAAC,eAAAkS,EAAA3a,UAAA,QAAA4G,IAAA,WACI,OAAA5H,KAAAqc,uCAEJ7S,OAAAC,eAAAkS,EAAA3a,UAAA,eAAA4G,IAAA,WACI,OAAA5H,KAAAgc,8CAEJxS,OAAAC,eAAAkS,EAAA3a,UAAA,YAAA4G,IAAA,WACI,OAAA5H,KAAA+b,2CAKGJ,EAAA3a,UAAAsb,OAAA,WAKH,OAJAtc,KAAAqc,MAAApc,UACA,MAAAD,KAAA+K,WACI/K,KAAA+K,UAAA/K,MAEJA,MAKA2b,EAAA3a,UAAAkO,YAAA,WAGN,OAAAlP,KAAAgc,eAAAF,EAAAG,YAAAC,YAAAK,MACUvc,MAGJA,KAAAgc,aAAAF,EAAAG,YAAAC,YAAAM,UACN,MAAAxc,KAAA+K,WACC/K,KAAA+K,UAAA/K,MAEDA,OAKS2b,EAAA3a,UAAAyb,OAAA,WAEH,OADAzc,KAAA+b,WAAA,EACA/b,MAEG2b,EAAA3a,UAAAoR,QAAA,SAAAtK,GAGH,OAFA9H,KAAAgc,aAAAF,EAAAG,YAAAC,YAAAK,MACAvc,KAAA0c,SAAA5U,GACA9H,MAEG2b,EAAA3a,UAAA0b,SAAA,SAAAC,GAGH,OADA3c,KAAAmL,GAAAwR,GACA3c,MAEG2b,EAAA3a,UAAA4b,SAAA,SAAA9U,GAGH,OADA9H,KAAAoc,UAAAtU,EACA9H,MAGG2b,EAAA3a,UAAAmK,GAAA,SAAArD,GACH,OAAAjI,EAAAmB,UAAAmK,GAAA5H,KAAAvD,KAAA8H,IAEG6T,EAAA3a,UAAAoK,OAAA,SAAAjB,GACH,OAAAtK,EAAAmB,UAAAoK,OAAA7H,KAAAvD,KAAAmK,IAERwR,EAvFA,CAuFAtS,EAAAqB,SAvFatI,EAAAuZ,cAAAA,+NCHb,SAAAM,IAEI,SAAAC,GAGIA,EAAA,QAAA,UAGAA,EAAA,UAAA,YAGAA,EAAA,MAAA,SATJ,CAUAD,EAAAC,cAAAD,EAAAC,iBAZJ,CAaA9Z,EAAA6Z,cAAA7Z,EAAA6Z,6LCbA,IAAAd,EAAAlY,EAAA,+BACAoG,EAAApG,EAAA,mBAEAmY,EAAAD,EAAAvG,eAAAC,uBAgCAzS,EAAA6B,OAAA,WACI,OAAAhE,UAAAiH,QACI,KAAA,EACI,MACJ,KAAA,EACI,OAAA2V,EAAA5c,UAAA,IAEJ,KAAA,EACI,OAAA6c,EAAA7c,UAAA,GAAAA,UAAA,MAUZ,IAAA4c,EAAA,SAAAE,GACI,OAAA,SAAAC,EAAAxI,GACIyI,EAAAD,EAAAD,EAAAvI,KAORsI,EAAA,SAAAC,EAAA7R,GACI,OAAA,SAAA8R,EAAAxI,GACIyI,EAAAD,EAAAD,EAAAvI,EAAAtJ,KAWR,SAAA+R,EAAAD,EAAAD,EAAAvI,EAAAtJ,GAGIkQ,EAAA9Q,KAAA0S,EAAAnO,aAAA1D,GAAA9B,EAAAqB,QAAAC,cAAAoS,IAAAtI,WAAAD,GAAApJ,OAAAF,qPC7EJ,IAAA4Q,EAAA7Y,EAAA,iBACAoG,EAAApG,EAAA,mBAKAia,EAAA,WAAA,SAAAA,KA0FA,OApFWA,EAAAlc,UAAA4G,IAAA,SAAAmC,EAAAiD,GAEH,GAAA,MAAAjD,EACL,MAAA,IAAA4D,MAAA,8CAKK,OAFA5D,EAAAoT,aAII,KAAArB,EAAAG,YAAAC,YAAAM,UACI,OAAAxc,KAAAod,YAAArT,EAAAiD,GAEJ,KAAA8O,EAAAG,YAAAC,YAAAK,MACI,OAAAvc,KAAAqd,QAAAtT,GAKR,OAAA/J,KAAAsd,WAAAvT,EAAAiD,IAGGkQ,EAAAlc,UAAAsc,WAAA,SAAAvT,EAAAiD,GAET,GAAA,MAAAjD,EAAAjC,MAEC,OAAA9H,KAAAud,gBAAAxT,EAAAjC,MAAAkF,GAED,IAAAlF,EAAA9H,KAAAwd,iBAAAzT,EAAAlD,IAAAmG,GACA,OAAAhN,KAAAud,gBAAAzV,EAAAkF,IAGSkQ,EAAAlc,UAAAuc,gBAAA,SAAAE,EAAAzQ,GAET,IAAAyO,EAAA,KACA,IAIEA,EAFD,MAAAzO,GAAA,GAAAA,EAAA9F,OAEC,IAAAuW,EAIA,IAAAA,EAAAzQ,GAGF,MAAAzN,IAKA,OAAAkc,GAEYyB,EAAAlc,UAAAwc,iBAAA,SAAA3W,EAAAmG,GAGN,IAAAnG,EAAQ,OAAA,KAER,GAAAwC,EAAAqB,QAAAW,cAAAxE,GAEI,OAAA7G,KAAAud,gBAAA1W,EAAAmG,GAEJ,MAAA,IAAAW,MAAA,4EAAA9G,EAAA6W,aAGGR,EAAAlc,UAAAoc,YAAA,SAAArT,EAAAiD,GAET,GAAA,MAAAjD,EAAAjC,MAAA,CAEU,IAAA6U,EAAA3c,KAAAud,gBAAAxT,EAAAjC,MAAAkF,GACA,GAAA,MAAA2P,EACI,OAAA,KACJ5S,EAAA2S,SAAAC,QAIT5S,EAAA2S,SAAA1c,KAAAwd,iBAAAzT,EAAAlD,IAAAmG,IAED,OAAAjD,EAAAjC,OAEYoV,EAAAlc,UAAAqc,QAAA,SAAAtT,GAEN,OAAAA,EAAAjC,OAERoV,EA1FA,GAAa9a,EAAA8a,cAAAA,yNCPb,IAAAS,EAAA1a,EAAA,mBAGA6Y,EAAA7Y,EAAA,iBAKAqY,EAAA,WAKI,SAAAA,IACItb,KAAA4d,QAAA,IAAAD,EAAAT,cA6KR,OA3KW5B,EAAAta,UAAA8O,SAAA,SAAAhO,GAEH,IAAA9B,KAAAub,SAAAzZ,EAAyB,MAAA,IAAA6L,MAAA,qEAEzB,IAAAtK,SAAAvB,EACA,GAAA,WAAAuB,GAAA,YAAAA,GAAA,WAAAA,GAAA,WAAAA,GAAA,cAAAA,GAAA,aAAAA,EAEI,OAAAvB,EAGJ,IAAA+R,EAAA7T,KAAAwb,kBAAA5T,IAAA9F,GACA9B,KAAA6d,kBAAA/b,EAAA+R,IAEIyH,EAAAta,UAAA6c,kBAAA,SAAA/b,EAAA+R,GACJ,IAAAyF,EAAAtZ,KAEA6T,EAAAE,KAAAnO,QAAA,SAAAmE,GAEIuP,EAAAiC,OAAA3Q,WAAAb,EAAAjC,MAAAiC,EAAAI,QAIIrI,EAAAiI,EAAAnK,UAAA,SAKL0b,EAAAta,UAAA+Y,YAAA,SAAAhQ,EAAA+T,GAEH,IAAA9d,KAAAub,SAAAvb,KAAA4d,QAA+B,MAAA,IAAAjQ,MAAA,mGAE/B,IAAAkB,EAAA,KAEA4M,EAAA,KAeA,GAbA1R,EAAAgU,mBAEIlP,EAAA9E,EAAAjC,MAGA2T,EAAA1R,EAAAjC,OAGJ+G,GAAA9E,EAAAiU,mBAEInP,EAAA9E,EAAAlD,MAGJ4U,GAAA5M,EAAA,CAEI,IAAA7B,EAAAjD,EAAAiD,KACAyO,EAAAzb,KAAA4d,QAAAhW,IAAAmC,EAAAiD,GAEA8Q,GAEI9d,KAAA0b,UAAA3R,EAAA0R,GAGR,OAAAA,GAEGH,EAAAta,UAAA0a,UAAA,SAAA3R,EAAAjI,GAgBH,OAbA,MAAAA,IAEIiI,EAAAkU,WAEInc,EAAA9B,KAAAiE,OAAAnC,GAAA,IAGJiI,EAAAoT,aAAArB,EAAAG,YAAAC,YAAAM,WAAAzS,EAAAoT,aAAArB,EAAAG,YAAAC,YAAAK,OAGIxS,EAAA6S,UAAA,IAGR9a,GAGGwZ,EAAAta,UAAAiD,OAAA,SAAAnC,EAAAoc,GAEH,IAAAle,KAAAub,SAAAzZ,EAAyB,MAAA,IAAA6L,MAAA,qEAEzB,IAAAtK,SAAAvB,EACA,GAAA,WAAAuB,GAAA,YAAAA,GAAA,WAAAA,GAAA,WAAAA,GAAA,cAAAA,GAAA,aAAAA,EAEI,OAAAvB,EAKJ,IAAA+R,EAAA7T,KAAAwb,kBAAA5T,IAAA9F,GASA,OAHA9B,KAAAme,gBAAArc,EAAA+R,GAGA/R,GAKIwZ,EAAAta,UAAAmd,gBAAA,SAAArc,EAAA+R,GACJ,IAAAyF,EAAAtZ,KAEA6T,EAAAE,KAAAnO,QAAA,SAAAmE,GAGI,IAAAqU,EAAA9E,EAAAiC,OAAA3Q,WAAAb,EAAAjC,MAAAiC,EAAAI,MAEA,GAAAiU,EAAA,CACI,IAAA3C,EAAAnC,EAAA+E,eAAAD,EAAAvX,IAAAuX,EAAAjU,MAEArI,EAAAiI,EAAAnK,UAAA6b,MAQJH,EAAAta,UAAAqd,eAAA,SAAAhb,EAAA8G,GAEJ,IAAAJ,EAAA/J,KAAAub,OAAA3Q,WAAAvH,EAAA8G,GACA,IAAAJ,EAAY,OAAA,KAIZ,GAAAA,EAAAoT,cAAArB,EAAAG,YAAAC,YAAAK,MAAA,CAEI,GAAAxS,EAAAkU,SAAA,CAII,IAAAK,EAAAte,KAAAiE,OAAA8F,EAAAjC,OAAA,GAMA,OALAiC,EAAA6S,UAAA,GAKA0B,EAEA,OAAAvU,EAAAjC,MAGF,OAAAiC,EAAAoT,aAAArB,EAAAG,YAAAC,YAAAM,YAEFzS,EAAAgU,oBAAA,MAAAhU,EAAAjC,QAEI9H,KAAA+Z,YAAAhQ,GAAA,GAEJA,EAAAjC,OAEA9H,KAAA+Z,YAAAhQ,GAAA,IAeZuR,EAnLA,GAAalZ,EAAAkZ,SAAAA,qPCRb,IAAApT,EAAAjF,EAAA,uCAEAD,EAAAC,EAAA,gDACA6R,EAAA7R,EAAA,kBACAC,EAAAD,EAAA,iBACAsb,EAAAtb,EAAA,qBAEA+R,EAAA/R,EAAA,gBACAgS,EAAAhS,EAAA,mBAEAqD,EAAArD,EAAA,aAMAub,EAAA,SAAA3e,GAAA,SAAA2e,mDAmJA,OAnJyChe,UAAAge,EAAA3e,GAgBrC2e,EAAAxd,UAAAqH,QAAA,WACI,IAAAiR,EAAAtZ,KACAye,EAAAze,KAAA0e,WAAA3c,EAAA,GAAA/B,KAAAmX,KAAAY,eAAAlU,MACA8a,EAAA3e,KAAA0e,WAAA1c,EAAA,GAAAhC,KAAAmX,KAAAY,eAAAjU,OAGA9D,KAAA6Y,KAAA+F,GAAAL,EAAAM,eAAAC,GAAA,SAAAC,GACIA,EAAAC,OAAAP,EACInF,EAAA2F,WAAA,GAEA3F,EAAA2F,WAAA,KAGRjf,KAAA6Y,KAAA+F,GAAAL,EAAAM,eAAAK,KAAA,SAAAH,GACIA,EAAAC,OAAAP,EACInF,EAAA2F,WAAA,GAEA3F,EAAA2F,WAAA,KAGRjf,KAAA6Y,KAAA+F,GAAAL,EAAAM,eAAAM,KAAA,SAAAJ,GACIA,EAAAK,OAAAT,EACIrF,EAAA2F,WAAA,GAEA3F,EAAA2F,WAAA,KAGRjf,KAAA6Y,KAAA+F,GAAAL,EAAAM,eAAAQ,MAAA,SAAAN,GACIA,EAAAK,OAAAT,EACIrF,EAAA2F,WAAA,GAEA3F,EAAA2F,WAAA,MAKZT,EAAAxd,UAAAie,WAAA,SAAAK,GAEItf,KAAA2D,KAAA4b,YAAAvf,KAAA2D,KAAA6b,WACAxf,KAAAyf,cAAAH,IAGJd,EAAAxd,UAAAye,cAAA,SAAAH,GAEItf,KAAA2D,KAAA+b,cACI1f,KAAA2f,KAAAC,iBAAAN,GAIJtf,KAAA6f,KAAA9a,KAAA,QACA,GAAAuB,EAAAhC,QAAA2L,aACIjQ,KAAA8f,YAAAR,GAEAtf,KAAA+f,aAAAT,KAGRd,EAAAxd,UAAA8e,YAAA,SAAAR,GAAA,IAAAxf,EAAAE,KACIsZ,EAAAtZ,KACAA,KAAA2D,KAAA+b,eAAA,EACI,IAAAngB,EAAA,GAAA+f,GAAA,GAAAA,GAAA,EAAA,IAAA,EAAA,GAAAvd,EAAAxC,EAAA,GAAAyC,EAAAzC,EAAA,GACJygB,EAAAxgB,GAAAygB,QAAA,GAAAjgB,KAAA2D,KAAAuc,UAAAne,EAAAC,GACAme,EAAA3gB,GAAAygB,QAAA,GAAAjgB,KAAA2D,KAAAuc,UAAA,EAAA,GACAlgB,KAAA2f,KAAAS,WAAApgB,KAAAma,YAAA1U,UAAAjG,GAAA4F,SAAA4a,EAAAxgB,GAAA6gB,SAAA,WAEI/G,EAAAgH,iBAAAhB,GAEAhG,EAAAa,YAAAoG,UAAAzgB,EAAAqa,YAAAoG,SAAArZ,OAAA,GAEIoS,EAAAa,YAAAoG,SAAA3a,QAAA,SAAAkU,EAAApW,GACIoW,EAAApU,iBACAoU,EAAAtH,aAAAsC,EAAAxQ,SAAAb,gBAAAC,OAIZyc,EAAA3gB,GAAA6gB,SAAA,WACI/G,EAAAa,YAAAqG,SAAA,EAAA,GACAlH,EAAA3V,KAAA+b,eAAA,EAEA,OAAApG,EAAAqG,KAAAC,uBAAAa,IAAAnH,EAAAqG,KAAAC,mBACItG,EAAAmG,cAAAnG,EAAAqG,KAAAC,kBACAtG,EAAAqG,KAAAC,iBAAA,WAKZpB,EAAAxd,UAAA+e,aAAA,SAAAT,GAAA,IAAAxf,EAAAE,KACIsZ,EAAAtZ,KACAA,KAAA2D,KAAA+b,eAAA,EACA,IAAA3d,EAAA,GAAAud,GAAA,GAAAA,GAAA,GAAA,GACAU,EAAAxgB,GAAAkhB,SAAA,GAAA1gB,KAAA2D,KAAAuc,UAAAne,GACA/B,KAAA2f,KAAAS,WAAApgB,KAAAma,YAAA1U,UAAAjG,GAAA4F,SAAA5F,GAAA6F,MAAA2a,EAAAxgB,GAAA6gB,SAAA,WAKQ,IAAAM,EADJrH,EAAAa,YAAAoG,UAAAzgB,EAAAqa,YAAAoG,SAAArZ,OAAA,GAGIoS,EAAAa,YAAAoG,SAAA3a,QAAA,SAAAkU,EAAApW,GACIid,EAAAnhB,GAAAkhB,SAAA,GAAA5gB,EAAA6D,KAAAuc,WAAAne,GACA+X,EAAArU,UAAAkb,QAKZnhB,GAAA6gB,SAAA,WACI/G,EAAA3V,KAAA+b,eAAA,EAEA,OAAApG,EAAAqG,KAAAC,uBAAAa,IAAAnH,EAAAqG,KAAAC,mBACItG,EAAAmG,cAAAnG,EAAAqG,KAAAC,kBACAtG,EAAAqG,KAAAC,iBAAA,WAKZpB,EAAAxd,UAAAsf,iBAAA,SAAAhB,GACI,IAAAsB,EAAA5gB,KAAAma,YAAAoG,SACA,GAAAjB,GAAA,GAAAA,GACItf,KAAA6gB,YAAAD,EAAA,EAAA,GACA5gB,KAAA6gB,YAAAD,EAAA,EAAA,KAEA5gB,KAAA6gB,YAAAD,EAAA,EAAA,GACA5gB,KAAA6gB,YAAAD,EAAA,EAAA,KAKRpC,EAAAxd,UAAA6f,YAAA,SAAA9M,EAAA+M,EAAAC,GACI,IAAAC,EAAAjN,EAAAgN,GACAhN,EAAAgN,GAAAhN,EAAA+M,GACA/M,EAAA+M,GAAAE,GA/IJ7e,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACgBoa,EAAAxd,UAAA,YAAA,GAEjBmB,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAA8c,QACiBzC,EAAAxd,UAAA,YAAA,GAElBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,YACqBqY,EAAAxd,UAAA,mBAAA,GAEtBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,WACoBqY,EAAAxd,UAAA,kBAAA,GAErBmB,YADCa,EAAAiB,OAAA+Q,EAAAgD,UAAAhD,EAAAiD,SAAA7T,OACeoa,EAAAxd,UAAA,YAAA,GAEhBmB,YADCa,EAAAiB,OAAA+Q,EAAAgD,UAAAhD,EAAAiD,SAAAmC,QACgBoE,EAAAxd,UAAA,YAAA,GAEjBmB,YADCa,EAAAiB,OAAAgR,EAAAiD,aAAAjD,EAAAkD,YAAAC,QACmBoG,EAAAxd,UAAA,YAAA,GAqIxBwd,EAnJA,CAAAtW,EAAAU,SAAaxG,EAAAoc,oBAAAA,6aChBb,IAGA0C,EAAA,SAAArhB,GAAA,SAAAqhB,mDASA,OATgC1gB,UAAA0gB,EAAArhB,GAK5BqhB,EAAAlgB,UAAAyF,cAAA,WACIzG,KAAAogB,WAAA,KACApgB,KAAA4f,iBAAA,MAERsB,EATA,CAHAje,EAAA,qBAYA+E,WATa5F,EAAA8e,WAAAA,qMCHb,IAwGAC,EAxGAC,EAAAne,EAAA,gCACAoe,EAAApe,EAAA,aACOvD,EAAAF,GAAAC,WAAAC,QAEP4hB,EAAA,SAAAzhB,GADA,SAAAyhB,IAAA,IAAAxhB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGSF,EAAAyhB,kBAAA,EAQEzhB,EAAA0hB,sBAAA,IAwFX,OAlGiChhB,UAAA8gB,EAAAzhB,GAGhC2J,OAAAC,eAAA6X,EAAAtgB,UAAA,mBAAA4G,IAAA,WAEC,OAAA5H,KAAAuhB,kBAEDxZ,IAAA,SAAAD,GACC9H,KAAAuhB,iBAAAzZ,mCAGD0B,OAAAC,eAAA6X,EAAAtgB,UAAA,2BAAA4G,IAAA,WAEC,OAAA5H,KAAAwhB,sBAEDzZ,IAAA,SAAAD,GACC9H,KAAAwhB,qBAAA1Z,mCAED0B,OAAAC,eAAA6X,EAAAtgB,UAAA,kBAAA4G,IAAA,WAAA,OAAA5H,KAAAyhB,SAAAzhB,KAAAgE,KAAA0d,mDAGGJ,EAAAtgB,UAAAsC,OAAA,WACFtD,KAAA2hB,0BAAA3hB,KAAA4hB,uBAAA5hB,KAAA6hB,gBACC7hB,KAAA8hB,gBAAA9hB,KAAAmhB,EAAAY,KAAA,IAGFT,EAAAtgB,UAAAwC,MAAA,WACCxD,KAAA2hB,0BAAA3hB,KAAA4hB,uBAAA5hB,KAAA6hB,gBACC7hB,KAAA8hB,gBAAA9hB,KAAAmhB,EAAAY,KAAA,IAGWT,EAAAtgB,UAAA8gB,gBAAA,SAAAE,EAAA3e,EAAA4e,GAKX,IAHA,IACAC,EAAA,EACAle,EAAAge,EAAAhe,KACA,MAAAA,EAAAme,QAAAD,EAHA,KAOC,GAFAA,IAEA,OADAle,EAAAA,EAAAme,QACA3P,aAAA6O,EAAAe,SAAA,CAEC,IAAAC,EAAAre,EAAAwO,aAAA6O,EAAAe,SACA,GAAA,MAAAC,EAAAzQ,QAAA,CAEC,IAAAA,EAAAyQ,EAAAzQ,QACA0Q,GAAA,EAEA,OAAAjf,GAEC,KAAA8d,EAAAY,IAECnQ,EAAAR,mBAAAvD,SAAA5J,OAAAjE,MAAA,GAEAA,KAAA4hB,uBAAA,EACA,MACD,KAAAT,EAAAoB,OAGA,KAAApB,EAAAqB,OAGA,KAAArB,EAAAsB,QAEC,MACD,QACCH,GAAA,EAIF,GAAAA,EAEC,QAKJ,GAAAtiB,KAAA0iB,iBAAAT,GAAA5e,GAAA8d,EAAAY,IAAA,CAGC,GAAA,MAAAX,EAAAnQ,QAAAC,aAIC,YADAlR,KAAA4hB,uBAAA,GAID,IAAAnU,OAAA,EAQA,MA9DD,KAuDCyU,EACCzU,EAAA,uDAGAA,EAAA,2HACAA,GAAA,WAAAuU,EAAAtU,YAED,IAAAC,MAAAF,KA/FS6T,EAAAnf,YADZzC,GACY4hB,GAAb,CAAA9hB,GAAA4G,WAAahE,EAAAkf,YAAAA,EAoGb,SAAAH,GAECA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,QAAA,GAAA,UALD,CAMAA,EAAA/e,EAAA+e,aAAA/e,EAAA+e,4OC9GA,SAAAwB,GACiBA,EAAAC,SAAA,kDADjB,CAEAxgB,EAAAugB,WAAAvgB,EAAAugB,cACA,IAAAjZ,EAAA,WAEA,OAFA,aAAA,GAAsBtH,EAAAsH,iBAAAA,8JCHtB,IAAA0X,EAAAne,EAAA,gCAEM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAEN0iB,GAFM7iB,EAAAK,SAEN,SAAAC,GAAA,SAAAuiB,mDAeA,OAf6B5hB,UAAA4hB,EAAAviB,GASzB2J,OAAAC,eAAA2Y,EAAAphB,UAAA,kBAAA4G,IAAA,WAAA,OAAA,mCAEAwa,EAAAphB,UAAA6hB,UAAA,WACI,MAAA7iB,KAAA4R,SAAA,MAAAwP,EAAAnQ,QAAAC,cACIkQ,EAAAnQ,QAAAC,aAAAW,mBAAA7R,KAAA4R,UAbCwQ,EAAAjgB,YADZzC,GACY0iB,GAAb,CAAA5iB,GAAA4G,YAAahE,EAAAggB,QAAAA,sMCJb,IAAAU,EAAA7f,EAAA,iBACAD,EAAAC,EAAA,yCACA8f,EAAA9f,EAAA,qCAEOvD,EAAAF,GAAAC,WAAAC,QAEP2E,EAAA,SAAAxE,GAAA,SAAAwE,mDAYA,OAZ6B7D,UAAA6D,EAAAxE,GAIzBwE,EAAArD,UAAAsC,OAAA,WACIzD,EAAAmB,UAAAsC,OAAAC,KAAAvD,OAGJqE,EAAArD,UAAAwC,MAAA,WACI3D,EAAAmB,UAAAwC,MAAAD,KAAAvD,OAPJmC,YADCa,EAAAiB,OAAA8e,EAAAC,qBACqB3e,EAAArD,UAAA,YAAA,GAFbqD,EAAAlC,YADZzC,GACY2E,GAAb,CAAAye,EAAAxB,aAAalf,EAAAiC,QAAAA,6SCLb,IAAArB,EAAAC,EAAA,gDAEA8R,EAAA9R,EAAA,4BAEAkF,EAAAlF,EAAA,6CACAC,EAAAD,EAAA,iBACAE,EAAAF,EAAA,gCAEM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNujB,GAHM1jB,EAAAK,SAGN,SAAAC,GAAA,SAAAojB,mDAmBA,OAnBuCziB,UAAAyiB,EAAApjB,GAMnCojB,EAAAjiB,UAAAsC,OAAA,WACIzD,EAAAmB,UAAAsC,OAAAC,KAAAvD,MAEAA,KAAAuI,IAAA+B,KAAA9K,GAAA2G,MAAAiF,OAAA,aAAAgH,QAAApS,KAAAgE,MAAAyY,UAEJwG,EAAAjiB,UAAAwC,MAAA,WACI3D,EAAAmB,UAAAwC,MAAAD,KAAAvD,OAEJijB,EAAAjiB,UAAAO,OAAA,SAAAyE,GACIhG,KAAAiW,OAAAjW,KAAA2D,KAAA4b,WACIvf,KAAAiW,KAAArO,IAAAmN,EAAAmB,eAAAgN,QAAA9M,SAAApQ,IAdR7D,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACgB6e,EAAAjiB,UAAA,YAAA,GAEjBmB,YADCa,EAAAiB,OAAAkE,EAAAQ,oBACkBsa,EAAAjiB,UAAA,WAAA,GAJFiiB,EAAA9gB,YADpBzC,GACoBujB,GAArB,CAAA9f,EAAAkB,UAAqBjC,EAAAkC,QAAA2e,iVCZrB,QAAAhgB,EAAA,qBACAA,EAAA,oEAEAzD,GAAA2jB,OACIC,QAAA5jB,GAAA4G,UAEAid,cAIA/f,OAAA,WAGI,GADAggB,EAAAhf,QAAAmD,UAAA8b,EAAAjf,QACAif,EAAAjf,QAAAkf,cAAA,CACA,IAIAC,EAAA,SAAAC,EAAAvZ,EAAAxE,GACI,OAAA,IAAAyT,QAAA,SAAAG,EAAAC,GACI+J,EAAAjf,QAAAqf,kBAAAD,EAAAvZ,EAAA,SAAAyZ,GACIje,EAAAie,GAEArK,SAKZP,EAAAyK,EAXA,8DAFA,UAaA,SAAAG,GACIL,EAAAjf,QAAAuf,QAAAD,KAGJ1K,EAAAuK,EAhBA,wEAFA,YAkBA,SAAAG,GACIN,EAAAhf,QAAA6L,MAAAyT,IAGJpiB,GAAA,IAAAsiB,MAAAC,aACA3K,QAAAC,KAAAL,EAAAE,IAEAX,KAAA,WACI,IAAAyL,GAAA,IAAAF,MAAAC,aAAAviB,EACAkZ,QAAAC,KAAA,6BAAAqJ,EAAA,cAGJtJ,QAAAC,KAAA,0CACAsJ,GAAAC,OACI5B,QAAA,SAAAvL,GACI2D,QAAAC,KAAA,6BAAA5D,IAEJoN,KAAA,SAAApN,GACI2D,QAAAC,KAAA,6BAAA5D,MAIR/W,KAAAokB,oBACApkB,KAAAqkB,oBACArkB,KAAAskB,qBAEJD,kBAAA,WACId,EAAAjf,QAAAkf,eAEIS,GAAAM,qBAAAC,aACIC,SACIphB,KAAA,UACAqhB,SAAA,UACAzkB,UAAA,SACAsN,KAAA,OAKhB+W,iBAAA,WACIhB,EAAAhf,QAAAkM,cAAA,IAAA8S,EAAAhf,QAAAkM,aAAAtJ,QACA+c,GAAAM,qBAAAC,aACIC,SACIphB,KAAA,UACAqhB,SAAA,UACAzkB,UAAA,QACAsN,KAAA+V,EAAAhf,QAAAkM,aAAA,OAIZ4T,kBAAA,WACId,EAAAhf,QAAAkM,eAAA8S,EAAAhf,QAAAkM,iBACA,IAAAmK,EAAAsJ,GAAAU,uBAEA,OADAjK,QAAAC,KAAA,yCAAAA,GACAA,EAAAiK,OACI,KAAA,KACIjK,EAAAkK,aACIvB,EAAAhf,QAAAkM,aAAAzK,KAAA4U,EAAAkK,+OCzFpB,IAAA3c,EAAAjF,EAAA,uCACAD,EAAAC,EAAA,gDACAkF,EAAAlF,EAAA,6CAGA6hB,EAAA,SAAAjlB,GAAA,SAAAilB,mDAcA,OAdqCtkB,UAAAskB,EAAAjlB,GAIjCilB,EAAA9jB,UAAAqH,QAAA,WAEIrI,KAAA+I,YAGJ+b,EAAA9jB,UAAA+H,SAAA,WACI/I,KAAAuI,IAAAC,gBAEAhJ,GAAAiJ,SAAAC,UAAA,SAVJvG,YADCa,EAAAiB,OAAAkE,EAAAQ,oBACkBmc,EAAA9jB,UAAA,WAAA,GAYvB8jB,EAdA,CAAA5c,EAAAU,SAAaxG,EAAA0iB,gBAAAA,iVCLb,IAAAC,EAAA9hB,EAAA,2BACA8f,EAAA9f,EAAA,4CACAme,EAAAne,EAAA,uCACA+hB,EAAA/hB,EAAA,+BACAgiB,EAAAhiB,EAAA,sBACAiiB,EAAAjiB,EAAA,4BACAkiB,EAAAliB,EAAA,8BACA8R,EAAA9R,EAAA,4BACAmiB,EAAAniB,EAAA,oBACAoiB,EAAApiB,EAAA,6BACAqiB,EAAAriB,EAAA,8BACAsiB,EAAAtiB,EAAA,2BACAuiB,EAAAviB,EAAA,yBACAgS,EAAAhS,EAAA,mBACAC,EAAAD,EAAA,iBACAsb,EAAAtb,EAAA,qBACAwiB,EAAAxiB,EAAA,kCACAyiB,EAAAziB,EAAA,uBACA+R,EAAA/R,EAAA,gBACA0iB,EAAA1iB,EAAA,qBACA2iB,EAAA3iB,EAAA,wBACA4iB,EAAA5iB,EAAA,8BAEA6iB,EAAA,SAAAjmB,GACI,SAAAimB,EAAAvV,GACI,OAAA1Q,EAAA0D,KAAAvD,KAAAuQ,IAAAvQ,KAiDR,OAnDiCQ,UAAAslB,EAAAjmB,GAK7BimB,EAAA9kB,UAAAuQ,QAAA,WACI1R,EAAAmB,UAAAuQ,QAAAhO,KAAAvD,MAEAA,KAAAuM,aAAAjC,KAAAyY,EAAAC,oBAAA7X,GAAA6Z,EAAAe,mBAAA7W,cAEAlP,KAAAuM,aAAAjC,KAAApH,EAAAgB,YAAAkO,QAAA6S,EAAAe,UAAAC,UAAA7a,OAAAlI,EAAAiB,UAAAC,MACApE,KAAAuM,aAAAjC,KAAApH,EAAAgB,YAAAkO,QAAAsT,EAAAxE,WAAA+E,UAAA7a,OAAAlI,EAAAiB,UAAA8c,OAEAjhB,KAAAuM,aAAAjC,KAAA0K,EAAAgD,WAAA5F,QAAAgT,EAAAc,SAAAD,UAAA7a,OAAA4J,EAAAiD,SAAA7T,MACApE,KAAAuM,aAAAjC,KAAA0K,EAAAgD,WAAA5F,QAAAmM,EAAA4H,UAAAF,UAAA7a,OAAA4J,EAAAiD,SAAAmC,OACApa,KAAAuM,aAAAjC,KAAA0K,EAAAgD,WAAA5F,QAAAuT,EAAA1d,UAAAge,UAAA7a,OAAA4J,EAAAiD,SAAAG,OAGApY,KAAAuM,aAAAjC,KAAA2K,EAAAiD,cAAA9F,QAAAoT,EAAAlhB,QAAA2hB,UAAA7a,OAAA6J,EAAAkD,YAAAkC,QACAra,KAAAuM,aAAAjC,KAAA2K,EAAAiD,cAAA9F,QAAAwT,EAAAthB,QAAA2hB,UAAA7a,OAAA6J,EAAAkD,YAAAC,QAKJ0N,EAAA9kB,UAAAiR,YAAA,WACIpS,EAAAmB,UAAAiR,YAAA1O,KAAAvD,MAEA,IAAAomB,EAAApmB,KAAAuM,aAAAK,YAAAmW,EAAAC,mBAAA,MAEAhjB,KAAAqmB,cAAA/b,KAAA8b,EAAAxe,IAAAmN,EAAAmB,eAAAoQ,QAAAnb,GAAA4Z,EAAAwB,cAEAvmB,KAAAqmB,cAAA/b,KAAA8b,EAAAxe,IAAAmN,EAAAmB,eAAAgN,SAAA/X,GAAA+Z,EAAAsB,eAAAlX,SAEAtP,KAAAqmB,cAAA/b,KAAA8b,EAAAxe,IAAAmN,EAAAmB,eAAAuQ,WAAAtb,GAAAga,EAAA7M,iBAEAtY,KAAAqmB,cAAA/b,KAAA8b,EAAAxe,IAAAmN,EAAAmB,eAAAwQ,UAAAvb,GAAAka,EAAAsB,gBAEA3mB,KAAAqmB,cAAA/b,KAAA8b,EAAAxe,IAAAmN,EAAAmB,eAAA0Q,WAAAzb,GAAAma,EAAAR,iBAEA9kB,KAAAqmB,cAAA/b,KAAA8b,EAAAxe,IAAAmN,EAAAmB,eAAAC,QAAAhL,GAAAoa,EAAAsB,cAEA7mB,KAAAqmB,cAAA/b,KAAA8b,EAAAxe,IAAAmN,EAAAmB,eAAA4Q,eAAA3b,GAAAsa,EAAAjH,qBAEAxe,KAAAqmB,cAAA/b,KAAA8b,EAAAxe,IAAAmN,EAAAmB,eAAA6Q,WAAA5b,GAAA0a,EAAAzd,kBAGJ0d,EAAA9kB,UAAAwC,MAAA,WAGI,OAFA3D,EAAAmB,UAAAwC,MAAAD,KAAAvD,MAEAA,MAER8lB,EAnDA,CAmDA1E,EAAAnQ,SAnDa7O,EAAA0jB,YAAAA,khCCvBb,IAOAE,EAAA,SAAAnmB,GAAA,SAAAmmB,IAAA,IAAAlmB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAEWF,EAAAgX,SAAA,KAEAhX,EAAA6W,oBAEA7W,EAAAuX,cAAA,EAEAvX,EAAAwX,UAAA,EAEAxX,EAAA8Z,cACHF,MAAA,eACArW,KAAA,IACAyU,YAAA,OAEA4B,MAAA,eACArW,KAAA,IACAyU,YAAA,OAEA4B,MAAA,iBACArW,KAAA,IACAyU,YAAA,OAEA4B,MAAA,cACArW,KAAA,IACAyU,YAAA,OAEGhY,EAAA2X,YACHiC,MAAA,kBACArW,KAAA,IACAyU,YAAA,OAEA4B,MAAA,kBACArW,KAAA,IACAyU,YAAA,OAEA4B,MAAA,oBACArW,KAAA,IACAyU,YAAA,OAEA4B,MAAA,iBACArW,KAAA,IACAyU,YAAA,OAEGhY,EAAAogB,UAAA,GACApgB,EAAA4f,eAAA,EACA5f,EAAA8D,mBACHC,MAAA,IACAC,OAAA,KAGGhE,EAAAyf,WAAA,EAEAzf,EAAA0f,WAAA,EAEA1f,EAAA4V,QAAA,EAEA5V,EAAAknB,aAAA,EAEAlnB,EAAAmnB,MAAA,EACAnnB,EAAAonB,MAAA,EACApnB,EAAAqnB,UAAA,EACArnB,EAAAsnB,WAAA,IACAtnB,EAAAunB,aAAA,EAGAvnB,EAAAwnB,eAAA,EAEAxnB,EAAAynB,cAAA,GAEAznB,EAAA0nB,UAAA,EACA1nB,EAAA4Q,SAAA,EAEA5Q,EAAA2nB,aAAA,WAEH,IADA,IAAA1T,KACArQ,EAAA,EAAAA,GAAA,GAAAA,IACIqQ,EAAArQ,IAAA,IAAAA,EAAA,MAEJ,OAAAqQ,EALG,KAOX,OAhF+BvT,UAAAwlB,EAAAnmB,GAgF/BmmB,EAhFA,CAPA/iB,EAAA,qBAuFA+E,WAhFa5F,EAAA4jB,UAAAA,+LCLb,IAAAhjB,EAAAC,EAAA,gDACAE,EAAAF,EAAA,gCACAC,EAAAD,EAAA,iBACAkF,EAAAlF,EAAA,6CACA8R,EAAA9R,EAAA,4BACAqD,EAAArD,EAAA,aAGM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNgoB,GAHMnoB,EAAAK,SAGN,SAAAC,GAAA,SAAA6nB,mDAuCA,OAvCsClnB,UAAAknB,EAAA7nB,GAMlC6nB,EAAA1mB,UAAAsC,OAAA,WACIzD,EAAAmB,UAAAsC,OAAAC,KAAAvD,OAGJ0nB,EAAA1mB,UAAAwC,MAAA,WAAA,IAAA1D,EAAAE,KACIH,EAAAmB,UAAAwC,MAAAD,KAAAvD,MAEAA,KAAAuI,IAAA+B,KAAA9K,GAAA2G,MAAAiF,OAAA,YAAAgH,QAAApS,KAAAgE,MAAAyY,SAEAzc,KAAAiW,KAAArO,IAAAmN,EAAAmB,eAAAoQ,OAAAlQ,WAEA9P,EAAAhC,QAAAmD,UAAAkgB,OAAA,WACIjN,QAAAC,KAAA,8BACA7a,EAAA6D,KAAA+R,QAAA,IAEJpP,EAAAhC,QAAAmD,UAAAmgB,OAAA,YACIlN,QAAAC,KAAA,6BAAArU,EAAAhC,QAAA8L,aACAtQ,EAAA6D,KAAA+R,QAAA,EAEApP,EAAAhC,QAAA8L,eAGI,iBADA9J,EAAAhC,QAAA8L,YAAAyX,QAAA5e,MAAA,KAEIyR,QAAAC,KAAA,6BAAArU,EAAAhC,QAAA8L,YAAAyX,QAAA5e,OACA3C,EAAAhC,QAAA8L,YAAArL,YAMhB2iB,EAAA1mB,UAAAO,OAAA,SAAAyE,KAlCA7D,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACesjB,EAAA1mB,UAAA,YAAA,GAEhBmB,YADCa,EAAAiB,OAAAkE,EAAAQ,oBACkB+e,EAAA1mB,UAAA,WAAA,GAJF0mB,EAAAvlB,YADpBzC,GACoBgoB,GAArB,CAAAvkB,EAAAkB,UAAqBjC,EAAAkC,QAAAojB,6ZCXrB,IAAArG,EAAApe,EAAA,gCAGAqD,EAAArD,EAAA,aAEM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNooB,GAHMvoB,EAAAK,SAGN,SAAAC,GAAA,SAAAioB,mDAeA,OAfsCtnB,UAAAsnB,EAAAjoB,GAIlCioB,EAAA9mB,UAAAsC,OAAA,WAEItD,KAAA4R,QAAAtL,EAAAhC,QAAAgM,gBAAAsB,SAIJkW,EAAA9mB,UAAAwC,MAAA,WACIxD,KAAA4R,SAXakW,EAAA3lB,YADpBzC,GACoBooB,GAArB,CAAAzG,EAAAe,UAAqBhgB,EAAAkC,QAAAwjB,yOCTrB,SAAA5R,GAEIA,EAAA,MAAA,QAEAA,EAAA,OAAA,SAEAA,EAAA,SAAA,oBAEAA,EAAA,QAAA,UAEAA,EAAA,SAAA,WAEAA,EAAA,MAAA,QAEAA,EAAA,aAAA,eAEAA,EAAA,SAAA,WAhBJ,CAiBA9T,EAAA8T,iBAAA9T,EAAA8T,oBAEA,SAAAG,GACIA,EAAA,QAAA,UACAA,EAAA,WAAA,aAFJ,CAGAjU,EAAAiU,iBAAAjU,EAAAiU,oMCvBA,IAEA0P,EAAA,SAAAlmB,GAAA,SAAAkmB,IAAA,IAAAjmB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YACIF,EAAA6a,KAAA,kCACJ,OAFuCna,UAAAulB,EAAAlmB,GAEvCkmB,EAFA,CAFA9iB,EAAA,4CAIA8kB,eAFa3lB,EAAA2jB,kBAAAA,0NCFb,IAGAG,EAAA,SAAArmB,GAAA,SAAAqmB,mDA4BA,OA5B8B1lB,UAAA0lB,EAAArmB,GACnBqmB,EAAAllB,UAAA+W,aAAA,WACH,OAAAvY,GAAAwoB,SAMG9B,EAAAllB,UAAAyY,UAAA,SAAAwO,GACH,OAAA,IAAA7O,QAAA,SAAAG,EAAAC,GACIha,GAAA0oB,OAAAC,QAAAF,EAAAzoB,GAAA4oB,YAAA,SAAAC,EAAAvQ,GACI,GAAAuQ,EAAS,MAAAA,EACT9O,EAAAzB,QAKLoO,EAAAllB,UAAAoW,WAAA,WACH,OAAA/V,KAAAinB,MAAAjnB,KAAAC,WAGG4kB,EAAAllB,UAAAunB,aAAA,SAAAtU,GACH,OAAA5S,KAAAwR,MAAAxR,KAAAC,SAAA2S,IAGGiS,EAAAllB,UAAA2W,YAAA,WAAY,IAAA,IAAAxL,KAAAiC,EAAA,EAAAA,EAAAnO,UAAAiH,OAAAkH,IAAAjC,EAAAiC,GAAAnO,UAAAmO,GACf,OAAAjC,EAAAnM,KAAAuoB,aAAApc,EAAAjF,UAERgf,EA5BA,CAHAjjB,EAAA,eA+BA+E,WA5Ba5F,EAAA8jB,SAAAA,uLCHb,IAEAhO,EAAA,SAAArY,GAAA,SAAAqY,mDAIA,OAJkC1X,UAAA0X,EAAArY,GAC9B2J,OAAAC,eAAAyO,EAAAlX,UAAA,mBAAA4G,IAAA,WACI,MAAA,4CAERsQ,EAJA,CAFAjV,EAAA,gCAMAyG,kBAJatH,EAAA8V,aAAAA,EAWb,SAAAC,GACIA,EAAA,OAAA,SACAA,EAAA,MAAA,QAFJ,CAGA/V,EAAA+V,cAAA/V,EAAA+V,gOChBA,IAAAjQ,EAAAjF,EAAA,uCACAD,EAAAC,EAAA,gDAEAqD,EAAArD,EAAA,aACAsS,EAAAtS,EAAA,gBACA8R,EAAA9R,EAAA,4BACAC,EAAAD,EAAA,iBACAulB,EAAAvlB,EAAA,qBACAgS,EAAAhS,EAAA,mBAIA4jB,EAAA,SAAAhnB,GAAA,SAAAgnB,mDAmDA,OAnDkCrmB,UAAAqmB,EAAAhnB,GAU9BgnB,EAAA7lB,UAAAqH,QAAA,SAAAogB,GAEI,OAAAA,GACI,KAAA1T,EAAAsB,eAAAC,QACItW,KAAAsW,UACA,MACJ,KAAAvB,EAAAsB,eAAAG,WACIxW,KAAAwW,eAKZqQ,EAAA7lB,UAAA0nB,UAAA,WACI1oB,KAAA6f,KAAA9a,KAAA,SACA/E,KAAA2D,KAAAsjB,OAAA,IACAjnB,KAAA2oB,UAAAnW,aAAAhT,GAAAiT,OAAAU,OAAA,GAAAlN,OAAAjG,KAAA2D,KAAAsjB,QAEJJ,EAAA7lB,UAAAsV,QAAA,WACItW,KAAA0oB,aAGJ7B,EAAA7lB,UAAAwV,WAAA,WACIxW,KAAA2D,KAAA6jB,UAAAxnB,KAAA2D,KAAAsjB,MAEA3gB,EAAAhC,QAAAmD,UAAAmhB,UAAA5oB,KAAA2D,KAAA6jB,WACAxnB,KAAA2D,KAAA4b,WAAA,EACAvf,KAAA6oB,UAAAC,QAAA,EACA9oB,KAAA6oB,UAAArW,aAAAgW,EAAAlkB,SAAAykB,OACA/oB,KAAA6oB,UAAArW,aAAAgW,EAAAlkB,SAAA0kB,YAAAhpB,KAAA2D,KAAAsjB,OACAjnB,KAAAipB,kBAGJpC,EAAA7lB,UAAAioB,eAAA,WAGIjpB,KAAA2D,KAAAgT,kBAAA3W,KAAA2D,KAAAgT,iBAAAzP,OAAA,GACIlH,KAAA2D,KAAAgT,iBAAA/Q,QAAA,SAAA6Q,GACIA,EAAAjE,aAAA+C,EAAAjR,SAAAqR,QAAA,KA7CZxT,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACgByiB,EAAA7lB,UAAA,YAAA,GAEjBmB,YADCa,EAAAiB,OAAAgR,EAAAiD,aAAAjD,EAAAkD,YAAAC,QACmByO,EAAA7lB,UAAA,YAAA,GAEpBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,UACmB0gB,EAAA7lB,UAAA,iBAAA,GAEpBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,UACmB0gB,EAAA7lB,UAAA,iBAAA,GA2CxB6lB,EAnDA,CAAA3e,EAAAU,SAAaxG,EAAAykB,aAAAA,qbCZb,IAEA3iB,EAAA,SAAArE,GAAA,SAAAqE,mDAIA,OAJgC1D,UAAA0D,EAAArE,GAC5B2J,OAAAC,eAAAvF,EAAAlD,UAAA,mBAAA4G,IAAA,WACI,MAAA,0CAER1D,EAJA,CAFAjB,EAAA,gCAMAyG,kBAJatH,EAAA8B,WAAAA,EAWb,SAAAC,GACIA,EAAA,KAAA,OACAA,EAAA,MAAA,QAFJ,CAGA/B,EAAA+B,YAAA/B,EAAA+B,kNChBA,IAAAmC,EAAArD,EAAA,aACA2iB,EAAA3iB,EAAA,wBAEM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAE,EAAAL,EAAAK,SAGNspB,EAAA,SAAArpB,GAAA,SAAAqpB,mDAoCA,OApCoC1oB,UAAA0oB,EAAArpB,GAKhCqpB,EAAAloB,UAAAsC,OAAA,aAIA4lB,EAAAloB,UAAAwC,MAAA,WACI,IAAA8V,EAAAtZ,KACAmpB,WAAA,WACI7P,EAAA8P,iBAAA5W,aAAA,gBAAA6W,UAAA/iB,EAAAhC,QAAA2L,cACAqJ,EAAAgQ,kBAAA9W,aAAA,gBAAA6W,UAAA/iB,EAAAhC,QAAA4L,cACJ,IAGJgZ,EAAAloB,UAAAuoB,SAAA,WACI/pB,GAAAiJ,SAAAC,UAAA,UAGJwgB,EAAAloB,UAAAwoB,WAAA,WACIljB,EAAAhC,QAAA2L,aAAAjQ,KAAAopB,iBAAA5W,aAAA,gBAAAuM,OACArE,QAAAC,KAAA,yCAAArU,EAAAhC,QAAA2L,eAGJiZ,EAAAloB,UAAAyoB,YAAA,WACInjB,EAAAhC,QAAA4L,YAAAlQ,KAAAspB,kBAAA9W,aAAA,gBAAAuM,OACA,GAAAzY,EAAAhC,QAAA4L,YACI0V,EAAAthB,QAAA2hB,SAAA3e,UAAA,GAEAse,EAAAthB,QAAA2hB,SAAA3e,UAAA,GAEJoT,QAAAC,KAAA,yCAAArU,EAAAhC,QAAA4L,cA/BJ/N,YADCvC,EAAAJ,GAAA2G,OAC0B+iB,EAAAloB,UAAA,wBAAA,GAE3BmB,YADCvC,EAAAJ,GAAA2G,OAC2B+iB,EAAAloB,UAAA,yBAAA,GAJXkoB,EAAA/mB,YADpBzC,GACoBwpB,GAArB,CAAA1pB,GAAA4G,WAAqBhE,EAAAkC,QAAA4kB,4NCNrB,IAAAlmB,EAAAC,EAAA,gDACAE,EAAAF,EAAA,gCACA8R,EAAA9R,EAAA,4BACAC,EAAAD,EAAA,iBAGM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAE,EAAAL,EAAAK,SAGN8pB,EAAA,SAAA7pB,GADA,SAAA6pB,IAAA,IAAA5pB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAKIF,EAAAmnB,MAAA,KAEAnnB,EAAA6pB,WAAA,KAEA7pB,EAAA8pB,QAAA,KAEA9pB,EAAA+pB,WAAA,KAEA/pB,EAAAgqB,UAAA,KAEAhqB,EAAAiqB,YAAA,OA6CJ,OA3DuCvpB,UAAAkpB,EAAA7pB,GAgBnC6pB,EAAA1oB,UAAAsC,OAAA,WACIzD,EAAAmB,UAAAsC,OAAAC,KAAAvD,OAGJ0pB,EAAA1oB,UAAAwC,MAAA,WACI3D,EAAAmB,UAAAwC,MAAAD,KAAAvD,OAEJ0pB,EAAA1oB,UAAA+nB,KAAA,WAEI/oB,KAAA2D,KAAAqjB,aACItM,QAAAC,KAAA,8BACA3a,KAAA2pB,WAAA7R,YAAA9X,KAAA+pB,YACA/pB,KAAA4pB,QAAAzW,OAAA,2BACAnT,KAAA6pB,WAAA1W,OAAA,6BAEAuH,QAAAC,KAAA,8BACA3a,KAAA2pB,WAAA7R,YAAA9X,KAAA8pB,UACA9pB,KAAA4pB,QAAAzW,OAAA,2BACAnT,KAAA6pB,WAAA1W,OAAA,6BAGRuW,EAAA1oB,UAAAgoB,YAAA,SAAAlhB,GACI9H,KAAAinB,MAAA9T,OAAArL,GAGJ4hB,EAAA1oB,UAAAgpB,iBAAA,WACItP,QAAAC,KAAA,mCAAA3a,KAAA2D,KAAAqjB,aACAhnB,KAAA2D,KAAAqjB,YACIhnB,KAAAiW,KAAArO,IAAAmN,EAAAmB,eAAAwQ,SAAAtQ,UAAA,GAIApW,KAAAiW,KAAArO,IAAAmN,EAAAmB,eAAAwQ,SAAAtQ,UAAA,IAIRsT,EAAA1oB,UAAAipB,kBAAA,WACIjqB,KAAAiW,KAAArO,IAAAmN,EAAAmB,eAAA0Q,UAAAxQ,YAEJsT,EAAA1oB,UAAAkpB,kBAAA,WACIlqB,KAAAiW,KAAArO,IAAAmN,EAAAmB,eAAA6Q,UAAA3Q,YAtDJjU,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACaslB,EAAA1oB,UAAA,YAAA,GAEdmB,YADCvC,EAAAJ,GAAAiT,QACqBiX,EAAA1oB,UAAA,aAAA,GAEtBmB,YADCvC,EAAAJ,GAAAqY,SAC2B6R,EAAA1oB,UAAA,kBAAA,GAE5BmB,YADCvC,EAAAJ,GAAAiT,QACuBiX,EAAA1oB,UAAA,eAAA,GAExBmB,YADCvC,EAAAJ,GAAAiT,QAC0BiX,EAAA1oB,UAAA,kBAAA,GAE3BmB,YADCvC,EAAAJ,GAAA4oB,cACiCsB,EAAA1oB,UAAA,iBAAA,GAElCmB,YADCvC,EAAAJ,GAAA4oB,cACmCsB,EAAA1oB,UAAA,mBAAA,GAdnB0oB,EAAAvnB,YADpBzC,GACoBgqB,GAArB,CAAAvmB,EAAAkB,SAAqBjC,EAAAkC,QAAAolB,mVCTrB,IAAApjB,EAAArD,EAAA,YACAuiB,EAAAviB,EAAA,wBAEAknB,EAAAlnB,EAAA,yBACA2iB,EAAA3iB,EAAA,uBAEM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAE,EAAAL,EAAAK,SAGNwqB,EAAA,SAAAvqB,GADA,SAAAuqB,IAAA,IAAAtqB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAKIF,EAAAuqB,WAEAvqB,EAAAwqB,SAEAxqB,EAAAmH,UAEAnH,EAAAsH,IAAA,OAoCJ,OA9CyC5G,UAAA4pB,EAAAvqB,GAarCuqB,EAAAppB,UAAAsC,OAAA,WAEIgD,EAAAhC,QAAAkC,SACAhH,GAAA+qB,KAAAC,aAAA,IACAlkB,EAAAhC,QAAAkC,QAAA,EACAkU,QAAAC,KAAA,6BAAArU,EAAAhC,QAAA+L,QAAA,iBAAA7Q,GAAA+qB,KAAAE,gBAEAnkB,EAAAhC,QAAAgM,kBACI9Q,GAAA+qB,KAAAG,mBAAA1qB,KAAAgE,MACAsC,EAAAhC,QAAAgM,gBAAAtQ,MAEJA,KAAA4R,QAAA,IAAAuY,EAAArE,YAAA9lB,MACAA,KAAA2qB,aACA3qB,KAAA4qB,cAEJR,EAAAppB,UAAA2pB,WAAA,WACI3qB,KAAAqqB,QAAAzkB,QAAA,SAAAilB,GACIrF,EAAAlhB,QAAA2hB,SAAA6E,UAAAD,EAAA1gB,KAAA0gB,MAGRT,EAAAppB,UAAA4pB,UAAA,WACI5qB,KAAAsqB,MAAA1kB,QAAA,SAAA4B,GACIoe,EAAAthB,QAAA2hB,SAAApe,SAAAL,EAAA2C,KAAA3C,KAEJoe,EAAAthB,QAAA2hB,SAAA7e,IAAApH,KAAAoH,IACAwe,EAAAthB,QAAA2hB,SAAAhf,OAAAjH,KAAAiH,OACA2e,EAAAthB,QAAA2hB,SAAA9e,WAGJijB,EAAAppB,UAAAwC,MAAA,aAtCArB,YADCvC,GAAAJ,GAAA6a,UAC8B+P,EAAAppB,UAAA,eAAA,GAE/BmB,YADCvC,GAAAJ,GAAAurB,aAC+BX,EAAAppB,UAAA,aAAA,GAEhCmB,YADCvC,GAAAJ,GAAAwrB,eACkCZ,EAAAppB,UAAA,cAAA,GAEnCmB,YADCvC,EAAAJ,GAAAwrB,cACyBZ,EAAAppB,UAAA,WAAA,GAVTopB,EAAAjoB,YADpBzC,GACoB0qB,GAArB,CAAA5qB,GAAA4G,WAAqBhE,EAAAkC,QAAA8lB,6RCTrB,IAKAa,EAWAC,EASAC,EAzBAC,EAAAnoB,EAAA,WACA8N,EAAA9N,EAAA,yBACAD,EAAAC,EAAA,yCACAsQ,EAAAtQ,EAAA,gBAEA,SAAAgoB,GAGIA,EAAAA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,OAAA,GAAA,UATJ,CAUAA,EAAA7oB,EAAA6oB,uBAAA7oB,EAAA6oB,0BACA,SAAAC,GAGIA,EAAAA,EAAA,IAAA,GAAA,MAEAA,EAAAA,EAAA,KAAA,GAAA,OAEAA,EAAAA,EAAA,KAAA,GAAA,OAPJ,CAQAA,EAAA9oB,EAAA8oB,wBAAA9oB,EAAA8oB,2BACA,SAAAC,GAGIA,EAAAA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,OAAA,GAAA,SANJ,CAOAA,EAAA/oB,EAAA+oB,oBAAA/oB,EAAA+oB,uBAmCA,IAAAE,EAAA,SAAAxrB,GAAA,SAAAwrB,mDAGA,OAH2C7qB,UAAA6qB,EAAAxrB,GAEvC2J,OAAAC,eAAA4hB,EAAArqB,UAAA,mBAAA4G,IAAA,WAAA,MAAA,qDACJyjB,EAHA,CAGAta,EAAArH,kBAHatH,EAAAipB,sBAAAA,EAgFb,IAAA7e,EAAA,WAAA,SAAAA,IAOcxM,KAAAsrB,mBAAA,IAAAF,EAAAG,MAGAvrB,KAAAwrB,eAAA,IAAA3f,IAkNd,OAhMWW,EAAAxL,UAAAwL,KAAA,WAEHxM,KAAAiU,KAAA,EACAjU,KAAAyrB,WAAAP,EAAAQ,KACA1rB,KAAA2rB,cAAA,EAEA3rB,KAAA4rB,iBAAAX,EAAAY,UACA7rB,KAAA8rB,cAAAX,EAAAY,QAEGvf,EAAAxL,UAAAsJ,KAAA,SAAAjH,GACHrD,KAAAsM,SAAAjJ,GAGGmJ,EAAAxL,UAAA+M,IAAA,SAAAjG,GAMH,OAHA9H,KAAAgsB,QAAAzY,EAAAI,UAAAsY,YAAAnkB,EAAA9H,KAAAsM,UAAA,sFAAAtM,KAAAsM,SAAA,wBAAAxE,GACA9H,KAAAksB,iBACAlsB,KAAAsrB,mBAAAvlB,KAAA+B,GACA9H,MAEGwM,EAAAxL,UAAAmrB,QAAA,SAAApY,GAAP,IAAAjU,EAAAE,KAOI,OALA+T,GAAAA,EAAA7M,OAAA,GACI6M,EAAAnO,QAAA,SAAAiV,GACI/a,EAAAiO,IAAA8M,KAGR7a,MAEGwM,EAAAxL,UAAAorB,OAAA,SAAAtkB,GAIH,OAFA9H,KAAAksB,iBACAlsB,KAAAqsB,eAAAvkB,GACA9H,MAGGwM,EAAAxL,UAAAsrB,WAAA,SAAAvY,GAAP,IAAAjU,EAAAE,KAOI,OALA+T,GAAAA,EAAA7M,OAAA,GACI6M,EAAAnO,QAAA,SAAAiV,GACI/a,EAAAssB,OAAAvR,KAGR7a,MAGJwJ,OAAAC,eAAA+C,EAAAxL,UAAA,SAAA4G,IAAA,WAEI,OAAA5H,KAAA4M,+CAMJpD,OAAAC,eAAA+C,EAAAxL,UAAA,iBAAA4G,IAAA,WAEI,OAAA5H,KAAAksB,gDAGG1f,EAAAxL,UAAA4L,YAAA,WAGH,GAAA5M,KAAAsrB,mBAAArX,KAAA,EAAA,CAEI,IAAAsY,EAAAvsB,KAAAsrB,mBAAAkB,MAEA,OADAxsB,KAAAwrB,eAAAzd,IAAAwe,GACAA,EAGJ,IAAAE,EAAA,EAGA,GAAAzsB,KAAAiU,KAAA,EAAA,CAEI,GAAA,GAAAjU,KAAA0sB,cAeI,OAPA1sB,KAAAgsB,OAAAhsB,KAAA4rB,kBAAAX,EAAAY,UAAA,oDAAA7rB,KAAAsM,UAGAtM,KAAA4rB,kBAAAX,EAAA0B,SAEIjS,QAAAkS,KAAA,6DAAA5sB,KAAAsM,UAEJ,KAZAmgB,EAAAzsB,KAAAiU,UAoBAwY,EAFJ,GAAAzsB,KAAA0sB,eAAA1sB,KAAA8rB,eAAAX,EAAA0B,UAEI,EAIA7sB,KAAA0sB,cAIR,GAAAD,EAAA,EAAA,CAEIzsB,KAAAgsB,OAAA,MAAAhsB,KAAA8sB,iBAAA,mBAAA9sB,KAAAsM,SAAA,8BAEA,IAAA,IAAAiC,EAAA,EAAAA,EAAAke,EAAAle,IAAA,CAEI,IAAAwe,EAAA/sB,KAAA8sB,iBAAAlgB,YAAA5M,KAAAsM,UACAtM,KAAA+N,IAAAgf,GAEJ,OAAA/sB,KAAA4M,cAIJ,OAAA,MAGGJ,EAAAxL,UAAA8N,eAAA,SAAAhH,GAEH9H,KAAAwrB,eAAA7jB,IAAAG,KAMKA,EAAA+H,UACD7P,KAAAwrB,eAAAnhB,OAAAvC,GACA9H,KAAAsrB,mBAAAvlB,KAAA+B,KAID0E,EAAAxL,UAAA0O,MAAA,WAEH1P,KAAAsrB,mBAAA0B,QACAhtB,KAAAwrB,eAAA,IAAA3f,IACA7L,KAAAksB,eAAA,GAGJ1iB,OAAAC,eAAA+C,EAAAxL,UAAA,aAAA4G,IAAA,WAEI,OAAA5H,KAAAsrB,mBAAArX,sCAIGzH,EAAAxL,UAAA6O,QAAA,WAEH7P,KAAA0P,QACA1P,KAAAiU,KAAA,GAGGzH,EAAAxL,UAAA2O,OAAA,WAEH3P,KAAA2O,UAAA,GAGGnC,EAAAxL,UAAA4O,QAAA,WAEH5P,KAAA2O,UAAA,GAUMnC,EAAAxL,UAAAqrB,eAAA,SAAAvkB,GAEN9H,KAAAgsB,OAAAlkB,GAAA9H,KAAAsM,SAAA,uFAAAtM,KAAAsM,SAAAoB,WAAA,wBAAA5F,EAAA4F,YACA1N,KAAAwrB,eAAA7jB,IAAAG,GAEI9H,KAAAwrB,eAAAnhB,OAAAvC,GAIA9H,KAAAsrB,mBAAAkB,OAIEhgB,EAAAxL,UAAAgrB,OAAA,SAAAiB,EAAAxI,GAEN,GAAAwI,EAEI,MAAA,IAAAtf,MAAA8W,IArNRtiB,YADCa,EAAAiB,OAAAonB,IAC0C7e,EAAAxL,UAAA,wBAAA,GAwN/CwL,EA5NA,GAAapK,EAAAoK,KAAAA,kTCnJb,IAGA0gB,EAAA,SAAArtB,GAAA,SAAAqtB,IAAA,IAAAptB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YACWF,EAAA0G,QAAA,IAgBX,OAjB2ChG,UAAA0sB,EAAArtB,GAI7BqtB,EAAAlsB,UAAAyF,cAAA,WACNzG,KAAAmtB,UAAA,IAAAvmB,KAEJsmB,EAAAlsB,UAAAosB,UAAA,SAAAvmB,GACI,OAAA7G,KAAAmtB,UAAAxlB,IAAAd,IAEJqmB,EAAAlsB,UAAAqsB,UAAA,SAAAxmB,GACI,OAAA7G,KAAAmtB,UAAAvlB,IAAAf,IAEJqmB,EAAAlsB,UAAA8pB,UAAA,SAAAjkB,EAAAiB,GACI9H,KAAAmtB,UAAAplB,IAAAlB,EAAAiB,IAGRolB,EAjBA,CAHAjqB,EAAA,eAoBA+E,kNCjBA,IAAAslB,EAAA,WAKC,SAAAA,EAAAjqB,EAAAwnB,GACC7qB,KAAAqD,KAAAA,EACArD,KAAA6qB,OAAAA,EACA7qB,KAAAutB,SAAA,IAAA/tB,GAAAguB,SAAAnqB,GAwBF,OAnBCiqB,EAAAtsB,UAAA4G,IAAA,WACC,IAAA5D,EAAA,KAOG,OALIA,EADJhE,KAAAutB,SAAAtZ,OAAA,EACIjU,KAAAutB,SAAA3lB,MAEApI,GAAAua,YAAA/Z,KAAA6qB,SAEP/B,QAAA,EACG9kB,GAMJspB,EAAAtsB,UAAA+V,IAAA,SAAA/S,GACCA,EAAA8kB,QAAA,EACA9oB,KAAAutB,SAAAE,IAAAzpB,IAGFspB,EAhCA,+KCAA,IAAA3Z,EAAA,WAAA,SAAAA,KA2FA,OAnFkBA,EAAAsY,YAAA,SAAA5oB,EAAArC,GAEV,OAAAqC,aAAArC,GAiBU2S,EAAAC,iBAAA,SAAA9R,GACV,IAAAwX,EAAAtZ,KACA,IAAAA,KAAA0tB,iBAAA5rB,GAAA,CACI,IAAA4R,OAAA,EAEAA,KAQA,IANA,IAKAia,EALAC,KAGA5sB,EAAAc,EAAA+rB,UAKI7sB,IAEI2sB,EAAA3sB,EAAA6N,eAEArF,QAEAmkB,EAAAxjB,KAAA2jB,WAAA,WACIpa,EAAA3N,KAAA4nB,GACAC,EAAA7nB,KAAA4nB,GAEAC,EAAAhoB,QAAA,SAAAvC,GACIiW,EAAAyU,aAAA1qB,EAAAsqB,MAGR3sB,EAAAA,EAAA6sB,UAOZ,IAAA1hB,EAAAnM,KAAAguB,aAAApmB,IAAA9F,EAAA+M,aACA,OAAAof,MAAAC,KAAA/hB,IAKUwH,EAAAoa,aAAA,SAAAI,EAAAntB,GACV,IAAAotB,EACApuB,KAAAguB,aAAArmB,IAAAwmB,GACIC,EAAApuB,KAAAguB,aAAApmB,IAAAumB,IAEAC,EAAA,IAAAviB,IACA7L,KAAAguB,aAAAjmB,IAAAomB,EAAAC,IAGJA,EAAArgB,IAAA/M,IAMU2S,EAAA+Z,iBAAA,SAAA5rB,GACV,QAAA9B,KAAAguB,aAAArmB,IAAA7F,EAAA+M,cAnFW8E,EAAAqa,aAAA,IAAApnB,IAyFnB+M,EA3FA,GAAavR,EAAAuR,UAAAA,uGCHb,QAAA1Q,EAAA,qBACAA,EAAA,oEAEAzD,GAAA2jB,OACIC,QAAA5jB,GAAA4G,UAEAid,YACIgL,eAAA7uB,GAAA2G,KACAmoB,WAAA9uB,GAAA2G,MAKJ7C,OAAA,WAEItD,KAAAuuB,SAAA,EACAvuB,KAAAwuB,WAAA,EAEAjL,EAAAjf,QAAAkf,eACIS,GAAAwK,iBACIC,iBAAA,EACApM,QAAA,aAGA6B,KAAA,gBASZ3gB,MAAA,WAGI+f,EAAAjf,QAAAkf,eAEIS,GAAAM,qBAAAC,aACIC,SACIphB,KAAA,UACAqhB,SAAA,QACAzkB,UAAA,UACAsN,MACI1J,MAAA7D,KAAAquB,eAAAxqB,MACAC,OAAA9D,KAAAquB,eAAAvqB,YAOpB6qB,WAAA,SAAA1lB,GAEI,IAAA2lB,EAAA3lB,EAAAnH,OACA+sB,EAAA5lB,EAAAnH,OAAAgtB,eAAA,UACAC,EAAAH,EAAA/qB,MAAAgrB,EAAAhrB,MAAA,GAQA,OALA7D,KAAAuuB,SAAA,EACIvuB,KAAAuuB,UAAA,EAEAvuB,KAAAuuB,SAAA,EAEJvuB,KAAAuuB,UACI,KAAA,EACIM,EAAAppB,UAAAjG,GAAA8F,OAAA,KAAA9F,GAAAwvB,IAAAD,EAAA,KACAxL,EAAAjf,QAAAkf,gBAVRxjB,KAWYivB,iBAGAhL,GAAAM,qBAAAC,aACIC,SACIphB,KAAA,UACAqhB,SAAA,SACAzkB,UAAA,SACAsN,KAAA,OAIZ,MACJ,KAAA,EAEI,GADAshB,EAAAppB,UAAAjG,GAAA8F,OAAA,KAAA9F,GAAAwvB,GAAAD,EAAA,KACAxL,EAAAjf,QAAAkf,cAAA,CACI,IAAA0L,OAAA,EACA5L,EAAAhf,QAAAkM,cAAA8S,EAAAhf,QAAAkM,aAAAtJ,OAAA,GACIgoB,EAAA5L,EAAAhf,QAAAkM,aAAAxQ,KAAAwuB,aAOIxuB,KAAAwuB,YAAAlL,EAAAhf,QAAAkM,aAAAtJ,OAAA,EACIlH,KAAAwuB,WAAA,EAEAxuB,KAAAwuB,YAAA,GAPJlL,EAAAhf,QAAAkM,gBACAxQ,KAAAwuB,WAAA,GAWJxuB,KAAAmvB,WAAA,mDAAA,0DAGJD,GAAA,IAAAA,EACIjL,GAAAmL,cACIvK,YAAAqK,EACA5M,QAAA,SAAAvL,KAGAoN,KAAA,SAAAkE,OAKJ6G,EAAA,GAIJjL,GAAAM,qBAAAC,aACIC,SACIphB,KAAA,UACAqhB,SAAA,SACAzkB,UAAA,QACAsN,KAAA2hB,QAWxBG,SAAA,WACI7vB,GAAAiJ,SAAAC,UAAA,UAeJ4mB,SAAA,WACI,GAAA/L,EAAAjf,QAAAkf,cAAA,CACA,IACAlK,EAAAtZ,KACAikB,GAAAsL,iBACIC,MAAA,mDACAC,SAJJ,uEAKInN,QAAA,SAAAvL,GAGI,GAAAA,EAAAvG,cAAA,KAAAuG,EAAAvG,aAKC,CAIG,GAHA8I,EAAA2V,iBAGAlY,EAAAvG,aAAAtJ,OAAA,EAGI,IAFA,IAAAwoB,GAAA,EAEAhsB,EAAA,EAAAA,EAAAqT,EAAAvG,aAAAtJ,OAAAxD,IAAA,CACI,IAAA,IAAAyQ,EAAA,EAAAA,EAAAmP,EAAAhf,QAAAkM,aAAAtJ,OAAAiN,IAEI,GAAA4C,EAAAvG,aAAA9M,KAAA4f,EAAAhf,QAAAkM,aAAA2D,GAAA,CACIub,GAAA,EACA,MAGRA,GAEIpM,EAAAhf,QAAAkM,aAAAzK,KAAAgR,EAAAvG,aAAA9M,IAKZ,IAAA4V,EAAAiV,UAEItK,GAAAM,qBAAAC,aACIC,SACIphB,KAAA,UACAqhB,SAAA,SACAzkB,UAAA,QACAsN,KAAAwJ,EAAAvG,qBAhCZ,IAAA8I,EAAAiV,UACIjV,EAAA6V,WAAA,mDAAA,yFAqCZhL,KAAA,SAAApN,SAORoY,WAAA,SAAAK,EAAAG,GACI,GAAA3vB,KAAAsuB,WAAA,CACA,IAAAsB,EAAA5vB,KAAAsuB,WAAA9b,aAAA,cACAxS,KAAAsuB,WAAAxF,SACI9oB,KAAAsuB,WAAAxF,QAAA,GAEJ8G,GACIA,EAAAC,QAAAL,EAAAG,KAKRV,eAAA,WACIjvB,KAAAsuB,YACAtuB,KAAAsuB,WAAAxF,SACI9oB,KAAAsuB,WAAAxF,QAAA,kOC/NZ,IAAA5gB,EAAAjF,EAAA,uCACAD,EAAAC,EAAA,gDAEAC,EAAAD,EAAA,iBACAqD,EAAArD,EAAA,aACA+R,EAAA/R,EAAA,gBAEAgS,EAAAhS,EAAA,mBAEA6sB,EAAA7sB,EAAA,yBACA8sB,EAAA9sB,EAAA,wBAGA0jB,EAAA,SAAA9mB,GAAA,SAAA8mB,mDA8HA,OA9HoCnmB,UAAAmmB,EAAA9mB,GAgBhC8mB,EAAA3lB,UAAAqH,QAAA,SAAA2nB,GAEIhwB,KAAAiwB,SAEAD,EACIhwB,KAAA8pB,aAEApP,QAAAC,KAAA,oCACA3a,KAAA+R,SAAA,KAGR4U,EAAA3lB,UAAA8oB,UAAA,WAAA,IAAAhqB,EAAAE,KAMI,GAJAA,KAAA2D,KAAAqjB,cACIhnB,KAAA2D,KAAAqjB,aAAA,GAGJ1gB,EAAAhC,QAAAmD,UAAA+b,cAGI,GAFA9I,QAAAC,KAAA,8BAEArU,EAAAhC,QAAA6L,MAAA,CACI,IAAA+f,EAAA,IAAAlwB,KAAAmX,KAAAY,eAAAlU,MACAssB,EAAA,IAAAnwB,KAAAmX,KAAAY,eAAAlU,MACAusB,EAAAF,EAAA,EACAG,EAAArwB,KAAAmX,KAAAY,eAAAjU,OAAA,EAAAqsB,EACAG,EAAAhqB,EAAAhC,QAAA6L,MACA7J,EAAAhC,QAAAmD,UAAA8oB,oBAAAD,EAAA,SAAAE,GACIA,GAEIlqB,EAAAhC,QAAA8L,YAAA9J,EAAAhC,QAAAmD,UAAAqiB,UAAAsG,EAAAC,EAAAH,EAAAC,EAAAG,EAAA,KAAA,EAAA,WAEIxwB,EAAAiS,SAAA,KAEJ2I,QAAAC,KAAA,4CAEAD,QAAAC,KAAA,0CACA7a,EAAAiS,SAAA,WAIR2I,QAAAC,KAAA,0CACA3a,KAAA+R,SAAA,QAGJ2I,QAAAC,KAAA,0CACA3a,KAAA+R,SAAA,IAIR4U,EAAA3lB,UAAAivB,OAAA,WACIjwB,KAAA6oB,UAAAC,QAAA,EACA9oB,KAAAywB,mBAGJ9J,EAAA3lB,UAAAwvB,OAAA,WACIxwB,KAAA2D,KAAAqjB,aAAA,EACAhnB,KAAA2D,KAAAsjB,MAAA,EACAjnB,KAAA2oB,UAAAnW,aAAAhT,GAAAiT,OAAAU,OAAA,GAAAlN,OAAAjG,KAAA2D,KAAAsjB,QAMJN,EAAA3lB,UAAA+Q,QAAA,SAAA2e,GAAA,IAQIC,EACAC,EATJ9wB,EAAAE,KAqBI,GApBAA,KAAA2D,KAAA0T,eAAA,EACArX,KAAA2D,KAAA2T,WAAA,EACAtX,KAAA2D,KAAAwjB,UAAA,EACAnnB,KAAA2D,KAAAyjB,WAAA,IACApnB,KAAA2D,KAAA0jB,aAAA,EACArnB,KAAA2D,KAAAujB,MAAAlnB,KAAA2D,KAAAyjB,WAKAsJ,GACI1wB,KAAAwwB,SACAG,EAAA,EACAC,EAAA,IAEAD,EAAA,EACAC,EAAA,KAGJ5wB,KAAA2D,KAAA6b,WAAA,EACAoR,EAAA,GAAA5wB,KAAA6wB,OAAAzD,UAAA,YAAA,CACI,IAAA0D,EAAAtxB,GAAAua,YAAA/Z,KAAA6wB,OAAAxD,UAAA,aACArtB,KAAA0e,WAAA9F,SAAAkY,GACAA,EAAAte,aAAAud,EAAAzrB,SAAAU,OAAA,IAAA,GAAA4rB,EAAAA,EAAA,GAAA7rB,OAEJ,GAAA/E,KAAA6wB,OAAAzD,UAAA,aAAA,CACI,IAAA2D,EAAAvxB,GAAAua,YAAA/Z,KAAA6wB,OAAAxD,UAAA,cACArtB,KAAAgxB,SAAApY,SAAAmY,GACAA,EAAAve,aAAAsd,EAAAxrB,SAAAU,OAAA2rB,EAAAC,GAAA9qB,WAAA,WACIhG,EAAA6D,KAAA4b,WAAA,EACAzf,EAAA6D,KAAA6b,WAAA,IACJza,YAEA/E,KAAA2D,KAAA4b,WAAA,EACAvf,KAAA2D,KAAA6b,WAAA,GAIRmH,EAAA3lB,UAAAyvB,gBAAA,WAAA,IAAA3wB,EAAAE,KACIA,KAAA2D,KAAAgT,kBAAA3W,KAAA2D,KAAAgT,iBAAAzP,OAAA,GACIlH,KAAA2D,KAAAgT,iBAAA/Q,QAAA,SAAA6Q,GACI3W,EAAA6D,KAAAmT,SAAAC,IAAAN,KAGRzW,KAAA2D,KAAAgT,qBA1HJxU,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,UACmBwgB,EAAA3lB,UAAA,iBAAA,GAEpBmB,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACgBuiB,EAAA3lB,UAAA,YAAA,GAEjBmB,YADCa,EAAAiB,OAAA+Q,EAAAgD,UAAAhD,EAAAiD,SAAA7T,OACeuiB,EAAA3lB,UAAA,YAAA,GAEhBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,UACmBwgB,EAAA3lB,UAAA,iBAAA,GAEpBmB,YADCa,EAAAiB,OAAAgR,EAAAiD,aAAAjD,EAAAkD,YAAAkC,SACsBsM,EAAA3lB,UAAA,cAAA,GAEvBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,aACkBwgB,EAAA3lB,UAAA,gBAAA,GAEnBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,WACmBwgB,EAAA3lB,UAAA,kBAAA,GAgHxB2lB,EA9HA,CAAAze,EAAAU,SAAaxG,EAAAukB,eAAAA,ucCbb,IAAA5V,EAAA9N,EAAA,eACAguB,EAAAhuB,EAAA,YAOA+f,EAAA,SAAAnjB,GAAA,SAAAmjB,mDAEA,OAFwCxiB,UAAAwiB,EAAAnjB,GACpC2J,OAAAC,eAAAuZ,EAAA,mBAAApb,IAAA,WAAA,MAAA,kDACJob,EAFA,CAEAjS,EAAArH,kBAFatH,EAAA4gB,mBAAAA,EAGb,IAAA+E,EAAA,WAAA,SAAAA,IAEI/nB,KAAAkxB,YAAA,IAAAtqB,IACA5G,KAAA2a,KAAA,2BA2BJ,OAzBWoN,EAAA/mB,UAAA4G,IAAA,SAAAupB,GAEH,GAAAnxB,KAAAkxB,YAAAvpB,IAAAwpB,GAEI,OAAAnxB,KAAAkxB,YAAAtpB,IAAAupB,GAGA,IAAAC,EAAA,IAAAH,EAAAI,OAOA,MALA,iBAAAF,IAA6BC,EAAAjnB,KAAAgnB,GAI7BnxB,KAAAkxB,YAAAnpB,IAAAopB,EAAAC,GACAA,GAIDrJ,EAAA/mB,UAAAqJ,OAAA,SAAA8mB,GAEH,GAAAnxB,KAAAkxB,YAAAvpB,IAAAwpB,GAEI,OAAAnxB,KAAAkxB,YAAA7mB,OAAA8mB,IAGZpJ,EA9BA,GAAa3lB,EAAA2lB,cAAAA,wMCXb,IAUAuJ,EAAA,SAAAzxB,GAAA,SAAAyxB,mDAEA,OAFiC9wB,UAAA8wB,EAAAzxB,GAC7B2J,OAAAC,eAAA6nB,EAAA,mBAAA1pB,IAAA,WAAA,MAAA,2CACJ0pB,EAFA,CAVAruB,EAAA,eAYAyG,kBAFatH,EAAAkvB,YAAAA,EAIb,IAAAD,EAAA,WAAA,SAAAA,IAGWrxB,KAAAuxB,aACAvxB,KAAAwxB,iBAwDX,OAtDWH,EAAArwB,UAAAoV,SAAA,WAAS,IAAA,IAAApJ,KAAAoB,EAAA,EAAAA,EAAAnO,UAAAiH,OAAAkH,IAAApB,EAAAoB,GAAAnO,UAAAmO,GACZ,IAAAkL,EAAAtZ,KAEAsZ,EAAAiY,WAAA,GAAAjY,EAAAiY,UAAArqB,QACIlH,KAAAuxB,UAAA3rB,QAAA,SAAA6rB,GACIA,EAAA1xB,WAAA,GAAAuZ,GAAAoY,OAAA1kB,MAIRsM,EAAAkY,eAAA,GAAAlY,EAAAkY,cAAAtqB,QACIlH,KAAAuxB,UAAA3rB,QAAA,SAAA6rB,GACIA,EAAA1xB,WAAA,GAAAuZ,GAAAoY,OAAA1kB,MAGRhN,KAAAwxB,cAAAtqB,OAAA,GAEGmqB,EAAArwB,UAAAgO,YAAA,SAAA2iB,GACH3xB,KAAAuxB,UAAAvxB,KAAA4xB,UAAA5xB,KAAAuxB,UAAAI,IAEGN,EAAArwB,UAAA6wB,gBAAA,SAAAF,GACH3xB,KAAAwxB,cAAAxxB,KAAA4xB,UAAA5xB,KAAAwxB,cAAAG,IAGGN,EAAArwB,UAAA8wB,mBAAA,WACH9xB,KAAAuxB,UAAArqB,OAAA,EACAlH,KAAAwxB,cAAAtqB,OAAA,GAGImqB,EAAArwB,UAAA4wB,UAAA,SAAAG,EAAAJ,GAGJ,GAAAI,EAAA,CAGI,IADA,IAAAC,GAAA,EACAtuB,EAAA,EAAAA,EAAAquB,EAAA7qB,OAAAxD,IAEI,GAAAquB,EAAAruB,KAAAiuB,EAAA,CACIK,GAAA,EACA,MAGRA,GAEID,EAAAhsB,KAAA4rB,GAGR,OAAAI,GAEGV,EAAArwB,UAAAixB,SAAA,WAIH,UAERZ,EA5DA,GAAajvB,EAAAivB,OAAAA,0LCdb,IAAArpB,EAAA,WAII,SAAAA,IACI,IAAAkqB,EAAAlyB,KAAA6O,YAEA,GAAAqjB,EAAA,CAGA,GAAAlqB,EAAAmqB,SAAAxqB,IAAAuqB,GACI,MAAA,IAAAvkB,MAAA3N,KAAA,2DAEAgI,EAAAmqB,SAAApqB,IAAAmqB,EAAAlyB,MACAA,KAAAyG,iBAoCZ,OAjCcuB,EAAAhH,UAAAyF,cAAA,aAGV+C,OAAAC,eAAAzB,EAAA,YAAAJ,IAAA,WACI,OAAAI,EAAAoqB,oBAAApyB,uCAGUgI,EAAAqqB,gBAAA,SAAAH,GACVlqB,EAAAmqB,SAAAxqB,IAAAuqB,KACIlqB,EAAAmqB,SAAAvqB,IAAAsqB,GAAArP,YACA7a,EAAAmqB,SAAA9nB,OAAA6nB,KAIMlqB,EAAAoqB,oBAAA,SAAAF,GAA+B,IAAA,IACzCzW,EADyCzO,KAAAoB,EAAA,EAAAA,EAAAnO,UAAAiH,OAAAkH,IAAApB,EAAAoB,EAAA,GAAAnO,UAAAmO,GAEzC,OAAApG,EAAAmqB,SAAAxqB,IAAAuqB,KACIzW,EAAAzT,EAAAmqB,SAAAvqB,IAAAsqB,IAEIzW,IAGRA,EAAA,IAAAyW,EAAA5nB,KAAAvK,MAAAmyB,QAAA,GAAAR,OAAA1kB,gBAEAhF,GACIA,EAAAmqB,SAAApqB,IAAAmqB,EAAAzW,GAEJA,IAGMzT,EAAAhH,UAAA6hB,UAAA,aA7CK7a,EAAAmqB,SAAA,IAAAvrB,IAgDnBoB,EAlDA,GAAa5F,EAAA4F,UAAAA,0JCeb,IAAAsqB,EAAA,WAGI,SAAAA,EAAAxqB,EAAAuG,QAAsB,IAAAA,IAAAA,EAAA,MAClBrO,KAAAiL,OAAAnD,EACA9H,KAAAuyB,MAAAlkB,EAcR,OAZI7E,OAAAC,eAAA6oB,EAAAtxB,UAAA,SAGA4G,IAAA,WACI,OAAA5H,KAAAiL,QAJJlD,IAAA,SAAAD,GACI9H,KAAAiL,OAAAnD,mCAKJ0B,OAAAC,eAAA6oB,EAAAtxB,UAAA,QAGA4G,IAAA,WACI,OAAA5H,KAAAuyB,OAJJxqB,IAAA,SAAAsG,GACIrO,KAAAuyB,MAAAlkB,mCAKRikB,EAnBA,GAAalwB,EAAAkwB,KAAAA,EAqBb,IAAA/G,EAAA,WAGI,SAAAA,IADQvrB,KAAAwyB,MAAA,EAEJxyB,KAAAyyB,QAAA,IAAAH,EAAA,MAuDR,OArDI/G,EAAAvqB,UAAA0xB,IAAA,WACI,OAAA,IAAA1yB,KAAAwyB,MACI,KAEJxyB,KAAAyyB,QAAApkB,KAAAvG,OASJyjB,EAAAvqB,UAAA+E,KAAA,SAAA8U,GACI,IAAA8X,EAAA,IAAAL,EAAAzX,GACA8X,EAAAtkB,KAAArO,KAAAyyB,QAAApkB,KACArO,KAAAyyB,QAAApkB,KAAAskB,EACA3yB,KAAAwyB,SAQJjH,EAAAvqB,UAAAwrB,IAAA,WACI,GAAA,IAAAxsB,KAAAwyB,MACI,OAAA,KAEJ,IAAA3X,EAAA7a,KAAAyyB,QAAApkB,KAIA,OAHArO,KAAAyyB,QAAApkB,KAAAwM,EAAAxM,KACArO,KAAAwyB,QACA3X,EAAAxM,KAAA,KACAwM,EAAA/S,OAEJyjB,EAAAvqB,UAAAgsB,MAAA,WAGI,IAFA,IAAAnS,EACA+X,EAAA5yB,KAAAyyB,QACA,IAAAzyB,KAAAwyB,OAEII,EADA/X,EAAA+X,EAAAvkB,KAEAwM,EAAAxM,KAAA,KACArO,KAAAwyB,QAEJxyB,KAAAyyB,QAAA,MAEJjpB,OAAAC,eAAA8hB,EAAAvqB,UAAA,WAAA4G,IAAA,WACI,OAAA,IAAA5H,KAAAwyB,uCAGJhpB,OAAAC,eAAA8hB,EAAAvqB,UAAA,QAAA4G,IAAA,WACI,OAAA5H,KAAAwyB,uCAERjH,EA3DA,GAAanpB,EAAAmpB,MAAAA,wKCpCb,IAAAxI,EAAA9f,EAAA,4CACAiF,EAAAjF,EAAA,uCAEAD,EAAAC,EAAA,gDACA8R,EAAA9R,EAAA,4BAGAC,EAAAD,EAAA,iBACAgS,EAAAhS,EAAA,mBAEAkF,EAAAlF,EAAA,6CACA+R,EAAA/R,EAAA,gBAIAsjB,EAAA,SAAA1mB,GAAA,SAAA0mB,mDAkFA,OAlFkC/lB,UAAA+lB,EAAA1mB,GAkB9B0mB,EAAAvlB,UAAAqH,QAAA,WAGIrI,KAAA6yB,SACA7yB,KAAAwD,SAEJ+iB,EAAAvlB,UAAAwC,MAAA,aAGA+iB,EAAAvlB,UAAA6xB,OAAA,WAAA,IAAA/yB,EAAAE,KACIR,GAAAiJ,SAAAqqB,sBACArR,SAAA,EAEAzhB,KAAAmoB,UAEAnoB,KAAAiW,KAAArO,IAAAmN,EAAAmB,eAAAuQ,UAAArQ,SAAA,WAEItW,EAAAmW,KAAArO,IAAAmN,EAAAmB,eAAA4Q,cAAA1Q,WAEAtW,EAAAmW,KAAArO,IAAAmN,EAAAmB,eAAAwQ,SAAAtQ,UAAA,MAKRmQ,EAAAvlB,UAAAmnB,QAAA,WAaI,GAZAnoB,KAAA6wB,OAAArqB,SAEIxG,KAAA6wB,OAAAzD,UAAA,WACIptB,KAAAuI,IAAA+B,KAAA9K,GAAA6a,QAAAjP,OAAA,UAAAgH,QAAApS,KAAA6wB,OAAAxD,UAAA,WAEJrtB,KAAA6wB,OAAAzD,UAAA,SACIptB,KAAAuI,IAAA+B,KAAA9K,GAAA6a,QAAAjP,OAAA,QAAAgH,QAAApS,KAAA6wB,OAAAxD,UAAA,SAEJrtB,KAAA6wB,OAAArqB,QAAA,IAIJxG,KAAA6wB,OAAAzD,UAAA,SAeI,MAAA,IAAAzf,MAAA,6BAdA,IAAAiX,EAAAplB,GAAAua,YAAA/Z,KAAA6wB,OAAAxD,UAAA,UACArtB,KAAAgxB,SAAApY,SAAAgM,GACA,IAAAmO,EAAAnO,EAAAkK,eAAA,UACAkE,EAAAD,EAAAjE,eAAA,WACA7H,EAAArC,EAAAkK,eAAA,SACAmE,EAAArO,EAAAkK,eAAA,YAWJ,GATI9uB,KAAAuI,IAAA+B,KAAA9K,GAAA2G,MAAAiF,OAAA,SAAAgH,QAAAwS,GAAAnI,SACAzc,KAAAuI,IAAA+B,KAAA9K,GAAA2G,MAAAiF,OAAA,UAAAgH,QAAA2gB,GAAAtW,SACAzc,KAAAuI,IAAA+B,KAAA9K,GAAA2G,MAAAiF,OAAA,WAAAgH,QAAA4gB,GAAAvW,SACAzc,KAAAuI,IAAA+B,KAAA9K,GAAA2G,MAAAiF,OAAA,SAAAgH,QAAA6U,GAAAxK,SACAzc,KAAAuI,IAAA+B,KAAA9K,GAAA2G,MAAAiF,OAAA,YAAAgH,QAAA6gB,GAAAxW,UAKJzc,KAAA6wB,OAAAzD,UAAA,cAOI,MAAA,IAAAzf,MAAA,mCANA,IAAAulB,EAAA1zB,GAAAua,YAAA/Z,KAAA6wB,OAAAxD,UAAA,eACArtB,KAAAgxB,SAAApY,SAAAsa,GACAA,EAAApK,QAAA,EAEA9oB,KAAAuI,IAAA+B,KAAA9K,GAAA2G,MAAAiF,OAAA,SAAAgH,QAAA8gB,GAAAzW,UA3ERta,YADCa,EAAAiB,OAAA8e,EAAAC,qBACqBuD,EAAAvlB,UAAA,YAAA,GAEtBmB,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACgBmiB,EAAAvlB,UAAA,YAAA,GAEjBmB,YADCa,EAAAiB,OAAA+Q,EAAAgD,UAAAhD,EAAAiD,SAAA7T,OACgBmiB,EAAAvlB,UAAA,aAAA,GAGjBmB,YADCa,EAAAiB,OAAAgR,EAAAiD,aAAAjD,EAAAkD,YAAAkC,SACsBkM,EAAAvlB,UAAA,cAAA,GAEvBmB,YADCa,EAAAiB,OAAAkE,EAAAQ,oBACkB4d,EAAAvlB,UAAA,WAAA,GAEnBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,cACmBogB,EAAAvlB,UAAA,iBAAA,GAEpBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,aACkBogB,EAAAvlB,UAAA,gBAAA,GAmEvBulB,EAlFA,CAAAre,EAAAU,SAAaxG,EAAAmkB,aAAAA,ogBCfb,IAAAlU,EAAApP,EAAA,wCAEM1D,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAE,EAAAL,EAAAK,SAGNuzB,EAAA,SAAAtzB,GADA,SAAAszB,IAAA,IAAArzB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGWF,EAAAszB,cAAA,KAECtzB,EAAAuzB,cAAA,EACAvzB,EAAAwzB,cAAA,IAuEZ,OA5E0C9yB,UAAA2yB,EAAAtzB,GAMtCszB,EAAAnyB,UAAAsC,OAAA,aAIA6vB,EAAAnyB,UAAAwC,MAAA,aAGO2vB,EAAAnyB,UAAAuyB,eAAA,SAAAxU,GAAP,IAAAjf,EAAAE,KAEI,GAAA,GAAAA,KAAAszB,aAAA,CAAuCtzB,KAAAszB,cAAA,EAEvC,IAEA/wB,EAFAssB,EAAA7uB,KAAAozB,cAAAtE,eAAA,OACAC,EAAA/uB,KAAAozB,cAAAvvB,MAAAgrB,EAAAhrB,MAAA,GAEA,IAAAkb,GACIgQ,GAAAA,EACAxsB,EAAA/C,GAAA+C,MAAA,IAAA,IAAA,MAEAA,EAAA/C,GAAA+C,MAAA,IAAA,IAAA,KAEJ,IAAAkvB,EAAAjyB,GAAA4F,SAAA5F,GAAA6F,MAAA7F,GAAA8F,OAAA,KAAA9F,GAAAwvB,GAAAD,EAAA,IAAA1c,EAAAhQ,MAAA3B,OAAA,KAAA6B,IAAA/C,GAAA6gB,SAAA,WAMQvgB,EAAAuzB,cAAAtU,EACAjf,EAAAwzB,cAAA,KAERzE,EAAAppB,UAAAgsB,KAGG0B,EAAAnyB,UAAAqoB,UAAA,SAAAtK,GACH,IAEAxc,EAFAssB,EAAA7uB,KAAAozB,cAAAtE,eAAA,OACAC,EAAA/uB,KAAAozB,cAAAvvB,MAAAgrB,EAAAhrB,MAAA,GAGA,IAAAkb,GACIgQ,EAAAF,EAAA2E,SAAAzxB,EAAAgtB,EACAxsB,EAAA/C,GAAA+C,MAAA,IAAA,IAAA,OAEAwsB,EAAAF,EAAA2E,SAAAzxB,EACAQ,EAAA/C,GAAA+C,MAAA,IAAA,IAAA,MAEJvC,KAAAqzB,cAAAtU,EACA8P,EAAAtsB,MAAAA,EACAssB,EAAAjtB,YAAAmtB,EAAA,GACAF,EAAA9sB,GAEGoxB,EAAAnyB,UAAAyyB,OAAA,WACH,GAAAzzB,KAAAozB,cACA,OAAApzB,KAAAqzB,eACI,KAAA,EACIrzB,KAAAuzB,eAAA,GACA,MACJ,KAAA,EACIvzB,KAAAuzB,eAAA,KAKZ/pB,OAAAC,eAAA0pB,EAAAnyB,UAAA,UAAA4G,IAAA,WACI,OAAA5H,KAAAszB,aACI,GAAAtzB,KAAAqzB,cAAyB,EACpB,EAELrzB,KAAAqzB,+CAtERlxB,YADCvC,EAAAJ,GAAA2G,OACqCgtB,EAAAnyB,UAAA,qBAAA,GAFrBmyB,EAAAhxB,YADpBzC,GACoByzB,GAArB,CAAA3zB,GAAA4G,WAAqBhE,EAAAkC,QAAA6uB,4NCLf,IAAA5zB,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAE,EAAAL,EAAAK,SAGN8zB,EAAA,SAAA7zB,GADA,SAAA6zB,IAAA,IAAA5zB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAIIF,EAAAyS,MAAA,KAGAzS,EAAA6zB,KAAA,OAkBJ,OAxBwCnzB,UAAAkzB,EAAA7zB,GAYpC6zB,EAAA1yB,UAAAwC,MAAA,aAGAkwB,EAAA1yB,UAAA6uB,QAAA,SAAAL,EAAAG,GACI3vB,KAAAuS,MAAAY,OAAAqc,EACAxvB,KAAA2zB,KAAAxgB,OAAAwc,GAGJ+D,EAAA1yB,UAAA4yB,UAAA,WACI5zB,KAAAgE,KAAA8kB,QAAA,GAlBJ3mB,YADCvC,EAAAJ,GAAAiT,QACsBihB,EAAA1yB,UAAA,aAAA,GAGvBmB,YADCvC,EAAAJ,GAAAq0B,WACwBH,EAAA1yB,UAAA,YAAA,GANR0yB,EAAAvxB,YADpBzC,GACoBg0B,GAArB,CAAAl0B,GAAA4G,WAAqBhE,EAAAkC,QAAAovB,kKCHrB,IAIAvN,EAAA,SAAAtmB,GAAA,SAAAsmB,mDA4HA,OA5H+B3lB,UAAA2lB,EAAAtmB,GAK3BsmB,EAAAnlB,UAAAyF,cAAA,WACIzG,KAAA8zB,QAAA,IAAAltB,KAOGuf,EAAAnlB,UAAA8X,kBAAA,SAAAJ,EAAAqb,GAAP,IACIC,EADJl0B,EAAAE,UAAuC,IAAA+zB,IAAAA,GAAA,GAGnC/zB,KAAA8zB,QAAAnsB,IAAA+Q,GACIsb,EAAAh0B,KAAA8zB,QAAAlsB,IAAA8Q,IAEAsb,EAAA,IAAAC,EACAj0B,KAAA8zB,QAAA/rB,IAAA2Q,EAAAsb,IAGJD,IAAY/zB,KAAAk0B,iBAAAF,GAEZtb,EAAAkG,GAAApf,GAAA2G,KAAAguB,UAAAC,YAAA,SAAAnrB,GACIA,EAAAorB,aACAzuB,QAAA,SAAA0uB,GACI,IAAAtV,EAAAsV,EAAAC,eACAC,EAAAF,EAAAG,eACA1V,EAAA,IAAA2V,EACA3V,EAAAO,UAAAT,EAAA8V,GACA5V,EAAAuV,MAAAA,EACAvV,EAAAC,MAAAA,EACAD,EAAAK,MAAAoV,EACAzV,EAAA6V,OAAA,EACA7V,EAAA8V,OAAA,EACA9V,EAAA+V,OAAA,EACA/V,EAAAgW,OAAA,EAGAf,EAAAgB,SAAAjtB,IAAAusB,EAAAW,QAAAlW,OAIRrG,EAAAkG,GAAApf,GAAA2G,KAAAguB,UAAAe,WAAA,SAAAjsB,GACIA,EAAAorB,aACAzuB,QAAA,SAAA0uB,GACI,GAAAN,EAAAgB,SAAArtB,IAAA2sB,EAAAW,SAAA,CACI,IAAAlW,EAAAiV,EAAAgB,SAAAptB,IAAA0sB,EAAAW,SACAE,EAAAb,EAAAc,WAAArzB,EACAszB,EAAAf,EAAAc,WAAApzB,EACA+c,EAAA6V,QAAAO,EACApW,EAAA8V,QAAAQ,EAGAh0B,KAAAi0B,IAAAH,GAAA,KACIpW,EAAA+V,QAAA/V,EAAA6V,OAAAO,GAEJ9zB,KAAAi0B,IAAAD,GAAA,KACItW,EAAAgW,QAAAhW,EAAA8V,OAAAQ,GAGJtW,EAAA6V,OAAA7V,EAAA6V,OAAA7V,EAAA8V,OAAA9V,EAAA8V,OAAA,KACI/0B,EAAAy1B,mBAAAvB,EAAAM,QAMhB5b,EAAAkG,GAAApf,GAAA2G,KAAAguB,UAAAqB,UAAA,SAAAvsB,GACIA,EAAAorB,aACAzuB,QAAA,SAAA0uB,GACIN,EAAAgB,SAAArtB,IAAA2sB,EAAAW,UACIn1B,EAAAy1B,mBAAAvB,EAAAM,OAMZ5b,EAAAkG,GAAApf,GAAA2G,KAAAguB,UAAAsB,aAAA,SAAAxsB,GACIA,EAAAorB,aACAzuB,QAAA,SAAA0uB,GACIN,EAAAgB,SAAArtB,IAAA2sB,EAAAW,UACIn1B,EAAAy1B,mBAAAvB,EAAAM,QAMhBnO,EAAAnlB,UAAAu0B,mBAAA,SAAAvB,EAAAM,GAEI,IAAA9D,EAAAwD,EAAA0B,mBAAApB,GACA9D,GAAAwD,EAAA2B,WAAAnF,EAAAlR,YACI0U,EAAA2B,WAAAnF,EAAAlR,WAAA1Z,QAAA,SAAAqD,GACIA,GAAA,mBAAAA,GAEIA,EAAAunB,KAKZwD,EAAAgB,SAAA3qB,OAAAiqB,EAAAW,UAOG9O,EAAAnlB,UAAA4d,GAAA,SAAAU,EAAAqS,EAAAjZ,GACH,IAAAsb,EAWA,OATIA,EADJtb,GAAA1Y,KAAA8zB,QAAAnsB,IAAA+Q,GACI1Y,KAAA8zB,QAAAlsB,IAAA8Q,GAEA1Y,KAAAk0B,kBAGJyB,WAAArW,KACI0U,EAAA2B,WAAArW,OAEJ0U,EAAA2B,WAAArW,GAAAvZ,KAAA4rB,GACAA,GAGRxL,EA5HA,CAJAljB,EAAA,eAgIA+E,WA5Ha5F,EAAA+jB,UAAAA,EA8Hb,IA6IAtH,EA7IAoV,EAAA,WAKI,SAAAA,IACIj0B,KAAAg1B,SAAA,IAAApuB,IACA5G,KAAA21B,cA0FR,OAtFI1B,EAAAjzB,UAAA00B,mBAAA,SAAApB,GACI,IAAAt0B,KAAAg1B,SAAArtB,IAAA2sB,EAAAW,SAkFI,OAAA,KAjFA,IAAAlW,EAAA/e,KAAAg1B,SAAAptB,IAAA0sB,EAAAW,SAEAW,GAAA,EAEAtW,EAAAT,EAAA8V,GAEA,IAAAtzB,KAAAi0B,IAAAvW,EAAA6V,QAAA,IAAAvzB,KAAAi0B,IAAAvW,EAAA8V,QAAA,MAEI,GAAA9V,EAAA+V,QAAA,GAAA/V,EAAAgW,QAAA,CAEI,GAAA,IAAAhW,EAAA+V,OACIc,GAAA,EAGItW,EADJP,EAAA8V,OAAA,EACIhW,EAAAC,GAEAD,EAAAK,SAED,CACH,IAAA2W,EAAA9W,EAAA6V,OAAA7V,EAAA8V,OAEAxzB,KAAAi0B,IAAAO,GAAA,IAEID,GAAA,EAGItW,EADJP,EAAA6V,OAAA,EACI/V,EAAAQ,MAEAR,EAAAM,MAKZ,IAAAyW,EACI,GAAA,IAAA7W,EAAAgW,OACIa,GAAA,EAEItW,EADJP,EAAA8V,OAAA,EACIhW,EAAAQ,MAEAR,EAAAM,SAED,CACH0W,EAAA9W,EAAA8V,OAAA9V,EAAA6V,OACAvzB,KAAAi0B,IAAAO,GAAA,IAEID,GAAA,EAGItW,EADJP,EAAA8V,OAAA,EACIhW,EAAAC,GAEAD,EAAAK,OAQxB,IAAA0W,EAoBI,OADA7W,EAAAO,UAAAT,EAAA8V,GACA5V,EAnBA,OAAAO,GACI,KAAAT,EAAA8V,GAEI,OADA5V,EAAAO,UAAAT,EAAA8V,GACA5V,EACJ,KAAAF,EAAAC,GAEI,OADAC,EAAAO,UAAAT,EAAAC,GACAC,EACJ,KAAAF,EAAAK,KAEI,OADAH,EAAAO,UAAAT,EAAAK,KACAH,EACJ,KAAAF,EAAAM,KAEI,OADAJ,EAAAO,UAAAT,EAAAM,KACAJ,EACJ,KAAAF,EAAAQ,MAEI,OADAN,EAAAO,UAAAT,EAAAQ,MACAN,IAUxBkV,EAjGA,GAmGAS,EAAA,WAyCA,OAzCA,aAAA,GAAatyB,EAAAsyB,YAAAA,EA0Cb,SAAA7V,GACIA,EAAAA,EAAA,IAAA,GAAA,KACAA,EAAAA,EAAA,GAAA,GAAA,KACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QALJ,CAMAA,EAAAzc,EAAAyc,iBAAAzc,EAAAyc,qNCrRA,IAAAkE,EAAA9f,EAAA,4CAEAiF,EAAAjF,EAAA,uCACAD,EAAAC,EAAA,gDACAsS,EAAAtS,EAAA,gBAEAC,EAAAD,EAAA,iBACA+R,EAAA/R,EAAA,gBAGAujB,EAAA,SAAA3mB,GAAA,SAAA2mB,IAAA,IAAA1mB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAYIF,EAAAg2B,UAAA,EACAh2B,EAAAi2B,UAAA,IAgDJ,OA7DmCv1B,UAAAgmB,EAAA3mB,GAe/B2mB,EAAAxlB,UAAAqH,QAAA,SAAArC,GACIhG,KAAAuB,OAAAyE,IAGJwgB,EAAAxlB,UAAAO,OAAA,SAAAyE,GAEI,IAAAhG,KAAA2D,KAAA+R,SACA1V,KAAA2D,KAAAujB,OAAAlhB,EACAhG,KAAA2D,KAAAujB,OAAAlnB,KAAA2D,KAAAwjB,UAAAnnB,KAAA2D,KAAAyjB,aACIpnB,KAAA2D,KAAAwjB,UAAAnnB,KAAA2D,KAAAujB,MACAlnB,KAAAg2B,UAEAh2B,KAAA2D,KAAAyjB,YAAApnB,KAAA2D,KAAA4jB,eAAAvnB,KAAA2D,KAAAsjB,MAAA,GAAAjnB,KAAA2D,KAAA0jB,aAAArnB,KAAA2D,KAAA8jB,aAAAvgB,OAAA,IAAA,CACQ,IAAA3H,EAAAS,KAAA2D,KAAA8jB,aAAAznB,KAAA2D,KAAA0jB,aAAA,GAAA4O,EAAA12B,EAAA,GAAA22B,EAAA32B,EAAA,GACJS,KAAA2D,KAAAsjB,OAAAgP,IACIj2B,KAAA2D,KAAA0jB,eACArnB,KAAA2D,KAAAyjB,YAAA8O,KAOhB1P,EAAAxlB,UAAAg1B,QAAA,WAEI,IAAAG,EAAAn2B,KAAAo2B,cACAD,EAAAhU,QACIniB,KAAAizB,SAAAra,SAAAud,GAEJ,IAAAE,EAAAF,EAAA3jB,aAAA+C,EAAAjR,SAKA,OAHA+xB,EAAAzsB,OAEAysB,EAAArf,cACAmf,GAGJ3P,EAAAxlB,UAAAo1B,YAAA,WAEI,IAAA3f,EAAAzW,KAAA2D,KAAAmT,SAAAlP,MAGA,OADA5H,KAAA2D,KAAAgT,iBAAA5Q,KAAA0Q,GACAA,GAvDJtU,YADCa,EAAAiB,OAAA8e,EAAAC,qBACqBwD,EAAAxlB,UAAA,YAAA,GAEtBmB,YADCa,EAAAiB,OAAAf,EAAAgB,WAAAhB,EAAAiB,UAAAC,OACgBoiB,EAAAxlB,UAAA,YAAA,GAEjBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,UACmBqgB,EAAAxlB,UAAA,iBAAA,GAEpBmB,YADCa,EAAAiB,OAAAzE,GAAA2G,KAAA,aACkBqgB,EAAAxlB,UAAA,gBAAA,GAEnBmB,YADCa,EAAAiB,OAAA+Q,EAAAgD,UAAAhD,EAAAiD,SAAA7T,OACaoiB,EAAAxlB,UAAA,YAAA,GAmDlBwlB,EA7DA,CAAAte,EAAAU,SAAaxG,EAAAokB,cAAAA,uYCVb,IAEAxO,EAAA,SAAAnY,GAAA,SAAAmY,mDAIA,OAJ+BxX,UAAAwX,EAAAnY,GAC3B2J,OAAAC,eAAAuO,EAAAhX,UAAA,mBAAA4G,IAAA,WACI,MAAA,yCAERoQ,EAJA,CAFA/U,EAAA,gCAMAyG,kBAJatH,EAAA4V,UAAAA,EAWb,SAAAC,GACIA,EAAA,KAAA,OACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QAHJ,CAIA7V,EAAA6V,WAAA7V,EAAA6V,gdCdqB,IAAAxQ,EAAA,8JAaHK,MAAA,SAAA6pB,GACVlqB,EAAA+b,eACAS,GAAA0D,OAAAgK,mBAEU7pB,MAAA,SAAA6pB,GACVlqB,EAAA+b,eACAS,GAAA2D,OAAA+J,qBAEY7pB,MAAA,SAAAwuB,qBAKDxuB,MAAA,SAAAyuB,GACX,GAAA9uB,EAAA+b,cAAA,CACA,IAAApc,EAAA6c,GAAAuS,0BAEApvB,EAAAqvB,IAAAF,EACAnvB,EAAAC,MAAA,EACAD,EAAAsvB,UAAA,EACAtvB,EAAArC,OACAkf,GAAA2D,OAAA,WACIxgB,EAAArC,SAEJ/E,KAAAoH,IAAAA,yBAEgBU,MAAA,SAAAP,GAChBE,EAAA+b,gBACAxjB,KAAAoH,MAAApH,KAAAoH,IAAAG,OAAAA,GACAvH,KAAAuH,OAAAA,sBAEaO,MAAA,SAAA/F,EAAAC,EAAA20B,EAAAC,EAAAlT,EAAAmT,EAAAnyB,EAAAoB,GACb,IAAA2B,EAAA+b,cAAA,OAAA,KACA,IAAAsT,GAAA,EACApc,QAAAC,KAAA,8CAAA5Y,EAAA,IAAAC,EAAA,QAAA20B,EAAA,IAAAC,GACA,IAAAG,EAAA9S,GAAA+S,aACIj1B,EAAAA,EACAC,EAAAA,EACA6B,MAAA8yB,EACA7yB,OAAA8yB,EACAH,IAAA/S,EACAuT,OAAA,GACAC,UAAA,OACAC,UAAA,EACAT,SAAAhyB,IAoCJ,OAjCA,IAAA1E,KAAAuH,SAAAwvB,EAAAK,OAAA,GACAL,EAAAM,QAAA,WACIP,GAAA,EACAhxB,IACAixB,EAAAlxB,YAEJkxB,EAAAO,QAAA,WACIR,GAAA,EACAhxB,IACAixB,EAAAlxB,YAGJsjB,WAAA,WACI4N,IAIA,iBADAA,EAAAlP,QAAA5e,MAAA,KAEIyR,QAAAC,KAAA,yCAAAoc,EAAAlP,QAAA5e,OACA6tB,GAAA,EACAhxB,IACAixB,EAAAlxB,aAEP,KAEDsjB,WAAA,WAEI2N,IAEIC,GAAAA,EAAAlxB,UACAC,MAEP+wB,GACDE,oBAEYjvB,MAAA,SAAA4b,EAAA6T,EAAAC,EAAAC,GACZ,IAAAC,EAAAjwB,EAAAiwB,SAEAzT,GAAA0T,cACIjU,IAAAA,EACAkU,OAAA,GACAC,SAAA,GACAvV,QAAA,SAAAvL,GACI2D,QAAAC,KAAA,6BAAA5D,EAAA+gB,YAEA7T,GAAA8T,uBAAAC,UACIC,aAAAlhB,EAAAkhB,aACAJ,SAAAH,EAAAH,EACAjV,QAAA,SAAAvL,GACI2D,QAAAC,KAAA,6BAAA5D,EAAAmhB,eACAV,EAAAzgB,EAAAmhB,gBAEJ/T,KAAA,SAAAkE,GACI3N,QAAAC,KAAA,6BAAA0N,EAAA8P,YAKZhU,KAAA,SAAAkE,GACI3N,QAAAC,KAAA,6BAAA0N,EAAA8P,QACAV,EAAApP,mCASevgB,MAAA,SAAAyvB,EAAA/G,GACvBvM,GAAA8T,uBAAAK,QACIb,KAAAA,EACAjV,QAAA,WACIkO,GAAA,IAEJrM,KAAA,WACIqM,GAAA,wBAII1oB,MAAA,SAAAyvB,EAAAC,EAAAC,GACZxT,GAAA8T,uBAAAM,UACIR,SAAAN,EACAjV,QAAA,SAAAvL,GACI2D,QAAAC,KAAA,6BAAA5D,GACAygB,EAAAzgB,IAEJoN,KAAA,SAAAkE,GACI3N,QAAAC,KAAA,6BAAA0N,EAAA8P,QACAV,EAAApP,iCAUavgB,MAAA,SAAA4b,EAAA6T,EAAA5xB,GAErB,IAAA2yB,OAAA,EAIIA,KAHJ5U,GAAA,KAAAA,GAKA,IAAAE,EAAAnc,EAAAiwB,SAAAH,EAEA9vB,EAAA8oB,oBAAA3M,EAAA,SAAA4M,IACI,IAAAA,GACI9V,QAAAC,KAAA,gDAAA4c,GAEA5xB,EAAAie,IAGA0U,GACI5d,QAAAC,KAAA,0CAAA4c,GACA9vB,EAAA8wB,SAAA7U,EAAA6T,EAAA,SAAAW,GACIxd,QAAAC,KAAA,6BAAAud,GACAvyB,EAAAuyB,IACH,SAAA7P,GACG3N,QAAAC,KAAA,6BAAA0N,GACA1iB,EAAA,UAGJ+U,QAAAC,KAAA,0CAAA4c,GAEA5xB,EAAA,4BAMCmC,MAAA,SAAAA,GACbL,EAAA+b,gBACA9I,QAAAC,KAAA,6EAAA7S,GAEAmc,GAAAM,qBAAAC,aACIC,SACIphB,KAAA,UACAqhB,SAAA,OACAzkB,UAAA,QACAsN,KAAAzF,wBA1MUF,IAAA,WAClB,GAAAH,EAAA+b,cACA,OAAAS,GAAAuU,IAAAC,eAAA,2BAEuB7wB,IAAA,WACvB,OAAApI,GAAAk5B,IAAAC,WAAAn5B,GAAAk5B,IAAAE,cAGInxB,EAAAoxB,YACA,SAVS,GAAAz2B,EAAAkC,QAAAmD,4ECUrB,SAAA8gB,EAAAtU,GACC,OAAA5S,KAAAwR,MAAAxR,KAAAC,SAAA2S,qGAdD7R,EAAAqX,UAAA,SAAAwO,GACC,OAAA,IAAA7O,QAAA,SAAAG,EAAAC,GACCha,GAAA0oB,OAAAC,QAAAF,EAAAzoB,GAAA4oB,YAAA,SAAAC,EAAAvQ,GACC,GAAAuQ,EAAS,MAAAA,EACT9O,EAAAzB,QAKH1V,EAAAgV,WAAA,WACC,OAAA/V,KAAAinB,MAAAjnB,KAAAC,WAGDc,EAAAmmB,aAAAA,EAIAnmB,EAAAuV,YAAA,WAA4B,IAAA,IAAAxL,KAAAiC,EAAA,EAAAA,EAAAnO,UAAAiH,OAAAkH,IAAAjC,EAAAiC,GAAAnO,UAAAmO,GAC3B,OAAAjC,EAAAoc,EAAApc,EAAAjF,gKClBK,IAAA3H,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAGNo5B,GAHMv5B,EAAAK,SAGN,SAAAC,GAAA,SAAAi5B,mDA6CA,OA7C0Bt4B,UAAAs4B,EAAAj5B,GAItBi5B,EAAA93B,UAAAwC,MAAA,WACI,IAAA8K,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAUAyqB,EAAA,SAAAC,GAEI,GAAAA,EAAA9xB,QAAA,EAAe,OAAA,EAGf,IAFA,IAAA+xB,GAAA,EACArG,EAAAoG,EAAA,GACAt1B,EAAA,EAAAA,EAAAs1B,EAAA9xB,OAAA,EAAAxD,IACIkvB,EAAAoG,EAAAt1B,GAEAs1B,EAAAt1B,GAAAs1B,EAAAt1B,EAAA,KACIs1B,EAAAt1B,GAAAs1B,EAAAt1B,EAAA,GACAs1B,EAAAt1B,EAAA,GAAAkvB,EACAqG,GAAA,GAIR,OAAAA,IAEJ,SAAAD,GAEI,IADA,IAAAnC,EAAA,IACAA,KAAA,IACIkC,EAAAC,OAGRE,CAAA5qB,GACA,IAAA6qB,EAAA,GACA7qB,EAAA1I,QAAA,SAAAwzB,GACID,GAAAC,EAAA,MAEJ1e,QAAA2e,MAAAF,IA3CKL,EAAA32B,YADZzC,GACYo5B,GAAb,CAAAt5B,GAAA4G,YAAahE,EAAA02B,KAAAA","sourcesContent":["const {ccclass,property} = cc._decorator;\r\n@ccclass\r\nexport class Shake extends cc.ActionInterval {\r\n    private _initial_x: number = 0;\r\n    private _initial_y: number = 0;\r\n    private _strength_x: number = 0;\r\n    private _strength_y: number = 0; \r\n    private _total_x: number = 0;\r\n    private _total_y: number = 0;\r\n    /** \r\n     * 创建抖动动画\r\n     * @param {number} duration     动画持续时长     \r\n     * @param {number} strength_x   抖动幅度： x方向     \r\n     * @param {number} strength_y   抖动幅度： y方向     \r\n     * @returns {Shake}     \r\n     * */\r\n    public static create(duration: number, strength_x: number, strength_y: number): Shake {\r\n        let act: Shake = new Shake();\r\n        act.initWithDuration(duration, strength_x, strength_y);\r\n        return act;\r\n    }\r\n    public initWithDuration(duration: number, strength_x: number, strength_y: number): boolean {\r\n        cc.ActionInterval.prototype['initWithDuration'].apply(this, arguments);\r\n        this._strength_x = strength_x;\r\n        this._strength_y = strength_y;\r\n        return true;\r\n    }\r\n    public fgRangeRand(min: number, max: number): number {\r\n        let rnd: number = Math.random();\r\n        return rnd * (max - min) + min;\r\n    }\r\n    public update(time: number): void {\r\n        let randx = this.fgRangeRand(-this._strength_x, this._strength_x);\r\n        let randy = this.fgRangeRand(-this._strength_y, this._strength_y);\r\n\r\n        //let position = this.getTarget().getPosition();\r\n        this.getTarget().setPosition(randx + this._initial_x, randy + this._initial_y);\r\n        //根据当前的位置来震动\r\n        //this.getTarget().setPosition(randx + position.x, randy + position.y);\r\n        //this._total_x += randx;\r\n        //this._total_y += randy;\r\n    }\r\n    public startWithTarget(target: cc.Node): void {\r\n        cc.ActionInterval.prototype['startWithTarget'].apply(this, arguments);\r\n        this._initial_x = target.x;\r\n        this._initial_y = target.y;\r\n    }\r\n    public stop(): void {\r\n        //let position = this.getTarget().getPosition();\r\n        this.getTarget().setPosition(new cc.Vec2(this._initial_x, this._initial_y));\r\n        //this.getTarget().setPosition(new cc.Vec2(position.x - this._total_x, position.y - this._total_y));\r\n        cc.ActionInterval.prototype['stop'].apply(this);\r\n    }\r\n}\r\n@ccclass\r\nexport class Fader extends cc.ActionInterval{\r\n    private _initColor : cc.Color;\r\n    private _color: cc.Color = cc.color(255,255,255);\r\n    private _stepR:number;\r\n    private _stepB:number;\r\n    private _stepG:number;\r\n    /**\r\n     * 创建渐变动画\r\n     * @param {number} duration     动画持续时长     \r\n     * @param {cc.Color} color      颜色\r\n     * @returns {Fader}     \r\n     * */\r\n    public static create(duration: number, color : cc.Color): Fader {\r\n        let act: Fader = new Fader();\r\n        act.initWithDuration(duration, color);\r\n        return act;\r\n    }\r\n    public initWithDuration(duration: number, color : cc.Color): boolean {\r\n        cc.ActionInterval.prototype['initWithDuration'].apply(this, arguments);\r\n        this._color = color;\r\n        return true;\r\n    }\r\n    public update(time: number): void {\r\n        this.getTarget().color = cc.color(\r\n            this._initColor.getR() + this._stepR * time,\r\n            this._initColor.getG() + this._stepG * time,\r\n            this._initColor.getB() + this._stepB * time\r\n        );\r\n    }\r\n    public startWithTarget(target: cc.Node): void {\r\n        cc.ActionInterval.prototype['startWithTarget'].apply(this, arguments);\r\n\r\n        this._initColor = this.getTarget().color;\r\n        this._stepR = this._color.getR() - target.color.getR();\r\n        this._stepG = this._color.getG() - target.color.getG();\r\n        this._stepB = this._color.getB() - target.color.getB();\r\n    }\r\n    public stop(): void {\r\n        this.getTarget().color = this._color;\r\n        cc.ActionInterval.prototype['stop'].apply(this);\r\n    }\r\n}","import { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class Animal extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n\r\n    @property\r\n    type = ''\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n    }\r\n    start(){\r\n        super.start();\r\n    }\r\n\r\n    //重设动物坐标\r\n    rePositonAnimal(i) {\r\n        let {\r\n            width,\r\n            height\r\n        } = this.mMdl.animalTextureRect\r\n        let offsetRatio = {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n        i === 0 && (offsetRatio = {\r\n            x: -1,\r\n            y: 1\r\n        })\r\n        i === 1 && (offsetRatio = {\r\n            x: 1,\r\n            y: 1\r\n        })\r\n        i === 2 && (offsetRatio = {\r\n            x: 1,\r\n            y: -1\r\n        })\r\n        i === 3 && (offsetRatio = {\r\n            x: -1,\r\n            y: -1\r\n        })\r\n        this.node.setPosition(offsetRatio.x * width / 2, offsetRatio.y * height / 2);\r\n    }\r\n\r\n}","// Learn TypeScript:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {\r\n    ccclass,\r\n    property\r\n} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ArrowTipView extends cc.Component {\r\n    @property(Number)\r\n    public force: number = 200;\r\n    @property(Number)\r\n    public cycle: number = 1;\r\n    @property(Number)\r\n    public duration: number = 3;\r\n    @property(Boolean)\r\n    public isAutoPlay: boolean = false;\r\n    @property(cc.Node)\r\n    public left: cc.Node = null;\r\n    @property(cc.Node)\r\n    public right: cc.Node = null;\r\n\r\n    private isPlay;\r\n    private completeList;\r\n    onLoad() {\r\n        this.completeList = [];\r\n        this.isPlay = false;\r\n    }\r\n\r\n    start() {\r\n        if (this.isAutoPlay) {\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    config(force, cycle, duration) {\r\n        this.force = force;\r\n        this.cycle = cycle;\r\n        this.duration = duration;\r\n        return this;\r\n    }\r\n\r\n    play() {\r\n        this.isPlay = true;\r\n\r\n        if (this.left) {\r\n            this.left.opacity = 0;\r\n            //重复左右摆动\r\n            let seq = cc.repeatForever(\r\n                cc.sequence(\r\n                    cc.spawn(\r\n                        cc.moveBy(0, this.force, 0),\r\n                        cc.fadeOut(0)\r\n                    ),\r\n                    cc.fadeIn(this.cycle*0.35),\r\n                    cc.spawn(\r\n                        cc.moveBy(this.cycle, -this.force, 0),\r\n                        cc.fadeOut(this.cycle*0.60)\r\n                    )\r\n                ));\r\n            this.left.runAction(seq);\r\n        }\r\n        if (this.right) {\r\n            this.right.opacity = 0;\r\n            //重复左右摆动\r\n            let seq = cc.repeatForever(\r\n                cc.sequence(\r\n                    cc.spawn(\r\n                        cc.moveBy(0, -this.force, 0),\r\n                        cc.fadeOut(0)\r\n                    ),\r\n                    cc.fadeIn(this.cycle*0.35),\r\n                    cc.spawn(\r\n                        cc.moveBy(this.cycle, this.force, 0),\r\n                        cc.fadeOut(this.cycle*0.60)\r\n                    )\r\n                ));\r\n            this.right.runAction(seq);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    stop() {\r\n        if (this.left) {\r\n            this.left.stopAllActions();\r\n        }\r\n        if (this.right) {\r\n            this.right.stopAllActions();\r\n        }\r\n        this.complete();\r\n    }\r\n\r\n    private complete() {\r\n        this.isPlay = false;\r\n        //执行完成回调\r\n        this.completeList.forEach(complete => {\r\n            complete();\r\n        });\r\n        this.node.destroy();\r\n    }\r\n\r\n    onComplete(complete) {\r\n        this.completeList.push(complete);\r\n        return this;\r\n    }\r\n    update (dt) {\r\n        if(!this.duration || this.duration < 0){\r\n            this.stop();\r\n            return;\r\n        }else{\r\n            this.duration -= dt;\r\n        }\r\n    }\r\n}","import {Singleton} from \"./Singleton\";\r\nimport {IManager} from \"./Manager\";\r\nimport Common from \"../Common\";\r\n\r\nexport default class AudioManager extends Singleton implements IManager {\r\n    public isInit = false;\r\n    public bgm: cc.AudioSource;\r\n    public audios: Array < cc.AudioSource > ;\r\n    private audioMap: Map < any, any >\r\n    private playLoopCount;\r\n\r\n    protected onConstructor() {\r\n        this.playLoopCount = 0;\r\n        this.audioMap = new Map();\r\n    }\r\n\r\n    public play(key) {\r\n        if (this.hasAudio(key)) {\r\n            let clip = this.getAudio(key);\r\n            let isPlay = false;\r\n            if (this.audios.length != 0) {\r\n                if(this.audios[this.playLoopCount]){\r\n                    this.audios[this.playLoopCount].clip = clip;\r\n                    this.audios[this.playLoopCount].play();\r\n                }else{\r\n                    this.playLoopCount=0;\r\n                }\r\n                if(this.playLoopCount < this.audios.length - 1){\r\n                    this.playLoopCount+=1;\r\n                }else{\r\n                    this.playLoopCount=0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public playBgm() {\r\n        if (this.bgm.clip) {\r\n            this.bgm.loop = true;\r\n            this.bgm.play();\r\n        }\r\n    }\r\n    public setVolume(volume){\r\n        //设置所有播放源的音量\r\n        if (this.audios.length != 0) {\r\n            this.audios.forEach((audio : cc.AudioSource)=> {\r\n                audio.volume = volume;\r\n            });\r\n        }\r\n        //设置微信API作用的BGM的音量\r\n        Common.WxGameApi.setBgmVolume(volume);\r\n    }\r\n    hasAudio(key): boolean {\r\n        return this.audioMap.has(key);\r\n    }\r\n    getAudio(key): cc.AudioClip {\r\n        return this.audioMap.get(key);\r\n    }\r\n    setAudio(key, value) {\r\n        this.audioMap.set(key, value);\r\n    }\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\nexport class AudioUtil extends Singleton implements IUtil{\r\n\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IInjectBinder, __IC_InjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\n\r\n//引用注入装饰器\r\nexport class BackHomeCommand extends Command{\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n    \r\n    execute(){\r\n        //console.info(\"[游戏结束]\");\r\n        this.gameOver();\r\n    }\r\n\r\n    gameOver() {\r\n        this.inj.unbindAllMark();\r\n        cc.director.loadScene('Begin')\r\n    }\r\n}","import Common from \"../Common\";\n\nconst {ccclass, property} = cc._decorator\n\n@ccclass\nexport default class Begin extends cc.Component {\n\n/*     @property(cc.Node)\n    playButton = null */\n\n    onLoad () {\n        \n    }\n\n    beginGame() {\n        cc.director.loadScene('Game')\n    }\n\n    lookRank(){\n        cc.director.loadScene(\"Rank\");\n    }\n\n    option(event:cc.Event.EventTouch){\n        cc.director.loadScene(\"Option\");\n    }\n}","//namespace ioc{\r\n    export module BindingConst{\r\n        //定义空常量\r\n        export const NULL = Symbol(\"NULL\");\r\n    }\r\n//}","import { IBinding,Binding } from \"./Binding\"\r\nimport {BindingConst} from \"./BindConst\"\r\nimport {IConstructorName} from \"../IocConst\"\r\n\r\nexport interface IBinder {\r\n    bind(key) : IBinding;\r\n    unbind(key, name);\r\n    //根据绑定器实例生成一个空的绑定状态\r\n    getRawBinding() : IBinding;\r\n    //获取绑定状态\r\n    getBinding(key : any, name : any) : IBinding;\r\n    getBindingMap(key : any) : Map<any,IBinding>;\r\n    resolveBinding( binding : IBinding,  key : any);\r\n}\r\nexport class __IC_Binder extends IConstructorName{\r\n    get constructorName(){return \"IBinder\";}\r\n}\r\nexport class Binder implements IBinder {\r\n    //绑定状态映射字典\r\n    protected _bindings: any;\r\n    //绑定状态白名单\r\n    //protected _bindingWhitelist : Array<object> ;\r\n    constructor() {\r\n        this.init();\r\n    }\r\n    /**\r\n     * 初始化函数，通过重写该函数指定映射字典的实例\r\n     */\r\n    init(){\r\n        //初始化绑定状态映射\r\n        this._bindings = new Map < any, Map < any, IBinding >> ();\r\n    }\r\n    /**\r\n     * 解析器，将正在绑定中的状态信息解析，使之成为可存储的数据绑定到映射字典。\r\n     * @param binding 绑定的状态\r\n     */\r\n    resolver(binding: IBinding) {\r\n        let key = binding.key;\r\n        this.resolveBinding(binding,key);\r\n    }\r\n    /**\r\n     * 解析绑定状态\r\n     * @param binding 绑定状态\r\n     * @param key 键值\r\n     */\r\n    resolveBinding( binding : IBinding,  key : any){\r\n        //检查绑定状态是否存在别名\r\n        let bindingName = (binding.name == null) ? BindingConst.NULL : binding.name;\r\n        let dict : Map<any,IBinding>;\r\n        //检查绑定状态字典已经存在键值\r\n        if ((this._bindings.has(key))) {\r\n            //获取绑定映射\r\n            dict = this._bindings.get(key);\r\n            //检查绑定映射是否存在别名\r\n            if (dict.has(bindingName)) {\r\n                //获取已经存在的绑定映射\r\n                let existingBinding = dict.get(bindingName);\r\n                //检查合法性\r\n                if (existingBinding != binding) {\r\n                    //如果绑定值为空\r\n                    if (!existingBinding.value) {\r\n                        //移除无效的绑定别名\r\n                        dict.delete(bindingName);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //创建绑定映射\r\n            dict = new Map<any,IBinding>();\r\n            //添加绑定映射\r\n            this._bindings.set(key, dict);\r\n        }\r\n\r\n        //如果存在默认绑定状态并且等于当前绑定状态\r\n        if (dict.has(BindingConst.NULL) && dict.get(BindingConst.NULL) === binding) {\r\n            //删除默认绑定\r\n            dict.delete(BindingConst.NULL);\r\n        }\r\n\r\n        //添加或覆盖绑定状态\r\n        if (!dict.has(bindingName)) {\r\n            dict.set(bindingName, binding);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 绑定信号容器\r\n     * @param key 键值，可以是需要执行的全局信号名称或枚举\r\n     */\r\n    bind(key) : IBinding{\r\n        //创建一个绑定中状态\r\n        let binding = this.getRawBinding();\r\n        \r\n        //绑定标志\r\n        binding.bind(key);\r\n        return binding;\r\n    }\r\n    /**\r\n     * 解除绑定信号容器\r\n     * @param key 键值，需要绑定的键值\r\n     * @param name 别名，被绑定变量的别名\r\n     */\r\n    unbind(key, name) {\r\n        let checkKey = Binding.checkAbstract(key);\r\n        //如果绑定映射字典内包含键值\r\n        if (this._bindings.has(checkKey)) {\r\n            //直接获取键值映射的值\r\n            let dict = this._bindings.get(checkKey);\r\n            //检查是否存指定别名\r\n            let bindingName;\r\n            if(name){\r\n                bindingName = name;\r\n            }else{\r\n                bindingName = BindingConst.NULL;\r\n            }\r\n            if (dict.has(bindingName)) {\r\n                dict.delete(bindingName);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 生成默认的绑定状态\r\n     */\r\n    getRawBinding(): IBinding{\r\n        return new Binding(this.resolver.bind(this));\r\n    }\r\n    /**\r\n     * 根据键值和别名获取绑定器中的绑定状态\r\n     * @param key 键值\r\n     * @param name 别名\r\n     */\r\n    getBinding(key : any, name : any) : IBinding{\r\n        //查找是否存在键值\r\n        if(this._bindings.has (key))\r\n        {\r\n            let dict = this._bindings.get(key);\r\n            //如果别名不存在则使用默认值\r\n            if(!name){\r\n                name = BindingConst.NULL\r\n            }\r\n            //查找绑定状态是否存在别名\r\n            if (dict.has(name))\r\n            {\r\n                return dict.get(name);\r\n            }\r\n            else{\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取绑定状态映射表，返回键值的所有绑定状态\r\n     * @param key 被绑定的键值\r\n     */\r\n    getBindingMap(key : any) : any{\r\n        if(this._bindings.has(key)){\r\n            return this._bindings.get(key);\r\n        }\r\n    }\r\n}\r\n//}","import { IConstructorName } from \"../IocConst\";\r\n\r\n//namespace ioc {\r\nexport interface IBinding {\r\n    name: any;\r\n    key: any;\r\n    value: any;\r\n    bind(k:any):IBinding;\r\n    to(v:any):IBinding;\r\n    toName(n:any):IBinding;\r\n}\r\nexport class __IC_Binding extends IConstructorName{\r\n    get constructorName(){return \"IBinding\";}\r\n}\r\nexport class Binding implements IBinding {\r\n    protected _key: any;\r\n    protected _value: any;\r\n    protected _name: any;\r\n    protected _resolver: any;\r\n\r\n    public get key() {\r\n        return this._key;\r\n    }\r\n    public get value() {\r\n        return this._value;\r\n    }\r\n    public get name() {\r\n        return this._name;\r\n    }\r\n\r\n    constructor(resolver: any) {\r\n        this._resolver = resolver;\r\n\r\n        this._key = null;\r\n        this._value = null;\r\n        this._name = null;\r\n    }\r\n\r\n    /**\r\n     * 绑定标志到键值，返回此时的绑定状态。\r\n     * @param key 标志值，可以是需要执行的全局信号名称或枚举\r\n     */\r\n    bind(key) :IBinding{\r\n        this._key = Binding.checkAbstract(key);\r\n        return this;\r\n    }\r\n    /**\r\n     * 从正在绑定状态映射到实例，返回此时的绑定状态。\r\n     * @param value 绑定映射的值\r\n     */\r\n    to(value):IBinding {\r\n        this._value = value;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 实例的别名，用于区分不同的实例，返回此时的绑定状态。\r\n     * @param name 实例的别名\r\n     */\r\n    toName(name):IBinding {\r\n        this._name = name;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n    //判断是否为构造函数\r\n    public get isKeyConstructor():boolean{\r\n        return Binding.isConstructor(this._key);\r\n    }\r\n    //判断是否为构造函数\r\n    public get isValueConstructor():boolean{\r\n        return Binding.isConstructor(this._value);\r\n    }\r\n    public static isConstructor(value : object):boolean{\r\n        //如果不是一个函数则绝对不是构造函数\r\n        if(typeof value !== \"function\"){\r\n            return false;\r\n        }\r\n        //如果不能直接获取原型则不是构造函数\r\n        if(!value.prototype){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    public static checkAbstract(key){\r\n        //检查被绑定的对象是否为虚类\r\n        let constructorName;\r\n        if(key.constructorName){\r\n            constructorName = key.constructorName;\r\n            //console.info(\"[转化虚拟类]\"+ constructorName);\r\n        }else{\r\n            constructorName = key;\r\n            //console.info(\"[非虚拟类]\"+ constructorName.constructor.name);\r\n        }\r\n        return constructorName;\r\n    }\r\n}\r\n//}","import {\r\n    IBinding,\r\n    Binding\r\n} from \"../Bind/Binding\"\r\nimport {\r\n    __IC_InjectBinder,\r\n    IInjectBinder\r\n} from \"../Injector/InjectBinder\";\r\nimport {\r\n    CommandBinding\r\n} from \"./CommandBinding\";\r\nimport {\r\n    ISignal\r\n} from \"../Signal/Signal\"\r\nimport {\r\n    InjectBinding\r\n} from \"../Injector/InjectBinding\";\r\nimport {\r\n    ICommand,\r\n    __IC_Command\r\n} from \"./Command\";\r\nimport {\r\n    Pool\r\n} from \"../../Extensions/Pool\";\r\nimport {\r\n    CommandConst\r\n} from \"./CommandConst\"\r\nimport {\r\n    inject\r\n} from \"../Injector/InjectDecorator\";\r\nimport {\r\n    Binder\r\n} from \"../Bind/Binder\";\r\nimport {\r\n    ICommandBinder\r\n} from \"./ICommandBinder\";\r\n//全局注入数据绑定器\r\n\r\n\r\n/**\r\n * 指令绑定器\r\n */\r\nexport class CommandBinder extends Binder implements ICommandBinder {\r\n    //注入绑定器\r\n    @inject(__IC_InjectBinder)\r\n    public injectBinder: IInjectBinder;\r\n\r\n    //指令池\r\n    protected pools: Map < object, Pool >= new Map < object, Pool > ();\r\n\r\n    // Tracker for parallel commands in progress\r\n    protected activeCommands: Set < ICommand >= new Set < ICommand > ();\r\n    // Tracker for sequences in progress\r\n    protected activeSequences: Map < ICommand, CommandBinding > = new Map < ICommand, CommandBinding > ();\r\n    //是否使用池\r\n    public usePooling: boolean = false;\r\n    public getPool(type: object): Pool {\r\n        if (this.pools.has(type))\r\n            return this.pools.get(type);\r\n        return null;\r\n    }\r\n\r\n    public resolver(binding: IBinding) {\r\n        super.resolver(binding);\r\n        if (this.usePooling && (binding as CommandBinding).isPooled) {\r\n            if (binding.value != null) {\r\n                let that = this;\r\n                //检查被绑定的值是否有效\r\n                let values: object[] = binding.value as object[];\r\n                if (values.length === 0) {\r\n                    values = [];\r\n                    values.push(binding.value);\r\n                }\r\n\r\n                if (values && values.length > 0) {\r\n                    values.forEach((value) => {\r\n                        //如果找不到对应的池则创建\r\n                        if (that.pools.has(value) == false) {\r\n                            let myPool = this.makePoolFromType(value);\r\n                            that.pools.set(value, myPool);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    protected makePoolFromType(type): Pool {\r\n        //池构造函数作为类型使用\r\n        let poolType = type;\r\n        //预制实例缓存\r\n        this.injectBinder.bind(type).to(type);\r\n\r\n        //获取一个池实例\r\n        this.injectBinder.bind(Pool).to(Pool).toName(CommandConst.COMMAND_POOL);\r\n        let pool: Pool = this.injectBinder.getInstance(Pool, CommandConst.COMMAND_POOL) as Pool;\r\n        this.injectBinder.unbind(Pool, CommandConst.COMMAND_POOL);\r\n        pool.bind(poolType);\r\n\r\n        return pool;\r\n    }\r\n    //绑定状态映射字典\r\n    getRawBinding(): IBinding {\r\n        return new CommandBinding(this.resolver.bind(this));\r\n    }\r\n    bind(key: any): CommandBinding {\r\n        return super.bind(key) as CommandBinding;\r\n    }\r\n    //调用指令\r\n    protected invokeCommand(cmd: object, binding: CommandBinding, args, depth: number): ICommand {\r\n        let command: ICommand = this.createCommand(cmd, args);\r\n        command.sequenceId = depth;\r\n        this.trackCommand(command, binding);\r\n        this.executeCommand(command,args);\r\n        return command;\r\n    }\r\n    //\r\n    protected createCommand(cmd: object, data: object): ICommand {\r\n        let command: ICommand = this.getCommand(cmd);\r\n\r\n        if (command == null) {\r\n            let msg: string = \"A Command \";\r\n            if (data != null) {\r\n                msg += \"tied to data \" + data.toString();\r\n            }\r\n            msg += \" could not be instantiated.\\nThis might be caused by a null pointer during instantiation or failing to override Execute (generally you shouldn't have constructor code in Commands).\";\r\n            throw new Error(msg);\r\n        }\r\n\r\n        command.data = data;\r\n        return command;\r\n    }\r\n    //获取指令实例\r\n    protected getCommand(type: object): ICommand {\r\n        //如果使用池则检查是否已经存在相应的实例\r\n        if (this.usePooling && this.pools.has(type)) {\r\n            let pool: Pool = this.pools.get(type);\r\n            let command: ICommand = pool.getInstance() as ICommand;\r\n            //是否存在对应的实例\r\n            if(command){\r\n                //检查是否已经清理\r\n                if (command.isClean) {\r\n                    this.injectBinder.injector.inject(command, null);\r\n                    command.deploy();\r\n                }\r\n            }else{\r\n                //获取实例\r\n                command = this.injectBinder.getInstance(type,null);\r\n                //为池添加实例缓存\r\n                pool.add(command);\r\n            }\r\n            return command;\r\n        } else {\r\n            this.injectBinder.bind(__IC_Command).to(type);\r\n            let command: ICommand = this.injectBinder.getInstance(__IC_Command, null);\r\n            this.injectBinder.unbind(__IC_Command, null);\r\n            return command;\r\n        }\r\n    }\r\n    protected trackCommand(command: ICommand, binding: CommandBinding) {\r\n        if (binding.isSequence) {\r\n            this.activeSequences.set(command, binding);\r\n        } else {\r\n            this.activeCommands.add(command);\r\n        }\r\n    }\r\n    //执行指令\r\n    protected executeCommand(command: ICommand,args) {\r\n        if (command == null) {\r\n            return;\r\n        }\r\n        command.execute(...args);\r\n    }\r\n    /**\r\n     * 信号调用回掉函数\r\n     * @param trigger 触发的信号\r\n     * @param data 数据\r\n     */\r\n    public onDispose(trigger: object , ...args) {\r\n        //尝试获取绑定状态\r\n        let binding: CommandBinding = this.getBinding(trigger, null) as CommandBinding;\r\n        if (binding != null) {\r\n            //是否处于执行序列中\r\n            if (binding.isSequence) {\r\n                //加入执行队列\r\n                this.next(binding, args, 0,);\r\n            } else {\r\n                //获取被绑定的指令对象\r\n                let values: object[] = binding.value as object[];\r\n                let aa = values.length + 1;\r\n                for (let a = 0; a < aa; a++) {\r\n                    this.next(binding, args , a,);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //下一次即将执行的指令\r\n    protected next(binding: CommandBinding, args, depth: number) {\r\n        let values: object[] = binding.value as object[];\r\n        if (values.length === 0) {\r\n            values = [];\r\n            values.push(binding.value);\r\n        }\r\n\r\n        if (depth < values.length) {\r\n            let cmd = values[depth];\r\n            let command: ICommand = this.invokeCommand(cmd, binding, args, depth);\r\n            this.releaseCommand(command);\r\n        } else {\r\n            this.disposeOfSequencedData(args);\r\n            //是否仅执行一次\r\n            if (binding.isOnce) {\r\n                //解除绑定\r\n                this.unbind(binding, null);\r\n            }\r\n        }\r\n    }\r\n    //EventCommandBinder (and perhaps other sub-classes) use this method to dispose of the data in sequenced commands\r\n    protected disposeOfSequencedData(data: object) {\r\n        //No-op. Override if necessary.\r\n    }\r\n    //释放指令，使其进入池\r\n    public releaseCommand(command: ICommand) {\r\n        //有时会需要执行一些耗时的异步操作，如果指令被用户保持则不进行释放，默认情况下都是自动释放的\r\n        if (!command.isRetain) {\r\n            //使用构造函数作为类型\r\n            let t = command.constructor;\r\n            if (this.usePooling && this.pools.has(t)) {\r\n                this.pools.get(t).returnInstance(command);\r\n            }\r\n            if (this.activeCommands.has(command)) {\r\n                this.activeCommands.delete(command);\r\n            } else if (this.activeSequences.has(command)) {\r\n                let binding: CommandBinding = this.activeSequences.get(command);\r\n                let data = command.data;\r\n                this.activeSequences.delete(command);\r\n                this.next(binding, data, command.sequenceId + 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class SignalCommandBinder extends CommandBinder {\r\n    //启用池\r\n    public usePooling : boolean = true;\r\n    //重写解析绑定状态函数\r\n    resolveBinding(binding: IBinding, key: any) {\r\n        super.resolveBinding(binding, key);\r\n        //如果已经存在了则不能再次绑定\r\n        if (this._bindings.has(key)) {\r\n            let signal: ISignal = key;\r\n            signal.addListener(this.onDispose.bind(this)); //Do normal bits, then assign the commandlistener to be reactTo\r\n        }\r\n    }\r\n    //重写绑定方法\r\n    public bind(value: object): CommandBinding {\r\n        //获取绑定状态\r\n        let binding: InjectBinding = this.injectBinder.getBinding(value, null);\r\n        let signal: ISignal = null;\r\n        //检查参数值是否为构造函数\r\n        if (Binding.isConstructor(value)) {\r\n            //如果尚未进行注入则注入一个单例\r\n            if (binding == null) {\r\n                binding = this.injectBinder.bind(value);\r\n                binding.toSingleton();\r\n            }\r\n            signal = this.injectBinder.getInstance(value, null) as ISignal;\r\n        }\r\n        //如果信号存在则绑定信号，否则直接绑定值\r\n        if (signal) {\r\n            return super.bind(signal);\r\n        } else {\r\n            return super.bind(value);\r\n        }\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key: any, name: any): CommandBinding {\r\n        let signal;\r\n        //检查键值是否为构造函数\r\n        if (Binding.isConstructor(key)) {\r\n            //参数应该是一个信号或信号的构造函数，而不是其他的值\r\n            signal = this.injectBinder.getInstance(key, name);\r\n        } else {\r\n            //信号是一个实例\r\n            signal = key;\r\n        }\r\n        return super.getBinding(signal, name) as CommandBinding;\r\n    }\r\n    protected invokeCommand(cmd, binding: CommandBinding, args, depth: number): ICommand {\r\n        let signal: ISignal = binding.key;\r\n        let command: ICommand = this.createCommandForSignal(cmd, args); //Special signal-only command creation\r\n        command.sequenceId = depth;\r\n        this.trackCommand(command, binding);\r\n        this.executeCommand(command,args);\r\n        return command;\r\n    }\r\n    // Create a Command and bind its injectable parameters to the Signal types\r\n    protected createCommandForSignal(cmd, args): ICommand {\r\n        let that = this;\r\n\r\n        if (args != null) {\r\n\r\n            let signalData: [] = args as[];\r\n\r\n            //Iterate each signal type, in order. \r\n            //Iterate values and find a match\r\n            //If we cannot find a match, throw an error\r\n            let injectedTypes = new Set < any > ();\r\n            let values = [signalData];\r\n\r\n            /* if(signalTypes&&signalTypes.length>0){\r\n            signalTypes.forEach((type)=>{\r\n                if (!injectedTypes.has(type)) // Do not allow more than one injection of the same Type\r\n                {\r\n                    let foundValue : boolean= false;\r\n                    for(let i = 0;i<values.length;i++){\r\n                        if (values[i] != null)\r\n                        {\r\n                            that.injectBinder.bind(type).toValue(values[i]).toInject(false);\r\n                            injectedTypes.add(type);\r\n                            //values[i]=null;\r\n                            foundValue = true;\r\n                            break;\r\n                        }\r\n                        else //Do not allow null injections\r\n                        {\r\n                            throw new Error(\"SignalCommandBinder attempted to bind a null value from a signal to Command: \" + cmd.GetType() + \" to type: \" + type);\r\n                        }\r\n                    }\r\n                    if (!foundValue)\r\n                    {\r\n                        throw new Error(\"Could not find an unused injectable value to inject in to Command: \" + cmd.GetType() + \" for Type: \" + type);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    throw new Error(\"SignalCommandBinder: You have attempted to map more than one value of type: \" + type +\r\n                        \" in Command: \" + cmd.GetType() + \". Only the first value of a type will be injected. You may want to place your values in a VO, instead.\");\r\n                }\r\n            })\r\n            }*/\r\n        }\r\n        let command: ICommand = that.getCommand(cmd);\r\n        command.data = args;\r\n/*         if (signalTypes && signalTypes.length > 0) {\r\n            signalTypes.forEach((typeToRemove) => {\r\n                that.injectBinder.unbind(typeToRemove, null);\r\n            })\r\n        } */\r\n        return command;\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\n\r\nexport class CommandBinding extends Binding{\r\n    //是否在执行序列中\r\n    protected _isSequence : boolean;\r\n    //是否仅执行一次\r\n    protected _isOnce : boolean;\r\n    //是否在对象池中\r\n    public isPooled : boolean\r\n    \r\n    public get isSequence() : boolean{\r\n        return this._isSequence\r\n    }\r\n    public get isOnce() : boolean{\r\n        return this._isOnce;\r\n    }\r\n    public to(value) : CommandBinding{\r\n        return super.to(value) as CommandBinding\r\n    }\r\n    public toName(name) : CommandBinding{\r\n        return super.toName(name) as CommandBinding;\r\n    }\r\n    /**\r\n     * 是否进入池\r\n     */\r\n    public Pooled()\r\n    {\r\n        this.isPooled = true;\r\n        this._resolver (this);\r\n        return this;\r\n    }\r\n}","//注入状态类型枚举\r\nexport enum CommandConst\r\n{\r\n    /// Temporary marker for any pool instantiated by the CommandBinder\r\n    COMMAND_POOL = \"COMMAND_POOL\",\r\n}","import { ICommandBinder, __IC_CommandBinder } from \"./ICommandBinder\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../Injector/InjectBinder\";\r\nimport { inject } from \"../Injector/InjectDecorator\";\r\nimport { IConstructorName } from \"../IocConst\";\r\n\r\nexport interface ICommand{\r\n    commandBinder : ICommandBinder;\r\n    injectBinder : IInjectBinder;\r\n    //执行指令\r\n    execute(...args);\r\n    //本条指令的操作ID，用于在队列中寻找下一条指令\r\n    sequenceId : number;\r\n    data : any;\r\n    args : any;\r\n    deploy();\r\n    clean();\r\n    isClean : boolean;\r\n    isRetain : boolean;\r\n    //执行异步操作时可以使用保留指令\r\n    retain();\r\n    //释放被异步操作锁定的指令\r\n    release();\r\n}\r\nexport class __IC_Command extends IConstructorName{\r\n    get constructorName(){return \"ICommand\";}\r\n}\r\nexport class Command implements ICommand{\r\n    // The InjectionBinder for this Context\r\n\t@inject(__IC_InjectBinder)\r\n    public injectBinder : IInjectBinder;\r\n    // Back reference to the CommandBinder that instantiated this Commmand\r\n\t@inject(__IC_CommandBinder)\r\n\tpublic  commandBinder : ICommandBinder;\r\n    public sequenceId;\r\n    public data;\r\n    public args;\r\n    private _clean = false;\r\n    public deploy(){\r\n        this._clean = false;\r\n    }\r\n    public clean(){\r\n        this._clean = true;\r\n    }\r\n    public get isClean(){\r\n        return this._clean;\r\n    };\r\n    private _retain = false;\r\n    //保持指令\r\n    public retain()\r\n    {\r\n        this._retain = true;\r\n    }\r\n    public release()\r\n    {\r\n        this._retain = false\r\n    }\r\n    public get isRetain() : boolean{\r\n        return this._retain;\r\n    }\r\n    //重新释放\r\n    public restore()\r\n    {\r\n        this.injectBinder.injector.uninject (this);\r\n        this.clean();\r\n    }\r\n    //执行指令\r\n    public execute(...args){\r\n\r\n    }\r\n}","import PersistRoot from \"./PersistRoot\";\r\n\r\n//全局变量\r\n export default class  Common{\r\n    //操作模式\r\n    static operatorMode = 0;\r\n    static enableAudio = 1;\r\n    static viedo = null\r\n    static viedoHandle = null;\r\n    static WxGameApi = null;\r\n    static version = \"v1.6.6\";\r\n    static isInit : boolean = false;\r\n    static persistRootNode : PersistRoot= null;\r\n    static root = null;\r\n    static shareTickets = [];\r\n    static isHasWxRank = false;\r\n    static maxScore = 0;\r\n    //用户的唯一标识\r\n    static userOpenId = 0;\r\n    //会话密钥\r\n    static session_key = \"\";\r\n    //用户全局唯一标识\r\n    static unionId = 0;\r\n}","import {IRoot} from \"./IRoot\"\r\nimport {__IC_InjectBinder,InjectBinder} from \"../Injector/InjectBinder\";\r\nimport {CommandBinder , SignalCommandBinder } from \"../Command/CommandBinder\";\r\nimport {IocError, IConstructorName} from \"../IocConst\"\r\nimport { __IC_CommandBinder } from \"../Command/ICommandBinder\";\r\n\r\nexport interface IContext {\r\n    start(): IContext;\r\n    restart() : IContext;\r\n    //启动\r\n    launch();\r\n    /// Get the ContextView\r\n    getRoot(): any;\r\n    // Register a new context to this one\r\n    addCrossContext(context : IContext):IContext;\r\n    removeCrossContext(context : IContext);\r\n    //共用绑定器\r\n    crossContextBinder : InjectBinder;\r\n}\r\nexport class __IC_Context extends IConstructorName{\r\n    get constructorName(){return \"IContext\";}\r\n}\r\n\r\nexport class Context implements IContext {\r\n    //第一个被创建出来的环境容器\r\n    public static firstContext : IContext;\r\n    //应该以注入的方式获取\r\n    private _injectBinder : InjectBinder;\r\n    private _crossContextBinder : InjectBinder;\r\n    //注入绑定器\r\n    public get injectBinder(): InjectBinder {\r\n        if(!this._injectBinder){\r\n            this._injectBinder = new InjectBinder();\r\n        }\r\n        return this._injectBinder; \r\n    }\r\n    //设置全局注入绑定器\r\n    public set crossContextBinder(value){\r\n        this._crossContextBinder = value;\r\n    }\r\n    //这里使用注入绑定器代替全局绑定器\r\n    public get crossContextBinder(){\r\n        return this._crossContextBinder;\r\n    }\r\n    private _commandBinder : CommandBinder;\r\n    //指令绑定器\r\n    public get commandBinder(): CommandBinder {\r\n/*         //指令绑定器应该由注入产生\r\n        if(!this._commandBinder){\r\n            this._commandBinder = new CommandBinder();\r\n        } */\r\n        return this._commandBinder; \r\n    }\r\n    //根节点\r\n    root: IRoot;\r\n    //获取根节点\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n\r\n    constructor(root: any) {\r\n        if (Context.firstContext == null || Context.firstContext.getRoot() == null){\r\n            Context.firstContext = this;\r\n            this.crossContextBinder = this.injectBinder;\r\n\t\t}else{\r\n\t\t\tContext.firstContext.addCrossContext(this);\r\n        }\r\n        //设置根节点\r\n        this.setRoot(root);\r\n        //添加核心\r\n        this.addCore();\r\n        //启动环境容器\r\n        this.start();\r\n    }\r\n    //添加全局环境容器\r\n    public addCrossContext(context : IContext):IContext{\r\n        //共用注入绑定器\r\n        context.crossContextBinder= this.injectBinder;\r\n\t\treturn this;\r\n    }\r\n    //移除全局环境容器\r\n    public removeCrossContext(childContext: IContext)\r\n    {\r\n/*         if (childContext.crossContextBinder != null)\r\n        {\r\n            childContext.crossContextBinder = null;\r\n        } */\r\n    }\r\n\r\n    public setRoot(root: any): IContext {\r\n        this.root = root;\r\n        return this;\r\n    }\r\n    public restart() : IContext{\r\n        this.addCore();\r\n        this.start();\r\n        //console.info(\"[重启Ioc容器]\");\r\n        return this;\r\n    }\r\n    public start(): IContext {\r\n        this.instantiateCore();\r\n        this.mapBindings();\r\n        this.postBindings();\r\n        this.launch();\r\n\r\n        return this;\r\n    }\r\n    //启动容器\r\n    public launch() {\r\n        //console.info(\"Ioc容器启动\");\r\n    }\r\n    /**\r\n     * 初始化核心组件\r\n     */\r\n    protected instantiateCore() {\r\n        //实例化信号绑定器\r\n        this._commandBinder = this.injectBinder.getInstance(__IC_CommandBinder,null);\r\n    }\r\n    protected mapBindings() {\r\n\r\n    }\r\n    protected postBindings() {\r\n\r\n    }\r\n    protected addCore() {\r\n        //注入注入绑定器\r\n        this.injectBinder.bind(__IC_InjectBinder).toValue(this.injectBinder);\r\n        //注入信号绑定器\r\n        this.injectBinder.bind(__IC_CommandBinder).to(SignalCommandBinder).toSingleton();\r\n    }\r\n\r\n}\r\n//}","import { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { Shake } from \"../../lib/extensions/ActionExtension\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class CountDownView extends cc.Component {\r\n    @property(Number)\r\n    private value : number = 3;\r\n    @property(Number)\r\n    private time: number = 3;\r\n    @property(Boolean)\r\n    private isAutoPlay : boolean = false;\r\n\r\n    //单步运行的比率\r\n    private step : number;\r\n    //单步的持续时间\r\n    private stepDur : number;\r\n    private completeList;\r\n    private isPlay;\r\n    private label;\r\n\r\n    onLoad() {\r\n        //super.onLoad();\r\n        this.label = this.node.getComponent(cc.Label);\r\n        this.isPlay = false;\r\n        this.completeList = [];\r\n    }\r\n    start(){\r\n        //super.start();\r\n        if(this.isAutoPlay)this.play();\r\n    }\r\n    /**\r\n     * 配置\r\n     * @param start 起始值 \r\n     * @param duration 持续时间\r\n     */\r\n    config(start,duration){\r\n        this.time = duration;\r\n        this.value = start;\r\n\r\n        return this;\r\n    }\r\n    //播放\r\n    play(){\r\n        this.isPlay = true;\r\n        //如果持续时间或者开始时间为0\r\n        if(this.value ===0||this.time===0){\r\n            this.step = 0;\r\n        }\r\n        else{\r\n            this.step = this.value / this.time;\r\n            this.stepDur = this.time/this.value;\r\n        } \r\n        return this;\r\n    }\r\n    onComplete(complete){\r\n        this.completeList.push(complete);\r\n        return this;\r\n    }\r\n    update(dt){\r\n        if(!this.isPlay)return;\r\n\r\n        if(this.value>=0&&this.step>0){\r\n            let before = Math.floor(this.value);\r\n            this.value -= dt * this.step;\r\n            this.time -= dt;\r\n            let after = Math.floor(this.value);\r\n            //如果整数部分发生变化\r\n            if(before !== after){\r\n                this.node.stopAllActions();\r\n                this.node.scale = 0.5;\r\n                this.node.opacity = 0;\r\n\r\n                let scaleActions = [cc.scaleBy(0.35*this.stepDur,5),cc.scaleBy(1*this.stepDur,0.125)];\r\n                let fadeActions = [cc.fadeIn(0.35*this.stepDur),cc.fadeOut(1*this.stepDur)];\r\n\r\n                //执行动画效果\r\n                if(after>=1){\r\n                    this.label.string = \"\"+after;\r\n                }else{\r\n                    this.node.runAction(Shake.create(1*this.stepDur,20,20));\r\n                    this.label.string = \"Go~!\";\r\n                }\r\n                this.node.runAction(cc.sequence(scaleActions));\r\n                this.node.runAction(cc.sequence(fadeActions));\r\n            }\r\n        }else{\r\n            this.isPlay = false;\r\n            //执行完成回调\r\n            this.completeList.forEach(complete => {\r\n                complete();\r\n            });\r\n            this.node.destroy();\r\n        }\r\n    }\r\n}","import {Binder} from \"../Bind/Binder\";\r\nimport {BindingConst} from \"../Bind/BindConst\";\r\nimport {DecoratorClass} from \"./DecoratorClass\";\r\nimport {DecoratorClassBinding} from \"./DecoratorClassBinding\";\r\nimport {IBinding, Binding} from \"../Bind/Binding\";\r\nimport { Prototype } from \"../../Extensions/Prototype\";\r\n\r\nexport class DecoratorClassBinder extends Binder {\r\n    //重写绑定状态映射字典Map< 被注入的类名, Map< 属性名 ，Map< 属性别名 , 绑定状态>>>\r\n    protected _bindings: Map < any, Map < any, Map < any, DecoratorClassBinding >>> ;\r\n    private _decoratorClassBufferMap : Map<any,DecoratorClass>;\r\n\r\n    //重写初始化函数\r\n    init() {\r\n        //初始化绑定状态映射\r\n        this._bindings = new Map < any, Map < any, Map < any, DecoratorClassBinding >>> ();\r\n        //初始化缓存映射\r\n        this._decoratorClassBufferMap = new Map<any,DecoratorClass>();\r\n    }\r\n    //检查是否存在指定的键值\r\n    public has(key):boolean{\r\n        return this._bindings.has(key);\r\n    }\r\n    //获取需要注入的类型数据\r\n    public get(target: any): DecoratorClass {\r\n        //检查是否为实例\r\n        if (!(target instanceof Object)) throw new Error(\"proto must is a object but\" + target + \"is not\");\r\n        //检查是否存在缓存\r\n        if(!this._decoratorClassBufferMap.has(target)){\r\n            //获取继承列表\r\n            let extendsList = Prototype.getPrototypeList(target);\r\n\r\n            let injectClass: DecoratorClass = new DecoratorClass();\r\n            let list = [];\r\n            let dict: Map < any, Map < any, DecoratorClassBinding >> ;\r\n            let that = this;\r\n            let bindingMaps = [];\r\n            if (extendsList && extendsList.length > 0) {\r\n                for(let i = 0 ; i<extendsList.length ; i++){\r\n                    dict = that.getBindingMap(extendsList[i]);\r\n                    if(dict&&dict.size>0){\r\n                        dict.forEach(function(inside) {\r\n                            bindingMaps.push(inside);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            let inside : Map<any,DecoratorClassBinding>;\r\n            if (bindingMaps && bindingMaps.length > 0) {\r\n                for(let i = 0; i <bindingMaps.length;i++){\r\n                    inside = bindingMaps[i];\r\n                    if(inside&&inside.size>0){\r\n                        let values = inside.values();\r\n                        for (let j =0;j<inside.size;j++) {\r\n                            let binding = values.next();\r\n                            list.push(binding.value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            injectClass.list = list;\r\n            //添加缓存\r\n            this._decoratorClassBufferMap.set(target,injectClass);\r\n        }\r\n        //从缓存映射中获取对应的列表\r\n        return this._decoratorClassBufferMap.get(target);\r\n    }\r\n    //重写绑定方法\r\n    public bind(key: any): DecoratorClassBinding {\r\n        return super.bind(key) as DecoratorClassBinding;\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key, name): DecoratorClassBinding {\r\n        return super.getBinding(key, name) as DecoratorClassBinding\r\n    }\r\n    //重写绑定获取方法\r\n    public getRawBinding(): IBinding {\r\n        return new DecoratorClassBinding(this.resolver.bind(this));\r\n    }\r\n    //重写解析器\r\n    public resolver(binding: IBinding) {\r\n        super.resolver(binding);\r\n    }\r\n    /**\r\n     * 重写解析绑定状态\r\n     * @param binding 绑定状态\r\n     * @param key 键值\r\n     */\r\n    resolveBinding(binding: DecoratorClassBinding, key: any) {\r\n        //绑定状态必须有属性名\r\n        if (!binding.property) return;\r\n        //检查绑定状态是否存在别名\r\n        let bindingName = (binding.name == null) ? BindingConst.NULL : binding.name;\r\n        let dict: Map < any, Map < any, DecoratorClassBinding >> ;\r\n        //检查绑定状态字典已经存在键值\r\n        if ((this._bindings.has(key))) {\r\n            //获取绑定映射\r\n            dict = this._bindings.get(key);\r\n            //检查绑定映射是否存在别名\r\n            if (dict.has(bindingName)) {\r\n                //获取内部映射\r\n                let insideDict = dict.get(bindingName);\r\n                //检查映射内是否存在属性名\r\n                if (insideDict.has(binding.property)) {\r\n                    let existingBinding = insideDict.get(binding.property);\r\n                    //如果存在绑定状态\r\n                    if (existingBinding) {\r\n                        //检查存在对应状态绑定是否于当前相等\r\n                        if (existingBinding != binding) {\r\n                            //如果绑定值为空\r\n                            if (!existingBinding.value) {\r\n                                //移除无效的绑定别名\r\n                                dict.delete(bindingName);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //创建绑定映射Map< 别名, Map< 属性名, 绑定状态 >\r\n            dict = new Map < any, Map < any, DecoratorClassBinding >> ();\r\n            //添加绑定映射\r\n            this._bindings.set(key, dict);\r\n        }\r\n\r\n        //如果存在默认绑定状态并且等于当前绑定状态\r\n        if (dict.has(BindingConst.NULL)) {\r\n            let insideDic = dict.get(BindingConst.NULL);\r\n            if (insideDic.has(binding.property)) {\r\n                let existingBinding = insideDic.get(binding.property);\r\n                if (binding.property === binding) {\r\n                    //删除默认绑定\r\n                    insideDic.delete(BindingConst.NULL);\r\n                }\r\n            }\r\n\r\n        }\r\n        let insideDict;\r\n        //添加或覆盖绑定状态\r\n        if (!dict.has(bindingName)) {\r\n            //创建内部映射\r\n            insideDict = new Map < any, DecoratorClassBinding > ();\r\n            //映射绑定状态\r\n            insideDict.set(binding.property, binding);\r\n            //映射绑定\r\n            dict.set(bindingName, insideDict);\r\n        } else {\r\n            //获取内部映射\r\n            insideDict = dict.get(bindingName);\r\n            //检查是否存在属性名映射\r\n            if (!insideDict.has(binding.property)) {\r\n                //映射绑定\r\n                insideDict.set(binding.property, binding)\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 重写获取绑定状态映射表，返回键值的所有绑定状态\r\n     * @param key 被绑定的键值\r\n     */\r\n    getBindingMap(key: any): Map < any, Map < any, DecoratorClassBinding >> {\r\n        if (this._bindings.has(key)) {\r\n            return this._bindings.get(key);\r\n        }\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\n\r\nexport class DecoratorClassBinding extends Binding{\r\n    protected _property: any;\r\n    public get property(){\r\n        return this._property;\r\n    }\r\n    \r\n    /**\r\n     * 从正在绑定状态映射到属性，返回此时的绑定状态。\r\n     * @param property 绑定映射的值\r\n     */\r\n    toProperty(property : any):DecoratorClassBinding {\r\n        this._property = property;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n    //重写绑定到值\r\n    to(value : any):DecoratorClassBinding{\r\n        return super.to(value) as DecoratorClassBinding;\r\n    }\r\n    //重写绑定别名\r\n    toName(name : any) : DecoratorClassBinding{\r\n        return super.toName(name) as DecoratorClassBinding;\r\n    }\r\n}","import { DecoratorClassBinding } from \"./DecoratorClassBinding\";\r\n/**\r\n * 存储装饰器获取的信息\r\n */\r\nexport class DecoratorClass{\r\n    //注入列表\r\n    private _list : DecoratorClassBinding[];\r\n    public get list(){\r\n        return this._list;\r\n    }\r\n    public set list(value : DecoratorClassBinding[]){\r\n        this._list = value;\r\n    }\r\n}","import { DecoratorClassBinder } from \"./DecoratorClassBinder\";\r\nexport module DecoratorConst {\r\n    /**\r\n     * 全局注册接入点\r\n     * 使用属性的类型和属性的别名识别被注入的属性\r\n     */\r\n    export const DECORATOR_CLASS_BINDER = new DecoratorClassBinder();\r\n}","import { inject } from '../../lib/framework/Injector/InjectDecorator';\r\nimport { MainModel} from '../Model/MainModel';\r\nimport Animal from './Animal';\r\nimport { MainUtil } from '../util/MainUtil';\r\nimport { IocView } from '../../lib/extensions/IocView';\r\nimport { GameSignalEnum, MainSignalEnum } from '../signal/MainSignalEnum';\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Util, UtilType } from '../util/Util';\r\nimport { __IC_Manager, ManagerType } from '../util/Manager';\r\nimport AudioManager from '../util/AudioManager';\r\nimport { Shake } from '../../lib/extensions/ActionExtension';\r\n\r\nconst {ccclass, property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class Food extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl : MainUtil;\r\n    @inject(__IC_Manager,ManagerType.Audio)\r\n    aMgr : AudioManager;\r\n\r\n    inited;\r\n    foodData;\r\n\r\n\tpublic speed = 0;\r\n    public accel = 0;\r\n    //加速度的加速度\r\n    public strength = 0;\r\n    \r\n    private moveY = 0\r\n    type = ''\r\n\r\n    onLoad() {super.onLoad();}\r\n    start(){super.start();}\r\n    reuse() {}\r\n    unuse() {}\r\n\r\n    public init(){\r\n        this.speed = 250;\r\n        this.accel = 75;\r\n        this.strength = 50;\r\n\r\n        this.moveY = 0;\r\n        this.node.x = 0;\r\n        this.node.y = 0;\r\n    }\r\n    update(dt) {\r\n        //如果小游戏处于被隐藏的状态则不执行任何更新\r\n        if(this.mMdl.isHide)return;\r\n        if (!this.inited) return\r\n        this.accel += this.strength * dt\r\n    \tthis.speed += this.accel * dt\r\n    \tthis.moveY = this.speed * dt\r\n        this.node.y -= this.moveY\r\n    }\r\n\r\n    onCollisionEnter(other, self) {\r\n        if (!this.inited) return;\r\n        let otherComponent = other.getComponent(Animal);\r\n        if(!otherComponent){\r\n            otherComponent = other.getComponent(Food);\r\n            //食物节点之间不进行碰撞检查\r\n            if(otherComponent) return;\r\n        }\r\n        let selfComponent = self.getComponent(Food);\r\n        if (otherComponent && selfComponent && otherComponent.type === selfComponent.type) {\r\n            //this.mMdl.onMatch()\r\n            this.sMgr.get(MainSignalEnum.Match).dispatch(GameSignalEnum.onMatch,this.node);\r\n            this.resPoolNode(this.node);\r\n            otherComponent.node.runAction(Shake.create(0.25,2.5,2.5));\r\n        } else {\r\n            //this.mMdl.onNotMatch()\r\n            this.sMgr.get(MainSignalEnum.Match).dispatch(GameSignalEnum.onNotMatch);\r\n        }\r\n        this.inited = false;\r\n    }\r\n    //回收到资源池\r\n    resPoolNode(foodNode) {\r\n        let index = this.mMdl.currentFoodNodes.indexOf(foodNode)\r\n        if (index !== -1) {\r\n            this.mMdl.currentFoodNodes.splice(index, 1)\r\n        }\r\n        return this.mMdl.foodPool.res(foodNode)\r\n    }\r\n    //随机配置食物位置\r\n    randomProps() {\r\n        this.inited = false\r\n        let track = this.mUtl.randomCoin()\r\n        //记录最后的食物索引\r\n        if (this.mMdl.lastFoodIndex === -1) this.mMdl.lastFoodIndex = track\r\n        if (this.mMdl.lastTrack === -1) this.mMdl.lastTrack = track\r\n        let baseIndex\r\n        //如果当前轨道等于最后的轨道\r\n        if (track === this.mMdl.lastTrack) {\r\n            //创建与最后的轨道相同类型的食物\r\n            baseIndex = this.mMdl.lastFoodIndex\r\n        } else {\r\n            //检查当前的轨道与最后的食物之间的差值\r\n            baseIndex = track ? this.mMdl.lastFoodIndex + 1 : this.mMdl.lastFoodIndex - 1\r\n        }\r\n        //随机范围\r\n        let randomRange = [baseIndex - 1, baseIndex + 1].map(i => {\r\n            if (i < 0) i = this.mMdl.foodDatas.length + i\r\n            if (i >= this.mMdl.foodDatas.length) i = i - this.mMdl.foodDatas.length\r\n            return i\r\n        })\r\n        let foodIndex = this.mUtl.randomValue(...randomRange)\r\n        this.mMdl.lastFoodIndex = foodIndex\r\n        this.mMdl.lastTrack = track\r\n        this.foodData = this.mMdl.foodDatas[foodIndex]\r\n        let foodNode = this.node\r\n        this.type = this.foodData.type\r\n        foodNode.getComponent(cc.Sprite).spriteFrame = this.foodData.spriteFrame ;\r\n        let x = (track ? 1 : -1) * (this.mMdl.animalTextureRect.width / 2);\r\n        foodNode.setPosition(x , this.mUtl.getSceneSize().height/2);\r\n        this.inited = true\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {Command} from \"../../lib/framework/Command/Command\";\r\nimport {inject} from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport {MainModel} from \"../Model/MainModel\";\r\nimport {MainUtil} from \"../util/MainUtil\";\r\nimport Animal from \"../view/Animal\";\r\nimport {__IC_Model,ModelType} from \"../util/Model\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\nimport {TouchUtil,} from \"../util/TouchUtil\";\r\nimport {__IC_Util,UtilType} from \"../util/Util\";\r\n\r\n/**\r\n * 生成视图节点命令\r\n * 这个命令用于生成游戏视图\r\n */\r\nexport class GenerateCommand extends Command {\r\n    @inject(__IC_Model, ModelType.Main)\r\n    mMdl: MainModel;\r\n    @inject(__IC_Util, UtilType.Main)\r\n    mUtl: MainUtil;\r\n    @inject(__IC_Util, UtilType.Touch)\r\n    tUtl: TouchUtil;\r\n    @inject(cc.Node, \"Scene\")\r\n    sceneNode: cc.Node;\r\n    @inject(cc.Node, \"Animals\")\r\n    animalsNode: cc.Node;\r\n    @inject(cc.Prefab, \"Animal\")\r\n    animalPrefab: cc.Prefab;\r\n    @inject(cc.Prefab, \"Food\")\r\n    foodPrefab: cc.Prefab;\r\n\r\n\r\n    execute(complete) {\r\n        //console.log(\"[视图节点生成指令]\");\r\n        //等待异步过程初始化完成\r\n        this.init().then(() => {\r\n            this.generateTouchArea();\r\n            this.generateAnimals();\r\n            complete();\r\n        })\r\n    }\r\n    //生成触控区域\r\n    generateTouchArea() {\r\n        let area = new cc.Node(\"TouchArea\");\r\n        this.sceneNode.addChild(area);\r\n        area.width = this.mUtl.getSceneSize().width;\r\n        area.height = this.mUtl.getSceneSize().height;\r\n        this.tUtl.registerTouchArea(area, true);\r\n    }\r\n    init(): Promise < {} > {\r\n        this.mMdl.currentFoodNodes = [];\r\n        this.mMdl.foodPool = new PrefabPool('Food', this.foodPrefab)\r\n        let p1 = this.loadFoodRes();\r\n        let p2 = this.loadAnimalRes();\r\n        return Promise.all([p1, p2]);\r\n    }\r\n    private loadFoodRes() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            //获取所有的渲染对象\r\n            let results = Promise.all(that.mMdl.foodDatas.map((foodData) =>{\r\n                return that.mUtl.spriteRes(foodData.image)\r\n            }));\r\n            results.then((spriteFrames)=>{\r\n                spriteFrames.forEach((spriteFrame, i) => {\r\n                    that.mMdl.foodDatas[i].spriteFrame = spriteFrame;\r\n                });\r\n                //完成过程\r\n                resolve();\r\n            })\r\n        });\r\n    }\r\n    private loadAnimalRes() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            //获取所有的渲染对象\r\n            let results = Promise.all(that.mMdl.animalDatas.map((animalData) =>{\r\n                            return that.mUtl.spriteRes(animalData.image)\r\n                        }));\r\n            results.then((spriteFrames) => {\r\n                if (spriteFrames) {\r\n                    spriteFrames.forEach((spriteFrame, i) => {\r\n                        that.mMdl.animalDatas[i].spriteFrame = spriteFrame;\r\n                    });\r\n                }\r\n                //完成过程\r\n                resolve();\r\n            })\r\n        })\r\n    }\r\n    private generateAnimals(){\r\n        let that = this;\r\n        this.mMdl.animalDatas.forEach((animalData, i) => {\r\n            let animalNode = cc.instantiate(that.animalPrefab);\r\n            let animal = animalNode.getComponent(Animal);\r\n            let sprite = animalNode.getComponent(cc.Sprite);\r\n            //注意，未被添加到空间中的节点不会被初始化，所以这里需要先引入节点再执行节点的函数\r\n            that.animalsNode.addChild(animalNode);\r\n            sprite.spriteFrame = animalData.spriteFrame;\r\n            animal.type = animalData.type;\r\n            animal.rePositonAnimal(i);\r\n        })\r\n    }\r\n}","export class Helper {\r\n    /**\r\n     * 获取一个对象全部的信息并打印出来\r\n     * @param obj 被搜索对象\r\n     */\r\n    public static getAllInfo(obj: object) {\r\n        if (typeof obj !== \"object\") return;\r\n        let property = \"<GetAllInfo>\"+\"\\n\";\r\n        property += Helper.getInfo(obj);\r\n        console.info(property);\r\n    }\r\n    private static getInfo(obj : Object,depth?){\r\n        let property = \"\";\r\n        let depthTab = \"\";\r\n        if(!obj||!obj.constructor||obj.constructor.name === \"object\")return \"\";\r\n        if(depth){\r\n            //深度过大则说明溢出了\r\n            if(depth>100){\r\n                property += \"[N]\"+obj+\"[overflow]\";\r\n                return \"\";\r\n            }\r\n            //根据深度加Tab键\r\n            for(let i = 0;i<depth;i++){\r\n                depthTab += \"\\t\";\r\n            }\r\n        }else{\r\n            depthTab += \"\\t\";\r\n            depth = 1;\r\n        }\r\n\r\n        for (let item in obj) {\r\n            let p = item;\r\n            let v = obj[item];\r\n            if(v && typeof v == \"function\"){\r\n                let f : Function = v as Function;\r\n                v = f.name + \"(F)\";\r\n            }\r\n            property += depthTab + \"[P]\" + p + \"[V]\" + v + \"\\n\";\r\n            //递归遍历\r\n            if(v && typeof v == \"object\"){\r\n                //继续寻找并且深度加一\r\n                property += Helper.getInfo(v,depth+1);\r\n            }\r\n        }\r\n        return property;\r\n    }\r\n}","import { CommandBinding } from \"./CommandBinding\";\r\nimport { IBinding } from \"../Bind/Binding\";\r\nimport { Binder } from \"../Bind/Binder\";\r\nimport { IConstructorName } from \"../IocConst\";\r\n\r\nexport interface ICommandBinder{\r\n    bind (key : any) : CommandBinding;\r\n    getRawBinding():IBinding;\r\n}\r\nexport class __IC_CommandBinder extends IConstructorName{\r\n    static get constructorName(){return \"ICommandBinder\";}\r\n}","//namespace ioc{\r\nimport { IContext } from \"./Context\"\r\nimport { IConstructorName } from \"../IocConst\";\r\nexport class __IC_Root extends IConstructorName{\r\n    get constructorName(){return \"IRoot\";}\r\n}\r\nexport interface IRoot {\r\n    context: IContext;\r\n}\r\n//}","import {Binder, IBinder} from \"../Bind/Binder\"\r\nimport {IBinding, Binding} from \"../Bind/Binding\"\r\nimport {BindingConst} from \"../Bind/BindConst\"\r\nimport { Injector } from \"./Injector\";\r\nimport { InjectBinding } from \"./InjectBinding\";\r\nimport {DecoratorConst} from \"../Decorator/DecoratorConst\"\r\nimport {IocError, IConstructorName} from \"../IocConst\"\r\nimport { __IC_Model } from \"../../../project/util/Model\";\r\nimport { MainModel } from \"../../../project/Model/MainModel\";\r\n//全局注入数据绑定器\r\nconst ClassBinder = DecoratorConst.DECORATOR_CLASS_BINDER;\r\n\r\nexport interface IInjectBinder extends IBinder{\r\n    injector:Injector;\r\n    getInstance(key,name) : any;\r\n    getBinding(key, name) : InjectBinding;\r\n    bind(key:any):InjectBinding;\r\n    /**\r\n     * 解绑所有被标记了需要解绑的状态\r\n     */\r\n    unbindAllMark();\r\n} \r\nexport class __IC_InjectBinder extends IConstructorName{\r\n    get constructorName(){return \"IInjectBinder\";}\r\n}\r\nexport class InjectBinder extends Binder implements IInjectBinder {\r\n    //注入器\r\n    private _injector:Injector;\r\n    constructor(){\r\n        super();\r\n        this._injector = new Injector ();\r\n        this._injector.binder = this;\r\n        this._injector.injectClassBinder = ClassBinder;\r\n    }\r\n    public get injector() : Injector{\r\n        return this._injector;\r\n    }\r\n    //绑定状态映射字典\r\n    public getInstance(key,name) : any\r\n    {\r\n        //如果未设置别名则使用默认设置\r\n        if(!name)name = BindingConst.NULL;\r\n        //获取绑定状态\r\n        let binding : InjectBinding = this.getBinding (Binding.checkAbstract(key), name) as InjectBinding;\r\n        //尝试获取一个未绑定的键值对时抛出绑定失败异常\r\n        if (binding == null){throw new Error(\"InjectionBinder has no binding for:\\n\\tkey: \" + key + \"\\nname: \" + name);}\r\n        //根据绑定状态从注入器中获取实例\r\n        //console.info(\"[实例化]\"+binding.key);\r\n        let instance = this._injector.instantiate(binding,false);\r\n        //console.info(\"[尝试注入]\"+Binding.checkAbstract(binding.key));\r\n        this._injector.tryInject(binding,instance);\r\n        return instance;\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key, name) : InjectBinding{\r\n        return super.getBinding(key,name) as InjectBinding\r\n    }\r\n    //重写基类的绑定函数\r\n    public bind(key:any):InjectBinding{\r\n        return super.bind(key) as InjectBinding;\r\n    }\r\n    public getRawBinding() : IBinding{\r\n        return new InjectBinding(this.resolver.bind(this));\r\n    }\r\n    public unbindAllMark(){\r\n        let that = this;\r\n        let unbinds = [];\r\n        (this._bindings as Map < any, Map < any, InjectBinding >>).forEach(dict => {\r\n            dict.forEach(binding=>{\r\n                if(binding.isUnbind){\r\n                    unbinds.push(binding);\r\n                }\r\n            })\r\n        });\r\n        //解除被标记的绑定\r\n        unbinds.forEach(binding=>{\r\n            that.unbind(binding.key,binding.name);\r\n        })\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\nimport {InjectConst} from \"./InjectConst\";\r\n\r\nexport class InjectBinding extends Binding{\r\n    protected _isUnbind : boolean = false;\r\n    //默认绑定状态\r\n    protected _bindingType: InjectConst.BindingType = InjectConst.BindingType.DEFAULT;\r\n    //默认自动注入\r\n    protected _isInject: boolean = true;\r\n    //参数\r\n    protected _args: any;\r\n/*     //键值是否为构造函数\r\n    protected _isKeyConstructor = false;\r\n    //值是否为构造函数\r\n    protected _isValueConstructor = false; */\r\n\r\n/*     public get isKeyConstructor(){\r\n        return this._isKeyConstructor;\r\n    }\r\n    public get isValueConstructor(){\r\n        return this._isValueConstructor;\r\n    } */\r\n    public get isInject(){\r\n        return this._isInject;\r\n    }\r\n    //参数列表\r\n    public get args() {\r\n        return this._args;\r\n    }\r\n    public get bindingType(){\r\n        return this._bindingType;\r\n    }\r\n    public get isUnbind(){\r\n        return this._isUnbind;\r\n    }\r\n    /**\r\n     * 参数列表\r\n     */\r\n    public toArgs(){\r\n        this._args = arguments;\r\n        if (this._resolver != null){\r\n            this._resolver(this);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 设置为单例模式时，每次都会得到相同的实例\r\n     */\r\n\tpublic toSingleton(): InjectBinding\r\n\t{\r\n\t\t//如果已经存在一个值了, 那么这次映射就被视为多余的\r\n\t\tif (this._bindingType === InjectConst.BindingType.VALUE){\r\n            return this;\r\n        }\r\n        //设定为单例注入\r\n        this._bindingType = InjectConst.BindingType.SINGLETON;\r\n\t\tif (this._resolver != null){\r\n\t\t\tthis._resolver (this);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n    /**\r\n     * 设置为解绑时，调用解绑方法将会解绑所有被标记的绑定状态\r\n     */\r\n    public unBind(): InjectBinding{\r\n        this._isUnbind = true;\r\n        return this;\r\n    }\r\n    public toValue(value : any) : InjectBinding{\r\n        this._bindingType = InjectConst.BindingType.VALUE;\r\n        this.setValue(value);\r\n        return this;\r\n    }\r\n    public setValue(o : any) : InjectBinding\r\n    {\r\n        this.to(o);\r\n        return this;\r\n    }\r\n    public toInject( value : boolean) : InjectBinding\r\n    {\r\n        this._isInject = value;\r\n        return this;\r\n    }\r\n    //重写基类的赋值函数\r\n    public to(value : any) : InjectBinding{\r\n        return super.to(value) as InjectBinding;\r\n    }\r\n    public toName(name : any) : InjectBinding{\r\n        return super.toName(name) as InjectBinding;\r\n    }\r\n}","export module InjectConst {\r\n    //注入状态类型枚举\r\n    export const enum BindingType\r\n    {\r\n        /// 每次都会创建一个新的对象\r\n        DEFAULT = \"Default\",\r\n    \r\n        /// 总是使用同一个对象单例\r\n        SINGLETON = \"Singleton\",\r\n    \r\n        /// 总是相同的对象但参数不同\r\n        VALUE = \"Value\",\r\n    }\r\n}","import {DecoratorConst} from \"../Decorator/DecoratorConst\"\r\nimport { Binding } from \"../Bind/Binding\";\r\n//全局注入数据绑定器\r\nconst ClassBinder = DecoratorConst.DECORATOR_CLASS_BINDER;\r\n/**\r\n * 注入装饰器模块\r\n * 因为TS的类型系统仅可以用于检查语法错误，而在编译为JS后不再有类型系统，所以无法在TS中存储类型数据\r\n * 并且在微信环境下是无法使用反射库和动态代码，至少现在还不行。\r\n * 为了实现注入功能，这里采用类的构造函数作为类型数据，以构造函数的name属性作为类型的名称，又因接口没有构造函数\r\n * 所以统一采用添加 __IC_ 前缀的模拟接口名方式间接存储接口数据，因为装饰器会在程序运行的起始阶段执行，所以使用一个全局变量存储这些数据\r\n * @see 注意：所有的__IC_类均需要实现IConstructorName接口\r\n * @example\r\n * class{\r\n *  @inject(constructor)\r\n *  anyclass:T;\r\n * }\r\n */\r\nexport function inject < T > (str: string): Function;\r\n/**\r\n * 属性值注入装饰器\r\n * @param c 构造函数\r\n */\r\nexport function inject < T > (c: new() => T): Function;\r\n/**\r\n * 使用别名的方式注入属性值\r\n * @param name 属性值别名\r\n */\r\nexport function inject < T > (c: new() => T, name: any): Function;\r\nexport function inject < T > (str:string, name: any): Function;\r\n/**\r\n * 使用默认的方式注入属性值\r\n */\r\n//export function inject<T>(_target: Object, _key: any, _desc ? : any) : void;\r\n\r\n//利用重载的形式定义注入属性的方法\r\nexport function inject < T > (): any {\r\n    switch (arguments.length) {\r\n        case 0:\r\n            break;\r\n        case 1:\r\n            return injectNoNameFunc < T > (arguments[0]);\r\n            break;\r\n        case 2:\r\n            return injectToNameFunc < T > (arguments[0], arguments[1])\r\n            break;\r\n        case 3:\r\n            break;\r\n    }\r\n}\r\n/**\r\n * 无别名的属性装饰器\r\n * @param _constructor 类型T的构造函数\r\n */\r\nconst injectNoNameFunc = < T > (_constructor: new() => T | string) => {\r\n    return function (_target: any, _property: string) {\r\n        injectFunc(_target,_constructor,_property);\r\n    }\r\n}\r\n/**\r\n * 带别名的属性装饰器\r\n * @param _constructor 类型T的构造函数\r\n */\r\nconst injectToNameFunc = < T > (_constructor: new() => T | string, _name: any) => {\r\n    return function (_target: any, _property: string) {\r\n        injectFunc(_target,_constructor,_property,_name);\r\n    }\r\n\r\n}\r\n/**\r\n * \r\n * @param _target 被注入的目标类\r\n * @param _constructor 注入的类\r\n * @param _property 注入的类的属性名\r\n * @param _name 注入的类的别名\r\n */\r\nfunction injectFunc(_target,_constructor,_property,_name?){\r\n    //所有实现了IConstructorName的类都属于虚类，这里获取虚类对应的接口名作为键值传递给绑定器\r\n    //因为压缩代码会把所有对象的名称都压缩掉，所以这里使用构造函数作为键值\r\n    ClassBinder.bind(_target.constructor).to(Binding.checkAbstract(_constructor)).toProperty(_property).toName(_name);\r\n}","import { InjectBinding } from \"./InjectBinding\";\r\nimport {InjectConst} from \"./InjectConst\";\r\nimport { Binding } from \"../Bind/Binding\";\r\n/**\r\n * 注入工厂，负责从给定的构造函数创建对象\r\n * 可以创建单例\r\n */\r\nexport class InjectFactory{\r\n    /**\r\n     * 根据绑定状态和指定的参数创建或获取实例对象\r\n     * @param binding 绑定状态\r\n     * @param args 参数\r\n     */\r\n    public get(binding:InjectBinding,args : any[]):object{\r\n        //检查绑定状态是否有效\r\n        if (binding == null){\r\n\t\t\tthrow new Error (\"InjectorFactory cannot act on null binding\");\r\n        }\r\n        //判断注入状态类型\r\n        let bindingType : InjectConst.BindingType = binding.bindingType;\r\n        //根据不同的类型创建\r\n        switch (bindingType)\r\n        {\r\n            case InjectConst.BindingType.SINGLETON:\r\n                return this.singletonOf (binding, args);\r\n                break;\r\n            case InjectConst.BindingType.VALUE:\r\n                return this.valueOf (binding);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return this.instanceOf (binding, args);\r\n    }\r\n    // 生成一个新的实例\r\n\tprotected instanceOf( binding : InjectBinding, args : any[]) : any\r\n\t{\r\n\t\tif (binding.value != null)\r\n\t\t{\r\n\t\t\treturn this.createFromValue(binding.value, args);\r\n\t\t}\r\n\t\tlet value : any = this.generateImplicit(binding.key, args);\r\n\t\treturn this.createFromValue(value, args);\r\n    }\r\n    // Call the Activator to attempt instantiation the given object\r\n\tprotected createFromValue(c : new(...args)=> any, args : any[]) : any\r\n\t{\r\n\t\tlet instance = null;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (args == null || args.length == 0)\r\n\t\t\t{\r\n\t\t\t\tinstance = new c();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinstance = new c(args);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch\r\n\t\t{\r\n\t\t\t//No-op\r\n        }\r\n        //if(instance)console.info(\"[实例化]\"+instance.constructor.name);\r\n\t\treturn instance;\r\n    }\r\n    protected generateImplicit(key : any, args:any[]):any\r\n    {\r\n        //如果无法直接转换键值为构造函数\r\n        if(!key)return null;\r\n        //检查键值是否为构造函数\r\n        if (Binding.isConstructor(key))\r\n        {\r\n            return this.createFromValue(key, args);\r\n        }\r\n        throw new Error (\"InjectorFactory can't instantiate an Interface or Abstract Class. Class: \" + key.ToString());\r\n    }\r\n    // Generate a Singleton instance\r\n\tprotected singletonOf(binding : InjectBinding, args : any[])\r\n\t{\r\n\t\tif (binding.value != null)\r\n\t\t{\r\n            let o = this.createFromValue (binding.value, args);\r\n            if (o == null)\r\n                return null;\r\n            binding.setValue(o);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbinding.setValue(this.generateImplicit(binding.key, args));\r\n\t\t}\r\n\t\treturn binding.value;\r\n    }\r\n    protected valueOf(binding : InjectBinding)\r\n    {\r\n        return binding.value;\r\n    }\r\n}","import { InjectFactory } from \"./InjectFactory\"\r\nimport { InjectBinder } from \"./InjectBinder\";\r\nimport { InjectBinding } from \"./InjectBinding\";\r\nimport { InjectConst} from \"./InjectConst\";\r\nimport { DecoratorClass } from \"../Decorator/DecoratorClass\";\r\nimport { DecoratorClassBinder } from \"../Decorator/DecoratorClassBinder\";\r\nimport { Binding } from \"../Bind/Binding\";\r\n\r\nexport class Injector{\r\n    public factory : InjectFactory;\r\n    public binder : InjectBinder;\r\n    public injectClassBinder : DecoratorClassBinder;\r\n\r\n    constructor(){\r\n        this.factory = new InjectFactory();\r\n    }\r\n    public uninject(target)\r\n    {\r\n        if(!this.binder||!target)throw new Error(\"Attempt to inject into Injector without a Binder or null instance\");\r\n        //排除一些不能被注入的类型\r\n        let type : any = typeof target;\r\n        if (type === \"string\" || type === \"boolean\"||type === \"number\" ||type === \"symbol\"||type === \"undefined\" || type === \"function\")\r\n        {\r\n            return target;\r\n        }\r\n        //获取注入类\r\n        let injectClass : DecoratorClass = this.injectClassBinder.get(target);\r\n        this.decoratorUnInject (target, injectClass);\r\n    }\r\n    private decoratorUnInject(target : any, injectClass : DecoratorClass){\r\n        let that = this;\r\n        //遍历注入类\r\n        injectClass.list.forEach((binding)=>{\r\n            //尝试获绑定状态\r\n            let injectBinding = that.binder.getBinding(binding.value,binding.name);\r\n            //不能注入一个未绑定的值\r\n            if(injectBinding){\r\n                //将注入值赋给目标对象\r\n                target[binding.property] = null;\r\n            }\r\n        })\r\n    }\r\n    //实例化对象\r\n    public instantiate(binding : InjectBinding,tryInjectHere : boolean) : object{\r\n        //检查是否具备注入条件\r\n        if(!this.binder||!this.factory)throw new Error(\"Attempt to instantiate from Injector without a Binder or inject into Injector without a Factory\");\r\n        //构造函数\r\n        let constructor = null;\r\n        //实例对象\r\n        let instance : object = null;\r\n        //检查绑定状态的值是否为构造函数\r\n        if (binding.isValueConstructor){\r\n            //传入构造函数\r\n            constructor = binding.value;\r\n        }else{\r\n            //直接赋值\r\n            instance = binding.value;\r\n        }\r\n        //如果没有设置注入值但是键值是一个构造函数\r\n        if(!constructor&&binding.isKeyConstructor){\r\n            //指定绑定状态的键值为构造函数\r\n            constructor = binding.key;\r\n        }\r\n        //如果没有直接赋值实例并且存在构造函数\r\n        if(!instance && constructor){\r\n            //参数\r\n            let args = binding.args;\r\n            instance = this.factory.get(binding, args);\r\n            //如果尝试在这里直接注入\r\n            if (tryInjectHere)\r\n            {\r\n                this.tryInject(binding, instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    public tryInject(binding : InjectBinding, target : any)\r\n    {\r\n        //如果工厂不能创建实例则这里直接返回\r\n        if (target != null)\r\n        {\r\n            if (binding.isInject)\r\n            {\r\n                target = this.inject(target, false);\r\n            }\r\n\r\n            if (binding.bindingType == InjectConst.BindingType.SINGLETON || binding.bindingType == InjectConst.BindingType.VALUE)\r\n            {\r\n                //prevent double-injection\r\n                binding.toInject(false);\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    //注入目标中所有被@Inject标记的属性\r\n    public inject(target : object, attemptConstructorInjection : boolean) : any\r\n    {\r\n        if(!this.binder||!target)throw new Error(\"Attempt to inject into Injector without a Binder or null instance\");\r\n        //排除一些不能被注入的类型\r\n        let type : any = typeof target;\r\n        if (type === \"string\" || type === \"boolean\"||type === \"number\" ||type === \"symbol\"||type === \"undefined\" || type === \"function\")\r\n        {\r\n            return target;\r\n        }\r\n        //因为TS中无法获得类型名称，所以使用目标的构造函数名称代替类型名称\r\n        //let typeName : string = target.constructor;\r\n        //获取注入类\r\n        let injectClass : DecoratorClass = this.injectClassBinder.get(target);\r\n        //是否允许使用构造器注入\r\n        if (attemptConstructorInjection)\r\n        {\r\n            //target = performConstructorInject(target, reflection);\r\n        }\r\n        this.decoratorInject(target,injectClass);\r\n        //performSetterInject(target, reflection);\r\n        //postInject(target, reflection);\r\n        return target;\r\n    }\r\n    /**\r\n     * 装饰器注入，使用注入类进行注入\r\n     */\r\n    private decoratorInject(target : any, injectClass : DecoratorClass){\r\n        let that = this;\r\n        //遍历注入类\r\n        injectClass.list.forEach((binding)=>{\r\n            //console.info(\"[装饰器注入]\"+binding.value + \"[别名]\"+binding.name);\r\n            //尝试获绑定状态\r\n            let injectBinding = that.binder.getBinding(binding.value,binding.name);\r\n            //不能注入一个未绑定的值\r\n            if(injectBinding){\r\n                let instance = that.getInjectValue(injectBinding.key,injectBinding.name);\r\n                //将注入值赋给目标对象\r\n                target[binding.property] = instance;\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * 获取需要注入的值，这个过程会递归调用\r\n     * @see 注意循环依赖会严重消耗性能\r\n     */\r\n    private getInjectValue(type,name):object{\r\n        //尝试获取绑定状态\r\n        let binding = this.binder.getBinding(type,name);\r\n        if(!binding)return null;\r\n        //if(binding.key.name)console.info(\"[获取注入值]\"+binding.key.name+\"[别名]\"+name+\"[绑定状态]\"+binding.bindingType + \",\"+binding.isInject);\r\n        //else console.info(\"[获取注入值]\"+binding.key+\"[别名]\"+name+\"[绑定状态]\"+binding.bindingType + \"[需要注入]\"+binding.isInject);\r\n        //如果是值类型绑定\r\n        if(binding.bindingType === InjectConst.BindingType.VALUE){\r\n            //如果需要注入\r\n            if(binding.isInject){\r\n                //if(Binding.isConstructor(binding.value))console.info(\"[对值(构造函数))]\"+binding.value.constructor.name + \"[进行注入]\");\r\n                //else console.info(\"[对值(对象)]\"+binding.value.__proto__.constructor + \"[进行注入]\");\r\n\r\n                let injv = this.inject (binding.value, false);\r\n                binding.toInject (false);\r\n\r\n                //if(binding.key.name)console.info(\"[绑定状态]\"+binding.key.name+\"[完成注入]\"+binding.isInject);\r\n                //else console.info(\"[绑定状态]\"+binding.key+\"[完成注入]\"+binding.isInject);\r\n\r\n                return injv;\r\n            }else{\r\n                return binding.value;\r\n            }\r\n        //如果是单例注入\r\n        }else if (binding.bindingType == InjectConst.BindingType.SINGLETON){\r\n            //如果绑定状态的值是一个构造函数\r\n            if (binding.isValueConstructor || binding.value == null)\r\n            {\r\n                this.instantiate (binding, true);\r\n            }\r\n            return binding.value;\r\n        }else{\r\n            return this.instantiate(binding,true);\r\n        }\r\n    }\r\n    /*     //构造器注入，未实现\r\n    private performConstructorInject(){\r\n\r\n    } */\r\n    /* //属性设置器注入，未实现\r\n    performSetterInject(){\r\n\r\n    } */\r\n    /*     //方法注入，未实现\r\n    postInject(){\r\n\r\n    } */\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport Animal from \"../view/Animal\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { TouchUtil, TouchDirection, TouchStatus } from \"../util/TouchUtil\";\r\nimport { InputModel } from \"../Model/InputModel\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport AudioManager from \"../util/AudioManager\";\r\nimport Common from \"../Common\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\n\r\n/**\r\n * 输入控制指令\r\n */\r\nexport class InputControlCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Model,ModelType.Input)\r\n    iMdl : InputModel;\r\n    @inject(cc.Node,\"Animals\")\r\n    animalsNode : cc.Node;\r\n    @inject(cc.Node,\"Avatar\")\r\n    avatarNode : cc.Node;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl : MainUtil;\r\n    @inject(__IC_Util,UtilType.Touch)\r\n    tUtl : TouchUtil;\r\n    @inject(__IC_Manager,ManagerType.Audio)\r\n    aMgr : AudioManager;\r\n\r\n    execute(){\r\n        let that = this;\r\n        let xRange = this.avatarNode.x + this.mUtl.getSceneSize().width*0.5;\r\n        let yRange = this.avatarNode.y + this.mUtl.getSceneSize().height*0.5;\r\n\r\n        //注册一个使用全局区域的上划回调\r\n        this.tUtl.on(TouchDirection.Up,(status:TouchStatus)=>{\r\n            if(status.sPosX>=xRange){\r\n                that.areaOnMove(0);\r\n            }else{\r\n                that.areaOnMove(1);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Down,(status:TouchStatus)=>{\r\n            if(status.sPosX>=xRange){\r\n                that.areaOnMove(1);\r\n            }else{\r\n                that.areaOnMove(0);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Left,(status:TouchStatus)=>{\r\n            if(status.sPosY>=yRange){\r\n                that.areaOnMove(2);\r\n            }else{\r\n                that.areaOnMove(3);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Right,(status:TouchStatus)=>{\r\n            if(status.sPosY>=yRange){\r\n                that.areaOnMove(3);\r\n            }else{\r\n                that.areaOnMove(2);\r\n            }\r\n        });\r\n    }\r\n\r\n    areaOnMove(direction : TouchDirection) {\r\n        //如果暂停标志位为真并且不在准备状态则直接返回\r\n        if (this.mMdl.pauseFlag&&!this.mMdl.readyFlag) return;\r\n        this.rotateAnimals(direction);\r\n    }\r\n    //旋转动物\r\n    rotateAnimals(direction) {\r\n        //如果正处于旋转中，则将缓存下一步操作\r\n        if (this.mMdl.isRotationing) {\r\n            this.iMdl.waitingDirection = direction;\r\n            return;\r\n        }\r\n        //播放跳跃音效\r\n        this.aMgr.play(\"Jump\");\r\n        if(Common.operatorMode ==0)\r\n            this.byScaleSpin(direction);\r\n        else \r\n            this.byRotateSpin(direction);\r\n        \r\n    }\r\n    byScaleSpin(direction){\r\n        let that = this;\r\n        this.mMdl.isRotationing = true;\r\n        let [x, y] = (direction==0||direction==1) ? [1, 0] : [0, 1];\r\n        let rotateAction = cc.scaleTo(this.mMdl.rotateDur * 0.5, x, y)\r\n        let rotateActionEnd = cc.scaleTo(this.mMdl.rotateDur * 0.5, 1, 1)\r\n        this.iMdl.lastAction = this.animalsNode.runAction(cc.sequence(rotateAction,cc.callFunc(()=>{\r\n            //交换节点的排序\r\n            that.resetAnimalsNode(direction);\r\n            //重置节点的位置\r\n            if(that.animalsNode.children&&this.animalsNode.children.length>0){\r\n                //遍历并重新设置所有动物节点的位置\r\n                that.animalsNode.children.forEach((animalNode, i) => {\r\n                    animalNode.stopAllActions();\r\n                    animalNode.getComponent(Animal).rePositonAnimal(i)\r\n                });\r\n            }\r\n            //this.animalsNode.setScale(1, 1);\r\n        }),rotateActionEnd, cc.callFunc(() => {\r\n            that.animalsNode.setScale(1, 1);\r\n            that.mMdl.isRotationing = false;\r\n            //执行之前等待中的操作\r\n            if(that.iMdl.waitingDirection!==null&&that.iMdl.waitingDirection!==undefined){\r\n                that.rotateAnimals(that.iMdl.waitingDirection);\r\n                that.iMdl.waitingDirection = null;\r\n            }\r\n        })));\r\n    }\r\n\r\n    byRotateSpin(direction){\r\n        let that = this;\r\n        this.mMdl.isRotationing = true;\r\n        let x = (direction==0||direction==2) ? -90 : 90;\r\n        let rotateAction = cc.rotateBy(this.mMdl.rotateDur * 0.5, x)\r\n        this.iMdl.lastAction = this.animalsNode.runAction(cc.sequence(cc.spawn(rotateAction,cc.callFunc(()=>{\r\n            //交换节点的排序\r\n            //that.resetAnimalsNode(direction);\r\n            //重置节点的位置\r\n            if(that.animalsNode.children&&this.animalsNode.children.length>0){\r\n                let animalAction;\r\n                //遍历并重新设置所有动物节点的位置\r\n                that.animalsNode.children.forEach((animalNode, i) => {\r\n                    animalAction = cc.rotateBy(this.mMdl.rotateDur * 0.5, -x);\r\n                    animalNode.runAction(animalAction);\r\n                    //animalNode.getComponent(Animal).rePositonAnimal(i)\r\n                });\r\n            }\r\n            //this.animalsNode.setScale(1, 1);\r\n        })), cc.callFunc(() => {\r\n            that.mMdl.isRotationing = false;\r\n            //执行之前等待中的操作\r\n            if(that.iMdl.waitingDirection!==null&&that.iMdl.waitingDirection!==undefined){\r\n                that.rotateAnimals(that.iMdl.waitingDirection);\r\n                that.iMdl.waitingDirection = null;\r\n            }\r\n        })));\r\n    }\r\n    //重新设置所有节点的排序\r\n    resetAnimalsNode(direction) {\r\n        let animalsNodeChildren = this.animalsNode.children;\r\n        if (direction==0||direction==1) {\r\n            this.switchIndex(animalsNodeChildren, 0, 3)\r\n            this.switchIndex(animalsNodeChildren, 1, 2)\r\n        } else {\r\n            this.switchIndex(animalsNodeChildren, 0, 1)\r\n            this.switchIndex(animalsNodeChildren, 3, 2)\r\n        }\r\n        //this.animalsNode.setScale(1, 1)\r\n    }\r\n    //交换节点层级位置\r\n    switchIndex(list, one, two) {\r\n        let temp = list[two]\r\n        list[two] = list[one]\r\n        list[one] = temp\r\n    }\r\n}","import { Singleton } from \"../util/Singleton\";\r\nimport { IModel } from \"../util/Model\";\r\n\r\nexport class InputModel extends Singleton implements IModel{\r\n    //等待中的操作\r\n    public waitingDirection;\r\n    public lastAction : cc.Action;\r\n\r\n    onConstructor(){\r\n        this.lastAction = null;\r\n        this.waitingDirection = null;\r\n    }\r\n}","import {Context, IContext} from \"../framework/Context/Context\"\r\nimport {IocRoot} from \"./IocRoot\"\r\nconst {ccclass} = cc._decorator\r\n@ccclass\r\nexport class IocComponet extends cc.Component{\r\n\tpublic registeredWithContext : boolean;\r\n\tprivate _requiresContext : boolean= true;\r\n\tpublic get requiresContext() : boolean\r\n\t{\r\n\t\treturn this._requiresContext;\r\n\t}\r\n\tpublic set requiresContext(value){\r\n\t\tthis._requiresContext = value;\r\n\t}\r\n\tprotected _registerWithContext : boolean = true;\r\n\tpublic get autoRegisterWithContext()\r\n\t{\r\n\t\treturn this._registerWithContext; \r\n\t}\r\n\tpublic set autoRegisterWithContext(value){\r\n\t\tthis._registerWithContext = value;\r\n\t}\r\n\tpublic get shouldRegister() :boolean { return this.enabled && this.node.activeInHierarchy; }\r\n\r\n\t//载入阶段尝试注入数据\r\n    onLoad(){\r\n\t\tif (this.autoRegisterWithContext && !this.registeredWithContext && this.shouldRegister)\r\n\t\t\tthis.bubbleToContext(this,BubbleType.Add, false);\r\n\t}\r\n\t//启动阶段尝试注入数据\r\n\tstart(){\r\n\t\tif (this.autoRegisterWithContext && !this.registeredWithContext && this.shouldRegister)\r\n\t\t\tthis.bubbleToContext(this, BubbleType.Add, true);\r\n\t}\r\n\r\n    protected bubbleToContext(view : cc.Component,type: BubbleType,finalTry:boolean)\r\n\t{\r\n\t\t\tconst LOOP_MAX : number= 100;\r\n\t\t\tlet loopLimiter : number= 0;\r\n\t\t\tlet node = view.node;\r\n\t\t\twhile (node.parent != null && loopLimiter < LOOP_MAX)\r\n\t\t\t{\r\n\t\t\t\tloopLimiter++;\r\n\t\t\t\tnode = node.parent;\r\n\t\t\t\tif (node.getComponent(IocRoot) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet iocContext : IocRoot = node.getComponent(IocRoot) as IocRoot;\r\n\t\t\t\t\tif (iocContext.context != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet context : IContext= iocContext.context;\r\n\t\t\t\t\t\tlet success : boolean= true;\r\n\r\n\t\t\t\t\t\tswitch (type)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase BubbleType.Add:\r\n\t\t\t\t\t\t\t\t//注入数据\r\n\t\t\t\t\t\t\t\tcontext.crossContextBinder.injector.inject(this,true);\r\n\t\t\t\t\t\t\t\t//context.addView(view);\r\n\t\t\t\t\t\t\t\tthis.registeredWithContext = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Remove:\r\n\t\t\t\t\t\t\t\t//context.removeView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Enable:\r\n\t\t\t\t\t\t\t\t//context.enableView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Disable:\r\n\t\t\t\t\t\t\t\t//context.disableView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tsuccess = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (success)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.requiresContext && finalTry && type == BubbleType.Add)\r\n\t\t\t{\r\n\t\t\t\t//last ditch. If there's a Context anywhere, we'll use it!\r\n\t\t\t\tif (Context.firstContext != null)\r\n\t\t\t\t{\r\n\t\t\t\t\t//Context.firstContext.addView(view);\r\n\t\t\t\t\tthis.registeredWithContext = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet msg : string;\r\n\t\t\t\tif(loopLimiter == LOOP_MAX){\r\n\t\t\t\t\tmsg = \"A view couldn't find a context. Loop limit reached.\"\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tmsg = \"A view was added with no context. Views must be added into the hierarchy of their ContextView lest all hell break loose.\";\r\n\t\t\t\t\tmsg += \"\\nView: \" + view.toString();\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(msg);\r\n\t\t\t}\r\n\t\t}\r\n}\r\n\r\nexport enum BubbleType\r\n{\r\n\tAdd,\r\n\tRemove,\r\n\tEnable,\r\n\tDisable\r\n}","export module IocError{\r\n    export const IC_ERROR = \"can't implement class that is only as interface\";\r\n}\r\nexport abstract class IConstructorName{\r\n    abstract get constructorName() : string;\r\n}","import {Context, IContext} from \"../framework/Context/Context\"\r\n\r\nconst {ccclass, property} = cc._decorator\r\n@ccclass\r\nexport class IocRoot extends cc.Component{\r\n    public context : IContext;\r\n\r\n    public requiresContext : boolean;\r\n\r\n    public registeredWithContext : boolean;\r\n\r\n    public autoRegisterWithContext : boolean;\r\n\r\n    public get shouldRegister() {return true;}\r\n\r\n    onDestroy(){\r\n        if (this.context != null && Context.firstContext != null)\r\n            Context.firstContext.removeCrossContext(this.context);\r\n    }\r\n}","import { IocComponet } from \"./IocComponet\";\r\nimport { inject } from \"../framework/Injector/InjectDecorator\";\r\nimport { __IC_SignalManager, ISignalManager } from \"../framework/Signal/SignalManager\";\r\n\r\nconst {ccclass} = cc._decorator\r\n@ccclass\r\nexport class IocView extends IocComponet{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n\r\n    onLoad(){\r\n        super.onLoad();\r\n    }\r\n    \r\n    start(){\r\n        super.start();\r\n    }\r\n\r\n}","import { IocComponet } from \"../../lib/extensions/IocComponet\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { __IC_SignalManager, ISignalManager } from \"../../lib/framework/Signal/SignalManager\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class LogicNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    onLoad(){\r\n        super.onLoad();\r\n        //注册节点\r\n        this.inj.bind(cc.Node).toName(\"LogicNode\").toValue(this.node).unBind();\r\n    }\r\n    start(){\r\n        super.start();\r\n    }\r\n    update(dt){\r\n        if(this.sMgr && !this.mMdl.pauseFlag){\r\n            this.sMgr.get(MainSignalEnum.Update).dispatch(dt);\r\n        }\r\n    }\r\n}","import Common from \"../../common\";\r\nimport WxGameApi from \"../WxGameApi\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad() {\r\n        //引入JS文件到TS环境\r\n        Common.WxGameApi = WxGameApi;\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        let videoName = \"video.mp4\";\r\n        let bgmName = \"bgm.mp3\";\r\n        let videoUrl = \"https://636f-common-510ecc-1257233686.tcb.qcloud.la/default_video.mp4\";\r\n        let bgmUrl = \"https://636f-common-510ecc-1257233686.tcb.qcloud.la/bgm.mp3\";\r\n        let getCachePromise = (url,name,complete) => {\r\n            return new Promise((resolve, reject) => {\r\n                WxGameApi.getOrCacheResFile(url, name, (resPath) => {\r\n                    complete(resPath);\r\n                    //传递结果给下一个异步过程\r\n                    resolve();\r\n                });\r\n            })\r\n        }\r\n        //缓存BGM\r\n        let p1 = getCachePromise(bgmUrl,bgmName,(resPath)=>{\r\n            WxGameApi.playBGM(resPath);\r\n        });\r\n        //缓存视频\r\n        let p2 = getCachePromise(videoUrl,videoName,(resPath)=>{\r\n            Common.viedo = resPath;\r\n        });\r\n        //启动异步的下载过程\r\n        let time = new Date().getSeconds();\r\n        let results = Promise.all([p1,p2]);\r\n        //获取结果\r\n        results.then(()=>{\r\n            let diff = new Date().getSeconds() - time;\r\n            console.info(\"[缓存完成]\" + diff + \"[秒]\");\r\n        });\r\n\r\n        console.info(\"[登入微信平台]\");\r\n        wx.login({\r\n            success(res) {\r\n                console.info(\"[登录成功]\" + res);\r\n            },\r\n            fail(res) {\r\n                console.info(\"[登录失败]\" + res);\r\n            }\r\n        });\r\n        //同步启动选项\r\n        this.launchOptionsSync();\r\n        this.preloadFriendInfo();\r\n        this.preloadGroupInfo();\r\n    },\r\n    preloadFriendInfo() {\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            //console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"preload\",\r\n                    arguments: \"friend\",\r\n                    data: \"\",\r\n                }\r\n            });\r\n        }\r\n    },\r\n    preloadGroupInfo() {\r\n        if (!Common.shareTickets || Common.shareTickets.length === 0) return;\r\n        wx.getOpenDataContext().postMessage({\r\n            message: {\r\n                type: \"command\",\r\n                function: \"preload\",\r\n                arguments: \"group\",\r\n                data: Common.shareTickets[0],\r\n            }\r\n        });\r\n    },\r\n    launchOptionsSync() {\r\n        if (!Common.shareTickets) Common.shareTickets = [];\r\n        let info = wx.getLaunchOptionsSync();\r\n        console.info(\"[同步启动选项]\" + info);\r\n        switch (info.scene) {\r\n            case 1044:\r\n                if (info.shareTicket) {\r\n                    Common.shareTickets.push(info.shareTicket);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n});","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IInjectBinder, __IC_InjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\n\r\n//引用注入装饰器\r\nexport class LookRankCommand extends Command{\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    execute(){\r\n        //console.info(\"[查看排行榜开始]\");\r\n        this.lookRank();\r\n    }\r\n\r\n    lookRank(){\r\n        this.inj.unbindAllMark();\r\n        //let a = Common.persistRootNode;\r\n        cc.director.loadScene('Rank')\r\n    }\r\n}","import {StartCommand} from \"../command/StartCommand\"\r\nimport { __IC_SignalManager, ISignalManager } from \"../../Lib/Framework/Signal/SignalManager\";\r\nimport {IContext,Context} from \"../../Lib/Framework/Context/Context\"\r\nimport { MainSignalManager } from \"../signal/MainSignalManager\"\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { UpdateCommand } from \"../command/UpdateCommand\";\r\nimport { GenerateCommand } from \"../command/GenerateCommand\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport { RestartCommand } from \"../command/RestartCommand\";\r\nimport { LookRankCommand } from \"../command/LookRankCommand\";\r\nimport { MatchCommand } from \"../command/MatchCommand\";\r\nimport PrefabManager from \"../util/PrefabManager\";\r\nimport { ManagerType, __IC_Manager } from \"../util/Manager\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { TouchUtil } from \"../util/TouchUtil\";\r\nimport { InputControlCommand } from \"../command/InputControlCommand\";\r\nimport { InputModel } from \"../Model/InputModel\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { AudioUtil } from \"../util/AudioUtil\";\r\nimport AudioManager from \"../util/AudioManager\";\r\nimport { BackHomeCommand } from \"../command/BackHomeCommand\";\r\n\r\nexport class MainContext extends Context{\r\n    constructor(root: any){\r\n        super(root);\r\n    }\r\n    //添加核心\r\n    addCore(){\r\n        super.addCore();\r\n        //注入信号管理器单例\r\n        this.injectBinder.bind(__IC_SignalManager).to(MainSignalManager).toSingleton();\r\n        //绑定数据\r\n        this.injectBinder.bind(__IC_Model).toValue(MainModel.Instance).toName(ModelType.Main);\r\n        this.injectBinder.bind(__IC_Model).toValue(InputModel.Instance).toName(ModelType.Input);\r\n        //绑定工具\r\n        this.injectBinder.bind(__IC_Util).toValue(MainUtil.Instance).toName(UtilType.Main);\r\n        this.injectBinder.bind(__IC_Util).toValue(TouchUtil.Instance).toName(UtilType.Touch);\r\n        this.injectBinder.bind(__IC_Util).toValue(AudioUtil.Instance).toName(UtilType.Audio);\r\n\r\n        //绑定管理器\r\n        this.injectBinder.bind(__IC_Manager).toValue(PrefabManager.Instance).toName(ManagerType.Prefab);\r\n        this.injectBinder.bind(__IC_Manager).toValue(AudioManager.Instance).toName(ManagerType.Audio);\r\n\r\n        //console.info(\"添加核心\");\r\n    }\r\n    //映射绑定\r\n    mapBindings(){\r\n        super.mapBindings();\r\n        //console.info(\"映射绑定\");\r\n        let signalMgr : ISignalManager= this.injectBinder.getInstance(__IC_SignalManager,null);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Start)).to(StartCommand);\r\n        //绑定更新信号到更新命令,并使用池进行缓存\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Update)).to(UpdateCommand).Pooled();\r\n        //生成游戏视图节点\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Generate)).to(GenerateCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Restart)).to(RestartCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.LookRank)).to(LookRankCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Match)).to(MatchCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.InputControl)).to(InputControlCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.BackHome)).to(BackHomeCommand);\r\n\r\n    }\r\n    start() : IContext{\r\n        super.start();\r\n        //console.info(\"[启动环境]\");\r\n        return this;\r\n    } \r\n}\r\n","import {Singleton} from \"../util/Singleton\";\r\nimport {IModel} from \"../util/Model\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\n\r\n/**\r\n * 应该将需要生命周期较长的变量存储在数据模型里，然后在其他类中通过注入的方式获取数据模型\r\n */\r\nexport class MainModel extends Singleton implements IModel {\r\n    //食物对象池，减少创建对象的开销\r\n    public foodPool: PrefabPool = null;\r\n    //当前的食物节点列表\r\n    public currentFoodNodes = [];\r\n    //最后的食物索引\r\n    public lastFoodIndex = 0;\r\n    //最后的轨道\r\n    public lastTrack = 0;\r\n\r\n    public animalDatas = [{\r\n        image: 'animals/bird',\r\n        type: '0',\r\n        spriteFrame: null,\r\n    }, {\r\n        image: 'animals/bear',\r\n        type: '1',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'animals/rabbit',\r\n        type: '2',\r\n        spriteFrame: null,\r\n    }, {\r\n        image: 'animals/dog',\r\n        type: '3',\r\n        spriteFrame: null\r\n    }]\r\n    public foodDatas = [{\r\n        image: 'foods/food-bird',\r\n        type: '0',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'foods/food-bear',\r\n        type: '1',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'foods/food-rabbit',\r\n        type: '2',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'foods/food-dog',\r\n        type: '3',\r\n        spriteFrame: null\r\n    }]\r\n    public rotateDur = 0.1\r\n    public isRotationing = false\r\n    public animalTextureRect = {\r\n        width: 264,\r\n        height: 268\r\n    }\r\n    //暂停标记\r\n    public pauseFlag = true;\r\n    //准备状态标记\r\n    public readyFlag = false;\r\n    //游戏被隐藏\r\n    public isHide = false;\r\n    //是否已经观看过广告\r\n    public isLookVideo = false;\r\n\r\n    public score = 0;\r\n    public timer = 0;\r\n    public lastTimer = 0;\r\n    public timePeriod = 2.5;\r\n    public currentLevel = 0;\r\n\r\n\r\n    public initTimePeriod = 0;\r\n\r\n    public minTimePeriod = 0.8;\r\n\r\n    public lastScore = 0;\r\n    public maxScore = 0;\r\n\r\n    public harderRatios = (() => {\r\n        const list = []\r\n        for (let i = 0; i <= 20; i++) {\r\n            list[i] = [i * 200, 0.075]\r\n        }\r\n        return list\r\n    })();\r\n}","import {__IC_SignalManager,ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport {MainModel} from '../Model/MainModel';\r\nimport { inject } from '../../lib/framework/Injector/InjectDecorator';\r\nimport { IocView } from '../../lib/extensions/IocView';\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport Common from \"../Common\";\r\nimport { Helper } from \"../helper/Helper\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class MainNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl: MainModel;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n        //注册节点\r\n        this.inj.bind(cc.Node).toName(\"MainNode\").toValue(this.node).unBind();\r\n        //执行开始信号\r\n        this.sMgr.get(MainSignalEnum.Start).dispatch();\r\n\r\n        Common.WxGameApi.onHide(()=>{\r\n            console.info(\"[隐藏状态]\");\r\n            this.mMdl.isHide = true;\r\n        });\r\n        Common.WxGameApi.onShow(()=>{\r\n            console.info(\"[显示状态]\" + Common.viedoHandle);\r\n            this.mMdl.isHide = false;\r\n            //继续播放被中断的视频\r\n            if(Common.viedoHandle){\r\n                //Helper.getAllInfo(Common.viedoHandle);\r\n                let status = Common.viedoHandle.emitter.event + \"\";\r\n                if(status === \"onVideoPause\"){\r\n                    console.info(\"[继续播放]\" + Common.viedoHandle.emitter.event);\r\n                    Common.viedoHandle.play();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    update(dt) {\r\n\r\n    }\r\n}","import {IRoot} from \"../../Lib/Framework/Context/IRoot\"\r\nimport {IContext} from \"../../Lib/Framework/Context/Context\"\r\nimport {IocRoot} from \"../../lib/extensions/IocRoot\"\r\nimport {MainContext} from \"./MainContext\"\r\nimport PersistRoot from \"../PersistRoot\";\r\nimport Common from \"../Common\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainRoot extends IocRoot implements IRoot {\r\n    //环境容器\r\n    public context: IContext;\r\n\r\n    onLoad () {\r\n        //let context = new MainContext(this);\r\n        this.context = Common.persistRootNode.context;\r\n        //this.context.restart();\r\n    }\r\n\r\n    start () {\r\n        if(this.context){\r\n            //console.info(this.context.getRoot().node.name);\r\n        }\r\n    }\r\n}\r\n\r\n","//主要的信号枚举类型,注意要确保不出现重复的字符串\r\nexport enum MainSignalEnum{\r\n    //开始命令\r\n    Start = \"Start\",\r\n    //更新命令\r\n    Update = \"Update\",\r\n    //生成视图节点命令\r\n    Generate = \"GenerateViewNodes\",\r\n    //重新开始\r\n    Restart = \"Restart\",\r\n    //查看排行榜\r\n    LookRank = \"LookRank\",\r\n    //记分逻辑\r\n    Match = \"Match\",\r\n    //输入控制\r\n    InputControl = \"InputControl\",\r\n    //返回主菜单\r\n    BackHome = \"BackHome\",\r\n}\r\n\r\nexport enum GameSignalEnum{\r\n    onMatch = \"OnMatch\",\r\n    onNotMatch = \"OnNotMatch\"\r\n}","import {SignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\n\r\nexport class MainSignalManager extends SignalManager{\r\n    info : string = \"this is a main signal manager\";\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\nexport class MainUtil extends Singleton implements IUtil{\r\n    public getSceneSize(){\r\n        return cc.winSize;\r\n    }\r\n    /**\r\n     * 异步转换资源文件为可渲染文件的对象\r\n     * @param resourceUrl 资源文件的地址\r\n     */\r\n    public spriteRes(resourceUrl) {\r\n        return new Promise<cc.SpriteFrame>((resolve, reject) => {\r\n            cc.loader.loadRes(resourceUrl, cc.SpriteFrame, (err, spriteFrame : cc.SpriteFrame) => {\r\n                if (err) throw err\r\n                resolve(spriteFrame);\r\n            })\r\n        })\r\n    }\r\n    \r\n    public randomCoin() {\r\n        return Math.round(Math.random())\r\n    }\r\n    \r\n    public randomNumber(size) {\r\n        return Math.floor(Math.random() * size)\r\n    }\r\n    \r\n    public randomValue(...values) {\r\n        return values[this.randomNumber(values.length)]\r\n    }\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Manager extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IManager\";\r\n    }\r\n}\r\nexport interface IManager{\r\n\r\n}\r\n/**\r\n * 管理器类型枚举\r\n */\r\nexport enum ManagerType{\r\n    Prefab = \"Prefab\",\r\n    Audio = \"Audio\",\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport Common from \"../Common\";\r\nimport Food from \"../view/Food\";\r\nimport { GameSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport PauseNode from \"../view/PauseNode\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport AudioManager from \"../util/AudioManager\";\r\n\r\n//引用注入装饰器\r\nexport class MatchCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Manager,ManagerType.Audio)\r\n    aMgr : AudioManager;\r\n    @inject(cc.Node,\"Score\")\r\n    scoreNode : cc.Node;\r\n    @inject(cc.Node,\"Pause\")\r\n    pauseNode : cc.Node;\r\n\r\n    execute(match){\r\n        //console.info(\"[游戏判断]\");\r\n        switch(match){\r\n            case GameSignalEnum.onMatch:\r\n                this.onMatch();\r\n                break;\r\n            case GameSignalEnum.onNotMatch:\r\n                this.onNotMatch();\r\n                break;\r\n        }\r\n    }\r\n    //增加分数\r\n    gainPoint() {\r\n        this.aMgr.play(\"Score\");\r\n        this.mMdl.score +=100;\r\n        this.scoreNode.getComponent(cc.Label).string = \"\"+Number(this.mMdl.score)\r\n    }\r\n    onMatch() {\r\n        this.gainPoint()\r\n    }\r\n\r\n    onNotMatch() {\r\n        this.mMdl.lastScore = this.mMdl.score;\r\n        //游戏结束时存储分数\r\n        Common.WxGameApi.saveScore(this.mMdl.lastScore);\r\n        this.mMdl.pauseFlag = true\r\n        this.pauseNode.active = true\r\n        this.pauseNode.getComponent(PauseNode).show();\r\n        this.pauseNode.getComponent(PauseNode).updateScore(this.mMdl.score);\r\n        this.stopAllCurrent();\r\n    }\r\n\r\n    stopAllCurrent() {\r\n        //console.info(\"[停止当前游戏进程]\");\r\n        //let a = Common.persistRootNode;\r\n        if(this.mMdl.currentFoodNodes&&this.mMdl.currentFoodNodes.length>0){\r\n            this.mMdl.currentFoodNodes.forEach(foodNode => {\r\n                foodNode.getComponent(Food).inited = false\r\n            })\r\n        }\r\n    }\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Model extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IModel\"\r\n    }\r\n}\r\nexport interface IModel{\r\n\r\n}\r\n/**\r\n * 数据模型类型枚举\r\n */\r\nexport enum ModelType{\r\n    Main = \"Main\",\r\n    Input = \"Input\",\r\n}","import Common from \"../Common\";\r\nimport AudioManager from \"../util/AudioManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Option extends cc.Component {\r\n    @property(cc.Node)\r\n    modeSwitchButton : cc.Node;\r\n    @property(cc.Node)\r\n    audioSwitchButton : cc.Node;\r\n    onLoad () {\r\n\r\n    }\r\n\r\n    start () {\r\n        let that = this;\r\n        setTimeout(() => {\r\n            that.modeSwitchButton.getComponent(\"SwitchButton\").setStatus(Common.operatorMode);\r\n            that.audioSwitchButton.getComponent(\"SwitchButton\").setStatus(Common.enableAudio);\r\n        }, 0);\r\n    }\r\n\r\n    backHome(){\r\n        cc.director.loadScene('Begin');\r\n    }\r\n\r\n    modeSwitch () {\r\n        Common.operatorMode = this.modeSwitchButton.getComponent(\"SwitchButton\").status;\r\n        console.info(\"[切换操作模式]\"+Common.operatorMode);\r\n    }\r\n\r\n    audioSwitch(){\r\n        Common.enableAudio = this.audioSwitchButton.getComponent(\"SwitchButton\").status;\r\n        if(Common.enableAudio==0){\r\n            AudioManager.Instance.setVolume(0);\r\n        }else{\r\n            AudioManager.Instance.setVolume(1);\r\n        }\r\n        console.info(\"[切换音效模式]\"+Common.enableAudio);\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PauseNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl:MainModel\r\n    @property(cc.Label)\r\n    score:cc.Label = null;\r\n    @property(cc.Sprite)\r\n    mainButton:cc.Sprite = null;\r\n    @property(cc.Label)\r\n    mainTop:cc.Label = null;\r\n    @property(cc.Label)\r\n    mainBotton:cc.Label = null;\r\n    @property(cc.SpriteFrame)\r\n    playVideo : cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    replayFrame : cc.SpriteFrame = null;\r\n\r\n    onLoad () {\r\n        super.onLoad();\r\n    }\r\n\r\n    start () {\r\n        super.start();\r\n    }\r\n    show(){\r\n        //如果已经观看过广告了\r\n        if(this.mMdl.isLookVideo){\r\n            console.info(\"[无法复活]\");\r\n            this.mainButton.spriteFrame = this.replayFrame;\r\n            this.mainTop.string = \"再接再厉\";\r\n            this.mainBotton.string = \"重新开始\";\r\n        }else{\r\n            console.info(\"[可以复活]\");\r\n            this.mainButton.spriteFrame = this.playVideo;\r\n            this.mainTop.string = \"观看广告\";\r\n            this.mainBotton.string = \"满血复活\";\r\n        }\r\n    }\r\n    updateScore(value){\r\n        this.score.string = value;\r\n    } \r\n    //重新开始按钮被点击时\r\n    onRestartClicked(){\r\n        console.info(\"[观看过广告]\"+this.mMdl.isLookVideo);\r\n        if(this.mMdl.isLookVideo){\r\n            this.sMgr.get(MainSignalEnum.Restart).dispatch(false);\r\n        }\r\n        else{\r\n            //发布重新开始信号并且播放视频\r\n            this.sMgr.get(MainSignalEnum.Restart).dispatch(true);\r\n        }\r\n    }\r\n    //排行榜按钮被点击时\r\n    onLookRankClicked(){\r\n        this.sMgr.get(MainSignalEnum.LookRank).dispatch();\r\n    }\r\n    onBackHomeClicked(){\r\n        this.sMgr.get(MainSignalEnum.BackHome).dispatch();\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import Common from \"./Common\";\r\nimport PrefabManager from \"./util/PrefabManager\";\r\nimport { IRoot } from \"../lib/framework/Context/IRoot\";\r\nimport { MainContext } from \"./context/MainContext\";\r\nimport AudioManager from \"./util/AudioManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PersistRoot extends cc.Component implements IRoot {\r\n    public context;\r\n\r\n    @property([cc.Prefab])\r\n    prefabs: Array<cc.Prefab> = [];\r\n    @property([cc.AudioClip])\r\n    clips: Array<cc.AudioClip> = [];\r\n    @property([cc.AudioSource])\r\n    audios: Array<cc.AudioSource> = [];\r\n    @property(cc.AudioSource)\r\n    bgm:cc.AudioSource = null;\r\n\r\n\r\n    onLoad () {\r\n        //防止重复执行初始化\r\n        if(Common.isInit)return;\r\n        cc.game.setFrameRate(60);\r\n        Common.isInit = true;\r\n        console.info(\"[当前版本]\"+Common.version + \"[帧率]\" + cc.game.getFrameRate());\r\n        //配置为常驻节点\r\n        if(!Common.persistRootNode){\r\n            cc.game.addPersistRootNode(this.node);\r\n            Common.persistRootNode = this;\r\n        }\r\n        this.context = new MainContext(this)\r\n        this.loadPrefab();\r\n        this.loadAudio();\r\n    }\r\n    loadPrefab(){\r\n        this.prefabs.forEach(prefab => {\r\n            PrefabManager.Instance.setPrefab(prefab.name,prefab);\r\n        });\r\n    }\r\n    loadAudio(){\r\n        this.clips.forEach(audio=>{\r\n            AudioManager.Instance.setAudio(audio.name,audio);\r\n        });\r\n        AudioManager.Instance.bgm = this.bgm;\r\n        AudioManager.Instance.audios = this.audios;\r\n        AudioManager.Instance.playBgm();\r\n\r\n    }\r\n    start () {\r\n\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import {Stack} from \"./Stack\"\r\nimport { IConstructorName } from \"../framework/IocConst\";\r\nimport {inject} from \"../framework/Injector/InjectDecorator\";\r\nimport {Prototype} from \"./Prototype\"\r\n\r\nexport enum PoolOverflowBehavior\r\n{\r\n    /// Requesting more than the fixed size will throw an exception.\r\n    EXCEPTION,\r\n    \r\n    /// Requesting more than the fixed size will throw a warning.\r\n    WARNING,\r\n\r\n    /// Requesting more than the fixed size will return null and not throw an error.\r\n    IGNORE\r\n}\r\nexport enum BindingConstraintType\r\n{\r\n    /// Constrains a SemiBinding to carry no more than one item in its Value\r\n    ONE,\r\n    /// Constrains a SemiBinding to carry a list of items in its Value\r\n    MANY,\r\n    /// Instructs the Binding to apply a Pool instead of a SemiBinding\r\n    POOL,\r\n}\r\nexport enum PoolInflationType\r\n{\r\n    /// When a dynamic pool inflates, add one to the pool.\r\n    INCREMENT,\r\n\r\n    /// When a dynamic pool inflates, double the size of the pool\r\n    DOUBLE\r\n}\r\nexport interface IPoolable\r\n{\r\n    /// <summary>\r\n    /// Clean up this instance for reuse.\r\n    /// </summary>\r\n    /// Restore methods should clean up the instance sufficiently to remove prior state.\r\n    restore ();\r\n\r\n    /// <summary>\r\n    /// Keep this instance from being returned to the pool \r\n    /// </summary>\r\n    retain ();\r\n\r\n    /// <summary>\r\n    /// Release this instance back to the pool.\r\n    /// </summary>\r\n    /// Release methods should clean up the instance sufficiently to remove prior state.\r\n    release();\r\n\r\n    /// <summary>\r\n    /// Is this instance retained?\r\n    /// </summary>\r\n    /// <value><c>true</c> if retained; otherwise, <c>false</c>.</value>\r\n    isRetain : boolean;\r\n}\r\nexport interface IInstanceProvider{\r\n    /// Retrieve an Instance based on the key.\r\n    /// ex. `injectionBinder.Get<cISomeInterface>();`\r\n    //getInstance<T>() : T;\r\n\r\n    /// Retrieve an Instance based on the key.\r\n    /// ex. `injectionBinder.Get(typeof(ISomeInterface));`\r\n    getInstance(key : object) : object;\r\n}\r\nexport class __IC_InstanceProvider extends IConstructorName{\r\n    //getInstance<T>() : T{return;} \r\n    get constructorName(){return \"IInstanceProvider\";}\r\n}\r\nexport interface IManagedList\r\n{\r\n    /// Add a value to this List. \r\n    add( value : object) : IManagedList;\r\n\r\n    /// Add a set of values to this List. \r\n    add( list : object[]) : IManagedList;\r\n\r\n    /// Remove a value from this List. \r\n    remove( value : object) : IManagedList;\r\n\r\n    /// Remove a set of values from this List. \r\n    remove( list : object[]) : IManagedList;\r\n\r\n    /// Retrieve the value of this List.\r\n    /// If the constraint is MANY, the value will be an Array.\r\n    /// If the constraint is POOL, this becomes a synonym for GetInstance().\r\n    value : object;\r\n}\r\nexport interface IPool extends IManagedList\r\n{\r\n    /// A class that provides instances to the pool when it needs them.\r\n    /// This can be the InjectionBinder, or any class you write that satisfies the IInstanceProvider\r\n    /// interface.\r\n    instanceProvider : IInstanceProvider;\r\n\r\n    /// The object Type of the first object added to the pool.\r\n    /// Pool objects must be of the same concrete type. This property enforces that requirement. \r\n    poolType : object;\r\n    /// <summary>\r\n    /// Gets an instance from the pool if one is available.\r\n    /// </summary>\r\n    /// <returns>The instance.</returns>\r\n    getInstance() : object;\r\n\r\n    /// <summary>\r\n    /// Returns an instance to the pool.\r\n    /// </summary>\r\n    /// If the instance being released implements IPoolable, the Release() method will be called.\r\n    /// <param name=\"value\">The instance to be return to the pool.</param>\r\n    returnInstance (value : object);\r\n\r\n    /// <summary>\r\n    /// Remove all instance references from the Pool.\r\n    /// </summary>\r\n    clean ();\r\n\r\n    /// <summary>\r\n    /// Returns the count of non-committed instances\r\n    /// </summary>\r\n    available : number;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the size of the pool.\r\n    /// </summary>\r\n    /// <value>The pool size. '0' is a special value indicating infinite size. Infinite pools expand as necessary to accomodate requirement.</value>\r\n    size : number;\r\n\r\n    /// <summary>\r\n    /// Returns the total number of instances currently managed by this pool.\r\n    /// </summary>\r\n    instanceCount : number;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the overflow behavior of this pool.\r\n    /// </summary>\r\n    /// <value>A PoolOverflowBehavior value.</value>\r\n    overflowBehavior : PoolOverflowBehavior;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the type of inflation for infinite-sized pools.\r\n    /// </summary>\r\n    /// By default, a pool doubles its InstanceCount.\r\n    /// <value>A PoolInflationType value.</value>\r\n    inflationType : PoolInflationType;\r\n}\r\nexport class Pool implements IPool, IPoolable\r\n{\r\n\r\n    @inject(__IC_InstanceProvider)\r\n    public instanceProvider : IInstanceProvider\r\n\r\n    /// Stack of instances still in the Pool.\r\n    protected instancesAvailable : Stack<any> = new Stack<any> ();\r\n\r\n    /// A HashSet of the objects checked out of the Pool.\r\n    protected instancesInUse :Set<object>= new Set<object> ();\r\n\r\n    protected _instanceCount : number;\r\n\r\n    public size : number;\r\n\r\n    public overflowBehavior : PoolOverflowBehavior;\r\n\r\n    public inflationType : PoolInflationType;\r\n\r\n    public uniqueValues : boolean;\r\n\r\n    public constraint : any;\r\n\r\n    public poolType : object;\r\n    \r\n    public isRetain : boolean;\r\n\r\n    public Pool ()\r\n    {\r\n        this.size = 0;\r\n        this.constraint = BindingConstraintType.POOL;\r\n        this.uniqueValues = true;\r\n        \r\n        this.overflowBehavior = PoolOverflowBehavior.EXCEPTION;\r\n        this.inflationType = PoolInflationType.DOUBLE;\r\n    }\r\n    public bind(type){\r\n        this.poolType = type;\r\n    }\r\n\r\n    public add ( value : object) : IManagedList\r\n    {\r\n        //检查对象原型是否相同\r\n        this.failIf(!Prototype.isProtetype(value,this.poolType) , \" Pool Type mismatch. Pools must consist of a common concrete type.\\n\\t\\tPool type: \" + this.poolType + \"\\n\\t\\tMismatch type: \" + value);\r\n        this._instanceCount++;\r\n        this.instancesAvailable.push (value);\r\n        return this;\r\n    }\r\n    public addList (list : object[]) : IManagedList\r\n    {\r\n        if(list&&list.length>0){\r\n            list.forEach((item : object)=>{\r\n                this.add (item);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    public remove (value : object) : IManagedList\r\n    {\r\n        this._instanceCount--;\r\n        this.removeInstance (value);\r\n        return this;\r\n    }\r\n\r\n    public removeList (list : object[]) : IManagedList\r\n    {\r\n        if(list&&list.length>0){\r\n            list.forEach((item : object)=>{\r\n                this.remove(item);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public get value() : object\r\n    {\r\n        return this.getInstance ();\r\n    }\r\n\r\n    /// The object Type of the first object added to the pool.\r\n    /// Pool objects must be of the same concrete type. This property enforces that requirement. \r\n\r\n    public get instanceCount() : number\r\n    {\r\n        return this._instanceCount;\r\n    }\r\n\r\n    public getInstance () : object\r\n    {\r\n        // Is an instance available?\r\n        if (this.instancesAvailable.size > 0)\r\n        {\r\n            let retv : object = this.instancesAvailable.pop ();\r\n            this.instancesInUse.add (retv);\r\n            return retv;\r\n        }\r\n\r\n        let instancesToCreate : number = 0;\r\n\r\n        //New fixed-size pool. Populate.\r\n        if (this.size > 0)\r\n        {\r\n            if (this.instanceCount == 0)\r\n            {\r\n                //New pool. Add instances.\r\n                instancesToCreate = this.size;\r\n            }\r\n            else\r\n            {\r\n                //Illegal overflow. Report and return null\r\n                this.failIf (this.overflowBehavior == PoolOverflowBehavior.EXCEPTION,\r\n                    \"A pool has overflowed its limit.\\n\\t\\tPool type: \" + this.poolType);\r\n\r\n                if (this.overflowBehavior == PoolOverflowBehavior.WARNING)\r\n                {\r\n                    console.warn (\"WARNING: A pool has overflowed its limit.\\n\\t\\tPool type: \" + this.poolType);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //Zero-sized pools will expand.\r\n            if (this.instanceCount == 0 || this.inflationType == PoolInflationType.INCREMENT)\r\n            {\r\n                instancesToCreate = 1;\r\n            }\r\n            else\r\n            {\r\n                instancesToCreate = this.instanceCount;\r\n            }\r\n        }\r\n\r\n        if (instancesToCreate > 0)\r\n        {\r\n            this.failIf (this.instanceProvider == null, \"A Pool of type: \" + this.poolType + \" has no instance provider.\");\r\n\r\n            for (let a = 0; a < instancesToCreate; a++)\r\n            {\r\n                let newInstance : object= this.instanceProvider.getInstance (this.poolType);\r\n                this.add (newInstance);\r\n            }\r\n            return this.getInstance ();\r\n        }\r\n\r\n        //If not, return null\r\n        return null;\r\n    }\r\n\r\n    public returnInstance ( value : object)\r\n    {\r\n        if (this.instancesInUse.has (value))\r\n        {\r\n            /* if (value extends IPoolable)\r\n            {\r\n                (value as IPoolable).Restore ();\r\n            } */\r\n            (value as IPoolable).restore ();\r\n            this.instancesInUse.delete (value);\r\n            this.instancesAvailable.push (value);\r\n        }\r\n    }\r\n\r\n    public clean()\r\n    {\r\n        this.instancesAvailable.clear();\r\n        this.instancesInUse = new Set<object> ();\r\n        this._instanceCount = 0;\r\n    }\r\n\r\n    public get available() : number\r\n    {\r\n        return this.instancesAvailable.size;\r\n\r\n    }\r\n\r\n    public restore ()\r\n    {\r\n        this.clean ();\r\n        this.size = 0;\r\n    }\r\n\r\n    public retain()\r\n    {\r\n        this.isRetain = true;\r\n    }\r\n\r\n    public release()\r\n    {\r\n        this.isRetain = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Permanently removes an instance from the Pool\r\n    /// </summary>\r\n    /// In the event that the removed Instance is in use, it is removed from instancesInUse.\r\n    /// Otherwise, it is presumed inactive, and the next available object is popped from\r\n    /// instancesAvailable.\r\n    /// <param name=\"value\">An instance to remove permanently from the Pool.</param>\r\n    protected removeInstance(value : object)\r\n    {\r\n        this.failIf (value != this.poolType, \"Attempt to remove a instance from a pool that is of the wrong Type:\\n\\t\\tPool type: \" + this.poolType.toString() + \"\\n\\t\\tInstance type: \" + value.toString());\r\n        if (this.instancesInUse.has(value))\r\n        {\r\n            this.instancesInUse.delete (value);\r\n        }\r\n        else\r\n        {\r\n            this.instancesAvailable.pop ();\r\n        }\r\n    }\r\n\r\n    protected failIf(condition : boolean, message : string)\r\n    {\r\n        if (condition)\r\n        {\r\n            throw new Error(message);\r\n        }\r\n    }\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IManager } from \"./Manager\";\r\n\r\nexport default class PrefabManager extends Singleton implements IManager{\r\n    public isInit = false;\r\n    private prefabMap : Map<any,any>\r\n\r\n    protected onConstructor(){\r\n        this.prefabMap = new Map();\r\n    }\r\n    hasPrefab(key):boolean{\r\n        return this.prefabMap.has(key);\r\n    }\r\n    getPrefab(key):cc.Prefab{\r\n        return this.prefabMap.get(key);\r\n    }\r\n    setPrefab(key,value){\r\n        this.prefabMap.set(key,value);\r\n    }\r\n\r\n}","/**\n * 简单的对象池\n */\nexport default class PrefabPool {\n\ttype;\n\tprefab;\n\tnodePool : cc.NodePool;\n\n\tconstructor(type, prefab) {\n\t\tthis.type = type\n\t\tthis.prefab = prefab\n\t\tthis.nodePool = new cc.NodePool(type)\n\t}\n\t/**\n\t * 获取节点\n\t */\n\tget() {\n\t\tlet node : cc.Node= null\n\t    if (this.nodePool.size() > 0) {\n\t        node = this.nodePool.get()\n\t    } else {\n\t        node = cc.instantiate(this.prefab)\n\t\t}\n\t\tnode.active = true;\n\t    return node\n\t}\n\t/**\n\t * 回收节点\n\t * @param node \n\t */\n\tres(node : cc.Node) {\n\t\tnode.active = false;\n\t\tthis.nodePool.put(node)\n\t}\n\n}","/**\r\n * 原型缓存字典，用于检测一个对象的基类\r\n */\r\nexport class Prototype {\r\n    //继承映射表\r\n    private static prototypeMap = new Map<Object,Set<Object>>();\r\n    /**\r\n     * 基类检测函数\r\n     * @param instance 实例\r\n     * @param prototype 基类\r\n     */\r\n    public static isProtetype(type, prototype): boolean {\r\n        //let b = type instanceof prototype;\r\n        return type instanceof prototype;\r\n/*         if(!(type instanceof Object))return false;\r\n        let constructor = type.constructor;\r\n        if(this.prototypeMap.has(constructor)){\r\n            let sett = this.prototypeMap.get(constructor);\r\n            if(sett.has(prototype)){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return false; */\r\n    }\r\n    /**\r\n     * 获取继承列表\r\n     * @param instance 实例\r\n     */\r\n    public static getPrototypeList(target) {\r\n        let that = this;\r\n        if(!this.hasPrototypeList(target)){\r\n            let extendsList;\r\n            //获取继承列表\r\n            extendsList = [];\r\n            //用构造函数代替类型来使用\r\n            let types = [];\r\n            //types.push(target.constructor);\r\n            //继承类型\r\n            let prototype = target.__proto__;\r\n            //构造函数\r\n            let constructor;\r\n            while (true) {\r\n                //如果继承存在\r\n                if (prototype) {\r\n                    //因为压缩代码会把所有对象的名称都压缩掉，所以这里使用构造函数作为键值\r\n                    constructor = prototype.constructor;\r\n                    //搜索到基类一层\r\n                    if (constructor === Object) break;\r\n                    //排除以__IC__开头模拟接口的临时替代类型\r\n                    if (!constructor.name.startsWith(\"__IC_\")) {\r\n                        extendsList.push(constructor);\r\n                        types.push(constructor);\r\n                        //为每一个类都添加继承关系\r\n                        types.forEach(type => {\r\n                            that.AddPrototype(type,constructor);\r\n                        });\r\n                    }\r\n                    prototype = prototype.__proto__;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }            \r\n        let values = this.prototypeMap.get(target.constructor);\r\n        return Array.from(values);\r\n    }\r\n    /**\r\n     * 添加继承关系\r\n     */\r\n    public static AddPrototype(tpye,prototype){\r\n        let extendSet : Set<Object>;\r\n        if(this.prototypeMap.has(tpye)){\r\n            extendSet = this.prototypeMap.get(tpye);\r\n        }else{\r\n            extendSet = new Set();\r\n            this.prototypeMap.set(tpye,extendSet);\r\n        }\r\n        //为继承队列加入新的继承\r\n        extendSet.add(prototype);\r\n    }\r\n    /**\r\n     * 是否存在继承列表\r\n     * @param instance 实例\r\n     */\r\n    public static hasPrototypeList(target) {\r\n        if(this.prototypeMap.has(target.constructor)){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}","import Common from \"../../common\";\r\nimport WxGameApi from \"../WxGameApi\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        subContextView: cc.Node,\r\n        tipsUiNode: cc.Node\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        let that = this;\r\n        this.rankType = 0;\r\n        this.shareCount = 0;\r\n        //设置转发选项\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            wx.updateShareMenu({\r\n                withShareTicket: true,\r\n                success() {\r\n                    //console.info(\"设置转发选项成功\");\r\n                },\r\n                fail() {\r\n                    //console.info(\"设置转发选项失败\");\r\n                }\r\n            })\r\n        }\r\n        //this.subContextView.enabled = false;\r\n        //console.info(\"[初始化功能]\");\r\n    },\r\n\r\n    start() {\r\n        //console.info(\"[主域进入排行榜界面]\");\r\n        //发送启动消息告知开发数据容器\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            //console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"start\",\r\n                    arguments: \"default\",\r\n                    data: {\r\n                        width: this.subContextView.width,\r\n                        height: this.subContextView.height\r\n                    },\r\n                }\r\n            });\r\n        }\r\n    },\r\n    //切换排行榜\r\n    switchRank(event) {\r\n        //获取切换按钮\r\n        let switchBtn = event.target;\r\n        let switchBar = event.target.getChildByName(\"Switch\");\r\n        let moveRange = switchBtn.width - switchBar.width - 10;\r\n        let that = this;\r\n        //循环切换排行榜类型\r\n        if (this.rankType < 1) {\r\n            this.rankType += 1;\r\n        } else {\r\n            this.rankType = 0;\r\n        }\r\n        switch (this.rankType) {\r\n            case 0:\r\n                switchBar.runAction(cc.moveBy(0.125, cc.v2(-moveRange, 0)));\r\n                if (WxGameApi.isRunInWeiXin) {\r\n                    that.hideShowTipsUi();\r\n                    //console.info(\"[显示好友排行]\");\r\n                    //切换到显示好友排行\r\n                    wx.getOpenDataContext().postMessage({\r\n                        message: {\r\n                            type: \"command\",\r\n                            function: \"switch\",\r\n                            arguments: \"friend\",\r\n                            data: \"\",\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            case 1:\r\n                switchBar.runAction(cc.moveBy(0.125, cc.v2(moveRange, 0)));\r\n                if (WxGameApi.isRunInWeiXin) {\r\n                    let ticket;\r\n                    if (Common.shareTickets && Common.shareTickets.length > 0) {\r\n                        ticket = Common.shareTickets[this.shareCount];\r\n                        if (!ticket) {\r\n                            //console.info(\"[意外的识别码缺失]\" + Common.shareTickets +\",\"+ this.shareCount);\r\n                            Common.shareTickets = [];\r\n                            this.shareCount = 0;\r\n                        } else {\r\n                            //循环切换群信息，索引是从0开始计算的，所以这里需要减一\r\n                            if (this.shareCount >= (Common.shareTickets.length - 1)) {\r\n                                this.shareCount = 0;\r\n                            } else {\r\n                                this.shareCount += 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.info(\"[未找到群信息]\");\r\n                        this.showTipsUi(\"无法显示群排行榜\", \"请先分享到群再查看\");\r\n                    }\r\n                    //验证群信息是否有效\r\n                    if(ticket&&ticket!=\"\"){\r\n                        wx.getShareInfo({\r\n                            shareTicket : ticket,\r\n                            success(res){\r\n                                //console.info(\"[有效的群信息]\" + ticket + \",\" + res);\r\n                            },\r\n                            fail(err){\r\n                                //console.info(\"[无效的群信息]\" + ticket + \",\" + err);\r\n                            }\r\n                        })\r\n                    }else{\r\n                        ticket = \"\";\r\n                    }\r\n                    //console.info(\"[显示群信息]\" + Common.shareTickets.length);\r\n                    //切换到显示群排行\r\n                    wx.getOpenDataContext().postMessage({\r\n                        message: {\r\n                            type: \"command\",\r\n                            function: \"switch\",\r\n                            arguments: \"group\",\r\n                            data: ticket,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        //console.info(\"[切换排行榜]\" + this.rankType);\r\n    },\r\n\r\n    backhome() {\r\n        cc.director.loadScene(\"Begin\");\r\n        //清理排行榜\r\n/*         if (WxGameApi.isRunInWeiXin) {\r\n            //console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"clear\",\r\n                    arguments: \"\",\r\n                    data: \"\",\r\n                }\r\n            });\r\n        } */\r\n    },\r\n\r\n    shareApp() {\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        let url = \"https://636f-common-510ecc-1257233686.tcb.qcloud.la/share_rabbit.png\";\r\n        let that = this;\r\n        wx.shareAppMessage({\r\n            title: \"一起来玩游戏吧！\",\r\n            imageUrl: url,\r\n            success(res) {\r\n                //console.info(\"[转发成功]\" + res.shareTickets);\r\n                //没有获取到群消息\r\n                if (!res.shareTickets || res.shareTickets === \"\") {\r\n                    //console.info(\"[转发到个人用户]\");\r\n                    if(that.rankType === 1){\r\n                        that.showTipsUi(\"无法显示群排行榜\", \"检测到转发到个人或者无效的群\");\r\n                    }\r\n                } else {\r\n                    that.hideShowTipsUi();\r\n                    //console.info(\"[转发到微信群]\" + res.shareTickets);\r\n                    //如果存在群组信息\r\n                    if (res.shareTickets.length > 0) {\r\n                        let isExist = false;\r\n                        //保存群组信息\r\n                        for (let i = 0; i < res.shareTickets.length; i++) {\r\n                            for (let j = 0; j < Common.shareTickets.length; j++) {\r\n                                //检查是否存在重复的群识别号\r\n                                if (res.shareTickets[i] === Common.shareTickets[j]) {\r\n                                    isExist = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!isExist) {\r\n                                //console.info(\"[存储群识别码]\" + res.shareTickets[i]);\r\n                                Common.shareTickets.push(res.shareTickets[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    //保持在群组页面时\r\n                    if(that.rankType === 1){\r\n                        //立刻刷新页面\r\n                        wx.getOpenDataContext().postMessage({\r\n                            message: {\r\n                                type: \"command\",\r\n                                function: \"switch\",\r\n                                arguments: \"group\",\r\n                                data: res.shareTickets,\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            fail(res) {\r\n                //console.info(\"[转发失败]\");\r\n            }\r\n        });\r\n\r\n    },\r\n    //显示提示框\r\n    showTipsUi(title, content) {\r\n        if(!this.tipsUiNode)return;\r\n        let tipsUiView = this.tipsUiNode.getComponent(\"TipsUiView\");\r\n        if (!this.tipsUiNode.active) {\r\n            this.tipsUiNode.active = true;\r\n        }\r\n        if (tipsUiView) {\r\n            tipsUiView.display(title, content);\r\n        } else {\r\n            //console.info(\"[提示UI不存在]\");\r\n        }\r\n    },\r\n    hideShowTipsUi(){\r\n        if(!this.tipsUiNode)return;\r\n        if (this.tipsUiNode.active) {\r\n            this.tipsUiNode.active = false;\r\n        }\r\n    }\r\n});","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport Common from \"../Common\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport PrefabManager from \"../util/PrefabManager\";\r\nimport CountDownView from \"../view/CountDownView\";\r\nimport ArrowTipView from \"../view/ArrowTipView\";\r\n\r\n//引用注入装饰器\r\nexport class RestartCommand extends Command{\r\n    @inject(cc.Node,\"Pause\")\r\n    pauseNode : cc.Node;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl : MainUtil;\r\n    @inject(cc.Node,\"Score\")\r\n    scoreNode : cc.Node;\r\n    @inject(__IC_Manager,ManagerType.Prefab)\r\n    preMgr : PrefabManager;\r\n    @inject(cc.Node,\"MainNode\")\r\n    mainNode : cc.Node;\r\n    @inject(cc.Node, \"Avatar\")\r\n    avatarNode: cc.Node;\r\n\r\n    execute(isPlayVideo){\r\n        //console.info(\"[重新开始]\");\r\n        this.revive();\r\n        //是否需要播放广告\r\n        if(isPlayVideo){\r\n            this.playVideo();\r\n        }else{\r\n            console.info(\"[不播放广告]\");\r\n            this.restart(true);\r\n        }\r\n    }\r\n    playVideo(){\r\n        //是否已经看过广告\r\n        if(!this.mMdl.isLookVideo){\r\n            this.mMdl.isLookVideo = true;\r\n        }\r\n        //是否为微信环境\r\n        if(Common.WxGameApi.isRunInWeiXin){\r\n            console.info(\"[微信环境]\");\r\n            //从本地直接获取视频资源\r\n            if(Common.viedo){\r\n                let width = this.mUtl.getSceneSize().width*0.25;\r\n                let height = this.mUtl.getSceneSize().width*0.25;\r\n                let x = width/4;\r\n                let y = this.mUtl.getSceneSize().height/4 - height;\r\n                let url = Common.viedo;\r\n                Common.WxGameApi.checkCacheExistFile(url,(result)=>{\r\n                    if(result){\r\n                        //记录当前的播放器\r\n                        Common.viedoHandle = Common.WxGameApi.playVideo(x,y,width,height,url,10000,true,()=>{\r\n                            //重新开始但不结算\r\n                            this.restart(false);\r\n                        });\r\n                        console.info(\"[使用缓存路径]\");\r\n                    }else{\r\n                        console.info(\"[缓存路径无效]\");\r\n                        this.restart(false);\r\n                    }\r\n                })\r\n            }else{\r\n                console.info(\"[播放广告失败]\");\r\n                this.restart(false);\r\n            }\r\n        }else{\r\n            console.info(\"[无法播放广告]\");\r\n            this.restart(false);\r\n        }\r\n    }\r\n    //清理环境\r\n    revive() {\r\n        this.pauseNode.active = false\r\n        this.clearAllCurrent()\r\n    }\r\n    //结算分数\r\n    result(){\r\n        this.mMdl.isLookVideo = false;\r\n        this.mMdl.score = 0;\r\n        this.scoreNode.getComponent(cc.Label).string = \"\"+Number(this.mMdl.score)\r\n    }\r\n    /**\r\n     * 重新开始\r\n     * @param isResult 是否进行结算\r\n     */\r\n    restart(isResult:boolean){\r\n        this.mMdl.lastFoodIndex = -1\r\n        this.mMdl.lastTrack = -1\r\n        this.mMdl.lastTimer = 0\r\n        this.mMdl.timePeriod = 2.5\r\n        this.mMdl.currentLevel = 0;                    \r\n        this.mMdl.timer = this.mMdl.timePeriod;\r\n        \r\n        let waitStartTime;\r\n        let waitDurTime;\r\n        //是否结算分数\r\n        if(isResult){\r\n            this.result();\r\n            waitStartTime = 4;\r\n            waitDurTime = 2;\r\n        }else{\r\n            waitStartTime = 1;\r\n            waitDurTime = 0.75;\r\n        }\r\n        //处于准备开始的状态\r\n        this.mMdl.readyFlag = true;\r\n        if(waitDurTime>1&&this.preMgr.hasPrefab(\"ArrowTip\")){\r\n            let arrowTip : cc.Node = cc.instantiate(this.preMgr.getPrefab(\"ArrowTip\"));\r\n            this.avatarNode.addChild(arrowTip);\r\n            arrowTip.getComponent(ArrowTipView).config(100,waitDurTime*0.5,waitDurTime+2).play();\r\n        }\r\n        if(this.preMgr.hasPrefab(\"CountDown\")){\r\n            let countDown : cc.Node = cc.instantiate(this.preMgr.getPrefab(\"CountDown\"));\r\n            this.mainNode.addChild(countDown);\r\n            countDown.getComponent(CountDownView).config(waitStartTime,waitDurTime).onComplete(()=>{\r\n                this.mMdl.pauseFlag = false;\r\n                this.mMdl.readyFlag = false;\r\n            }).play();\r\n        }else{\r\n            this.mMdl.pauseFlag = false;\r\n            this.mMdl.readyFlag = false;\r\n        }\r\n    }\r\n\r\n    clearAllCurrent() {\r\n        if(this.mMdl.currentFoodNodes&&this.mMdl.currentFoodNodes.length>0){\r\n            this.mMdl.currentFoodNodes.forEach(foodNode => {\r\n                this.mMdl.foodPool.res(foodNode)\r\n            })\r\n        }\r\n        this.mMdl.currentFoodNodes = []\r\n    }\r\n}","import { IConstructorName } from \"../IocConst\"\r\nimport { __IC_Signal , Signal, ISignal } from \"./Signal\"\r\n\r\nexport interface ISignalManager {\r\n    get(symbol) : ISignal;\r\n    delete(symbol);\r\n    info: string;\r\n}\r\nexport class __IC_SignalManager extends IConstructorName {\r\n    static get constructorName(){return \"ISignalManager\";}\r\n}\r\nexport class SignalManager implements ISignalManager {\r\n    //维护一个信号指令映射表，注意不再使用的信号应该及时释放掉\r\n    _signal_dic : Map<any,ISignal>= new Map < any, ISignal > ();\r\n    info: string = \"this is a signal manager\";\r\n\r\n    public get(symbol) : ISignal{\r\n        //检查全局信号字典内是否存在对应的信号名称或枚举\r\n        if (this._signal_dic.has(symbol)) {\r\n            //获取标志对应的信号\r\n            return this._signal_dic.get(symbol);\r\n        } else {\r\n            //创建一个信号\r\n            let _signal = new Signal();\r\n            //如果使用字符串作为信号识别名，则将其绑定给信号\r\n            if(typeof symbol == \"string\")_signal.name = symbol;\r\n            //设置根环境\r\n            //_signal.setRoot(this._context.getRoot);\r\n            //建立全局信号与标志值的映射关系\r\n            this._signal_dic.set(symbol, _signal);\r\n            return _signal;\r\n        }\r\n    };\r\n\r\n    public delete(symbol) {\r\n        //检查全局信号字典内是否存在对应的信号名称或枚举\r\n        if (this._signal_dic.has(symbol)) {\r\n            //获取标志对应的信号\r\n            return this._signal_dic.delete(symbol);\r\n        }\r\n    }\r\n}","import {IocError, IConstructorName} from \"../IocConst\"\r\nexport interface ISignal {\r\n    name;\r\n    dispatch(...args);\r\n    addListener(callback:Function);\r\n    addOnceListener(callback:Function);\r\n    removeAllListeners();\r\n    /// Returns a List<System.Type> representing the Types bindable to this Signal\r\n\tgetTypes() : object[];\r\n}\r\nexport class __IC_Signal extends IConstructorName {\r\n    static get constructorName(){return \"ISignal\";};\r\n}\r\n\r\nexport class Signal implements ISignal {\r\n    public name;\r\n    //回调监听\r\n    public _listener: Function[] = [];\r\n    public _onceListener: Function[] = [];\r\n    //执行信号\r\n    public dispatch(...args) {\r\n        let that = this;\r\n        //如果存在回调函数\r\n        if (that._listener&&that._listener.length != 0) {\r\n            this._listener.forEach(function (action) {\r\n                action(that,...args);\r\n            })\r\n        }\r\n        //如果存在单次回调\r\n        if (that._onceListener&&that._onceListener.length != 0)\r\n            this._listener.forEach(function (action) {\r\n                action(that,...args);\r\n            })\r\n        //清空单次执行的监听\r\n        this._onceListener.length = 0;\r\n    }\r\n    public addListener(callback:Function){\r\n        this._listener = this.addUnique(this._listener,callback);\r\n    }\r\n    public addOnceListener(callback:Function){\r\n        this._onceListener = this.addUnique(this._onceListener,callback);\r\n    }\r\n    //清空监听\r\n    public removeAllListeners(){\r\n        this._listener.length=0;\r\n        this._onceListener.length=0;\r\n    }\r\n    //不重复添加\r\n    private addUnique(listeners : Function[], callback : Function)\r\n    {\r\n        //检查监听回调是否存在\r\n        if (listeners)\r\n        {\r\n            let isUnique = false;\r\n            for(let i = 0;i<listeners.length;i++){\r\n                //检查是否存在重复项\r\n                if(listeners[i] === callback){\r\n                    isUnique = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!isUnique){\r\n                //放入回调\r\n                listeners.push(callback);\r\n            }\r\n        }\r\n        return listeners;\r\n    }\r\n    public getTypes() : object[]\r\n    {\r\n        let retv = [];\r\n        //retv.push(this);\r\n        return retv;\r\n    }\r\n}","export class Singleton {\r\n    /** 存放初始化过的构造函数,这里用数组来存放构造函数 **/\r\n    private static classMap: Map < any, any > = new Map();\r\n\r\n    constructor() {\r\n        let clazz: any = this.constructor;\r\n        //为空时，表示浏览器不支持这样读取构造函数\r\n        if (!clazz)\r\n            return;\r\n        // 防止重复实例化\r\n        if (Singleton.classMap.has(clazz))\r\n            throw new Error(this + \" 只允许实例化一次！\");\r\n        else {\r\n            Singleton.classMap.set(clazz, this);\r\n            this.onConstructor();\r\n        }\r\n    }\r\n    protected onConstructor() {\r\n\r\n    }\r\n    public static get Instance(){\r\n        return Singleton.getInstanceOrCreate(this);\r\n    }\r\n\r\n    public static destroyInstance(clazz: any): void {\r\n        if (Singleton.classMap.has(clazz)) {\r\n            Singleton.classMap.get(clazz).onDestroy();\r\n            Singleton.classMap.delete(clazz);\r\n        }\r\n    }\r\n\r\n    public static getInstanceOrCreate(clazz: any,...args): any {\r\n        let instance;\r\n        if (Singleton.classMap.has(clazz)) {\r\n            instance = Singleton.classMap.get(clazz);\r\n            if (instance) {\r\n                return instance;\r\n            }\r\n        }\r\n        instance = new clazz(...args);\r\n        //不是Singleton的子类，则手动添加Singleton构造器会自动添加到classMap\r\n        if (!(instance instanceof Singleton)) {\r\n            Singleton.classMap.set(clazz, instance);\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n\r\n    }\r\n}","export interface IStack<T> {\r\n    //获取栈顶元素\r\n    top(): T;\r\n    //压栈\r\n    push(item: T);\r\n    //出栈\r\n    pop(): T;\r\n    //清空\r\n    clear();\r\n    //是否空栈\r\n    isEmpty: boolean;\r\n    //栈大小\r\n    size: number;\r\n}\r\n\r\nexport class Item<T> {\r\n    private _value: T;\r\n    private _next: Item<T>;\r\n    constructor(value: T, next: Item<T> = null) {\r\n        this._value = value;\r\n        this._next = next;\r\n    }\r\n    set value(value: T) {\r\n        this._value = value;\r\n    }\r\n    get value(): T {\r\n        return this._value;\r\n    }\r\n    set next(next: Item<T>) {\r\n        this._next = next;\r\n    }\r\n    get next(): Item<T> {\r\n        return this._next;\r\n    }\r\n}\r\n\r\nexport class Stack<T> implements IStack<T> {\r\n    private _header: Item<T>;\r\n    private _size: number = 0;\r\n    constructor() {\r\n        this._header = new Item<T>(null);\r\n    }\r\n    top(): T {\r\n        if (this._size === 0) {\r\n            return null;\r\n        }\r\n        return this._header.next.value;\r\n    }\r\n\r\n    /**\r\n     * 入栈\r\n     * @param item 添加的元素\r\n     * 将header的下一个元素的引用赋值给新元素的next\r\n     * 再将新元素赋值给header的next\r\n     */\r\n    push(item: T) {\r\n        let newItem = new Item<T>(item);\r\n        newItem.next = this._header.next;\r\n        this._header.next = newItem;\r\n        this._size++;\r\n    }\r\n\r\n    /**\r\n     * 出栈\r\n     * 将header之后的第一个元素移除\r\n     * 同时修改header的next到下一个元素\r\n     */\r\n    pop(): T {\r\n        if (this._size === 0) {\r\n            return null;\r\n        }\r\n        let item = this._header.next;\r\n        this._header.next = item.next;\r\n        this._size--;\r\n        item.next = null;//清除引用\r\n        return item.value;\r\n    }\r\n    clear(){\r\n        let item;\r\n        let tmp = this._header;\r\n        while(this._size !== 0){\r\n            item = tmp.next;\r\n            tmp = item;\r\n            item.next = null;\r\n            this._size--;\r\n        }\r\n        this._header = null;\r\n    }\r\n    get isEmpty(): boolean {\r\n        return this._size === 0;\r\n    }\r\n\r\n    get size(): number {\r\n        return this._size;\r\n    }\r\n}","import {__IC_SignalManager, ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport { Command } from \"../../lib/framework/Command/Command\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport PrefabManager from \"../util/PrefabManager\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport CountDownView from \"../view/CountDownView\";\r\n\r\n//引用注入装饰器\r\nexport class StartCommand extends Command{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtil : MainUtil;\r\n    //注入资源管理器\r\n    @inject(__IC_Manager,ManagerType.Prefab)\r\n    preMgr : PrefabManager;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n    @inject(cc.Node,\"LogicNode\")\r\n    logicNode : cc.Node;\r\n    @inject(cc.Node,\"MainNode\")\r\n    mainNode : cc.Node;\r\n\r\n    //执行\r\n    execute(){\r\n        //console.log(\"[开始指令]\");\r\n\r\n        this.lanuch();\r\n        this.start();\r\n    }\r\n    start(){\r\n    }\r\n    //启动配置\r\n    lanuch(){\r\n        const manager = cc.director.getCollisionManager()\r\n        manager.enabled = true\r\n\r\n        this.loadRes();\r\n        //载入并生成环境\r\n        this.sMgr.get(MainSignalEnum.Generate).dispatch(()=>{\r\n            //注册输入控制方法\r\n            this.sMgr.get(MainSignalEnum.InputControl).dispatch();\r\n            //初始化并启动游戏\r\n            this.sMgr.get(MainSignalEnum.Restart).dispatch(false);\r\n        });\r\n    }\r\n\r\n\r\n    loadRes(){\r\n        if(!this.preMgr.isInit){\r\n            //绑定预制件\r\n            if(this.preMgr.hasPrefab(\"Animal\")){\r\n                this.inj.bind(cc.Prefab).toName(\"Animal\").toValue(this.preMgr.getPrefab(\"Animal\"));\r\n            }\r\n            if(this.preMgr.hasPrefab(\"Food\")){\r\n                this.inj.bind(cc.Prefab).toName(\"Food\").toValue(this.preMgr.getPrefab(\"Food\"));\r\n            }\r\n            this.preMgr.isInit = true;\r\n        }\r\n        \r\n        //检查是否存在对应的资源\r\n        if(this.preMgr.hasPrefab(\"Scene\")){\r\n            let scene : cc.Node = cc.instantiate(this.preMgr.getPrefab(\"Scene\"));\r\n            this.mainNode.addChild(scene);\r\n            let avatar = scene.getChildByName(\"Avatar\");\r\n            let animals = avatar.getChildByName(\"Animals\");\r\n            let score = scene.getChildByName(\"Score\");\r\n            let foodArea = scene.getChildByName(\"FoodArea\");\r\n\r\n            this.inj.bind(cc.Node).toName(\"Scene\").toValue(scene).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Avatar\").toValue(avatar).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Animals\").toValue(animals).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Score\").toValue(score).unBind();\r\n            this.inj.bind(cc.Node).toName(\"FoodArea\").toValue(foodArea).unBind();\r\n\r\n        }else{\r\n            throw new Error(\"Scene prefab is not found\");\r\n        }\r\n        if(this.preMgr.hasPrefab(\"PauseLayer\")){\r\n            let pause : cc.Node = cc.instantiate(this.preMgr.getPrefab(\"PauseLayer\"));\r\n            this.mainNode.addChild(pause);\r\n            pause.active = false;\r\n\r\n            this.inj.bind(cc.Node).toName(\"Pause\").toValue(pause).unBind();\r\n        }else{\r\n            throw new Error(\"Pause layer prefab is not found\");\r\n        }\r\n    }\r\n}","import { Fader } from \"../../lib/extensions/ActionExtension\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SwitchButton extends cc.Component {\r\n    @property(cc.Node)\r\n    public switchContent : cc.Node = null;\r\n\r\n    private _switchStatus = 1;\r\n    private _isSwitching = false;\r\n    onLoad () {\r\n\r\n    }\r\n\r\n    start () {\r\n\r\n    }\r\n    public switchToStatus(status){\r\n        //防止重复操作\r\n        if(this._isSwitching==true)return;else this._isSwitching = true;\r\n\r\n        let switchBar = this.switchContent.getChildByName(\"Bar\");\r\n        let moveRange = this.switchContent.width - switchBar.width - 20;\r\n        let color;\r\n        if(status===0){\r\n            moveRange = -moveRange;\r\n            color = cc.color(175,175,175);\r\n        }else{\r\n            color = cc.color(172,239,120);\r\n        }\r\n        let action = cc.sequence(\r\n            cc.spawn(\r\n                cc.moveBy(0.125, cc.v2(moveRange, 0)),\r\n                Fader.create(0.125,color)\r\n            ),\r\n            cc.callFunc(()=>{\r\n                this._switchStatus = status;\r\n                this._isSwitching = false;\r\n            }));\r\n        switchBar.runAction(action);\r\n    }\r\n\r\n    public setStatus(status){\r\n        let switchBar = this.switchContent.getChildByName(\"Bar\");\r\n        let moveRange = this.switchContent.width - switchBar.width - 20;\r\n        let color;\r\n\r\n        if(status===0){\r\n            moveRange = switchBar.position.x-moveRange;\r\n            color = cc.color(175,175,175);\r\n        }else{\r\n            moveRange = switchBar.position.x;\r\n            color = cc.color(172,239,120);\r\n        }\r\n        this._switchStatus = status;\r\n        switchBar.color = color;\r\n        switchBar.setPosition(moveRange,0);\r\n        switchBar.x;\r\n    }\r\n    public switch () {\r\n        if(!this.switchContent)return;\r\n        switch (this._switchStatus) {\r\n            case 0 :\r\n                this.switchToStatus(1);\r\n                break;\r\n            case 1 :\r\n                this.switchToStatus(0);\r\n                break;\r\n        }\r\n    }\r\n    //当前状态\r\n    public get status(){\r\n        if(this._isSwitching){\r\n            if(this._switchStatus==0)return 1;\r\n            else return 0;\r\n        }else{\r\n            return this._switchStatus;\r\n        }\r\n    }\r\n    // update (dt) {}\r\n}\r\n","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TipsUiView extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    label: cc.Label = null;\r\n\r\n    @property(cc.RichText)\r\n    text: cc.RichText = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        \r\n    }\r\n    display(title,content){\r\n        this.label.string = title;\r\n        this.text.string = content;\r\n\r\n    }\r\n    onClicked(){\r\n        this.node.active = false;\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import {Singleton} from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\n\r\nexport class TouchUtil extends Singleton implements IUtil{\r\n    private areaMap;\r\n    //全局区域状态\r\n    private globalAreaStatus : AreaStatus;\r\n\r\n    onConstructor(){\r\n        this.areaMap = new Map();\r\n    }\r\n    /**\r\n     * 注册一个触摸区域，只有在区域内的触控才会被识别\r\n     * @param area 区域\r\n     * @param isGlobal 是否设为全局区域\r\n     */\r\n    public registerTouchArea(area: cc.Node,isGlobal:boolean = false) {\r\n        let areaStatus;\r\n        //尝试获取对应的区域状态\r\n        if(this.areaMap.has(area)){\r\n            areaStatus = this.areaMap.get(area);\r\n        }else{\r\n            areaStatus = new AreaStatus();\r\n            this.areaMap.set(area,areaStatus);\r\n        }\r\n        //设定全局区域\r\n        if(isGlobal)this.globalAreaStatus = areaStatus;\r\n        //触摸开始时\r\n        area.on(cc.Node.EventType.TOUCH_START, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                let sPosX = touch.getLocationX();\r\n                let sPoxY = touch.getLocationY();\r\n                let status = new TouchStatus();\r\n                status.direction = TouchDirection.No;\r\n                status.touch = touch;\r\n                status.sPosX = sPosX;\r\n                status.sPosY = sPoxY;\r\n                status.totalX = 0;\r\n                status.totalY = 0;\r\n                status.trendX = 0;\r\n                status.trendY = 0;\r\n\r\n                //绑定触摸ID到状态\r\n                areaStatus.touchMap.set(touch.getID(), status)\r\n            });\r\n        });\r\n        //触摸移动时\r\n        area.on(cc.Node.EventType.TOUCH_MOVE, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    let status: TouchStatus = areaStatus.touchMap.get(touch.getID());\r\n                    let mDeltaX = touch.getDelta().x;\r\n                    let mDeltaY = touch.getDelta().y;\r\n                    status.totalX += mDeltaX;\r\n                    status.totalY += mDeltaY;\r\n\r\n                    //如果触摸正在向左移动\r\n                    if (Math.abs(mDeltaX) > 10) {\r\n                        status.trendX += status.totalX / mDeltaX;\r\n                    }\r\n                    if (Math.abs(mDeltaY) > 10) {\r\n                        status.trendY += status.totalY / mDeltaY;\r\n                    }\r\n                    //如果触摸的长度超过10000则判断划动超长了\r\n                    if((status.totalX*status.totalX+status.totalY*status.totalY)>10000){\r\n                        this.disposeTouchResult(areaStatus,touch);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        //触摸结束时\r\n        area.on(cc.Node.EventType.TOUCH_END, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    this.disposeTouchResult(areaStatus,touch);\r\n                }\r\n            });\r\n        });\r\n\r\n        //触摸取消时\r\n        area.on(cc.Node.EventType.TOUCH_CANCEL, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    this.disposeTouchResult(areaStatus,touch);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    //执行触控结果\r\n    disposeTouchResult(areaStatus,touch){\r\n        //判断当前触摸正处于什么状态\r\n        let result : TouchStatus= areaStatus.touchMoveDetection(touch);\r\n        if(result&&areaStatus.touchEvnet[result.direction]){\r\n            areaStatus.touchEvnet[result.direction].forEach(event => {\r\n                if(event && typeof event ===\"function\"){\r\n                    //告知结果和触摸信息\r\n                    event(result);\r\n                }\r\n            });\r\n        }\r\n        //移除结束的触摸\r\n        areaStatus.touchMap.delete(touch.getID());\r\n    }\r\n    /**\r\n     * 注册指定的回调函数\r\n     * @param direction 方向\r\n     * @param callback 返回一个触控事件\r\n     */\r\n    public on<T extends Function>(direction: TouchDirection, callback: T, area?: cc.Node) : T{\r\n        let areaStatus;\r\n        if(area&&this.areaMap.has(area)){\r\n            areaStatus = this.areaMap.get(area);\r\n        }else{\r\n            areaStatus = this.globalAreaStatus;\r\n        }\r\n        //增加回调函数\r\n        if(!areaStatus.touchEvnet[direction]){\r\n            areaStatus.touchEvnet[direction] = [];\r\n        }\r\n        areaStatus.touchEvnet[direction].push(callback);\r\n        return callback;\r\n    }\r\n    \r\n}\r\n//区域状态\r\nclass AreaStatus{\r\n    public touchEvnet;\r\n    //触摸状态映射\r\n    public touchMap;\r\n\r\n    constructor(){\r\n        this.touchMap = new Map();\r\n        this.touchEvnet = [];\r\n    }\r\n\r\n    //触摸移动检测\r\n    touchMoveDetection(touch: cc.Touch){\r\n        if (this.touchMap.has(touch.getID())) {\r\n            let status: TouchStatus = this.touchMap.get(touch.getID());\r\n            //检查是否为有效触摸\r\n            let isMoveValid = false;\r\n            //触摸的方向，按照上下左右的顺序排列\r\n            let direction : TouchDirection= TouchDirection.No;\r\n            //如果移动的总距离超过10\r\n            if (Math.abs(status.totalX) > 10 || Math.abs(status.totalY) > 10) {\r\n                //趋势不都为0时\r\n                if (status.trendX != 0 || status.trendY != 0) {\r\n                    //检查移动的趋势\r\n                    if (status.trendX === 0) {\r\n                        isMoveValid = true;\r\n                        //检查总移动距离\r\n                        if (status.totalY > 0) {\r\n                            direction = TouchDirection.Up;\r\n                        } else {\r\n                            direction = TouchDirection.Down;\r\n                        }\r\n                    } else {\r\n                        let trend = status.totalX / status.totalY;\r\n                        //在X轴移动趋势不为0的情况下，检查移动趋势是否达到有效判断范围内\r\n                        if (Math.abs(trend) > 1) {\r\n                            //有效的触摸轨迹\r\n                            isMoveValid = true;\r\n                            //X轴方向向右移动\r\n                            if (status.totalX > 0) {\r\n                                direction = TouchDirection.Right;\r\n                            } else {\r\n                                direction = TouchDirection.Left;\r\n                            }\r\n                        }\r\n                    }\r\n                    //如果之前的检查没有通过\r\n                    if (!isMoveValid) {\r\n                        if (status.trendY === 0) {\r\n                            isMoveValid = true;\r\n                            if (status.totalY > 0) {\r\n                                direction = TouchDirection.Right;\r\n                            } else {\r\n                                direction = TouchDirection.Left;\r\n                            }\r\n                        } else {\r\n                            let trend = status.totalY / status.totalX;\r\n                            if (Math.abs(trend) > 1) {\r\n                                //有效的触摸轨迹\r\n                                isMoveValid = true;\r\n                                //Y轴方向向上移动\r\n                                if (status.totalY > 0) {\r\n                                    direction = TouchDirection.Up;\r\n                                } else {\r\n                                    direction = TouchDirection.Down;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //如果之前的检查判断为无效则表明没有发生移动\r\n            if (isMoveValid) {\r\n                switch (direction) {\r\n                    case TouchDirection.No:\r\n                        status.direction = TouchDirection.No;\r\n                        return status;\r\n                    case TouchDirection.Up:\r\n                        status.direction = TouchDirection.Up;\r\n                        return status;\r\n                    case TouchDirection.Down:\r\n                        status.direction = TouchDirection.Down;\r\n                        return status;\r\n                    case TouchDirection.Left:\r\n                        status.direction = TouchDirection.Left;\r\n                        return status;\r\n                    case TouchDirection.Right:\r\n                        status.direction = TouchDirection.Right;\r\n                        return status;\r\n                }\r\n            } else {\r\n                status.direction = TouchDirection.No;\r\n                return status;\r\n            }\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n//传递触摸状态\r\nexport class TouchStatus {\r\n    //触摸\r\n    public touch : cc.Touch;\r\n    //方向\r\n    public direction : TouchDirection;\r\n    /**\r\n     * 触摸开始的X坐标\r\n     */\r\n    public sPosX: number;\r\n    /**\r\n     * 触摸开始的Y坐标\r\n     */\r\n    public sPosY: number;\r\n    /**\r\n     * 最后一次的X坐标\r\n     */\r\n    public lPosX: number;\r\n    /**\r\n     * 最后一次的Y坐标\r\n     */\r\n    public lPosY: number;\r\n    /**\r\n     * X轴移动总距离\r\n     */\r\n    public totalX: number;\r\n    /**\r\n     * Y轴移动总距离\r\n     */\r\n    public totalY: number;\r\n    /**\r\n     * 触摸的总时间\r\n     */\r\n    public totalTime: number;\r\n    /**\r\n     * 趋向于X轴方向移动\r\n     */\r\n    public trendX;\r\n    /**\r\n     * 趋向于Y轴方向移动\r\n     */\r\n    public trendY;\r\n}\r\nexport enum TouchDirection{\r\n    No = -1,\r\n    Up = 0,\r\n    Down = 1,\r\n    Left = 2,\r\n    Right = 3\r\n}","import {__IC_SignalManager, ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport Food from \"../view/Food\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\n\r\n//引用注入装饰器\r\nexport class UpdateCommand extends Command{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(cc.Node,\"Scene\")\r\n    sceneNode : cc.Node;\r\n    @inject(cc.Node,\"FoodArea\")\r\n    foodArea : cc.Node;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl:MainUtil;\r\n\r\n    tickcount:number = 0;\r\n    timecount:number = 0;\r\n    //执行\r\n    execute(dt){\r\n        this.update(dt);\r\n    }\r\n\r\n    update(dt){\r\n        //如果小游戏处于被隐藏的状态则不执行任何更新\r\n        if(this.mMdl.isHide)return;\r\n        this.mMdl.timer += dt\r\n        if (this.mMdl.timer >= this.mMdl.lastTimer + this.mMdl.timePeriod) {\r\n            this.mMdl.lastTimer = this.mMdl.timer\r\n            this.newNode();\r\n            // 难度加成\r\n            if (this.mMdl.timePeriod >= this.mMdl.minTimePeriod && this.mMdl.score > 0 && (this.mMdl.currentLevel < this.mMdl.harderRatios.length - 1)) {\r\n                let [level, ratio] = this.mMdl.harderRatios[this.mMdl.currentLevel + 1]\r\n                if (this.mMdl.score >= level) {\r\n                    this.mMdl.currentLevel++\r\n                    this.mMdl.timePeriod -= ratio\r\n                    //console.log(\"[难度提升]\"+this.mMdl.timePeriod)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    newNode() {\r\n        //获取食物实例\r\n        let food = this.getPoolNode()\r\n        if(!food.parent){\r\n            this.foodArea.addChild(food);\r\n        }\r\n        let foodComponent : Food = food.getComponent(Food)\r\n        //初始化配置\r\n        foodComponent.init();\r\n        //获取对象的食物组件\r\n        foodComponent.randomProps()\r\n        return food\r\n    }\r\n\r\n    getPoolNode() {\r\n        //从食物对象池中获取一个实例\r\n        let foodNode = this.mMdl.foodPool.get();\r\n        //将食物实例放入当前食物节点列表\r\n        this.mMdl.currentFoodNodes.push(foodNode)\r\n        return foodNode\r\n    }\r\n\r\n\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Util extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IUtil\";\r\n    }\r\n}\r\nexport interface IUtil{\r\n\r\n}\r\n/**\r\n * 工具类型枚举\r\n */\r\nexport enum UtilType{\r\n    Main = \"Main\",\r\n    Audio = \"Audio\",\r\n    Touch = \"Touch\",\r\n}","/**\r\n * 微信API接口\r\n */\r\nexport default class WxGameApi {\r\n    static get userPath() {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        return wx.env.USER_DATA_PATH + \"/\";;\r\n    }\r\n    static get isRunInWeiXin() {\r\n        if (cc.sys.platform === cc.sys.WECHAT_GAME) {\r\n            return true\r\n        } else {\r\n            WxGameApi.errorLog();\r\n            return false;\r\n        }\r\n    }\r\n    static onHide(callback) {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        wx.onHide(callback);\r\n    }\r\n    static onShow(callback) {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        wx.onShow(callback);\r\n    }\r\n    static errorLog(func) {\r\n        //console.warn(\"[请在微信环境内调用微信接口]\");\r\n    }\r\n    static bgm;\r\n    static volume;\r\n    static playBGM(bgmUrl) {\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        let bgm = wx.createInnerAudioContext()\r\n        // src 可以设置 http(s) 的路径，本地文件路径或者代码包文件路径\r\n        bgm.src = bgmUrl;\r\n        bgm.loop = true;\r\n        bgm.autoplay = true;\r\n        bgm.play()\r\n        wx.onShow(() => {\r\n            bgm.play();\r\n        });\r\n        this.bgm = bgm;\r\n    }\r\n    static setBgmVolume(volume){\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        if(this.bgm)this.bgm.volume = volume;\r\n        this.volume = volume;\r\n    }\r\n    static playVideo(x, y, w, h, url ,overtime ,isAutoPlay, onComplete) {\r\n        if (!WxGameApi.isRunInWeiXin) return null;\r\n        let isPlayFinish = false;\r\n        console.info(\"[尝试播放视频]\" + \"<x,y>\" + x + \",\" + y + \"<w,h>\" + w + \",\" + h);\r\n        let video = wx.createVideo({\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h,\r\n            src: url,\r\n            poster: \"\",\r\n            objectFit: \"fill\",\r\n            controls: false,\r\n            autoplay: isAutoPlay,\r\n        });\r\n        //静音播放\r\n        if(this.volume===0)video.muted = true;\r\n        video.onEnded(() => {\r\n            isPlayFinish = true;\r\n            onComplete();\r\n            video.destroy();\r\n        });\r\n        video.onerror(() => {\r\n            isPlayFinish = true;\r\n            onComplete();\r\n            video.destroy();\r\n        });\r\n        //播放一秒后检查播放状态\r\n        setTimeout(()=>{\r\n            if(!video)return;\r\n            //根据对象搜索算法找到的微信视频接口状态函数\r\n            \r\n            let status = video.emitter.event + \"\";\r\n            if(status === \"onVideoPause\"){\r\n                console.info(\"[播放提前结束]\" + video.emitter.event);\r\n                isPlayFinish = true;\r\n                onComplete();\r\n                video.destroy();\r\n            }\r\n        },1000);\r\n        //检查超时\r\n        setTimeout(()=>{\r\n            //如果播放超时则强制结束播放\r\n            if(!isPlayFinish){\r\n                //强制销毁视频播放\r\n                if(video)video.destroy();\r\n                onComplete();\r\n            }\r\n        },overtime);\r\n        return video;\r\n    }\r\n    static downFile(url, path, successCallback, failCallback) {\r\n        let userPath = WxGameApi.userPath;\r\n        //console.info(\"[用户缓存路径]\" + userPath);\r\n        wx.downloadFile({\r\n            url: url,\r\n            header: \"\",\r\n            filePath: \"\",\r\n            success(res) {\r\n                console.info(\"[下载成功]\" + res.statusCode);\r\n                //console.info(\"[保存到路径]\" + res.tempFilePath);\r\n                wx.getFileSystemManager().saveFile({\r\n                    tempFilePath: res.tempFilePath,\r\n                    filePath: userPath + path,\r\n                    success(res) {\r\n                        console.info(\"[保存成功]\" + res.savedFilePath);\r\n                        successCallback(res.savedFilePath);\r\n                    },\r\n                    fail(err) {\r\n                        console.info(\"[保存失败]\" + err.errMsg);\r\n                    }\r\n                });\r\n\r\n            },\r\n            fail(err) {\r\n                console.info(\"[下载失败]\" + err.errMsg);\r\n                failCallback(err)\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 检查是缓存中是否存在对应路径的文件\r\n     * @param {*} path 文件路径\r\n     * @param {*} result 结果\r\n     */\r\n    static checkCacheExistFile(path, result) {\r\n        wx.getFileSystemManager().access({\r\n            path: path,\r\n            success() {\r\n                result(true);\r\n            },\r\n            fail() {\r\n                result(false);\r\n            }\r\n        });\r\n    }\r\n    static readFile(path, successCallback, failCallback) {\r\n        wx.getFileSystemManager().readFile({\r\n            filePath: path,\r\n            success(res) {\r\n                console.info(\"[成功获取]\" + res);\r\n                successCallback(res);\r\n            },\r\n            fail(err) {\r\n                console.info(\"[获取失败]\" + err.errMsg);\r\n                failCallback(err);\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * 获取或者缓存资源文件\r\n     * @param {*} url 资源的地址\r\n     * @param {*} path 存储路径\r\n     * @param {*} complete 完成回调\r\n     */\r\n    static getOrCacheResFile(url, path, complete) {\r\n        //是否允许下载资源\r\n        let isAllowDownload;\r\n        if (!url || url === \"\") {\r\n            isAllowDownload = false;\r\n        } else {\r\n            isAllowDownload = true;\r\n        }\r\n        let resPath = WxGameApi.userPath + path;\r\n        //检查缓存文件是否存在\r\n        WxGameApi.checkCacheExistFile(resPath, (result) => {\r\n            if (result === true) {\r\n                console.info(\"[从缓存获取资源]]\" + path);\r\n                //直接从本地获取资源\r\n                complete(resPath);\r\n            } else {\r\n                //允许下载则保存对应的资源到缓存\r\n                if (isAllowDownload) {\r\n                    console.info(\"[需要下载资源]]\" + path);\r\n                    WxGameApi.downFile(url, path, (savedFilePath) => {\r\n                        console.info(\"[下载成功]\" + savedFilePath);\r\n                        complete(savedFilePath);\r\n                    }, (err) => {\r\n                        console.info(\"[下载失败]\" + err);\r\n                        complete(null);\r\n                    });\r\n                } else {\r\n                    console.info(\"[无法获取资源]]\" + path);\r\n                    //无法找到对应的资源\r\n                    complete(null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    //存储游戏分数\r\n    static saveScore(value) {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        console.info(\"[通知开发数据容器存储分数]\" + value);\r\n        //发送存储分数消息告知开放数据容器\r\n        wx.getOpenDataContext().postMessage({\r\n            message: {\r\n                type: \"command\",\r\n                function: \"save\",\r\n                arguments: \"score\",\r\n                data: value,\r\n            }\r\n        });\r\n    }\r\n}","export function spriteRes(resourceUrl) {\n\treturn new Promise((resolve, reject) => {\n\t\tcc.loader.loadRes(resourceUrl, cc.SpriteFrame, (err, spriteFrame) => {\n\t\t\tif (err) throw err\n\t\t\tresolve(spriteFrame)\n\t\t})\n\t})\n}\n\nexport function randomCoin() {\n\treturn Math.round(Math.random())\n}\n\nexport function randomNumber(size) {\n\treturn Math.floor(Math.random() * size)\n}\n\nexport function randomValue(...values) {\n\treturn values[randomNumber(values.length)]\n}\n\n","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport class Test extends cc.Component{\r\n\r\n    \r\n\r\n    start(){\r\n        let aa=[2,1,4,3,10,22,3,2];\r\n\r\n        let f = (a,b)=>{\r\n            if(a>b){\r\n                return a;\r\n            }else{\r\n                return b;\r\n            }\r\n        }\r\n\r\n        let s =(l:any[])=>{\r\n            //位数过少\r\n            if(l.length<=1)return true;\r\n            let isSort = true;\r\n            let tmp = l[0];\r\n            for(let i=0;i<l.length-1;i++){\r\n                tmp = l[i];\r\n                //第一位小于第二位则交换\r\n                if(l[i]>l[i+1]){\r\n                    l[i] = l[i+1];\r\n                    l[i+1] = tmp;\r\n                    isSort = false;\r\n                }\r\n                //设置为新的最大值\r\n            }\r\n            return isSort;\r\n        }\r\n        let m = (l:any[])=>{\r\n            let overtime = 1000;\r\n            while(overtime-->0){\r\n                if(s(l))break;\r\n            }\r\n        }\r\n        m(aa);\r\n        let str = \"\"\r\n        aa.forEach(element => {\r\n            str += element +\",\";\r\n        });\r\n        console.error(str);\r\n    }\r\n}"],"sourceRoot":"/source/","file":"project.js"}