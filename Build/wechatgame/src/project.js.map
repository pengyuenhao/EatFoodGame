{"version":3,"sources":["assets/scripts/project/view/Animal.ts","assets/scripts/project/util/AudioManager.ts","assets/scripts/project/util/AudioUtil.ts","assets/scripts/project/command/BackHomeCommand.ts","assets/scripts/project/impl/Begin.ts","assets/scripts/lib/framework/Bind/BindConst.ts","assets/scripts/lib/framework/Bind/Binder.ts","assets/scripts/lib/framework/Bind/Binding.ts","assets/scripts/lib/framework/Command/CommandBinder.ts","assets/scripts/lib/framework/Command/CommandBinding.ts","assets/scripts/lib/framework/Command/CommandConst.ts","assets/scripts/lib/framework/Command/Command.ts","assets/scripts/project/Common.ts","assets/scripts/lib/framework/Context/Context.ts","assets/scripts/project/view/CountDownView.ts","assets/scripts/lib/framework/Decorator/DecoratorClassBinder.ts","assets/scripts/lib/framework/Decorator/DecoratorClassBinding.ts","assets/scripts/lib/framework/Decorator/DecoratorClass.ts","assets/scripts/lib/framework/Decorator/DecoratorConst.ts","assets/scripts/project/view/Food.ts","assets/scripts/project/command/GenerateCommand.ts","assets/scripts/lib/framework/Command/ICommandBinder.ts","assets/scripts/lib/framework/Context/IRoot.ts","assets/scripts/lib/framework/Injector/InjectBinder.ts","assets/scripts/lib/framework/Injector/InjectBinding.ts","assets/scripts/lib/framework/Injector/InjectConst.ts","assets/scripts/lib/framework/Injector/InjectDecorator.ts","assets/scripts/lib/framework/Injector/InjectFactory.ts","assets/scripts/lib/framework/Injector/Injector.ts","assets/scripts/project/command/InputControlCommand.ts","assets/scripts/project/Model/InputModel.ts","assets/scripts/lib/extensions/IocComponet.ts","assets/scripts/lib/framework/IocConst.ts","assets/scripts/lib/extensions/IocRoot.ts","assets/scripts/lib/extensions/IocView.ts","assets/scripts/project/view/LogicNode.ts","assets/scripts/project/wxgame/login/Login.js","assets/scripts/project/command/LookRankCommand.ts","assets/scripts/project/context/MainContext.ts","assets/scripts/project/Model/MainModel.ts","assets/scripts/project/view/MainNode.ts","assets/scripts/project/context/MainRoot.ts","assets/scripts/project/signal/MainSignalEnum.ts","assets/scripts/project/signal/MainSignalManager.ts","assets/scripts/project/util/MainUtil.ts","assets/scripts/project/util/Manager.ts","assets/scripts/project/command/MatchCommand.ts","assets/scripts/project/util/Model.ts","assets/scripts/project/view/PauseNode.ts","assets/scripts/project/PersistRoot.ts","assets/scripts/lib/extensions/Pool.ts","assets/scripts/project/util/PrefabManager.ts","assets/scripts/project/helper/PrefabPool.ts","assets/scripts/lib/extensions/Prototype.ts","assets/scripts/project/wxgame/rank/Rank.js","assets/scripts/project/command/RestartCommand.ts","assets/scripts/lib/framework/Signal/SignalManager.ts","assets/scripts/lib/framework/Signal/Signal.ts","assets/scripts/project/util/Singleton.ts","assets/scripts/lib/extensions/Stack.ts","assets/scripts/project/command/StartCommand.ts","assets/scripts/project/wxgame/rank/TipsUiView.ts","assets/scripts/project/util/TouchUtil.ts","assets/scripts/project/command/UpdateCommand.ts","assets/scripts/project/util/Util.ts","assets/scripts/project/wxgame/WxGameApi.js","assets/scripts/project/util/index.ts"],"names":["InjectDecorator_1","require","Model_1","IocView_1","_a","cc","_decorator","ccclass","property","Animal","_super","_this","apply","this","arguments","type","__extends","prototype","onLoad","call","start","rePositonAnimal","i","mMdl","animalTextureRect","width","height","offsetRatio","x","y","node","setPosition","__decorate","inject","__IC_Model","ModelType","Main","IocView","exports","default","AudioManager","isInit","onConstructor","playLoopCount","audioMap","Map","play","key","hasAudio","clip","getAudio","audios","length","playBgm","bgm","loop","has","get","setAudio","value","set","Singleton","AudioUtil","Command_1","InjectBinder_1","BackHomeCommand","execute","gameOver","inj","unbindAllMark","director","loadScene","__IC_InjectBinder","Command","Begin","beginGame","lookRank","Component","BindingConst","NULL","Symbol","Binding_1","BindConst_1","__IC_Binder","Object","defineProperty","IConstructorName","Binder","init","_bindings","resolver","binding","resolveBinding","dict","bindingName","name","existingBinding","delete","bind","getRawBinding","unbind","checkKey","Binding","checkAbstract","getBinding","getBindingMap","__IC_Binding","_resolver","_key","_value","_name","to","toName","isConstructor","constructorName","CommandBinding_1","Pool_1","CommandConst_1","CommandBinder","pools","activeCommands","Set","activeSequences","usePooling","getPool","isPooled","that_1","values","push","forEach","myPool","makePoolFromType","poolType","injectBinder","Pool","CommandConst","COMMAND_POOL","pool","getInstance","CommandBinding","invokeCommand","cmd","args","depth","command","createCommand","sequenceId","trackCommand","executeCommand","data","getCommand","msg","toString","Error","isClean","injector","deploy","add","__IC_Command","isSequence","onDispose","trigger","_i","next","aa","a","releaseCommand","disposeOfSequencedData","isOnce","isRetain","t","constructor","returnInstance","SignalCommandBinder","addListener","signal","toSingleton","createCommandForSignal","_isSequence","_isOnce","Pooled","ICommandBinder_1","_clean","_retain","clean","retain","release","restore","uninject","__IC_CommandBinder","Common","WxGameApi","version","persistRootNode","root","shareTickets","isHasWxRank","maxScore","userOpenId","session_key","unionId","CommandBinder_1","IocConst_1","__IC_Context","Context","firstContext","getRoot","crossContextBinder","addCrossContext","setRoot","addCore","_injectBinder","InjectBinder","_crossContextBinder","_commandBinder","context","removeCrossContext","childContext","restart","instantiateCore","mapBindings","postBindings","launch","toValue","config","duration","time","step","update","dt","before","after","Math","fround","getComponent","Label","string","destroy","Binder_1","DecoratorClass_1","DecoratorClassBinding_1","Prototype_1","DecoratorClassBinder","_decoratorClassBufferMap","target","extendsList","Prototype","getPrototypeList","injectClass","DecoratorClass","list","bindingMaps_1","size","inside","j","DecoratorClassBinding","insideDict","insideDict_1","insideDic","_property","toProperty","_list","DecoratorClassBinder_1","DecoratorConst","DECORATOR_CLASS_BINDER","Animal_1","MainSignalEnum_1","Util_1","Manager_1","Food","speed","accel","moveY","Food_1","reuse","unuse","clear","isHide","inited","onCollisionEnter","other","self","otherComponent","selfComponent","sMgr","MainSignalEnum","Match","dispatch","GameSignalEnum","onMatch","resPoolNode","onNotMatch","foodNode","index","currentFoodNodes","indexOf","splice","foodPool","res","randomProps","baseIndex","track","mUtl","randomCoin","lastFoodIndex","lastTrack","randomRange","map","foodDatas","foodIndex","randomValue","foodData","Sprite","spriteFrame","getSceneSize","__IC_Util","UtilType","__IC_Manager","ManagerType","Audio","PrefabPool_1","GenerateCommand","complete","then","generateTouchArea","generateAnimals","area","Node","sceneNode","addChild","tUtl","registerTouchArea","foodPrefab","p1","loadFoodRes","p2","loadAnimalRes","Promise","all","that","resolve","reject","spriteRes","image","spriteFrames","animalDatas","animalData","animalNode","instantiate","animalPrefab","animal","sprite","animalsNode","Touch","Prefab","__IC_Root","Injector_1","InjectBinding_1","DecoratorConst_1","ClassBinder","_injector","Injector","binder","injectClassBinder","instance","tryInject","InjectBinding","unbinds","isUnbind","InjectConst_1","_isUnbind","_bindingType","InjectConst","BindingType","DEFAULT","_isInject","_args","toArgs","VALUE","SINGLETON","unBind","setValue","o","toInject","injectNoNameFunc","injectToNameFunc","_constructor","_target","injectFunc","InjectFactory","bindingType","singletonOf","valueOf","instanceOf","createFromValue","generateImplicit","c","ToString","InjectFactory_1","factory","decoratorUnInject","tryInjectHere","isValueConstructor","isKeyConstructor","isInject","attemptConstructorInjection","decoratorInject","injectBinding","getInjectValue","injv","TouchUtil_1","InputControlCommand","on","TouchDirection","Up","status","sPosX","areaOnMove","Down","Left","sPosY","Right","direction","pauseFlag","rotateAnimals","isRotationing","iMdl","waitingHandle","aMgr","rotateAction","scaleBy","rotateDur","lastAction","runAction","sequence","callFunc","resetAnimalsNode","children","animalsNodeChildren","switchIndex","setScale","one","two","temp","Input","InputModel","BubbleType","Context_1","IocRoot_1","IocComponet","_requiresContext","_registerWithContext","enabled","activeInHierarchy","autoRegisterWithContext","registeredWithContext","shouldRegister","bubbleToContext","Add","view","finalTry","loopLimiter","parent","IocRoot","iocContext","success","Remove","Enable","Disable","requiresContext","IocError","IC_ERROR","onDestroy","IocComponet_1","SignalManager_1","__IC_SignalManager","LogicNode","Update","Class","extends","properties","_common2","_WxGameApi2","isRunInWeiXin","getCachePromise","url","getOrCacheResFile","resPath","playBGM","viedo","Date","getSeconds","diff","console","info","wx","login","fail","launchOptionsSync","preloadFriendInfo","preloadGroupInfo","getOpenDataContext","postMessage","message","function","getLaunchOptionsSync","scene","shareTicket","LookRankCommand","StartCommand_1","MainSignalManager_1","MainModel_1","UpdateCommand_1","GenerateCommand_1","MainUtil_1","RestartCommand_1","LookRankCommand_1","MatchCommand_1","PrefabManager_1","InputControlCommand_1","InputModel_1","AudioUtil_1","AudioManager_1","BackHomeCommand_1","MainContext","MainSignalManager","MainModel","Instance","MainUtil","TouchUtil","signalMgr","commandBinder","Start","StartCommand","UpdateCommand","Generate","Restart","RestartCommand","LookRank","MatchCommand","InputControl","BackHome","isLookVideo","score","timer","lastTimer","timePeriod","currentLevel","initTimePeriod","minTimePeriod","lastScore","harderRatios","Common_1","MainNode","onHide","onShow","viedoHandle","MainRoot","SignalManager","winSize","resourceUrl","loader","loadRes","SpriteFrame","err","round","random","randomNumber","floor","PauseNode_1","match","gainPoint","scoreNode","Number","pauseNode","active","show","updateScore","stopAllCurrent","PauseNode","mainTop","mainBotton","mainButton","replayFrame","playVideo","onRestartClicked","onLookRankClicked","onBackHomeClicked","MainContext_1","PersistRoot","prefabs","clips","game","addPersistRootNode","loadPrefab","loadAudio","prefab","setPrefab","audio","AudioClip","AudioSource","PoolOverflowBehavior","BindingConstraintType","PoolInflationType","Stack_1","__IC_InstanceProvider","instancesAvailable","Stack","instancesInUse","constraint","POOL","uniqueValues","overflowBehavior","EXCEPTION","inflationType","DOUBLE","failIf","isProtetype","_instanceCount","addList","item","remove","removeInstance","removeList","retv","pop","instancesToCreate","instanceCount","WARNING","warn","INCREMENT","instanceProvider","newInstance","condition","PrefabManager","prefabMap","hasPrefab","getPrefab","PrefabPool","nodePool","NodePool","put","hasPrototypeList","constructor_1","types","__proto__","startsWith","AddPrototype","prototypeMap","Array","from","tpye","extendSet","subContextView","tipsUiNode","rankType","shareCount","updateShareMenu","withShareTicket","switchRank","event","switchBtn","switchBar","getChildByName","moveRange","moveBy","v2","hideShowTipsUi","ticket","showTipsUi","getShareInfo","backhome","shareApp","shareAppMessage","title","imageUrl","isExist","content","tipsUiView","display","isPlayVideo","revive","width_1","height_1","x_1","y_1","url_1","checkCacheExistFile","result","clearAllCurrent","saveScore","isResult","Signal_1","_signal_dic","symbol","_signal","Signal","__IC_Signal","_listener","_onceListener","action","concat","callback","addUnique","addOnceListener","removeAllListeners","listeners","isUnique","getTypes","clazz","classMap","getInstanceOrCreate","destroyInstance","Item","_next","_size","_header","top","newItem","tmp","lanuch","getCollisionManager","resMgr","mainNode","avatar","animals","foodArea","pause","TipsUiView","label","text","onClicked","RichText","areaMap","isGlobal","areaStatus","AreaStatus","globalAreaStatus","EventType","TOUCH_START","getTouches","touch","getLocationX","sPoxY","getLocationY","TouchStatus","No","totalX","totalY","trendX","trendY","touchMap","getID","TOUCH_MOVE","mDeltaX","getDelta","mDeltaY","abs","disposeTouchResult","TOUCH_END","TOUCH_CANCEL","touchMoveDetection","touchEvnet","isMoveValid","trend","tickcount","timecount","newNode","level","ratio","log","food","getPoolNode","foodComponent","func","bgmUrl","createInnerAudioContext","src","autoplay","w","h","overtime","isAutoPlay","onComplete","isPlayFinish","video","createVideo","poster","objectFit","controls","onEnded","onerror","setTimeout","path","successCallback","failCallback","userPath","downloadFile","header","filePath","statusCode","getFileSystemManager","saveFile","tempFilePath","savedFilePath","errMsg","access","readFile","isAllowDownload","downFile","env","USER_DATA_PATH","sys","platform","WECHAT_GAME","errorLog"],"mappings":"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","sourcesContent":["import { inject } from \"../../lib/framework/Injector/InjectDecorator\";\nimport { MainModel } from \"../Model/MainModel\";\nimport { __IC_Model, ModelType } from \"../util/Model\";\nimport { IocView } from \"../../lib/extensions/IocView\";\n\nconst {ccclass,property} = cc._decorator\n\n@ccclass\nexport default class Animal extends IocView {\n    @inject(__IC_Model,ModelType.Main)\n    mMdl : MainModel;\n\n    @property\n    type = ''\n\n    onLoad() {\n        super.onLoad();\n    }\n    start(){\n        super.start();\n    }\n\n    //重设动物坐标\n    rePositonAnimal(i) {\n        let {\n            width,\n            height\n        } = this.mMdl.animalTextureRect\n        let offsetRatio = {\n            x: 0,\n            y: 0\n        }\n        i === 0 && (offsetRatio = {\n            x: -1,\n            y: 1\n        })\n        i === 1 && (offsetRatio = {\n            x: 1,\n            y: 1\n        })\n        i === 2 && (offsetRatio = {\n            x: 1,\n            y: -1\n        })\n        i === 3 && (offsetRatio = {\n            x: -1,\n            y: -1\n        })\n        this.node.setPosition(offsetRatio.x * width / 2, offsetRatio.y * height / 2);\n    }\n\n}","import {Singleton} from \"./Singleton\";\r\nimport {IManager} from \"./Manager\";\r\n\r\nexport default class AudioManager extends Singleton implements IManager {\r\n    public isInit = false;\r\n    public bgm: cc.AudioSource;\r\n    public audios: Array < cc.AudioSource > ;\r\n    private audioMap: Map < any, any >\r\n    private playLoopCount;\r\n\r\n    protected onConstructor() {\r\n        this.playLoopCount = 0;\r\n        this.audioMap = new Map();\r\n    }\r\n\r\n    public play(key) {\r\n        if (this.hasAudio(key)) {\r\n            let clip = this.getAudio(key);\r\n            let isPlay = false;\r\n            if (this.audios.length != 0) {\r\n                if(this.audios[this.playLoopCount]){\r\n                    this.audios[this.playLoopCount].clip = clip;\r\n                    this.audios[this.playLoopCount].play();\r\n                }else{\r\n                    this.playLoopCount=0;\r\n                }\r\n                if(this.playLoopCount < this.audios.length - 1){\r\n                    this.playLoopCount+=1;\r\n                }else{\r\n                    this.playLoopCount=0;\r\n                }\r\n                //找到一个空闲的播放源进行播放\r\n/*                 for(let i =0;i<this.audios.length;i++){\r\n                    if (!this.audios[i].isPlaying) {\r\n                        this.audios[i].clip = clip;\r\n                        this.audios[i].play();\r\n                        isPlay = true;\r\n                        break;\r\n                    }\r\n                } */\r\n                //没有空闲的播放源\r\n/*                 if (!isPlay) {\r\n                    this.audios[0].clip = clip;\r\n                    this.audios[0].play();\r\n                } */\r\n            }\r\n        }\r\n    }\r\n    public playBgm() {\r\n        if (this.bgm.clip) {\r\n            this.bgm.loop = true;\r\n            this.bgm.play();\r\n        }\r\n    }\r\n    hasAudio(key): boolean {\r\n        return this.audioMap.has(key);\r\n    }\r\n    getAudio(key): cc.AudioClip {\r\n        return this.audioMap.get(key);\r\n    }\r\n    setAudio(key, value) {\r\n        this.audioMap.set(key, value);\r\n    }\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\nexport class AudioUtil extends Singleton implements IUtil{\r\n\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IInjectBinder, __IC_InjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\n\r\n//引用注入装饰器\r\nexport class BackHomeCommand extends Command{\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n    \r\n    execute(){\r\n        //console.info(\"[游戏结束]\");\r\n        this.gameOver();\r\n    }\r\n\r\n    gameOver() {\r\n        this.inj.unbindAllMark();\r\n        cc.director.loadScene('Begin')\r\n    }\r\n}","\nconst {ccclass, property} = cc._decorator\n\n@ccclass\nexport default class Begin extends cc.Component {\n\n/*     @property(cc.Node)\n    playButton = null */\n\n    onLoad () {\n        \n    }\n\n    beginGame() {\n        cc.director.loadScene('Game')\n    }\n\n    lookRank(){\n        cc.director.loadScene(\"Rank\");\n    }\n}","//namespace ioc{\r\n    export module BindingConst{\r\n        //定义空常量\r\n        export const NULL = Symbol(\"NULL\");\r\n    }\r\n//}","import { IBinding,Binding } from \"./Binding\"\r\nimport {BindingConst} from \"./BindConst\"\r\nimport {IConstructorName} from \"../IocConst\"\r\n\r\nexport interface IBinder {\r\n    bind(key) : IBinding;\r\n    unbind(key, name);\r\n    //根据绑定器实例生成一个空的绑定状态\r\n    getRawBinding() : IBinding;\r\n    //获取绑定状态\r\n    getBinding(key : any, name : any) : IBinding;\r\n    getBindingMap(key : any) : Map<any,IBinding>;\r\n    resolveBinding( binding : IBinding,  key : any);\r\n}\r\nexport class __IC_Binder extends IConstructorName{\r\n    get constructorName(){return \"IBinder\";}\r\n}\r\nexport class Binder implements IBinder {\r\n    //绑定状态映射字典\r\n    protected _bindings: any;\r\n    //绑定状态白名单\r\n    //protected _bindingWhitelist : Array<object> ;\r\n    constructor() {\r\n        this.init();\r\n    }\r\n    /**\r\n     * 初始化函数，通过重写该函数指定映射字典的实例\r\n     */\r\n    init(){\r\n        //初始化绑定状态映射\r\n        this._bindings = new Map < any, Map < any, IBinding >> ();\r\n    }\r\n    /**\r\n     * 解析器，将正在绑定中的状态信息解析，使之成为可存储的数据绑定到映射字典。\r\n     * @param binding 绑定的状态\r\n     */\r\n    resolver(binding: IBinding) {\r\n        let key = binding.key;\r\n        this.resolveBinding(binding,key);\r\n    }\r\n    /**\r\n     * 解析绑定状态\r\n     * @param binding 绑定状态\r\n     * @param key 键值\r\n     */\r\n    resolveBinding( binding : IBinding,  key : any){\r\n        //检查绑定状态是否存在别名\r\n        let bindingName = (binding.name == null) ? BindingConst.NULL : binding.name;\r\n        let dict : Map<any,IBinding>;\r\n        //检查绑定状态字典已经存在键值\r\n        if ((this._bindings.has(key))) {\r\n            //获取绑定映射\r\n            dict = this._bindings.get(key);\r\n            //检查绑定映射是否存在别名\r\n            if (dict.has(bindingName)) {\r\n                //获取已经存在的绑定映射\r\n                let existingBinding = dict.get(bindingName);\r\n                //检查合法性\r\n                if (existingBinding != binding) {\r\n                    //如果绑定值为空\r\n                    if (!existingBinding.value) {\r\n                        //移除无效的绑定别名\r\n                        dict.delete(bindingName);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //创建绑定映射\r\n            dict = new Map<any,IBinding>();\r\n            //添加绑定映射\r\n            this._bindings.set(key, dict);\r\n        }\r\n\r\n        //如果存在默认绑定状态并且等于当前绑定状态\r\n        if (dict.has(BindingConst.NULL) && dict.get(BindingConst.NULL) === binding) {\r\n            //删除默认绑定\r\n            dict.delete(BindingConst.NULL);\r\n        }\r\n\r\n        //添加或覆盖绑定状态\r\n        if (!dict.has(bindingName)) {\r\n            dict.set(bindingName, binding);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 绑定信号容器\r\n     * @param key 键值，可以是需要执行的全局信号名称或枚举\r\n     */\r\n    bind(key) : IBinding{\r\n        //创建一个绑定中状态\r\n        let binding = this.getRawBinding();\r\n        \r\n        //绑定标志\r\n        binding.bind(key);\r\n        return binding;\r\n    }\r\n    /**\r\n     * 解除绑定信号容器\r\n     * @param key 键值，需要绑定的键值\r\n     * @param name 别名，被绑定变量的别名\r\n     */\r\n    unbind(key, name) {\r\n        let checkKey = Binding.checkAbstract(key);\r\n        //如果绑定映射字典内包含键值\r\n        if (this._bindings.has(checkKey)) {\r\n            //直接获取键值映射的值\r\n            let dict = this._bindings.get(checkKey);\r\n            //检查是否存指定别名\r\n            let bindingName;\r\n            if(name){\r\n                bindingName = name;\r\n            }else{\r\n                bindingName = BindingConst.NULL;\r\n            }\r\n            if (dict.has(bindingName)) {\r\n                dict.delete(bindingName);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 生成默认的绑定状态\r\n     */\r\n    getRawBinding(): IBinding{\r\n        return new Binding(this.resolver.bind(this));\r\n    }\r\n    /**\r\n     * 根据键值和别名获取绑定器中的绑定状态\r\n     * @param key 键值\r\n     * @param name 别名\r\n     */\r\n    getBinding(key : any, name : any) : IBinding{\r\n        //查找是否存在键值\r\n        if(this._bindings.has (key))\r\n        {\r\n            let dict = this._bindings.get(key);\r\n            //如果别名不存在则使用默认值\r\n            if(!name){\r\n                name = BindingConst.NULL\r\n            }\r\n            //查找绑定状态是否存在别名\r\n            if (dict.has(name))\r\n            {\r\n                return dict.get(name);\r\n            }\r\n            else{\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取绑定状态映射表，返回键值的所有绑定状态\r\n     * @param key 被绑定的键值\r\n     */\r\n    getBindingMap(key : any) : any{\r\n        if(this._bindings.has(key)){\r\n            return this._bindings.get(key);\r\n        }\r\n    }\r\n}\r\n//}","import { IConstructorName } from \"../IocConst\";\r\n\r\n//namespace ioc {\r\nexport interface IBinding {\r\n    name: any;\r\n    key: any;\r\n    value: any;\r\n    bind(k:any):IBinding;\r\n    to(v:any):IBinding;\r\n    toName(n:any):IBinding;\r\n}\r\nexport class __IC_Binding extends IConstructorName{\r\n    get constructorName(){return \"IBinding\";}\r\n}\r\nexport class Binding implements IBinding {\r\n    protected _key: any;\r\n    protected _value: any;\r\n    protected _name: any;\r\n    protected _resolver: any;\r\n\r\n    public get key() {\r\n        return this._key;\r\n    }\r\n    public get value() {\r\n        return this._value;\r\n    }\r\n    public get name() {\r\n        return this._name;\r\n    }\r\n\r\n    constructor(resolver: any) {\r\n        this._resolver = resolver;\r\n\r\n        this._key = null;\r\n        this._value = null;\r\n        this._name = null;\r\n    }\r\n\r\n    /**\r\n     * 绑定标志到键值，返回此时的绑定状态。\r\n     * @param key 标志值，可以是需要执行的全局信号名称或枚举\r\n     */\r\n    bind(key) :IBinding{\r\n        this._key = Binding.checkAbstract(key);\r\n        return this;\r\n    }\r\n    /**\r\n     * 从正在绑定状态映射到实例，返回此时的绑定状态。\r\n     * @param value 绑定映射的值\r\n     */\r\n    to(value):IBinding {\r\n        this._value = value;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 实例的别名，用于区分不同的实例，返回此时的绑定状态。\r\n     * @param name 实例的别名\r\n     */\r\n    toName(name):IBinding {\r\n        this._name = name;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n    //判断是否为构造函数\r\n    public get isKeyConstructor():boolean{\r\n        return Binding.isConstructor(this._key);\r\n    }\r\n    //判断是否为构造函数\r\n    public get isValueConstructor():boolean{\r\n        return Binding.isConstructor(this._value);\r\n    }\r\n    public static isConstructor(value : object):boolean{\r\n        //如果不是一个函数则绝对不是构造函数\r\n        if(typeof value !== \"function\"){\r\n            return false;\r\n        }\r\n        //如果不能直接获取原型则不是构造函数\r\n        if(!value.prototype){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    public static checkAbstract(key){\r\n        //检查被绑定的对象是否为虚类\r\n        let constructorName;\r\n        if(key.constructorName){\r\n            constructorName = key.constructorName;\r\n            //console.info(\"[转化虚拟类]\"+ constructorName);\r\n        }else{\r\n            constructorName = key;\r\n            //console.info(\"[非虚拟类]\"+ constructorName.constructor.name);\r\n        }\r\n        return constructorName;\r\n    }\r\n}\r\n//}","import {\r\n    IBinding,\r\n    Binding\r\n} from \"../Bind/Binding\"\r\nimport {\r\n    __IC_InjectBinder,\r\n    IInjectBinder\r\n} from \"../Injector/InjectBinder\";\r\nimport {\r\n    CommandBinding\r\n} from \"./CommandBinding\";\r\nimport {\r\n    ISignal\r\n} from \"../Signal/Signal\"\r\nimport {\r\n    InjectBinding\r\n} from \"../Injector/InjectBinding\";\r\nimport {\r\n    ICommand,\r\n    __IC_Command\r\n} from \"./Command\";\r\nimport {\r\n    Pool\r\n} from \"../../Extensions/Pool\";\r\nimport {\r\n    CommandConst\r\n} from \"./CommandConst\"\r\nimport {\r\n    inject\r\n} from \"../Injector/InjectDecorator\";\r\nimport {\r\n    Binder\r\n} from \"../Bind/Binder\";\r\nimport {\r\n    ICommandBinder\r\n} from \"./ICommandBinder\";\r\n//全局注入数据绑定器\r\n\r\n\r\n/**\r\n * 指令绑定器\r\n */\r\nexport class CommandBinder extends Binder implements ICommandBinder {\r\n    //注入绑定器\r\n    @inject(__IC_InjectBinder)\r\n    public injectBinder: IInjectBinder;\r\n\r\n    //指令池\r\n    protected pools: Map < object, Pool >= new Map < object, Pool > ();\r\n\r\n    // Tracker for parallel commands in progress\r\n    protected activeCommands: Set < ICommand >= new Set < ICommand > ();\r\n    // Tracker for sequences in progress\r\n    protected activeSequences: Map < ICommand, CommandBinding > = new Map < ICommand, CommandBinding > ();\r\n    //是否使用池\r\n    public usePooling: boolean = false;\r\n    public getPool(type: object): Pool {\r\n        if (this.pools.has(type))\r\n            return this.pools.get(type);\r\n        return null;\r\n    }\r\n\r\n    public resolver(binding: IBinding) {\r\n        super.resolver(binding);\r\n        if (this.usePooling && (binding as CommandBinding).isPooled) {\r\n            if (binding.value != null) {\r\n                let that = this;\r\n                //检查被绑定的值是否有效\r\n                let values: object[] = binding.value as object[];\r\n                if (values.length === 0) {\r\n                    values = [];\r\n                    values.push(binding.value);\r\n                }\r\n\r\n                if (values && values.length > 0) {\r\n                    values.forEach((value) => {\r\n                        //如果找不到对应的池则创建\r\n                        if (that.pools.has(value) == false) {\r\n                            let myPool = this.makePoolFromType(value);\r\n                            that.pools.set(value, myPool);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    protected makePoolFromType(type): Pool {\r\n        //池构造函数作为类型使用\r\n        let poolType = type;\r\n        //预制实例缓存\r\n        this.injectBinder.bind(type).to(type);\r\n\r\n        //获取一个池实例\r\n        this.injectBinder.bind(Pool).to(Pool).toName(CommandConst.COMMAND_POOL);\r\n        let pool: Pool = this.injectBinder.getInstance(Pool, CommandConst.COMMAND_POOL) as Pool;\r\n        this.injectBinder.unbind(Pool, CommandConst.COMMAND_POOL);\r\n        pool.bind(poolType);\r\n\r\n        return pool;\r\n    }\r\n    //绑定状态映射字典\r\n    getRawBinding(): IBinding {\r\n        return new CommandBinding(this.resolver.bind(this));\r\n    }\r\n    bind(key: any): CommandBinding {\r\n        return super.bind(key) as CommandBinding;\r\n    }\r\n    //调用指令\r\n    protected invokeCommand(cmd: object, binding: CommandBinding, args, depth: number): ICommand {\r\n        let command: ICommand = this.createCommand(cmd, args);\r\n        command.sequenceId = depth;\r\n        this.trackCommand(command, binding);\r\n        this.executeCommand(command,args);\r\n        return command;\r\n    }\r\n    //\r\n    protected createCommand(cmd: object, data: object): ICommand {\r\n        let command: ICommand = this.getCommand(cmd);\r\n\r\n        if (command == null) {\r\n            let msg: string = \"A Command \";\r\n            if (data != null) {\r\n                msg += \"tied to data \" + data.toString();\r\n            }\r\n            msg += \" could not be instantiated.\\nThis might be caused by a null pointer during instantiation or failing to override Execute (generally you shouldn't have constructor code in Commands).\";\r\n            throw new Error(msg);\r\n        }\r\n\r\n        command.data = data;\r\n        return command;\r\n    }\r\n    //获取指令实例\r\n    protected getCommand(type: object): ICommand {\r\n        //如果使用池则检查是否已经存在相应的实例\r\n        if (this.usePooling && this.pools.has(type)) {\r\n            let pool: Pool = this.pools.get(type);\r\n            let command: ICommand = pool.getInstance() as ICommand;\r\n            //是否存在对应的实例\r\n            if(command){\r\n                //检查是否已经清理\r\n                if (command.isClean) {\r\n                    this.injectBinder.injector.inject(command, null);\r\n                    command.deploy();\r\n                }\r\n            }else{\r\n                //获取实例\r\n                command = this.injectBinder.getInstance(type,null);\r\n                //为池添加实例缓存\r\n                pool.add(command);\r\n            }\r\n            return command;\r\n        } else {\r\n            this.injectBinder.bind(__IC_Command).to(type);\r\n            let command: ICommand = this.injectBinder.getInstance(__IC_Command, null);\r\n            this.injectBinder.unbind(__IC_Command, null);\r\n            return command;\r\n        }\r\n    }\r\n    protected trackCommand(command: ICommand, binding: CommandBinding) {\r\n        if (binding.isSequence) {\r\n            this.activeSequences.set(command, binding);\r\n        } else {\r\n            this.activeCommands.add(command);\r\n        }\r\n    }\r\n    //执行指令\r\n    protected executeCommand(command: ICommand,args) {\r\n        if (command == null) {\r\n            return;\r\n        }\r\n        command.execute(...args);\r\n    }\r\n    /**\r\n     * 信号调用回掉函数\r\n     * @param trigger 触发的信号\r\n     * @param data 数据\r\n     */\r\n    public onDispose(trigger: object , ...args) {\r\n        //尝试获取绑定状态\r\n        let binding: CommandBinding = this.getBinding(trigger, null) as CommandBinding;\r\n        if (binding != null) {\r\n            //是否处于执行序列中\r\n            if (binding.isSequence) {\r\n                //加入执行队列\r\n                this.next(binding, args, 0,);\r\n            } else {\r\n                //获取被绑定的指令对象\r\n                let values: object[] = binding.value as object[];\r\n                let aa = values.length + 1;\r\n                for (let a = 0; a < aa; a++) {\r\n                    this.next(binding, args , a,);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //下一次即将执行的指令\r\n    protected next(binding: CommandBinding, args, depth: number) {\r\n        let values: object[] = binding.value as object[];\r\n        if (values.length === 0) {\r\n            values = [];\r\n            values.push(binding.value);\r\n        }\r\n\r\n        if (depth < values.length) {\r\n            let cmd = values[depth];\r\n            let command: ICommand = this.invokeCommand(cmd, binding, args, depth);\r\n            this.releaseCommand(command);\r\n        } else {\r\n            this.disposeOfSequencedData(args);\r\n            //是否仅执行一次\r\n            if (binding.isOnce) {\r\n                //解除绑定\r\n                this.unbind(binding, null);\r\n            }\r\n        }\r\n    }\r\n    //EventCommandBinder (and perhaps other sub-classes) use this method to dispose of the data in sequenced commands\r\n    protected disposeOfSequencedData(data: object) {\r\n        //No-op. Override if necessary.\r\n    }\r\n    //释放指令，使其进入池\r\n    public releaseCommand(command: ICommand) {\r\n        //有时会需要执行一些耗时的异步操作，如果指令被用户保持则不进行释放，默认情况下都是自动释放的\r\n        if (!command.isRetain) {\r\n            //使用构造函数作为类型\r\n            let t = command.constructor;\r\n            if (this.usePooling && this.pools.has(t)) {\r\n                this.pools.get(t).returnInstance(command);\r\n            }\r\n            if (this.activeCommands.has(command)) {\r\n                this.activeCommands.delete(command);\r\n            } else if (this.activeSequences.has(command)) {\r\n                let binding: CommandBinding = this.activeSequences.get(command);\r\n                let data = command.data;\r\n                this.activeSequences.delete(command);\r\n                this.next(binding, data, command.sequenceId + 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class SignalCommandBinder extends CommandBinder {\r\n    //启用池\r\n    public usePooling : boolean = true;\r\n    //重写解析绑定状态函数\r\n    resolveBinding(binding: IBinding, key: any) {\r\n        super.resolveBinding(binding, key);\r\n        //如果已经存在了则不能再次绑定\r\n        if (this._bindings.has(key)) {\r\n            let signal: ISignal = key;\r\n            signal.addListener(this.onDispose.bind(this)); //Do normal bits, then assign the commandlistener to be reactTo\r\n        }\r\n    }\r\n    //重写绑定方法\r\n    public bind(value: object): CommandBinding {\r\n        //获取绑定状态\r\n        let binding: InjectBinding = this.injectBinder.getBinding(value, null);\r\n        let signal: ISignal = null;\r\n        //检查参数值是否为构造函数\r\n        if (Binding.isConstructor(value)) {\r\n            //如果尚未进行注入则注入一个单例\r\n            if (binding == null) {\r\n                binding = this.injectBinder.bind(value);\r\n                binding.toSingleton();\r\n            }\r\n            signal = this.injectBinder.getInstance(value, null) as ISignal;\r\n        }\r\n        //如果信号存在则绑定信号，否则直接绑定值\r\n        if (signal) {\r\n            return super.bind(signal);\r\n        } else {\r\n            return super.bind(value);\r\n        }\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key: any, name: any): CommandBinding {\r\n        let signal;\r\n        //检查键值是否为构造函数\r\n        if (Binding.isConstructor(key)) {\r\n            //参数应该是一个信号或信号的构造函数，而不是其他的值\r\n            signal = this.injectBinder.getInstance(key, name);\r\n        } else {\r\n            //信号是一个实例\r\n            signal = key;\r\n        }\r\n        return super.getBinding(signal, name) as CommandBinding;\r\n    }\r\n    protected invokeCommand(cmd, binding: CommandBinding, args, depth: number): ICommand {\r\n        let signal: ISignal = binding.key;\r\n        let command: ICommand = this.createCommandForSignal(cmd, args); //Special signal-only command creation\r\n        command.sequenceId = depth;\r\n        this.trackCommand(command, binding);\r\n        this.executeCommand(command,args);\r\n        return command;\r\n    }\r\n    // Create a Command and bind its injectable parameters to the Signal types\r\n    protected createCommandForSignal(cmd, args): ICommand {\r\n        let that = this;\r\n\r\n        if (args != null) {\r\n\r\n            let signalData: [] = args as[];\r\n\r\n            //Iterate each signal type, in order. \r\n            //Iterate values and find a match\r\n            //If we cannot find a match, throw an error\r\n            let injectedTypes = new Set < any > ();\r\n            let values = [signalData];\r\n\r\n            /* if(signalTypes&&signalTypes.length>0){\r\n            signalTypes.forEach((type)=>{\r\n                if (!injectedTypes.has(type)) // Do not allow more than one injection of the same Type\r\n                {\r\n                    let foundValue : boolean= false;\r\n                    for(let i = 0;i<values.length;i++){\r\n                        if (values[i] != null)\r\n                        {\r\n                            that.injectBinder.bind(type).toValue(values[i]).toInject(false);\r\n                            injectedTypes.add(type);\r\n                            //values[i]=null;\r\n                            foundValue = true;\r\n                            break;\r\n                        }\r\n                        else //Do not allow null injections\r\n                        {\r\n                            throw new Error(\"SignalCommandBinder attempted to bind a null value from a signal to Command: \" + cmd.GetType() + \" to type: \" + type);\r\n                        }\r\n                    }\r\n                    if (!foundValue)\r\n                    {\r\n                        throw new Error(\"Could not find an unused injectable value to inject in to Command: \" + cmd.GetType() + \" for Type: \" + type);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    throw new Error(\"SignalCommandBinder: You have attempted to map more than one value of type: \" + type +\r\n                        \" in Command: \" + cmd.GetType() + \". Only the first value of a type will be injected. You may want to place your values in a VO, instead.\");\r\n                }\r\n            })\r\n            }*/\r\n        }\r\n        let command: ICommand = that.getCommand(cmd);\r\n        command.data = args;\r\n/*         if (signalTypes && signalTypes.length > 0) {\r\n            signalTypes.forEach((typeToRemove) => {\r\n                that.injectBinder.unbind(typeToRemove, null);\r\n            })\r\n        } */\r\n        return command;\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\n\r\nexport class CommandBinding extends Binding{\r\n    //是否在执行序列中\r\n    protected _isSequence : boolean;\r\n    //是否仅执行一次\r\n    protected _isOnce : boolean;\r\n    //是否在对象池中\r\n    public isPooled : boolean\r\n    \r\n    public get isSequence() : boolean{\r\n        return this._isSequence\r\n    }\r\n    public get isOnce() : boolean{\r\n        return this._isOnce;\r\n    }\r\n    public to(value) : CommandBinding{\r\n        return super.to(value) as CommandBinding\r\n    }\r\n    public toName(name) : CommandBinding{\r\n        return super.toName(name) as CommandBinding;\r\n    }\r\n    /**\r\n     * 是否进入池\r\n     */\r\n    public Pooled()\r\n    {\r\n        this.isPooled = true;\r\n        this._resolver (this);\r\n        return this;\r\n    }\r\n}","//注入状态类型枚举\r\nexport enum CommandConst\r\n{\r\n    /// Temporary marker for any pool instantiated by the CommandBinder\r\n    COMMAND_POOL = \"COMMAND_POOL\",\r\n}","import { ICommandBinder, __IC_CommandBinder } from \"./ICommandBinder\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../Injector/InjectBinder\";\r\nimport { inject } from \"../Injector/InjectDecorator\";\r\nimport { IConstructorName } from \"../IocConst\";\r\n\r\nexport interface ICommand{\r\n    commandBinder : ICommandBinder;\r\n    injectBinder : IInjectBinder;\r\n    //执行指令\r\n    execute(...args);\r\n    //本条指令的操作ID，用于在队列中寻找下一条指令\r\n    sequenceId : number;\r\n    data : any;\r\n    args : any;\r\n    deploy();\r\n    clean();\r\n    isClean : boolean;\r\n    isRetain : boolean;\r\n    //执行异步操作时可以使用保留指令\r\n    retain();\r\n    //释放被异步操作锁定的指令\r\n    release();\r\n}\r\nexport class __IC_Command extends IConstructorName{\r\n    get constructorName(){return \"ICommand\";}\r\n}\r\nexport class Command implements ICommand{\r\n    // The InjectionBinder for this Context\r\n\t@inject(__IC_InjectBinder)\r\n    public injectBinder : IInjectBinder;\r\n    // Back reference to the CommandBinder that instantiated this Commmand\r\n\t@inject(__IC_CommandBinder)\r\n\tpublic  commandBinder : ICommandBinder;\r\n    public sequenceId;\r\n    public data;\r\n    public args;\r\n    private _clean = false;\r\n    public deploy(){\r\n        this._clean = false;\r\n    }\r\n    public clean(){\r\n        this._clean = true;\r\n    }\r\n    public get isClean(){\r\n        return this._clean;\r\n    };\r\n    private _retain = false;\r\n    //保持指令\r\n    public retain()\r\n    {\r\n        this._retain = true;\r\n    }\r\n    public release()\r\n    {\r\n        this._retain = false\r\n    }\r\n    public get isRetain() : boolean{\r\n        return this._retain;\r\n    }\r\n    //重新释放\r\n    public restore()\r\n    {\r\n        this.injectBinder.injector.uninject (this);\r\n        this.clean();\r\n    }\r\n    //执行指令\r\n    public execute(...args){\r\n\r\n    }\r\n}","import PersistRoot from \"./PersistRoot\";\r\n\r\n//全局变量\r\n export default class  Common{\r\n    static viedo\r\n    static viedoHandle;\r\n    static WxGameApi = null;\r\n    static version = \"v1.6.0\";\r\n    static isInit : boolean = false;\r\n    static persistRootNode : PersistRoot= null;\r\n    static root = null;\r\n    static shareTickets = [];\r\n    static isHasWxRank = false;\r\n    static maxScore = 0;\r\n    //用户的唯一标识\r\n    static userOpenId = 0;\r\n    //会话密钥\r\n    static session_key = \"\";\r\n    //用户全局唯一标识\r\n    static unionId = 0;\r\n}","import {IRoot} from \"./IRoot\"\r\nimport {__IC_InjectBinder,InjectBinder} from \"../Injector/InjectBinder\";\r\nimport {CommandBinder , SignalCommandBinder } from \"../Command/CommandBinder\";\r\nimport {IocError, IConstructorName} from \"../IocConst\"\r\nimport { __IC_CommandBinder } from \"../Command/ICommandBinder\";\r\n\r\nexport interface IContext {\r\n    start(): IContext;\r\n    restart() : IContext;\r\n    //启动\r\n    launch();\r\n    /// Get the ContextView\r\n    getRoot(): any;\r\n    // Register a new context to this one\r\n    addCrossContext(context : IContext):IContext;\r\n    removeCrossContext(context : IContext);\r\n    //共用绑定器\r\n    crossContextBinder : InjectBinder;\r\n}\r\nexport class __IC_Context extends IConstructorName{\r\n    get constructorName(){return \"IContext\";}\r\n}\r\n\r\nexport class Context implements IContext {\r\n    //第一个被创建出来的环境容器\r\n    public static firstContext : IContext;\r\n    //应该以注入的方式获取\r\n    private _injectBinder : InjectBinder;\r\n    private _crossContextBinder : InjectBinder;\r\n    //注入绑定器\r\n    public get injectBinder(): InjectBinder {\r\n        if(!this._injectBinder){\r\n            this._injectBinder = new InjectBinder();\r\n        }\r\n        return this._injectBinder; \r\n    }\r\n    //设置全局注入绑定器\r\n    public set crossContextBinder(value){\r\n        this._crossContextBinder = value;\r\n    }\r\n    //这里使用注入绑定器代替全局绑定器\r\n    public get crossContextBinder(){\r\n        return this._crossContextBinder;\r\n    }\r\n    private _commandBinder : CommandBinder;\r\n    //指令绑定器\r\n    public get commandBinder(): CommandBinder {\r\n/*         //指令绑定器应该由注入产生\r\n        if(!this._commandBinder){\r\n            this._commandBinder = new CommandBinder();\r\n        } */\r\n        return this._commandBinder; \r\n    }\r\n    //根节点\r\n    root: IRoot;\r\n    //获取根节点\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n\r\n    constructor(root: any) {\r\n        if (Context.firstContext == null || Context.firstContext.getRoot() == null){\r\n            Context.firstContext = this;\r\n            this.crossContextBinder = this.injectBinder;\r\n\t\t}else{\r\n\t\t\tContext.firstContext.addCrossContext(this);\r\n        }\r\n        //设置根节点\r\n        this.setRoot(root);\r\n        //添加核心\r\n        this.addCore();\r\n        //启动环境容器\r\n        this.start();\r\n    }\r\n    //添加全局环境容器\r\n    public addCrossContext(context : IContext):IContext{\r\n        //共用注入绑定器\r\n        context.crossContextBinder= this.injectBinder;\r\n\t\treturn this;\r\n    }\r\n    //移除全局环境容器\r\n    public removeCrossContext(childContext: IContext)\r\n    {\r\n/*         if (childContext.crossContextBinder != null)\r\n        {\r\n            childContext.crossContextBinder = null;\r\n        } */\r\n    }\r\n\r\n    public setRoot(root: any): IContext {\r\n        this.root = root;\r\n        return this;\r\n    }\r\n    public restart() : IContext{\r\n        this.addCore();\r\n        this.start();\r\n        //console.info(\"[重启Ioc容器]\");\r\n        return this;\r\n    }\r\n    public start(): IContext {\r\n        this.instantiateCore();\r\n        this.mapBindings();\r\n        this.postBindings();\r\n        this.launch();\r\n\r\n        return this;\r\n    }\r\n    //启动容器\r\n    public launch() {\r\n        //console.info(\"Ioc容器启动\");\r\n    }\r\n    /**\r\n     * 初始化核心组件\r\n     */\r\n    protected instantiateCore() {\r\n        //实例化信号绑定器\r\n        this._commandBinder = this.injectBinder.getInstance(__IC_CommandBinder,null);\r\n    }\r\n    protected mapBindings() {\r\n\r\n    }\r\n    protected postBindings() {\r\n\r\n    }\r\n    protected addCore() {\r\n        //注入注入绑定器\r\n        this.injectBinder.bind(__IC_InjectBinder).toValue(this.injectBinder);\r\n        //注入信号绑定器\r\n        this.injectBinder.bind(__IC_CommandBinder).to(SignalCommandBinder).toSingleton();\r\n    }\r\n\r\n}\r\n//}","import { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class Animal extends IocView {\r\n    private value;\r\n    private time;\r\n    private step;\r\n    onLoad() {\r\n        super.onLoad();\r\n    }\r\n    start(){\r\n        super.start();\r\n    }\r\n    /**\r\n     * 配置\r\n     * @param start 起始值 \r\n     * @param duration 持续时间\r\n     */\r\n    config(start,duration){\r\n        this.time = duration;\r\n        this.value = start;\r\n\r\n        this.step = this.time / this.value;\r\n    }\r\n    //播放\r\n    play(){\r\n\r\n    }\r\n    \r\n    update(dt){\r\n        if(this.time>=0){\r\n            let before = this.time;\r\n            this.time -= dt;\r\n            let after = Math.fround(this.time);\r\n            //如果整数部分发生变化\r\n            if(before !== after){\r\n                if(after>=0){\r\n                    this.getComponent(cc.Label).string = \"\"+after;\r\n                }else{\r\n                    this.getComponent(cc.Label).string = \"Go~!\";\r\n                }\r\n            }\r\n\r\n        }else{\r\n            this.destroy();\r\n        }\r\n    }\r\n}","import {Binder} from \"../Bind/Binder\";\r\nimport {BindingConst} from \"../Bind/BindConst\";\r\nimport {DecoratorClass} from \"./DecoratorClass\";\r\nimport {DecoratorClassBinding} from \"./DecoratorClassBinding\";\r\nimport {IBinding, Binding} from \"../Bind/Binding\";\r\nimport { Prototype } from \"../../Extensions/Prototype\";\r\n\r\nexport class DecoratorClassBinder extends Binder {\r\n    //重写绑定状态映射字典Map< 被注入的类名, Map< 属性名 ，Map< 属性别名 , 绑定状态>>>\r\n    protected _bindings: Map < any, Map < any, Map < any, DecoratorClassBinding >>> ;\r\n    private _decoratorClassBufferMap : Map<any,DecoratorClass>;\r\n\r\n    //重写初始化函数\r\n    init() {\r\n        //初始化绑定状态映射\r\n        this._bindings = new Map < any, Map < any, Map < any, DecoratorClassBinding >>> ();\r\n        //初始化缓存映射\r\n        this._decoratorClassBufferMap = new Map<any,DecoratorClass>();\r\n    }\r\n    //检查是否存在指定的键值\r\n    public has(key):boolean{\r\n        return this._bindings.has(key);\r\n    }\r\n    //获取需要注入的类型数据\r\n    public get(target: any): DecoratorClass {\r\n        //检查是否为实例\r\n        if (!(target instanceof Object)) throw new Error(\"proto must is a object but\" + target + \"is not\");\r\n        //检查是否存在缓存\r\n        if(!this._decoratorClassBufferMap.has(target)){\r\n            //获取继承列表\r\n            let extendsList = Prototype.getPrototypeList(target);\r\n\r\n            let injectClass: DecoratorClass = new DecoratorClass();\r\n            let list = [];\r\n            let dict: Map < any, Map < any, DecoratorClassBinding >> ;\r\n            let that = this;\r\n            let bindingMaps = [];\r\n            if (extendsList && extendsList.length > 0) {\r\n                for(let i = 0 ; i<extendsList.length ; i++){\r\n                    dict = that.getBindingMap(extendsList[i]);\r\n                    if(dict&&dict.size>0){\r\n                        dict.forEach(function(inside) {\r\n                            bindingMaps.push(inside);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            let inside : Map<any,DecoratorClassBinding>;\r\n            if (bindingMaps && bindingMaps.length > 0) {\r\n                for(let i = 0; i <bindingMaps.length;i++){\r\n                    inside = bindingMaps[i];\r\n                    if(inside&&inside.size>0){\r\n                        let values = inside.values();\r\n                        for (let j =0;j<inside.size;j++) {\r\n                            let binding = values.next();\r\n                            list.push(binding.value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            injectClass.list = list;\r\n            //添加缓存\r\n            this._decoratorClassBufferMap.set(target,injectClass);\r\n        }\r\n        //从缓存映射中获取对应的列表\r\n        return this._decoratorClassBufferMap.get(target);\r\n    }\r\n    //重写绑定方法\r\n    public bind(key: any): DecoratorClassBinding {\r\n        return super.bind(key) as DecoratorClassBinding;\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key, name): DecoratorClassBinding {\r\n        return super.getBinding(key, name) as DecoratorClassBinding\r\n    }\r\n    //重写绑定获取方法\r\n    public getRawBinding(): IBinding {\r\n        return new DecoratorClassBinding(this.resolver.bind(this));\r\n    }\r\n    //重写解析器\r\n    public resolver(binding: IBinding) {\r\n        super.resolver(binding);\r\n    }\r\n    /**\r\n     * 重写解析绑定状态\r\n     * @param binding 绑定状态\r\n     * @param key 键值\r\n     */\r\n    resolveBinding(binding: DecoratorClassBinding, key: any) {\r\n        //绑定状态必须有属性名\r\n        if (!binding.property) return;\r\n        //检查绑定状态是否存在别名\r\n        let bindingName = (binding.name == null) ? BindingConst.NULL : binding.name;\r\n        let dict: Map < any, Map < any, DecoratorClassBinding >> ;\r\n        //检查绑定状态字典已经存在键值\r\n        if ((this._bindings.has(key))) {\r\n            //获取绑定映射\r\n            dict = this._bindings.get(key);\r\n            //检查绑定映射是否存在别名\r\n            if (dict.has(bindingName)) {\r\n                //获取内部映射\r\n                let insideDict = dict.get(bindingName);\r\n                //检查映射内是否存在属性名\r\n                if (insideDict.has(binding.property)) {\r\n                    let existingBinding = insideDict.get(binding.property);\r\n                    //如果存在绑定状态\r\n                    if (existingBinding) {\r\n                        //检查存在对应状态绑定是否于当前相等\r\n                        if (existingBinding != binding) {\r\n                            //如果绑定值为空\r\n                            if (!existingBinding.value) {\r\n                                //移除无效的绑定别名\r\n                                dict.delete(bindingName);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //创建绑定映射Map< 别名, Map< 属性名, 绑定状态 >\r\n            dict = new Map < any, Map < any, DecoratorClassBinding >> ();\r\n            //添加绑定映射\r\n            this._bindings.set(key, dict);\r\n        }\r\n\r\n        //如果存在默认绑定状态并且等于当前绑定状态\r\n        if (dict.has(BindingConst.NULL)) {\r\n            let insideDic = dict.get(BindingConst.NULL);\r\n            if (insideDic.has(binding.property)) {\r\n                let existingBinding = insideDic.get(binding.property);\r\n                if (binding.property === binding) {\r\n                    //删除默认绑定\r\n                    insideDic.delete(BindingConst.NULL);\r\n                }\r\n            }\r\n\r\n        }\r\n        let insideDict;\r\n        //添加或覆盖绑定状态\r\n        if (!dict.has(bindingName)) {\r\n            //创建内部映射\r\n            insideDict = new Map < any, DecoratorClassBinding > ();\r\n            //映射绑定状态\r\n            insideDict.set(binding.property, binding);\r\n            //映射绑定\r\n            dict.set(bindingName, insideDict);\r\n        } else {\r\n            //获取内部映射\r\n            insideDict = dict.get(bindingName);\r\n            //检查是否存在属性名映射\r\n            if (!insideDict.has(binding.property)) {\r\n                //映射绑定\r\n                insideDict.set(binding.property, binding)\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 重写获取绑定状态映射表，返回键值的所有绑定状态\r\n     * @param key 被绑定的键值\r\n     */\r\n    getBindingMap(key: any): Map < any, Map < any, DecoratorClassBinding >> {\r\n        if (this._bindings.has(key)) {\r\n            return this._bindings.get(key);\r\n        }\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\n\r\nexport class DecoratorClassBinding extends Binding{\r\n    protected _property: any;\r\n    public get property(){\r\n        return this._property;\r\n    }\r\n    \r\n    /**\r\n     * 从正在绑定状态映射到属性，返回此时的绑定状态。\r\n     * @param property 绑定映射的值\r\n     */\r\n    toProperty(property : any):DecoratorClassBinding {\r\n        this._property = property;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n    //重写绑定到值\r\n    to(value : any):DecoratorClassBinding{\r\n        return super.to(value) as DecoratorClassBinding;\r\n    }\r\n    //重写绑定别名\r\n    toName(name : any) : DecoratorClassBinding{\r\n        return super.toName(name) as DecoratorClassBinding;\r\n    }\r\n}","import { DecoratorClassBinding } from \"./DecoratorClassBinding\";\r\n/**\r\n * 存储装饰器获取的信息\r\n */\r\nexport class DecoratorClass{\r\n    //注入列表\r\n    private _list : DecoratorClassBinding[];\r\n    public get list(){\r\n        return this._list;\r\n    }\r\n    public set list(value : DecoratorClassBinding[]){\r\n        this._list = value;\r\n    }\r\n}","import { DecoratorClassBinder } from \"./DecoratorClassBinder\";\r\nexport module DecoratorConst {\r\n    /**\r\n     * 全局注册接入点\r\n     * 使用属性的类型和属性的别名识别被注入的属性\r\n     */\r\n    export const DECORATOR_CLASS_BINDER = new DecoratorClassBinder();\r\n}","import { inject } from '../../lib/framework/Injector/InjectDecorator';\nimport { MainModel} from '../Model/MainModel';\nimport Animal from './Animal';\nimport { MainUtil } from '../util/MainUtil';\nimport { IocView } from '../../lib/extensions/IocView';\nimport { GameSignalEnum, MainSignalEnum } from '../signal/MainSignalEnum';\nimport { __IC_Model, ModelType } from \"../util/Model\";\nimport { __IC_Util, UtilType } from '../util/Util';\nimport { __IC_Manager, ManagerType } from '../util/Manager';\nimport AudioManager from '../util/AudioManager';\n\nconst {ccclass, property} = cc._decorator\n\n@ccclass\nexport default class Food extends IocView {\n    @inject(__IC_Model,ModelType.Main)\n    mMdl : MainModel;\n    @inject(__IC_Util,UtilType.Main)\n    mUtl : MainUtil;\n    @inject(__IC_Manager,ManagerType.Audio)\n    aMgr : AudioManager;\n\n    inited;\n    foodData;\n\n\tpublic speed = 0;\n    public accel = 0;\n    \n    private moveY = 0\n    type = ''\n\n    onLoad() {super.onLoad();}\n    start(){super.start();}\n    reuse() {}\n    unuse() {}\n    public clear(){\n        this.speed = 175;\n        this.accel = 125;\n        this.moveY = 0;\n        this.node.x = 0;\n        this.node.y = 0;\n    }\n    update(dt) {\n        //如果小游戏处于被隐藏的状态则不执行任何更新\n        if(this.mMdl.isHide)return;\n    \tif (!this.inited) return\n    \tthis.speed += this.accel * dt\n    \tthis.moveY = this.speed * dt\n        this.node.y -= this.moveY\n    }\n\n    onCollisionEnter(other, self) {\n        if (!this.inited) return;\n        let otherComponent = other.getComponent(Animal);\n        if(!otherComponent){\n            otherComponent = other.getComponent(Food);\n            //食物节点之间不进行碰撞检查\n            if(otherComponent) return;\n        }\n        let selfComponent = self.getComponent(Food);\n        if (otherComponent && selfComponent && otherComponent.type === selfComponent.type) {\n            //this.mMdl.onMatch()\n            this.sMgr.get(MainSignalEnum.Match).dispatch(GameSignalEnum.onMatch,this.node);\n            this.resPoolNode(this.node);\n        } else {\n            //this.mMdl.onNotMatch()\n            this.sMgr.get(MainSignalEnum.Match).dispatch(GameSignalEnum.onNotMatch);\n        }\n        this.inited = false;\n    }\n    //回收到资源池\n    resPoolNode(foodNode) {\n        let index = this.mMdl.currentFoodNodes.indexOf(foodNode)\n        if (index !== -1) {\n            this.mMdl.currentFoodNodes.splice(index, 1)\n        }\n        return this.mMdl.foodPool.res(foodNode)\n    }\n    //随机配置食物位置\n    randomProps() {\n        this.inited = false\n        let track = this.mUtl.randomCoin()\n        //记录最后的食物索引\n        if (this.mMdl.lastFoodIndex === -1) this.mMdl.lastFoodIndex = track\n        if (this.mMdl.lastTrack === -1) this.mMdl.lastTrack = track\n        let baseIndex\n        //如果当前轨道等于最后的轨道\n        if (track === this.mMdl.lastTrack) {\n            //创建与最后的轨道相同类型的食物\n            baseIndex = this.mMdl.lastFoodIndex\n        } else {\n            //检查当前的轨道与最后的食物之间的差值\n            baseIndex = track ? this.mMdl.lastFoodIndex + 1 : this.mMdl.lastFoodIndex - 1\n        }\n        //随机范围\n        let randomRange = [baseIndex - 1, baseIndex + 1].map(i => {\n            if (i < 0) i = this.mMdl.foodDatas.length + i\n            if (i >= this.mMdl.foodDatas.length) i = i - this.mMdl.foodDatas.length\n            return i\n        })\n        let foodIndex = this.mUtl.randomValue(...randomRange)\n        this.mMdl.lastFoodIndex = foodIndex\n        this.mMdl.lastTrack = track\n        this.foodData = this.mMdl.foodDatas[foodIndex]\n        let foodNode = this.node\n        this.type = this.foodData.type\n        foodNode.getComponent(cc.Sprite).spriteFrame = this.foodData.spriteFrame ;\n        let x = (track ? 1 : -1) * (this.mMdl.animalTextureRect.width / 2);\n        foodNode.setPosition(x , this.mUtl.getSceneSize().height/2);\n        this.inited = true\n    }\n}\n\n\n\n","import {\r\n    Command\r\n} from \"../../lib/framework/Command/Command\";\r\nimport {\r\n    inject\r\n} from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport {\r\n    MainModel\r\n} from \"../Model/MainModel\";\r\nimport {\r\n    MainUtil\r\n} from \"../util/MainUtil\";\r\nimport Animal from \"../view/Animal\";\r\nimport {\r\n    __IC_Model,\r\n    ModelType\r\n} from \"../util/Model\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\nimport {\r\n    TouchUtil,\r\n    TouchDirection,\r\n    TouchStatus\r\n} from \"../util/TouchUtil\";\r\nimport {\r\n    __IC_Util,\r\n    UtilType\r\n} from \"../util/Util\";\r\n\r\n/**\r\n * 生成视图节点命令\r\n * 这个命令用于生成游戏视图\r\n */\r\nexport class GenerateCommand extends Command {\r\n    @inject(__IC_Model, ModelType.Main)\r\n    mMdl: MainModel;\r\n    @inject(__IC_Util, UtilType.Main)\r\n    mUtl: MainUtil;\r\n    @inject(__IC_Util, UtilType.Touch)\r\n    tUtl: TouchUtil;\r\n    @inject(cc.Node, \"Scene\")\r\n    sceneNode: cc.Node;\r\n    @inject(cc.Node, \"Animals\")\r\n    animalsNode: cc.Node;\r\n    @inject(cc.Prefab, \"Animal\")\r\n    animalPrefab: cc.Prefab;\r\n    @inject(cc.Prefab, \"Food\")\r\n    foodPrefab: cc.Prefab;\r\n\r\n\r\n    execute(complete) {\r\n        //console.log(\"[视图节点生成指令]\");\r\n        //等待异步过程初始化完成\r\n        this.init().then(() => {\r\n            this.generateTouchArea();\r\n            this.generateAnimals();\r\n            complete();\r\n        })\r\n    }\r\n    //生成触控区域\r\n    generateTouchArea() {\r\n        let area = new cc.Node(\"TouchArea\");\r\n        this.sceneNode.addChild(area);\r\n        area.width = this.mUtl.getSceneSize().width;\r\n        area.height = this.mUtl.getSceneSize().height;\r\n        this.tUtl.registerTouchArea(area, true);\r\n    }\r\n    init(): Promise < {} > {\r\n        this.mMdl.currentFoodNodes = [];\r\n        this.mMdl.foodPool = new PrefabPool('Food', this.foodPrefab)\r\n        let p1 = this.loadFoodRes();\r\n        let p2 = this.loadAnimalRes();\r\n        return Promise.all([p1, p2]);\r\n    }\r\n    private loadFoodRes() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            //获取所有的渲染对象\r\n            let results = Promise.all(that.mMdl.foodDatas.map((foodData) =>{\r\n                return that.mUtl.spriteRes(foodData.image)\r\n            }));\r\n            results.then((spriteFrames)=>{\r\n                spriteFrames.forEach((spriteFrame, i) => {\r\n                    that.mMdl.foodDatas[i].spriteFrame = spriteFrame;\r\n                });\r\n                //完成过程\r\n                resolve();\r\n            })\r\n        });\r\n    }\r\n    private loadAnimalRes() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            //获取所有的渲染对象\r\n            let results = Promise.all(that.mMdl.animalDatas.map((animalData) =>{\r\n                            return that.mUtl.spriteRes(animalData.image)\r\n                        }));\r\n            results.then((spriteFrames) => {\r\n                if (spriteFrames) {\r\n                    spriteFrames.forEach((spriteFrame, i) => {\r\n                        that.mMdl.animalDatas[i].spriteFrame = spriteFrame;\r\n                    });\r\n                }\r\n                //完成过程\r\n                resolve();\r\n            })\r\n        })\r\n    }\r\n    private generateAnimals(){\r\n        let that = this;\r\n        this.mMdl.animalDatas.forEach((animalData, i) => {\r\n            let animalNode = cc.instantiate(that.animalPrefab);\r\n            let animal = animalNode.getComponent(Animal);\r\n            let sprite = animalNode.getComponent(cc.Sprite);\r\n            //注意，未被添加到空间中的节点不会被初始化，所以这里需要先引入节点再执行节点的函数\r\n            that.animalsNode.addChild(animalNode);\r\n            sprite.spriteFrame = animalData.spriteFrame;\r\n            animal.type = animalData.type;\r\n            animal.rePositonAnimal(i);\r\n        })\r\n    }\r\n}","import { CommandBinding } from \"./CommandBinding\";\r\nimport { IBinding } from \"../Bind/Binding\";\r\nimport { Binder } from \"../Bind/Binder\";\r\nimport { IConstructorName } from \"../IocConst\";\r\n\r\nexport interface ICommandBinder{\r\n    bind (key : any) : CommandBinding;\r\n    getRawBinding():IBinding;\r\n}\r\nexport class __IC_CommandBinder extends IConstructorName{\r\n    static get constructorName(){return \"ICommandBinder\";}\r\n}","//namespace ioc{\r\nimport { IContext } from \"./Context\"\r\nimport { IConstructorName } from \"../IocConst\";\r\nexport class __IC_Root extends IConstructorName{\r\n    get constructorName(){return \"IRoot\";}\r\n}\r\nexport interface IRoot {\r\n    context: IContext;\r\n}\r\n//}","import {Binder, IBinder} from \"../Bind/Binder\"\r\nimport {IBinding, Binding} from \"../Bind/Binding\"\r\nimport {BindingConst} from \"../Bind/BindConst\"\r\nimport { Injector } from \"./Injector\";\r\nimport { InjectBinding } from \"./InjectBinding\";\r\nimport {DecoratorConst} from \"../Decorator/DecoratorConst\"\r\nimport {IocError, IConstructorName} from \"../IocConst\"\r\nimport { __IC_Model } from \"../../../project/util/Model\";\r\nimport { MainModel } from \"../../../project/Model/MainModel\";\r\n//全局注入数据绑定器\r\nconst ClassBinder = DecoratorConst.DECORATOR_CLASS_BINDER;\r\n\r\nexport interface IInjectBinder extends IBinder{\r\n    injector:Injector;\r\n    getInstance(key,name) : any;\r\n    getBinding(key, name) : InjectBinding;\r\n    bind(key:any):InjectBinding;\r\n    /**\r\n     * 解绑所有被标记了需要解绑的状态\r\n     */\r\n    unbindAllMark();\r\n} \r\nexport class __IC_InjectBinder extends IConstructorName{\r\n    get constructorName(){return \"IInjectBinder\";}\r\n}\r\nexport class InjectBinder extends Binder implements IInjectBinder {\r\n    //注入器\r\n    private _injector:Injector;\r\n    constructor(){\r\n        super();\r\n        this._injector = new Injector ();\r\n        this._injector.binder = this;\r\n        this._injector.injectClassBinder = ClassBinder;\r\n    }\r\n    public get injector() : Injector{\r\n        return this._injector;\r\n    }\r\n    //绑定状态映射字典\r\n    public getInstance(key,name) : any\r\n    {\r\n        //如果未设置别名则使用默认设置\r\n        if(!name)name = BindingConst.NULL;\r\n        //获取绑定状态\r\n        let binding : InjectBinding = this.getBinding (Binding.checkAbstract(key), name) as InjectBinding;\r\n        //尝试获取一个未绑定的键值对时抛出绑定失败异常\r\n        if (binding == null){throw new Error(\"InjectionBinder has no binding for:\\n\\tkey: \" + key + \"\\nname: \" + name);}\r\n        //根据绑定状态从注入器中获取实例\r\n        //console.info(\"[实例化]\"+binding.key);\r\n        let instance = this._injector.instantiate(binding,false);\r\n        //console.info(\"[尝试注入]\"+Binding.checkAbstract(binding.key));\r\n        this._injector.tryInject(binding,instance);\r\n        return instance;\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key, name) : InjectBinding{\r\n        return super.getBinding(key,name) as InjectBinding\r\n    }\r\n    //重写基类的绑定函数\r\n    public bind(key:any):InjectBinding{\r\n        return super.bind(key) as InjectBinding;\r\n    }\r\n    public getRawBinding() : IBinding{\r\n        return new InjectBinding(this.resolver.bind(this));\r\n    }\r\n    public unbindAllMark(){\r\n        let that = this;\r\n        let unbinds = [];\r\n        (this._bindings as Map < any, Map < any, InjectBinding >>).forEach(dict => {\r\n            dict.forEach(binding=>{\r\n                if(binding.isUnbind){\r\n                    unbinds.push(binding);\r\n                }\r\n            })\r\n        });\r\n        //解除被标记的绑定\r\n        unbinds.forEach(binding=>{\r\n            that.unbind(binding.key,binding.name);\r\n        })\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\nimport {InjectConst} from \"./InjectConst\";\r\n\r\nexport class InjectBinding extends Binding{\r\n    protected _isUnbind : boolean = false;\r\n    //默认绑定状态\r\n    protected _bindingType: InjectConst.BindingType = InjectConst.BindingType.DEFAULT;\r\n    //默认自动注入\r\n    protected _isInject: boolean = true;\r\n    //参数\r\n    protected _args: any;\r\n/*     //键值是否为构造函数\r\n    protected _isKeyConstructor = false;\r\n    //值是否为构造函数\r\n    protected _isValueConstructor = false; */\r\n\r\n/*     public get isKeyConstructor(){\r\n        return this._isKeyConstructor;\r\n    }\r\n    public get isValueConstructor(){\r\n        return this._isValueConstructor;\r\n    } */\r\n    public get isInject(){\r\n        return this._isInject;\r\n    }\r\n    //参数列表\r\n    public get args() {\r\n        return this._args;\r\n    }\r\n    public get bindingType(){\r\n        return this._bindingType;\r\n    }\r\n    public get isUnbind(){\r\n        return this._isUnbind;\r\n    }\r\n    /**\r\n     * 参数列表\r\n     */\r\n    public toArgs(){\r\n        this._args = arguments;\r\n        if (this._resolver != null){\r\n            this._resolver(this);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 设置为单例模式时，每次都会得到相同的实例\r\n     */\r\n\tpublic toSingleton(): InjectBinding\r\n\t{\r\n\t\t//如果已经存在一个值了, 那么这次映射就被视为多余的\r\n\t\tif (this._bindingType === InjectConst.BindingType.VALUE){\r\n            return this;\r\n        }\r\n        //设定为单例注入\r\n        this._bindingType = InjectConst.BindingType.SINGLETON;\r\n\t\tif (this._resolver != null){\r\n\t\t\tthis._resolver (this);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n    /**\r\n     * 设置为解绑时，调用解绑方法将会解绑所有被标记的绑定状态\r\n     */\r\n    public unBind(): InjectBinding{\r\n        this._isUnbind = true;\r\n        return this;\r\n    }\r\n    public toValue(value : any) : InjectBinding{\r\n        this._bindingType = InjectConst.BindingType.VALUE;\r\n        this.setValue(value);\r\n        return this;\r\n    }\r\n    public setValue(o : any) : InjectBinding\r\n    {\r\n        this.to(o);\r\n        return this;\r\n    }\r\n    public toInject( value : boolean) : InjectBinding\r\n    {\r\n        this._isInject = value;\r\n        return this;\r\n    }\r\n    //重写基类的赋值函数\r\n    public to(value : any) : InjectBinding{\r\n        return super.to(value) as InjectBinding;\r\n    }\r\n    public toName(name : any) : InjectBinding{\r\n        return super.toName(name) as InjectBinding;\r\n    }\r\n}","export module InjectConst {\r\n    //注入状态类型枚举\r\n    export const enum BindingType\r\n    {\r\n        /// 每次都会创建一个新的对象\r\n        DEFAULT = \"Default\",\r\n    \r\n        /// 总是使用同一个对象单例\r\n        SINGLETON = \"Singleton\",\r\n    \r\n        /// 总是相同的对象但参数不同\r\n        VALUE = \"Value\",\r\n    }\r\n}","import {DecoratorConst} from \"../Decorator/DecoratorConst\"\r\nimport { Binding } from \"../Bind/Binding\";\r\n//全局注入数据绑定器\r\nconst ClassBinder = DecoratorConst.DECORATOR_CLASS_BINDER;\r\n/**\r\n * 注入装饰器模块\r\n * 因为TS的类型系统仅可以用于检查语法错误，而在编译为JS后不再有类型系统，所以无法在TS中存储类型数据\r\n * 并且在微信环境下是无法使用反射库和动态代码，至少现在还不行。\r\n * 为了实现注入功能，这里采用类的构造函数作为类型数据，以构造函数的name属性作为类型的名称，又因接口没有构造函数\r\n * 所以统一采用添加 __IC_ 前缀的模拟接口名方式间接存储接口数据，因为装饰器会在程序运行的起始阶段执行，所以使用一个全局变量存储这些数据\r\n * @see 注意：所有的__IC_类均需要实现IConstructorName接口\r\n * @example\r\n * class{\r\n *  @inject(constructor)\r\n *  anyclass:T;\r\n * }\r\n */\r\nexport function inject < T > (str: string): Function;\r\n/**\r\n * 属性值注入装饰器\r\n * @param c 构造函数\r\n */\r\nexport function inject < T > (c: new() => T): Function;\r\n/**\r\n * 使用别名的方式注入属性值\r\n * @param name 属性值别名\r\n */\r\nexport function inject < T > (c: new() => T, name: any): Function;\r\nexport function inject < T > (str:string, name: any): Function;\r\n/**\r\n * 使用默认的方式注入属性值\r\n */\r\n//export function inject<T>(_target: Object, _key: any, _desc ? : any) : void;\r\n\r\n//利用重载的形式定义注入属性的方法\r\nexport function inject < T > (): any {\r\n    switch (arguments.length) {\r\n        case 0:\r\n            break;\r\n        case 1:\r\n            return injectNoNameFunc < T > (arguments[0]);\r\n            break;\r\n        case 2:\r\n            return injectToNameFunc < T > (arguments[0], arguments[1])\r\n            break;\r\n        case 3:\r\n            break;\r\n    }\r\n}\r\n/**\r\n * 无别名的属性装饰器\r\n * @param _constructor 类型T的构造函数\r\n */\r\nconst injectNoNameFunc = < T > (_constructor: new() => T | string) => {\r\n    return function (_target: any, _property: string) {\r\n        injectFunc(_target,_constructor,_property);\r\n    }\r\n}\r\n/**\r\n * 带别名的属性装饰器\r\n * @param _constructor 类型T的构造函数\r\n */\r\nconst injectToNameFunc = < T > (_constructor: new() => T | string, _name: any) => {\r\n    return function (_target: any, _property: string) {\r\n        injectFunc(_target,_constructor,_property,_name);\r\n    }\r\n\r\n}\r\n/**\r\n * \r\n * @param _target 被注入的目标类\r\n * @param _constructor 注入的类\r\n * @param _property 注入的类的属性名\r\n * @param _name 注入的类的别名\r\n */\r\nfunction injectFunc(_target,_constructor,_property,_name?){\r\n    //所有实现了IConstructorName的类都属于虚类，这里获取虚类对应的接口名作为键值传递给绑定器\r\n    //因为压缩代码会把所有对象的名称都压缩掉，所以这里使用构造函数作为键值\r\n    ClassBinder.bind(_target.constructor).to(Binding.checkAbstract(_constructor)).toProperty(_property).toName(_name);\r\n}","import { InjectBinding } from \"./InjectBinding\";\r\nimport {InjectConst} from \"./InjectConst\";\r\nimport { Binding } from \"../Bind/Binding\";\r\n/**\r\n * 注入工厂，负责从给定的构造函数创建对象\r\n * 可以创建单例\r\n */\r\nexport class InjectFactory{\r\n    /**\r\n     * 根据绑定状态和指定的参数创建或获取实例对象\r\n     * @param binding 绑定状态\r\n     * @param args 参数\r\n     */\r\n    public get(binding:InjectBinding,args : any[]):object{\r\n        //检查绑定状态是否有效\r\n        if (binding == null){\r\n\t\t\tthrow new Error (\"InjectorFactory cannot act on null binding\");\r\n        }\r\n        //判断注入状态类型\r\n        let bindingType : InjectConst.BindingType = binding.bindingType;\r\n        //根据不同的类型创建\r\n        switch (bindingType)\r\n        {\r\n            case InjectConst.BindingType.SINGLETON:\r\n                return this.singletonOf (binding, args);\r\n                break;\r\n            case InjectConst.BindingType.VALUE:\r\n                return this.valueOf (binding);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return this.instanceOf (binding, args);\r\n    }\r\n    // 生成一个新的实例\r\n\tprotected instanceOf( binding : InjectBinding, args : any[]) : any\r\n\t{\r\n\t\tif (binding.value != null)\r\n\t\t{\r\n\t\t\treturn this.createFromValue(binding.value, args);\r\n\t\t}\r\n\t\tlet value : any = this.generateImplicit(binding.key, args);\r\n\t\treturn this.createFromValue(value, args);\r\n    }\r\n    // Call the Activator to attempt instantiation the given object\r\n\tprotected createFromValue(c : new(...args)=> any, args : any[]) : any\r\n\t{\r\n\t\tlet instance = null;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (args == null || args.length == 0)\r\n\t\t\t{\r\n\t\t\t\tinstance = new c();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinstance = new c(args);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch\r\n\t\t{\r\n\t\t\t//No-op\r\n        }\r\n        //if(instance)console.info(\"[实例化]\"+instance.constructor.name);\r\n\t\treturn instance;\r\n    }\r\n    protected generateImplicit(key : any, args:any[]):any\r\n    {\r\n        //如果无法直接转换键值为构造函数\r\n        if(!key)return null;\r\n        //检查键值是否为构造函数\r\n        if (Binding.isConstructor(key))\r\n        {\r\n            return this.createFromValue(key, args);\r\n        }\r\n        throw new Error (\"InjectorFactory can't instantiate an Interface or Abstract Class. Class: \" + key.ToString());\r\n    }\r\n    // Generate a Singleton instance\r\n\tprotected singletonOf(binding : InjectBinding, args : any[])\r\n\t{\r\n\t\tif (binding.value != null)\r\n\t\t{\r\n            let o = this.createFromValue (binding.value, args);\r\n            if (o == null)\r\n                return null;\r\n            binding.setValue(o);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbinding.setValue(this.generateImplicit(binding.key, args));\r\n\t\t}\r\n\t\treturn binding.value;\r\n    }\r\n    protected valueOf(binding : InjectBinding)\r\n    {\r\n        return binding.value;\r\n    }\r\n}","import { InjectFactory } from \"./InjectFactory\"\r\nimport { InjectBinder } from \"./InjectBinder\";\r\nimport { InjectBinding } from \"./InjectBinding\";\r\nimport { InjectConst} from \"./InjectConst\";\r\nimport { DecoratorClass } from \"../Decorator/DecoratorClass\";\r\nimport { DecoratorClassBinder } from \"../Decorator/DecoratorClassBinder\";\r\nimport { Binding } from \"../Bind/Binding\";\r\n\r\nexport class Injector{\r\n    public factory : InjectFactory;\r\n    public binder : InjectBinder;\r\n    public injectClassBinder : DecoratorClassBinder;\r\n\r\n    constructor(){\r\n        this.factory = new InjectFactory();\r\n    }\r\n    public uninject(target)\r\n    {\r\n        if(!this.binder||!target)throw new Error(\"Attempt to inject into Injector without a Binder or null instance\");\r\n        //排除一些不能被注入的类型\r\n        let type : any = typeof target;\r\n        if (type === \"string\" || type === \"boolean\"||type === \"number\" ||type === \"symbol\"||type === \"undefined\" || type === \"function\")\r\n        {\r\n            return target;\r\n        }\r\n        //获取注入类\r\n        let injectClass : DecoratorClass = this.injectClassBinder.get(target);\r\n        this.decoratorUnInject (target, injectClass);\r\n    }\r\n    private decoratorUnInject(target : any, injectClass : DecoratorClass){\r\n        let that = this;\r\n        //遍历注入类\r\n        injectClass.list.forEach((binding)=>{\r\n            //尝试获绑定状态\r\n            let injectBinding = that.binder.getBinding(binding.value,binding.name);\r\n            //不能注入一个未绑定的值\r\n            if(injectBinding){\r\n                //将注入值赋给目标对象\r\n                target[binding.property] = null;\r\n            }\r\n        })\r\n    }\r\n    //实例化对象\r\n    public instantiate(binding : InjectBinding,tryInjectHere : boolean) : object{\r\n        //检查是否具备注入条件\r\n        if(!this.binder||!this.factory)throw new Error(\"Attempt to instantiate from Injector without a Binder or inject into Injector without a Factory\");\r\n        //构造函数\r\n        let constructor = null;\r\n        //实例对象\r\n        let instance : object = null;\r\n        //检查绑定状态的值是否为构造函数\r\n        if (binding.isValueConstructor){\r\n            //传入构造函数\r\n            constructor = binding.value;\r\n        }else{\r\n            //直接赋值\r\n            instance = binding.value;\r\n        }\r\n        //如果没有设置注入值但是键值是一个构造函数\r\n        if(!constructor&&binding.isKeyConstructor){\r\n            //指定绑定状态的键值为构造函数\r\n            constructor = binding.key;\r\n        }\r\n        //如果没有直接赋值实例并且存在构造函数\r\n        if(!instance && constructor){\r\n            //参数\r\n            let args = binding.args;\r\n            instance = this.factory.get(binding, args);\r\n            //如果尝试在这里直接注入\r\n            if (tryInjectHere)\r\n            {\r\n                this.tryInject(binding, instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    public tryInject(binding : InjectBinding, target : any)\r\n    {\r\n        //如果工厂不能创建实例则这里直接返回\r\n        if (target != null)\r\n        {\r\n            if (binding.isInject)\r\n            {\r\n                target = this.inject(target, false);\r\n            }\r\n\r\n            if (binding.bindingType == InjectConst.BindingType.SINGLETON || binding.bindingType == InjectConst.BindingType.VALUE)\r\n            {\r\n                //prevent double-injection\r\n                binding.toInject(false);\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    //注入目标中所有被@Inject标记的属性\r\n    public inject(target : object, attemptConstructorInjection : boolean) : any\r\n    {\r\n        if(!this.binder||!target)throw new Error(\"Attempt to inject into Injector without a Binder or null instance\");\r\n        //排除一些不能被注入的类型\r\n        let type : any = typeof target;\r\n        if (type === \"string\" || type === \"boolean\"||type === \"number\" ||type === \"symbol\"||type === \"undefined\" || type === \"function\")\r\n        {\r\n            return target;\r\n        }\r\n        //因为TS中无法获得类型名称，所以使用目标的构造函数名称代替类型名称\r\n        //let typeName : string = target.constructor;\r\n        //获取注入类\r\n        let injectClass : DecoratorClass = this.injectClassBinder.get(target);\r\n        //是否允许使用构造器注入\r\n        if (attemptConstructorInjection)\r\n        {\r\n            //target = performConstructorInject(target, reflection);\r\n        }\r\n        this.decoratorInject(target,injectClass);\r\n        //performSetterInject(target, reflection);\r\n        //postInject(target, reflection);\r\n        return target;\r\n    }\r\n    /**\r\n     * 装饰器注入，使用注入类进行注入\r\n     */\r\n    private decoratorInject(target : any, injectClass : DecoratorClass){\r\n        let that = this;\r\n        //遍历注入类\r\n        injectClass.list.forEach((binding)=>{\r\n            //console.info(\"[装饰器注入]\"+binding.value + \"[别名]\"+binding.name);\r\n            //尝试获绑定状态\r\n            let injectBinding = that.binder.getBinding(binding.value,binding.name);\r\n            //不能注入一个未绑定的值\r\n            if(injectBinding){\r\n                let instance = that.getInjectValue(injectBinding.key,injectBinding.name);\r\n                //将注入值赋给目标对象\r\n                target[binding.property] = instance;\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * 获取需要注入的值，这个过程会递归调用\r\n     * @see 注意循环依赖会严重消耗性能\r\n     */\r\n    private getInjectValue(type,name):object{\r\n        //尝试获取绑定状态\r\n        let binding = this.binder.getBinding(type,name);\r\n        if(!binding)return null;\r\n        //if(binding.key.name)console.info(\"[获取注入值]\"+binding.key.name+\"[别名]\"+name+\"[绑定状态]\"+binding.bindingType + \",\"+binding.isInject);\r\n        //else console.info(\"[获取注入值]\"+binding.key+\"[别名]\"+name+\"[绑定状态]\"+binding.bindingType + \"[需要注入]\"+binding.isInject);\r\n        //如果是值类型绑定\r\n        if(binding.bindingType === InjectConst.BindingType.VALUE){\r\n            //如果需要注入\r\n            if(binding.isInject){\r\n                //if(Binding.isConstructor(binding.value))console.info(\"[对值(构造函数))]\"+binding.value.constructor.name + \"[进行注入]\");\r\n                //else console.info(\"[对值(对象)]\"+binding.value.__proto__.constructor + \"[进行注入]\");\r\n\r\n                let injv = this.inject (binding.value, false);\r\n                binding.toInject (false);\r\n\r\n                //if(binding.key.name)console.info(\"[绑定状态]\"+binding.key.name+\"[完成注入]\"+binding.isInject);\r\n                //else console.info(\"[绑定状态]\"+binding.key+\"[完成注入]\"+binding.isInject);\r\n\r\n                return injv;\r\n            }else{\r\n                return binding.value;\r\n            }\r\n        //如果是单例注入\r\n        }else if (binding.bindingType == InjectConst.BindingType.SINGLETON){\r\n            //如果绑定状态的值是一个构造函数\r\n            if (binding.isValueConstructor || binding.value == null)\r\n            {\r\n                this.instantiate (binding, true);\r\n            }\r\n            return binding.value;\r\n        }else{\r\n            return this.instantiate(binding,true);\r\n        }\r\n    }\r\n    /*     //构造器注入，未实现\r\n    private performConstructorInject(){\r\n\r\n    } */\r\n    /* //属性设置器注入，未实现\r\n    performSetterInject(){\r\n\r\n    } */\r\n    /*     //方法注入，未实现\r\n    postInject(){\r\n\r\n    } */\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport Animal from \"../view/Animal\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { TouchUtil, TouchDirection, TouchStatus } from \"../util/TouchUtil\";\r\nimport { InputModel } from \"../Model/InputModel\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport AudioManager from \"../util/AudioManager\";\r\n\r\n/**\r\n * 输入控制指令\r\n */\r\nexport class InputControlCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Model,ModelType.Input)\r\n    iMdl : InputModel;\r\n    @inject(cc.Node,\"Animals\")\r\n    animalsNode : cc.Node;\r\n    @inject(__IC_Util,UtilType.Touch)\r\n    tUtl : TouchUtil;\r\n    @inject(__IC_Manager,ManagerType.Audio)\r\n    aMgr : AudioManager;\r\n\r\n    execute(){\r\n        let that = this;\r\n        //注册一个使用全局区域的上划回调\r\n        this.tUtl.on(TouchDirection.Up,(status:TouchStatus)=>{\r\n            if(status.sPosX>=0){\r\n                that.areaOnMove(TouchDirection.Up);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Down);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Down,(status:TouchStatus)=>{\r\n            if(status.sPosX>=0){\r\n                that.areaOnMove(TouchDirection.Up);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Down);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Left,(status:TouchStatus)=>{\r\n            if(status.sPosY>=0){\r\n                that.areaOnMove(TouchDirection.Left);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Right);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Right,(status:TouchStatus)=>{\r\n            if(status.sPosY>=0){\r\n                that.areaOnMove(TouchDirection.Left);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Right);\r\n            }\r\n        });\r\n    }\r\n\r\n    areaOnMove(direction : TouchDirection) {\r\n        //如果暂停标志位为真则直接返回\r\n        if (this.mMdl.pauseFlag) return\r\n        if (direction === TouchDirection.Left || direction === TouchDirection.Right) {\r\n            this.rotateAnimals(0)\r\n        } else if (direction === TouchDirection.Up || direction === TouchDirection.Down) {\r\n            this.rotateAnimals(1)\r\n        }\r\n    }\r\n    //旋转动物\r\n    rotateAnimals(direction) {\r\n        //如果正处于旋转中，则将缓存下一步操作\r\n        if (this.mMdl.isRotationing) {\r\n            this.iMdl.waitingHandle = this.rotateAnimals(direction);\r\n            return;\r\n        }\r\n        //播放跳跃音效\r\n        this.aMgr.play(\"Jump\");\r\n        let that = this;\r\n        this.mMdl.isRotationing = true\r\n        const [x, y] = direction ? [1, -1] : [-1, 1]\r\n        const rotateAction = cc.scaleBy(this.mMdl.rotateDur, x, y)\r\n        this.iMdl.lastAction = this.animalsNode.runAction(cc.sequence(rotateAction, cc.callFunc(() => {\r\n            that.resetAnimalsNode(direction);\r\n            if(that.animalsNode.children&&this.animalsNode.children.length>0){\r\n                //遍历并旋转所有动物节点\r\n                that.animalsNode.children.forEach((animalNode, i) => animalNode.getComponent(Animal).rePositonAnimal(i))\r\n            }\r\n            that.mMdl.isRotationing = false;\r\n            //执行之前等待中的操作\r\n            if(this.iMdl.waitingHandle){\r\n                this.iMdl.waitingHandle();\r\n            }\r\n        })));\r\n    }\r\n\r\n    resetAnimalsNode(direction) {\r\n        const animalsNodeChildren = this.animalsNode.children;\r\n        if (!direction) {\r\n            this.switchIndex(animalsNodeChildren, 0, 1)\r\n            this.switchIndex(animalsNodeChildren, 3, 2)\r\n        } else {\r\n            this.switchIndex(animalsNodeChildren, 0, 3)\r\n            this.switchIndex(animalsNodeChildren, 1, 2)\r\n        }\r\n        this.animalsNode.setScale(1, 1)\r\n    }\r\n\r\n    switchIndex(list, one, two) {\r\n        const temp = list[two]\r\n        list[two] = list[one]\r\n        list[one] = temp\r\n    }\r\n}","import { Singleton } from \"../util/Singleton\";\r\nimport { IModel } from \"../util/Model\";\r\n\r\nexport class InputModel extends Singleton implements IModel{\r\n    //等待中的操作\r\n    public waitingHandle;\r\n    public lastAction : cc.Action;\r\n\r\n    onConstructor(){\r\n        this.lastAction = null;\r\n        this.waitingHandle = null;\r\n    }\r\n}","import {Context, IContext} from \"../framework/Context/Context\"\r\nimport {IocRoot} from \"./IocRoot\"\r\nconst {ccclass} = cc._decorator\r\n@ccclass\r\nexport class IocComponet extends cc.Component{\r\n\tpublic registeredWithContext : boolean;\r\n\tprivate _requiresContext : boolean= true;\r\n\tpublic get requiresContext() : boolean\r\n\t{\r\n\t\treturn this._requiresContext;\r\n\t}\r\n\tpublic set requiresContext(value){\r\n\t\tthis._requiresContext = value;\r\n\t}\r\n\tprotected _registerWithContext : boolean = true;\r\n\tpublic get autoRegisterWithContext()\r\n\t{\r\n\t\treturn this._registerWithContext; \r\n\t}\r\n\tpublic set autoRegisterWithContext(value){\r\n\t\tthis._registerWithContext = value;\r\n\t}\r\n\tpublic get shouldRegister() :boolean { return this.enabled && this.node.activeInHierarchy; }\r\n\r\n\t//载入阶段尝试注入数据\r\n    onLoad(){\r\n\t\tif (this.autoRegisterWithContext && !this.registeredWithContext && this.shouldRegister)\r\n\t\t\tthis.bubbleToContext(this,BubbleType.Add, false);\r\n\t}\r\n\t//启动阶段尝试注入数据\r\n\tstart(){\r\n\t\tif (this.autoRegisterWithContext && !this.registeredWithContext && this.shouldRegister)\r\n\t\t\tthis.bubbleToContext(this, BubbleType.Add, true);\r\n\t}\r\n\r\n    protected bubbleToContext(view : cc.Component,type: BubbleType,finalTry:boolean)\r\n\t{\r\n\t\t\tconst LOOP_MAX : number= 100;\r\n\t\t\tlet loopLimiter : number= 0;\r\n\t\t\tlet node = view.node;\r\n\t\t\twhile (node.parent != null && loopLimiter < LOOP_MAX)\r\n\t\t\t{\r\n\t\t\t\tloopLimiter++;\r\n\t\t\t\tnode = node.parent;\r\n\t\t\t\tif (node.getComponent(IocRoot) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet iocContext : IocRoot = node.getComponent(IocRoot) as IocRoot;\r\n\t\t\t\t\tif (iocContext.context != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet context : IContext= iocContext.context;\r\n\t\t\t\t\t\tlet success : boolean= true;\r\n\r\n\t\t\t\t\t\tswitch (type)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase BubbleType.Add:\r\n\t\t\t\t\t\t\t\t//注入数据\r\n\t\t\t\t\t\t\t\tcontext.crossContextBinder.injector.inject(this,true);\r\n\t\t\t\t\t\t\t\t//context.addView(view);\r\n\t\t\t\t\t\t\t\tthis.registeredWithContext = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Remove:\r\n\t\t\t\t\t\t\t\t//context.removeView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Enable:\r\n\t\t\t\t\t\t\t\t//context.enableView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Disable:\r\n\t\t\t\t\t\t\t\t//context.disableView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tsuccess = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (success)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.requiresContext && finalTry && type == BubbleType.Add)\r\n\t\t\t{\r\n\t\t\t\t//last ditch. If there's a Context anywhere, we'll use it!\r\n\t\t\t\tif (Context.firstContext != null)\r\n\t\t\t\t{\r\n\t\t\t\t\t//Context.firstContext.addView(view);\r\n\t\t\t\t\tthis.registeredWithContext = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet msg : string;\r\n\t\t\t\tif(loopLimiter == LOOP_MAX){\r\n\t\t\t\t\tmsg = \"A view couldn't find a context. Loop limit reached.\"\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tmsg = \"A view was added with no context. Views must be added into the hierarchy of their ContextView lest all hell break loose.\";\r\n\t\t\t\t\tmsg += \"\\nView: \" + view.toString();\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(msg);\r\n\t\t\t}\r\n\t\t}\r\n}\r\n\r\nexport enum BubbleType\r\n{\r\n\tAdd,\r\n\tRemove,\r\n\tEnable,\r\n\tDisable\r\n}","export module IocError{\r\n    export const IC_ERROR = \"can't implement class that is only as interface\";\r\n}\r\nexport abstract class IConstructorName{\r\n    abstract get constructorName() : string;\r\n}","import {Context, IContext} from \"../framework/Context/Context\"\r\n\r\nconst {ccclass, property} = cc._decorator\r\n@ccclass\r\nexport class IocRoot extends cc.Component{\r\n    public context : IContext;\r\n\r\n    public requiresContext : boolean;\r\n\r\n    public registeredWithContext : boolean;\r\n\r\n    public autoRegisterWithContext : boolean;\r\n\r\n    public get shouldRegister() {return true;}\r\n\r\n    onDestroy(){\r\n        if (this.context != null && Context.firstContext != null)\r\n            Context.firstContext.removeCrossContext(this.context);\r\n    }\r\n}","import { IocComponet } from \"./IocComponet\";\r\nimport { inject } from \"../framework/Injector/InjectDecorator\";\r\nimport { __IC_SignalManager, ISignalManager } from \"../framework/Signal/SignalManager\";\r\n\r\nconst {ccclass} = cc._decorator\r\n@ccclass\r\nexport class IocView extends IocComponet{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n\r\n    onLoad(){\r\n        super.onLoad();\r\n    }\r\n    \r\n    start(){\r\n        super.start();\r\n    }\r\n\r\n}","import { IocComponet } from \"../../lib/extensions/IocComponet\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { __IC_SignalManager, ISignalManager } from \"../../lib/framework/Signal/SignalManager\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class LogicNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    onLoad(){\r\n        super.onLoad();\r\n        //注册节点\r\n        this.inj.bind(cc.Node).toName(\"LogicNode\").toValue(this.node).unBind();\r\n    }\r\n    start(){\r\n        super.start();\r\n    }\r\n    update(dt){\r\n        if(this.sMgr && !this.mMdl.pauseFlag){\r\n            this.sMgr.get(MainSignalEnum.Update).dispatch(dt);\r\n        }\r\n    }\r\n}","import Common from \"../../common\";\r\nimport WxGameApi from \"../WxGameApi\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad() {\r\n        //引入JS文件到TS环境\r\n        Common.WxGameApi = WxGameApi;\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        let videoName = \"video.mp4\";\r\n        let bgmName = \"bgm.mp3\";\r\n        let videoUrl = \"https://636f-common-510ecc-1257233686.tcb.qcloud.la/default_video.mp4\";\r\n        let bgmUrl = \"https://636f-common-510ecc-1257233686.tcb.qcloud.la/bgm.mp3\";\r\n        let getCachePromise = (url,name,complete) => {\r\n            return new Promise((resolve, reject) => {\r\n                WxGameApi.getOrCacheResFile(url, name, (resPath) => {\r\n                    complete(resPath);\r\n                    //传递结果给下一个异步过程\r\n                    resolve();\r\n                });\r\n            })\r\n        }\r\n        //缓存BGM\r\n        let p1 = getCachePromise(bgmUrl,bgmName,(resPath)=>{\r\n            WxGameApi.playBGM(resPath);\r\n        });\r\n        //缓存视频\r\n        let p2 = getCachePromise(videoUrl,videoName,(resPath)=>{\r\n            Common.viedo = resPath;\r\n        });\r\n        //启动异步的下载过程\r\n        let time = new Date().getSeconds();\r\n        let results = Promise.all([p1,p2]);\r\n        //获取结果\r\n        results.then(()=>{\r\n            let diff = new Date().getSeconds() - time;\r\n            console.info(\"[缓存完成]\" + diff + \"[秒]\");\r\n        });\r\n\r\n        console.info(\"[登入微信平台]\");\r\n        wx.login({\r\n            success(res) {\r\n                console.info(\"[登录成功]\" + res);\r\n            },\r\n            fail(res) {\r\n                console.info(\"[登录失败]\" + res);\r\n            }\r\n        });\r\n        //同步启动选项\r\n        this.launchOptionsSync();\r\n        this.preloadFriendInfo();\r\n        this.preloadGroupInfo();\r\n    },\r\n    preloadFriendInfo() {\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            //console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"preload\",\r\n                    arguments: \"friend\",\r\n                    data: \"\",\r\n                }\r\n            });\r\n        }\r\n    },\r\n    preloadGroupInfo() {\r\n        if (!Common.shareTickets || Common.shareTickets.length === 0) return;\r\n        wx.getOpenDataContext().postMessage({\r\n            message: {\r\n                type: \"command\",\r\n                function: \"preload\",\r\n                arguments: \"group\",\r\n                data: Common.shareTickets[0],\r\n            }\r\n        });\r\n    },\r\n    launchOptionsSync() {\r\n        if (!Common.shareTickets) Common.shareTickets = [];\r\n        let info = wx.getLaunchOptionsSync();\r\n        console.info(\"[同步启动选项]\" + info);\r\n        switch (info.scene) {\r\n            case 1044:\r\n                if (info.shareTicket) {\r\n                    Common.shareTickets.push(info.shareTicket);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n});","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IInjectBinder, __IC_InjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\n\r\n//引用注入装饰器\r\nexport class LookRankCommand extends Command{\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    execute(){\r\n        //console.info(\"[查看排行榜开始]\");\r\n        this.lookRank();\r\n    }\r\n\r\n    lookRank(){\r\n        this.inj.unbindAllMark();\r\n        //let a = Common.persistRootNode;\r\n        cc.director.loadScene('Rank')\r\n    }\r\n}","import {StartCommand} from \"../command/StartCommand\"\r\nimport { __IC_SignalManager, ISignalManager } from \"../../Lib/Framework/Signal/SignalManager\";\r\nimport {IContext,Context} from \"../../Lib/Framework/Context/Context\"\r\nimport { MainSignalManager } from \"../signal/MainSignalManager\"\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { UpdateCommand } from \"../command/UpdateCommand\";\r\nimport { GenerateCommand } from \"../command/GenerateCommand\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport { RestartCommand } from \"../command/RestartCommand\";\r\nimport { LookRankCommand } from \"../command/LookRankCommand\";\r\nimport { MatchCommand } from \"../command/MatchCommand\";\r\nimport PrefabManager from \"../util/PrefabManager\";\r\nimport { ManagerType, __IC_Manager } from \"../util/Manager\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { TouchUtil } from \"../util/TouchUtil\";\r\nimport { InputControlCommand } from \"../command/InputControlCommand\";\r\nimport { InputModel } from \"../Model/InputModel\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { AudioUtil } from \"../util/AudioUtil\";\r\nimport AudioManager from \"../util/AudioManager\";\r\nimport { BackHomeCommand } from \"../command/BackHomeCommand\";\r\n\r\nexport class MainContext extends Context{\r\n    constructor(root: any){\r\n        super(root);\r\n    }\r\n    //添加核心\r\n    addCore(){\r\n        super.addCore();\r\n        //注入信号管理器单例\r\n        this.injectBinder.bind(__IC_SignalManager).to(MainSignalManager).toSingleton();\r\n        //绑定数据\r\n        this.injectBinder.bind(__IC_Model).toValue(MainModel.Instance).toName(ModelType.Main);\r\n        this.injectBinder.bind(__IC_Model).toValue(InputModel.Instance).toName(ModelType.Input);\r\n        //绑定工具\r\n        this.injectBinder.bind(__IC_Util).toValue(MainUtil.Instance).toName(UtilType.Main);\r\n        this.injectBinder.bind(__IC_Util).toValue(TouchUtil.Instance).toName(UtilType.Touch);\r\n        this.injectBinder.bind(__IC_Util).toValue(AudioUtil.Instance).toName(UtilType.Audio);\r\n\r\n        //绑定管理器\r\n        this.injectBinder.bind(__IC_Manager).toValue(PrefabManager.Instance).toName(ManagerType.Prefab);\r\n        this.injectBinder.bind(__IC_Manager).toValue(AudioManager.Instance).toName(ManagerType.Audio);\r\n\r\n        //console.info(\"添加核心\");\r\n    }\r\n    //映射绑定\r\n    mapBindings(){\r\n        super.mapBindings();\r\n        //console.info(\"映射绑定\");\r\n        let signalMgr : ISignalManager= this.injectBinder.getInstance(__IC_SignalManager,null);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Start)).to(StartCommand);\r\n        //绑定更新信号到更新命令,并使用池进行缓存\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Update)).to(UpdateCommand).Pooled();\r\n        //生成游戏视图节点\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Generate)).to(GenerateCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Restart)).to(RestartCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.LookRank)).to(LookRankCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Match)).to(MatchCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.InputControl)).to(InputControlCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.BackHome)).to(BackHomeCommand);\r\n\r\n    }\r\n    start() : IContext{\r\n        super.start();\r\n        //console.info(\"[启动环境]\");\r\n        return this;\r\n    } \r\n}\r\n","import {Singleton} from \"../util/Singleton\";\r\nimport {IModel} from \"../util/Model\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\n\r\n/**\r\n * 应该将需要生命周期较长的变量存储在数据模型里，然后在其他类中通过注入的方式获取数据模型\r\n */\r\nexport class MainModel extends Singleton implements IModel {\r\n    //食物对象池，减少创建对象的开销\r\n    public foodPool: PrefabPool = null;\r\n    //当前的食物节点列表\r\n    public currentFoodNodes = [];\r\n    //最后的食物索引\r\n    public lastFoodIndex = 0;\r\n    //最后的轨道\r\n    public lastTrack = 0;\r\n\r\n    public animalDatas = [{\r\n        image: 'animals/bird',\r\n        type: '0',\r\n        spriteFrame: null,\r\n    }, {\r\n        image: 'animals/bear',\r\n        type: '1',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'animals/rabbit',\r\n        type: '2',\r\n        spriteFrame: null,\r\n    }, {\r\n        image: 'animals/dog',\r\n        type: '3',\r\n        spriteFrame: null\r\n    }]\r\n    public foodDatas = [{\r\n        image: 'foods/food-bird',\r\n        type: '0',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'foods/food-bear',\r\n        type: '1',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'foods/food-rabbit',\r\n        type: '2',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'foods/food-dog',\r\n        type: '3',\r\n        spriteFrame: null\r\n    }]\r\n    public rotateDur = 0.1\r\n    public isRotationing = false\r\n    public animalTextureRect = {\r\n        width: 264,\r\n        height: 268\r\n    }\r\n\r\n    public pauseFlag = true;\r\n    //游戏被隐藏\r\n    public isHide = false;\r\n    //是否已经观看过广告\r\n    public isLookVideo = false;\r\n\r\n    public score = 0;\r\n    public timer = 0;\r\n    public lastTimer = 0;\r\n    public timePeriod = 2.5;\r\n    public currentLevel = 0;\r\n\r\n\r\n    public initTimePeriod = 0;\r\n\r\n    public minTimePeriod = 0.5;\r\n\r\n    public lastScore = 0;\r\n    public maxScore = 0;\r\n\r\n    public harderRatios = (() => {\r\n        const list = []\r\n        for (let i = 0; i <= 20; i++) {\r\n            list[i] = [i * 2, 0.1]\r\n        }\r\n        return list\r\n    })();\r\n}","import {__IC_SignalManager,ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport {MainModel} from '../Model/MainModel';\r\nimport { inject } from '../../lib/framework/Injector/InjectDecorator';\r\nimport { IocView } from '../../lib/extensions/IocView';\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport Common from \"../Common\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class MainNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl: MainModel;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n        //注册节点\r\n        this.inj.bind(cc.Node).toName(\"MainNode\").toValue(this.node).unBind();\r\n        //执行开始信号\r\n        this.sMgr.get(MainSignalEnum.Start).dispatch();\r\n\r\n        Common.WxGameApi.onHide(()=>{\r\n            console.info(\"[隐藏状态]\");\r\n            this.mMdl.isHide = true;\r\n        });\r\n        Common.WxGameApi.onShow(()=>{\r\n            console.info(\"[显示状态]]\");\r\n            this.mMdl.isHide = false;\r\n            //继续播放被中断的视频\r\n            if(Common.viedoHandle)Common.viedoHandle.play();\r\n        });\r\n    }\r\n\r\n    update(dt) {\r\n\r\n    }\r\n}","import {IRoot} from \"../../Lib/Framework/Context/IRoot\"\r\nimport {IContext} from \"../../Lib/Framework/Context/Context\"\r\nimport {IocRoot} from \"../../lib/extensions/IocRoot\"\r\nimport {MainContext} from \"./MainContext\"\r\nimport PersistRoot from \"../PersistRoot\";\r\nimport Common from \"../Common\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainRoot extends IocRoot implements IRoot {\r\n    //环境容器\r\n    public context: IContext;\r\n\r\n    onLoad () {\r\n        //let context = new MainContext(this);\r\n        this.context = Common.persistRootNode.context;\r\n        //this.context.restart();\r\n    }\r\n\r\n    start () {\r\n        if(this.context){\r\n            //console.info(this.context.getRoot().node.name);\r\n        }\r\n    }\r\n}\r\n\r\n","//主要的信号枚举类型,注意要确保不出现重复的字符串\r\nexport enum MainSignalEnum{\r\n    //开始命令\r\n    Start = \"Start\",\r\n    //更新命令\r\n    Update = \"Update\",\r\n    //生成视图节点命令\r\n    Generate = \"GenerateViewNodes\",\r\n    //重新开始\r\n    Restart = \"Restart\",\r\n    //查看排行榜\r\n    LookRank = \"LookRank\",\r\n    //记分逻辑\r\n    Match = \"Match\",\r\n    //输入控制\r\n    InputControl = \"InputControl\",\r\n    //返回主菜单\r\n    BackHome = \"BackHome\",\r\n}\r\n\r\nexport enum GameSignalEnum{\r\n    onMatch = \"OnMatch\",\r\n    onNotMatch = \"OnNotMatch\"\r\n}","import {SignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\n\r\nexport class MainSignalManager extends SignalManager{\r\n    info : string = \"this is a main signal manager\";\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\nexport class MainUtil extends Singleton implements IUtil{\r\n    public getSceneSize(){\r\n        return cc.winSize;\r\n    }\r\n    /**\r\n     * 异步转换资源文件为可渲染文件的对象\r\n     * @param resourceUrl 资源文件的地址\r\n     */\r\n    public spriteRes(resourceUrl) {\r\n        return new Promise<cc.SpriteFrame>((resolve, reject) => {\r\n            cc.loader.loadRes(resourceUrl, cc.SpriteFrame, (err, spriteFrame : cc.SpriteFrame) => {\r\n                if (err) throw err\r\n                resolve(spriteFrame);\r\n            })\r\n        })\r\n    }\r\n    \r\n    public randomCoin() {\r\n        return Math.round(Math.random())\r\n    }\r\n    \r\n    public randomNumber(size) {\r\n        return Math.floor(Math.random() * size)\r\n    }\r\n    \r\n    public randomValue(...values) {\r\n        return values[this.randomNumber(values.length)]\r\n    }\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Manager extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IManager\";\r\n    }\r\n}\r\nexport interface IManager{\r\n\r\n}\r\n/**\r\n * 管理器类型枚举\r\n */\r\nexport enum ManagerType{\r\n    Prefab = \"Prefab\",\r\n    Audio = \"Audio\",\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport Common from \"../Common\";\r\nimport Food from \"../view/Food\";\r\nimport { GameSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport PauseNode from \"../view/PauseNode\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport AudioManager from \"../util/AudioManager\";\r\n\r\n//引用注入装饰器\r\nexport class MatchCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Manager,ManagerType.Audio)\r\n    aMgr : AudioManager;\r\n    @inject(cc.Node,\"Score\")\r\n    scoreNode : cc.Node;\r\n    @inject(cc.Node,\"Pause\")\r\n    pauseNode : cc.Node;\r\n\r\n    execute(match){\r\n        //console.info(\"[游戏判断]\");\r\n        switch(match){\r\n            case GameSignalEnum.onMatch:\r\n                this.onMatch();\r\n                break;\r\n            case GameSignalEnum.onNotMatch:\r\n                this.onNotMatch();\r\n                break;\r\n        }\r\n    }\r\n    //增加分数\r\n    gainPoint() {\r\n        this.aMgr.play(\"Score\");\r\n        this.mMdl.score++\r\n        this.scoreNode.getComponent(cc.Label).string = 'Score: ' + Number(this.mMdl.score)\r\n    }\r\n    onMatch() {\r\n        this.gainPoint()\r\n    }\r\n\r\n    onNotMatch() {\r\n        this.mMdl.pauseFlag = true\r\n        this.pauseNode.active = true\r\n        this.pauseNode.getComponent(PauseNode).show();\r\n        this.pauseNode.getComponent(PauseNode).updateScore(this.mMdl.score);\r\n        this.stopAllCurrent();\r\n    }\r\n\r\n    stopAllCurrent() {\r\n        //console.info(\"[停止当前游戏进程]\");\r\n        //let a = Common.persistRootNode;\r\n        if(this.mMdl.currentFoodNodes&&this.mMdl.currentFoodNodes.length>0){\r\n            this.mMdl.currentFoodNodes.forEach(foodNode => {\r\n                foodNode.getComponent(Food).inited = false\r\n            })\r\n        }\r\n    }\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Model extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IModel\"\r\n    }\r\n}\r\nexport interface IModel{\r\n\r\n}\r\n/**\r\n * 数据模型类型枚举\r\n */\r\nexport enum ModelType{\r\n    Main = \"Main\",\r\n    Input = \"Input\",\r\n}","import { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PauseNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl:MainModel\r\n    @property(cc.Label)\r\n    score:cc.Label = null;\r\n    @property(cc.Sprite)\r\n    mainButton:cc.Sprite;\r\n    @property(cc.Label)\r\n    mainTop:cc.Label = null;\r\n    @property(cc.Label)\r\n    mainBotton:cc.Label = null;\r\n    @property(cc.SpriteFrame)\r\n    playVideo : cc.SpriteFrame;\r\n    @property(cc.SpriteFrame)\r\n    replayFrame : cc.SpriteFrame;\r\n\r\n    onLoad () {\r\n        super.onLoad();\r\n    }\r\n\r\n    start () {\r\n        super.start();\r\n    }\r\n    show(){\r\n        //如果已经观看过广告了\r\n        if(this.mMdl.isLookVideo){\r\n            console.info(\"[无法复活]\");\r\n            this.mainButton.spriteFrame = this.replayFrame;\r\n            this.mainTop.string = \"再接再厉\";\r\n            this.mainBotton.string = \"重新开始\";\r\n        }else{\r\n            console.info(\"[可以复活]\");\r\n            this.mainButton.spriteFrame = this.playVideo;\r\n            this.mainTop.string = \"观看广告\";\r\n            this.mainBotton.string = \"满血复活\";\r\n        }\r\n    }\r\n    updateScore(value){\r\n        this.score.string = value;\r\n    } \r\n    //重新开始按钮被点击时\r\n    onRestartClicked(){\r\n        console.info(\"[观看过广告]\"+this.mMdl.isLookVideo);\r\n        if(this.mMdl.isLookVideo){\r\n            this.sMgr.get(MainSignalEnum.Restart).dispatch(false);\r\n        }\r\n        else{\r\n            //发布重新开始信号并且播放视频\r\n            this.sMgr.get(MainSignalEnum.Restart).dispatch(true);\r\n        }\r\n    }\r\n    //排行榜按钮被点击时\r\n    onLookRankClicked(){\r\n        this.sMgr.get(MainSignalEnum.LookRank).dispatch();\r\n    }\r\n    onBackHomeClicked(){\r\n        this.sMgr.get(MainSignalEnum.BackHome).dispatch();\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import Common from \"./Common\";\r\nimport PrefabManager from \"./util/PrefabManager\";\r\nimport { IRoot } from \"../lib/framework/Context/IRoot\";\r\nimport { MainContext } from \"./context/MainContext\";\r\nimport AudioManager from \"./util/AudioManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PersistRoot extends cc.Component implements IRoot {\r\n    public context;\r\n\r\n    @property([cc.Prefab])\r\n    prefabs: Array<cc.Prefab> = [];\r\n    @property([cc.AudioClip])\r\n    clips: Array<cc.AudioClip> = [];\r\n    @property([cc.AudioSource])\r\n    audios: Array<cc.AudioSource> = [];\r\n    @property(cc.AudioSource)\r\n    bgm:cc.AudioSource = null;\r\n\r\n\r\n    onLoad () {\r\n        //防止重复执行初始化\r\n        if(Common.isInit)return;\r\n        Common.isInit = true;\r\n        console.info(\"[当前版本]\"+Common.version);\r\n        //配置为常驻节点\r\n        if(!Common.persistRootNode){\r\n            cc.game.addPersistRootNode(this.node);\r\n            Common.persistRootNode = this;\r\n        }\r\n        this.context = new MainContext(this)\r\n        this.loadPrefab();\r\n        this.loadAudio();\r\n    }\r\n    loadPrefab(){\r\n        this.prefabs.forEach(prefab => {\r\n            PrefabManager.Instance.setPrefab(prefab.name,prefab);\r\n        });\r\n    }\r\n    loadAudio(){\r\n        this.clips.forEach(audio=>{\r\n            AudioManager.Instance.setAudio(audio.name,audio);\r\n        });\r\n        AudioManager.Instance.bgm = this.bgm;\r\n        AudioManager.Instance.audios = this.audios;\r\n        AudioManager.Instance.playBgm();\r\n\r\n    }\r\n    start () {\r\n\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import {Stack} from \"./Stack\"\r\nimport { IConstructorName } from \"../framework/IocConst\";\r\nimport {inject} from \"../framework/Injector/InjectDecorator\";\r\nimport {Prototype} from \"./Prototype\"\r\n\r\nexport enum PoolOverflowBehavior\r\n{\r\n    /// Requesting more than the fixed size will throw an exception.\r\n    EXCEPTION,\r\n    \r\n    /// Requesting more than the fixed size will throw a warning.\r\n    WARNING,\r\n\r\n    /// Requesting more than the fixed size will return null and not throw an error.\r\n    IGNORE\r\n}\r\nexport enum BindingConstraintType\r\n{\r\n    /// Constrains a SemiBinding to carry no more than one item in its Value\r\n    ONE,\r\n    /// Constrains a SemiBinding to carry a list of items in its Value\r\n    MANY,\r\n    /// Instructs the Binding to apply a Pool instead of a SemiBinding\r\n    POOL,\r\n}\r\nexport enum PoolInflationType\r\n{\r\n    /// When a dynamic pool inflates, add one to the pool.\r\n    INCREMENT,\r\n\r\n    /// When a dynamic pool inflates, double the size of the pool\r\n    DOUBLE\r\n}\r\nexport interface IPoolable\r\n{\r\n    /// <summary>\r\n    /// Clean up this instance for reuse.\r\n    /// </summary>\r\n    /// Restore methods should clean up the instance sufficiently to remove prior state.\r\n    restore ();\r\n\r\n    /// <summary>\r\n    /// Keep this instance from being returned to the pool \r\n    /// </summary>\r\n    retain ();\r\n\r\n    /// <summary>\r\n    /// Release this instance back to the pool.\r\n    /// </summary>\r\n    /// Release methods should clean up the instance sufficiently to remove prior state.\r\n    release();\r\n\r\n    /// <summary>\r\n    /// Is this instance retained?\r\n    /// </summary>\r\n    /// <value><c>true</c> if retained; otherwise, <c>false</c>.</value>\r\n    isRetain : boolean;\r\n}\r\nexport interface IInstanceProvider{\r\n    /// Retrieve an Instance based on the key.\r\n    /// ex. `injectionBinder.Get<cISomeInterface>();`\r\n    //getInstance<T>() : T;\r\n\r\n    /// Retrieve an Instance based on the key.\r\n    /// ex. `injectionBinder.Get(typeof(ISomeInterface));`\r\n    getInstance(key : object) : object;\r\n}\r\nexport class __IC_InstanceProvider extends IConstructorName{\r\n    //getInstance<T>() : T{return;} \r\n    get constructorName(){return \"IInstanceProvider\";}\r\n}\r\nexport interface IManagedList\r\n{\r\n    /// Add a value to this List. \r\n    add( value : object) : IManagedList;\r\n\r\n    /// Add a set of values to this List. \r\n    add( list : object[]) : IManagedList;\r\n\r\n    /// Remove a value from this List. \r\n    remove( value : object) : IManagedList;\r\n\r\n    /// Remove a set of values from this List. \r\n    remove( list : object[]) : IManagedList;\r\n\r\n    /// Retrieve the value of this List.\r\n    /// If the constraint is MANY, the value will be an Array.\r\n    /// If the constraint is POOL, this becomes a synonym for GetInstance().\r\n    value : object;\r\n}\r\nexport interface IPool extends IManagedList\r\n{\r\n    /// A class that provides instances to the pool when it needs them.\r\n    /// This can be the InjectionBinder, or any class you write that satisfies the IInstanceProvider\r\n    /// interface.\r\n    instanceProvider : IInstanceProvider;\r\n\r\n    /// The object Type of the first object added to the pool.\r\n    /// Pool objects must be of the same concrete type. This property enforces that requirement. \r\n    poolType : object;\r\n    /// <summary>\r\n    /// Gets an instance from the pool if one is available.\r\n    /// </summary>\r\n    /// <returns>The instance.</returns>\r\n    getInstance() : object;\r\n\r\n    /// <summary>\r\n    /// Returns an instance to the pool.\r\n    /// </summary>\r\n    /// If the instance being released implements IPoolable, the Release() method will be called.\r\n    /// <param name=\"value\">The instance to be return to the pool.</param>\r\n    returnInstance (value : object);\r\n\r\n    /// <summary>\r\n    /// Remove all instance references from the Pool.\r\n    /// </summary>\r\n    clean ();\r\n\r\n    /// <summary>\r\n    /// Returns the count of non-committed instances\r\n    /// </summary>\r\n    available : number;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the size of the pool.\r\n    /// </summary>\r\n    /// <value>The pool size. '0' is a special value indicating infinite size. Infinite pools expand as necessary to accomodate requirement.</value>\r\n    size : number;\r\n\r\n    /// <summary>\r\n    /// Returns the total number of instances currently managed by this pool.\r\n    /// </summary>\r\n    instanceCount : number;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the overflow behavior of this pool.\r\n    /// </summary>\r\n    /// <value>A PoolOverflowBehavior value.</value>\r\n    overflowBehavior : PoolOverflowBehavior;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the type of inflation for infinite-sized pools.\r\n    /// </summary>\r\n    /// By default, a pool doubles its InstanceCount.\r\n    /// <value>A PoolInflationType value.</value>\r\n    inflationType : PoolInflationType;\r\n}\r\nexport class Pool implements IPool, IPoolable\r\n{\r\n\r\n    @inject(__IC_InstanceProvider)\r\n    public instanceProvider : IInstanceProvider\r\n\r\n    /// Stack of instances still in the Pool.\r\n    protected instancesAvailable : Stack<any> = new Stack<any> ();\r\n\r\n    /// A HashSet of the objects checked out of the Pool.\r\n    protected instancesInUse :Set<object>= new Set<object> ();\r\n\r\n    protected _instanceCount : number;\r\n\r\n    public size : number;\r\n\r\n    public overflowBehavior : PoolOverflowBehavior;\r\n\r\n    public inflationType : PoolInflationType;\r\n\r\n    public uniqueValues : boolean;\r\n\r\n    public constraint : any;\r\n\r\n    public poolType : object;\r\n    \r\n    public isRetain : boolean;\r\n\r\n    public Pool ()\r\n    {\r\n        this.size = 0;\r\n        this.constraint = BindingConstraintType.POOL;\r\n        this.uniqueValues = true;\r\n        \r\n        this.overflowBehavior = PoolOverflowBehavior.EXCEPTION;\r\n        this.inflationType = PoolInflationType.DOUBLE;\r\n    }\r\n    public bind(type){\r\n        this.poolType = type;\r\n    }\r\n\r\n    public add ( value : object) : IManagedList\r\n    {\r\n        //检查对象原型是否相同\r\n        this.failIf(!Prototype.isProtetype(value,this.poolType) , \" Pool Type mismatch. Pools must consist of a common concrete type.\\n\\t\\tPool type: \" + this.poolType + \"\\n\\t\\tMismatch type: \" + value);\r\n        this._instanceCount++;\r\n        this.instancesAvailable.push (value);\r\n        return this;\r\n    }\r\n    public addList (list : object[]) : IManagedList\r\n    {\r\n        if(list&&list.length>0){\r\n            list.forEach((item : object)=>{\r\n                this.add (item);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    public remove (value : object) : IManagedList\r\n    {\r\n        this._instanceCount--;\r\n        this.removeInstance (value);\r\n        return this;\r\n    }\r\n\r\n    public removeList (list : object[]) : IManagedList\r\n    {\r\n        if(list&&list.length>0){\r\n            list.forEach((item : object)=>{\r\n                this.remove(item);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public get value() : object\r\n    {\r\n        return this.getInstance ();\r\n    }\r\n\r\n    /// The object Type of the first object added to the pool.\r\n    /// Pool objects must be of the same concrete type. This property enforces that requirement. \r\n\r\n    public get instanceCount() : number\r\n    {\r\n        return this._instanceCount;\r\n    }\r\n\r\n    public getInstance () : object\r\n    {\r\n        // Is an instance available?\r\n        if (this.instancesAvailable.size > 0)\r\n        {\r\n            let retv : object = this.instancesAvailable.pop ();\r\n            this.instancesInUse.add (retv);\r\n            return retv;\r\n        }\r\n\r\n        let instancesToCreate : number = 0;\r\n\r\n        //New fixed-size pool. Populate.\r\n        if (this.size > 0)\r\n        {\r\n            if (this.instanceCount == 0)\r\n            {\r\n                //New pool. Add instances.\r\n                instancesToCreate = this.size;\r\n            }\r\n            else\r\n            {\r\n                //Illegal overflow. Report and return null\r\n                this.failIf (this.overflowBehavior == PoolOverflowBehavior.EXCEPTION,\r\n                    \"A pool has overflowed its limit.\\n\\t\\tPool type: \" + this.poolType);\r\n\r\n                if (this.overflowBehavior == PoolOverflowBehavior.WARNING)\r\n                {\r\n                    console.warn (\"WARNING: A pool has overflowed its limit.\\n\\t\\tPool type: \" + this.poolType);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //Zero-sized pools will expand.\r\n            if (this.instanceCount == 0 || this.inflationType == PoolInflationType.INCREMENT)\r\n            {\r\n                instancesToCreate = 1;\r\n            }\r\n            else\r\n            {\r\n                instancesToCreate = this.instanceCount;\r\n            }\r\n        }\r\n\r\n        if (instancesToCreate > 0)\r\n        {\r\n            this.failIf (this.instanceProvider == null, \"A Pool of type: \" + this.poolType + \" has no instance provider.\");\r\n\r\n            for (let a = 0; a < instancesToCreate; a++)\r\n            {\r\n                let newInstance : object= this.instanceProvider.getInstance (this.poolType);\r\n                this.add (newInstance);\r\n            }\r\n            return this.getInstance ();\r\n        }\r\n\r\n        //If not, return null\r\n        return null;\r\n    }\r\n\r\n    public returnInstance ( value : object)\r\n    {\r\n        if (this.instancesInUse.has (value))\r\n        {\r\n            /* if (value extends IPoolable)\r\n            {\r\n                (value as IPoolable).Restore ();\r\n            } */\r\n            (value as IPoolable).restore ();\r\n            this.instancesInUse.delete (value);\r\n            this.instancesAvailable.push (value);\r\n        }\r\n    }\r\n\r\n    public clean()\r\n    {\r\n        this.instancesAvailable.clear();\r\n        this.instancesInUse = new Set<object> ();\r\n        this._instanceCount = 0;\r\n    }\r\n\r\n    public get available() : number\r\n    {\r\n        return this.instancesAvailable.size;\r\n\r\n    }\r\n\r\n    public restore ()\r\n    {\r\n        this.clean ();\r\n        this.size = 0;\r\n    }\r\n\r\n    public retain()\r\n    {\r\n        this.isRetain = true;\r\n    }\r\n\r\n    public release()\r\n    {\r\n        this.isRetain = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Permanently removes an instance from the Pool\r\n    /// </summary>\r\n    /// In the event that the removed Instance is in use, it is removed from instancesInUse.\r\n    /// Otherwise, it is presumed inactive, and the next available object is popped from\r\n    /// instancesAvailable.\r\n    /// <param name=\"value\">An instance to remove permanently from the Pool.</param>\r\n    protected removeInstance(value : object)\r\n    {\r\n        this.failIf (value != this.poolType, \"Attempt to remove a instance from a pool that is of the wrong Type:\\n\\t\\tPool type: \" + this.poolType.toString() + \"\\n\\t\\tInstance type: \" + value.toString());\r\n        if (this.instancesInUse.has(value))\r\n        {\r\n            this.instancesInUse.delete (value);\r\n        }\r\n        else\r\n        {\r\n            this.instancesAvailable.pop ();\r\n        }\r\n    }\r\n\r\n    protected failIf(condition : boolean, message : string)\r\n    {\r\n        if (condition)\r\n        {\r\n            throw new Error(message);\r\n        }\r\n    }\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IManager } from \"./Manager\";\r\n\r\nexport default class PrefabManager extends Singleton implements IManager{\r\n    public isInit = false;\r\n    private prefabMap : Map<any,any>\r\n\r\n    protected onConstructor(){\r\n        this.prefabMap = new Map();\r\n    }\r\n    hasPrefab(key):boolean{\r\n        return this.prefabMap.has(key);\r\n    }\r\n    getPrefab(key):cc.Prefab{\r\n        return this.prefabMap.get(key);\r\n    }\r\n    setPrefab(key,value){\r\n        this.prefabMap.set(key,value);\r\n    }\r\n\r\n}","/**\n * 简单的对象池\n */\nexport default class PrefabPool {\n\ttype;\n\tprefab;\n\tnodePool : cc.NodePool;\n\n\tconstructor(type, prefab) {\n\t\tthis.type = type\n\t\tthis.prefab = prefab\n\t\tthis.nodePool = new cc.NodePool(type)\n\t}\n\t/**\n\t * 获取节点\n\t */\n\tget() {\n\t\tlet node : cc.Node= null\n\t    if (this.nodePool.size() > 0) {\n\t        node = this.nodePool.get()\n\t    } else {\n\t        node = cc.instantiate(this.prefab)\n\t\t}\n\t\tnode.active = true;\n\t    return node\n\t}\n\t/**\n\t * 回收节点\n\t * @param node \n\t */\n\tres(node : cc.Node) {\n\t\tnode.active = false;\n\t\tthis.nodePool.put(node)\n\t}\n\n}","/**\r\n * 原型缓存字典，用于检测一个对象的基类\r\n */\r\nexport class Prototype {\r\n    //继承映射表\r\n    private static prototypeMap = new Map<Object,Set<Object>>();\r\n    /**\r\n     * 基类检测函数\r\n     * @param instance 实例\r\n     * @param prototype 基类\r\n     */\r\n    public static isProtetype(type, prototype): boolean {\r\n        //let b = type instanceof prototype;\r\n        return type instanceof prototype;\r\n/*         if(!(type instanceof Object))return false;\r\n        let constructor = type.constructor;\r\n        if(this.prototypeMap.has(constructor)){\r\n            let sett = this.prototypeMap.get(constructor);\r\n            if(sett.has(prototype)){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return false; */\r\n    }\r\n    /**\r\n     * 获取继承列表\r\n     * @param instance 实例\r\n     */\r\n    public static getPrototypeList(target) {\r\n        let that = this;\r\n        if(!this.hasPrototypeList(target)){\r\n            let extendsList;\r\n            //获取继承列表\r\n            extendsList = [];\r\n            //用构造函数代替类型来使用\r\n            let types = [];\r\n            //types.push(target.constructor);\r\n            //继承类型\r\n            let prototype = target.__proto__;\r\n            //构造函数\r\n            let constructor;\r\n            while (true) {\r\n                //如果继承存在\r\n                if (prototype) {\r\n                    //因为压缩代码会把所有对象的名称都压缩掉，所以这里使用构造函数作为键值\r\n                    constructor = prototype.constructor;\r\n                    //搜索到基类一层\r\n                    if (constructor === Object) break;\r\n                    //排除以__IC__开头模拟接口的临时替代类型\r\n                    if (!constructor.name.startsWith(\"__IC_\")) {\r\n                        extendsList.push(constructor);\r\n                        types.push(constructor);\r\n                        //为每一个类都添加继承关系\r\n                        types.forEach(type => {\r\n                            that.AddPrototype(type,constructor);\r\n                        });\r\n                    }\r\n                    prototype = prototype.__proto__;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }            \r\n        let values = this.prototypeMap.get(target.constructor);\r\n        return Array.from(values);\r\n    }\r\n    /**\r\n     * 添加继承关系\r\n     */\r\n    public static AddPrototype(tpye,prototype){\r\n        let extendSet : Set<Object>;\r\n        if(this.prototypeMap.has(tpye)){\r\n            extendSet = this.prototypeMap.get(tpye);\r\n        }else{\r\n            extendSet = new Set();\r\n            this.prototypeMap.set(tpye,extendSet);\r\n        }\r\n        //为继承队列加入新的继承\r\n        extendSet.add(prototype);\r\n    }\r\n    /**\r\n     * 是否存在继承列表\r\n     * @param instance 实例\r\n     */\r\n    public static hasPrototypeList(target) {\r\n        if(this.prototypeMap.has(target.constructor)){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}","import Common from \"../../common\";\r\nimport WxGameApi from \"../WxGameApi\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        subContextView: cc.Node,\r\n        tipsUiNode: cc.Node\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        let that = this;\r\n        this.rankType = 0;\r\n        this.shareCount = 0;\r\n        //设置转发选项\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            wx.updateShareMenu({\r\n                withShareTicket: true,\r\n                success() {\r\n                    //console.info(\"设置转发选项成功\");\r\n                },\r\n                fail() {\r\n                    //console.info(\"设置转发选项失败\");\r\n                }\r\n            })\r\n        }\r\n        //this.subContextView.enabled = false;\r\n        //console.info(\"[初始化功能]\");\r\n    },\r\n\r\n    start() {\r\n        //console.info(\"[主域进入排行榜界面]\");\r\n        //发送启动消息告知开发数据容器\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            //console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"start\",\r\n                    arguments: \"default\",\r\n                    data: {\r\n                        width: this.subContextView.width,\r\n                        height: this.subContextView.height\r\n                    },\r\n                }\r\n            });\r\n        }\r\n    },\r\n    //切换排行榜\r\n    switchRank(event) {\r\n        //获取切换按钮\r\n        let switchBtn = event.target;\r\n        let switchBar = event.target.getChildByName(\"Switch\");\r\n        let moveRange = switchBtn.width - switchBar.width - 10;\r\n        let that = this;\r\n        //循环切换排行榜类型\r\n        if (this.rankType < 1) {\r\n            this.rankType += 1;\r\n        } else {\r\n            this.rankType = 0;\r\n        }\r\n        switch (this.rankType) {\r\n            case 0:\r\n                switchBar.runAction(cc.moveBy(0.125, cc.v2(-moveRange, 0)));\r\n                if (WxGameApi.isRunInWeiXin) {\r\n                    that.hideShowTipsUi();\r\n                    //console.info(\"[显示好友排行]\");\r\n                    //切换到显示好友排行\r\n                    wx.getOpenDataContext().postMessage({\r\n                        message: {\r\n                            type: \"command\",\r\n                            function: \"switch\",\r\n                            arguments: \"friend\",\r\n                            data: \"\",\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            case 1:\r\n                switchBar.runAction(cc.moveBy(0.125, cc.v2(moveRange, 0)));\r\n                if (WxGameApi.isRunInWeiXin) {\r\n                    let ticket;\r\n                    if (Common.shareTickets && Common.shareTickets.length > 0) {\r\n                        ticket = Common.shareTickets[this.shareCount];\r\n                        if (!ticket) {\r\n                            //console.info(\"[意外的识别码缺失]\" + Common.shareTickets +\",\"+ this.shareCount);\r\n                            Common.shareTickets = [];\r\n                            this.shareCount = 0;\r\n                        } else {\r\n                            //循环切换群信息，索引是从0开始计算的，所以这里需要减一\r\n                            if (this.shareCount >= (Common.shareTickets.length - 1)) {\r\n                                this.shareCount = 0;\r\n                            } else {\r\n                                this.shareCount += 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.info(\"[未找到群信息]\");\r\n                        this.showTipsUi(\"无法显示群排行榜\", \"请先分享到群再查看\");\r\n                    }\r\n                    //验证群信息是否有效\r\n                    if(ticket&&ticket!=\"\"){\r\n                        wx.getShareInfo({\r\n                            shareTicket : ticket,\r\n                            success(res){\r\n                                //console.info(\"[有效的群信息]\" + ticket + \",\" + res);\r\n                            },\r\n                            fail(err){\r\n                                //console.info(\"[无效的群信息]\" + ticket + \",\" + err);\r\n                            }\r\n                        })\r\n                    }else{\r\n                        ticket = \"\";\r\n                    }\r\n                    //console.info(\"[显示群信息]\" + Common.shareTickets.length);\r\n                    //切换到显示群排行\r\n                    wx.getOpenDataContext().postMessage({\r\n                        message: {\r\n                            type: \"command\",\r\n                            function: \"switch\",\r\n                            arguments: \"group\",\r\n                            data: ticket,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        //console.info(\"[切换排行榜]\" + this.rankType);\r\n    },\r\n\r\n    backhome() {\r\n        cc.director.loadScene(\"Begin\");\r\n        //清理排行榜\r\n/*         if (WxGameApi.isRunInWeiXin) {\r\n            //console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"clear\",\r\n                    arguments: \"\",\r\n                    data: \"\",\r\n                }\r\n            });\r\n        } */\r\n    },\r\n\r\n    shareApp() {\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        let url = \"https://636f-common-510ecc-1257233686.tcb.qcloud.la/share_rabbit.png?sign=9875d25b3df98df73fbaf7ae9dcdb860&t=1538207291\";\r\n        let that = this;\r\n        wx.shareAppMessage({\r\n            title: \"一起来玩游戏吧！\",\r\n            imageUrl: url,\r\n            success(res) {\r\n                //console.info(\"[转发成功]\" + res.shareTickets);\r\n                //没有获取到群消息\r\n                if (!res.shareTickets || res.shareTickets === \"\") {\r\n                    //console.info(\"[转发到个人用户]\");\r\n                    if(that.rankType === 1){\r\n                        that.showTipsUi(\"无法显示群排行榜\", \"检测到转发到个人或者无效的群\");\r\n                    }\r\n                } else {\r\n                    that.hideShowTipsUi();\r\n                    //console.info(\"[转发到微信群]\" + res.shareTickets);\r\n                    //如果存在群组信息\r\n                    if (res.shareTickets.length > 0) {\r\n                        let isExist = false;\r\n                        //保存群组信息\r\n                        for (let i = 0; i < res.shareTickets.length; i++) {\r\n                            for (let j = 0; j < Common.shareTickets.length; j++) {\r\n                                //检查是否存在重复的群识别号\r\n                                if (res.shareTickets[i] === Common.shareTickets[j]) {\r\n                                    isExist = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!isExist) {\r\n                                //console.info(\"[存储群识别码]\" + res.shareTickets[i]);\r\n                                Common.shareTickets.push(res.shareTickets[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    //保持在群组页面时\r\n                    if(that.rankType === 1){\r\n                        //立刻刷新页面\r\n                        wx.getOpenDataContext().postMessage({\r\n                            message: {\r\n                                type: \"command\",\r\n                                function: \"switch\",\r\n                                arguments: \"group\",\r\n                                data: res.shareTickets,\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            fail(res) {\r\n                //console.info(\"[转发失败]\");\r\n            }\r\n        });\r\n\r\n    },\r\n    //显示提示框\r\n    showTipsUi(title, content) {\r\n        if(!this.tipsUiNode)return;\r\n        let tipsUiView = this.tipsUiNode.getComponent(\"TipsUiView\");\r\n        if (!this.tipsUiNode.active) {\r\n            this.tipsUiNode.active = true;\r\n        }\r\n        if (tipsUiView) {\r\n            tipsUiView.display(title, content);\r\n        } else {\r\n            //console.info(\"[提示UI不存在]\");\r\n        }\r\n    },\r\n    hideShowTipsUi(){\r\n        if(!this.tipsUiNode)return;\r\n        if (this.tipsUiNode.active) {\r\n            this.tipsUiNode.active = false;\r\n        }\r\n    }\r\n});","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport Common from \"../Common\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\n\r\n//引用注入装饰器\r\nexport class RestartCommand extends Command{\r\n    @inject(cc.Node,\"Pause\")\r\n    pauseNode : cc.Node;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl : MainUtil;\r\n    @inject(cc.Node,\"Score\")\r\n    scoreNode : cc.Node;\r\n\r\n    execute(isPlayVideo){\r\n        //console.info(\"[重新开始]\");\r\n        this.revive();\r\n        //是否需要播放广告\r\n        if(isPlayVideo){\r\n            this.playVideo();\r\n        }else{\r\n            console.info(\"[不播放广告]\");\r\n            this.restart(true);\r\n        }\r\n    }\r\n    playVideo(){\r\n        //是否已经看过广告\r\n        if(!this.mMdl.isLookVideo){\r\n            this.mMdl.isLookVideo = true;\r\n        }\r\n        //是否为微信环境\r\n        if(Common.WxGameApi.isRunInWeiXin){\r\n            console.info(\"[微信环境]\");\r\n            //从本地直接获取视频资源\r\n            if(Common.viedo){\r\n                let width = this.mUtl.getSceneSize().width*0.25;\r\n                let height = this.mUtl.getSceneSize().width*0.25;\r\n                let x = width/4;\r\n                let y = this.mUtl.getSceneSize().height/4 - height;\r\n                let url = Common.viedo;\r\n                Common.WxGameApi.checkCacheExistFile(url,(result)=>{\r\n                    if(result){\r\n                        //记录当前的播放器\r\n                        Common.viedoHandle = Common.WxGameApi.playVideo(x,y,width,height,url,1000,true,()=>{\r\n                            //重新开始但不结算\r\n                            this.restart(false);\r\n                        });\r\n                        console.info(\"[使用缓存路径]\");\r\n                    }else{\r\n                        console.info(\"[缓存路径无效]\");\r\n                        this.restart(false);\r\n                    }\r\n                })\r\n            }else{\r\n                console.info(\"[播放广告失败]\");\r\n                this.restart(false);\r\n            }\r\n        }else{\r\n            console.info(\"[无法播放广告]\");\r\n            this.restart(false);\r\n        }\r\n    }\r\n    //清理环境\r\n    revive() {\r\n        this.pauseNode.active = false\r\n        this.clearAllCurrent()\r\n    }\r\n    //结算分数\r\n    result(){\r\n        this.mMdl.isLookVideo = false;\r\n        this.mMdl.lastScore = this.mMdl.score;\r\n        Common.WxGameApi.saveScore(this.mMdl.lastScore);\r\n        this.mMdl.score = 0;\r\n        this.scoreNode.getComponent(cc.Label).string = 'Score: ' + Number(this.mMdl.score)\r\n    }\r\n    /**\r\n     * 重新开始\r\n     * @param isResult 是否进行结算\r\n     */\r\n    restart(isResult:boolean){\r\n        //是否结算分数\r\n        if(isResult)this.result();\r\n        this.mMdl.pauseFlag = false;\r\n        this.mMdl.lastFoodIndex = -1\r\n        this.mMdl.lastTrack = -1\r\n        this.mMdl.timer = 0\r\n        this.mMdl.lastTimer = 0\r\n        this.mMdl.timePeriod = 2.5\r\n        this.mMdl.currentLevel = 0;\r\n    }\r\n\r\n    clearAllCurrent() {\r\n        if(this.mMdl.currentFoodNodes&&this.mMdl.currentFoodNodes.length>0){\r\n            this.mMdl.currentFoodNodes.forEach(foodNode => {\r\n                this.mMdl.foodPool.res(foodNode)\r\n            })\r\n        }\r\n        this.mMdl.currentFoodNodes = []\r\n    }\r\n}","import { IConstructorName } from \"../IocConst\"\r\nimport { __IC_Signal , Signal, ISignal } from \"./Signal\"\r\n\r\nexport interface ISignalManager {\r\n    get(symbol) : ISignal;\r\n    delete(symbol);\r\n    info: string;\r\n}\r\nexport class __IC_SignalManager extends IConstructorName {\r\n    static get constructorName(){return \"ISignalManager\";}\r\n}\r\nexport class SignalManager implements ISignalManager {\r\n    //维护一个信号指令映射表，注意不再使用的信号应该及时释放掉\r\n    _signal_dic : Map<any,ISignal>= new Map < any, ISignal > ();\r\n    info: string = \"this is a signal manager\";\r\n\r\n    public get(symbol) : ISignal{\r\n        //检查全局信号字典内是否存在对应的信号名称或枚举\r\n        if (this._signal_dic.has(symbol)) {\r\n            //获取标志对应的信号\r\n            return this._signal_dic.get(symbol);\r\n        } else {\r\n            //创建一个信号\r\n            let _signal = new Signal();\r\n            //如果使用字符串作为信号识别名，则将其绑定给信号\r\n            if(typeof symbol == \"string\")_signal.name = symbol;\r\n            //设置根环境\r\n            //_signal.setRoot(this._context.getRoot);\r\n            //建立全局信号与标志值的映射关系\r\n            this._signal_dic.set(symbol, _signal);\r\n            return _signal;\r\n        }\r\n    };\r\n\r\n    public delete(symbol) {\r\n        //检查全局信号字典内是否存在对应的信号名称或枚举\r\n        if (this._signal_dic.has(symbol)) {\r\n            //获取标志对应的信号\r\n            return this._signal_dic.delete(symbol);\r\n        }\r\n    }\r\n}","import {IocError, IConstructorName} from \"../IocConst\"\r\nexport interface ISignal {\r\n    name;\r\n    dispatch(...args);\r\n    addListener(callback:Function);\r\n    addOnceListener(callback:Function);\r\n    removeAllListeners();\r\n    /// Returns a List<System.Type> representing the Types bindable to this Signal\r\n\tgetTypes() : object[];\r\n}\r\nexport class __IC_Signal extends IConstructorName {\r\n    static get constructorName(){return \"ISignal\";};\r\n}\r\n\r\nexport class Signal implements ISignal {\r\n    public name;\r\n    //回调监听\r\n    public _listener: Function[] = [];\r\n    public _onceListener: Function[] = [];\r\n    //执行信号\r\n    public dispatch(...args) {\r\n        let that = this;\r\n        //如果存在回调函数\r\n        if (that._listener&&that._listener.length != 0) {\r\n            this._listener.forEach(function (action) {\r\n                action(that,...args);\r\n            })\r\n        }\r\n        //如果存在单次回调\r\n        if (that._onceListener&&that._onceListener.length != 0)\r\n            this._listener.forEach(function (action) {\r\n                action(that,...args);\r\n            })\r\n        //清空单次执行的监听\r\n        this._onceListener.length = 0;\r\n    }\r\n    public addListener(callback:Function){\r\n        this._listener = this.addUnique(this._listener,callback);\r\n    }\r\n    public addOnceListener(callback:Function){\r\n        this._onceListener = this.addUnique(this._onceListener,callback);\r\n    }\r\n    //清空监听\r\n    public removeAllListeners(){\r\n        this._listener.length=0;\r\n        this._onceListener.length=0;\r\n    }\r\n    //不重复添加\r\n    private addUnique(listeners : Function[], callback : Function)\r\n    {\r\n        //检查监听回调是否存在\r\n        if (listeners)\r\n        {\r\n            let isUnique = false;\r\n            for(let i = 0;i<listeners.length;i++){\r\n                //检查是否存在重复项\r\n                if(listeners[i] === callback){\r\n                    isUnique = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!isUnique){\r\n                //放入回调\r\n                listeners.push(callback);\r\n            }\r\n        }\r\n        return listeners;\r\n    }\r\n    public getTypes() : object[]\r\n    {\r\n        let retv = [];\r\n        //retv.push(this);\r\n        return retv;\r\n    }\r\n}","export class Singleton {\r\n    /** 存放初始化过的构造函数,这里用数组来存放构造函数 **/\r\n    private static classMap: Map < any, any > = new Map();\r\n\r\n    constructor() {\r\n        let clazz: any = this.constructor;\r\n        //为空时，表示浏览器不支持这样读取构造函数\r\n        if (!clazz)\r\n            return;\r\n        // 防止重复实例化\r\n        if (Singleton.classMap.has(clazz))\r\n            throw new Error(this + \" 只允许实例化一次！\");\r\n        else {\r\n            Singleton.classMap.set(clazz, this);\r\n            this.onConstructor();\r\n        }\r\n    }\r\n    protected onConstructor() {\r\n\r\n    }\r\n    public static get Instance() {\r\n        return Singleton.getInstanceOrCreate(this);\r\n    }\r\n\r\n    public static destroyInstance(clazz: any): void {\r\n        if (Singleton.classMap.has(clazz)) {\r\n            Singleton.classMap.get(clazz).onDestroy();\r\n            Singleton.classMap.delete(clazz);\r\n        }\r\n    }\r\n\r\n    public static getInstanceOrCreate(clazz: any,...args): any {\r\n        let instance;\r\n        if (Singleton.classMap.has(clazz)) {\r\n            instance = Singleton.classMap.get(clazz);\r\n            if (instance) {\r\n                return instance;\r\n            }\r\n        }\r\n        instance = new clazz(...args);\r\n        //不是Singleton的子类，则手动添加Singleton构造器会自动添加到classMap\r\n        if (!(instance instanceof Singleton)) {\r\n            Singleton.classMap.set(clazz, instance);\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n\r\n    }\r\n}","export interface IStack<T> {\r\n    //获取栈顶元素\r\n    top(): T;\r\n    //压栈\r\n    push(item: T);\r\n    //出栈\r\n    pop(): T;\r\n    //清空\r\n    clear();\r\n    //是否空栈\r\n    isEmpty: boolean;\r\n    //栈大小\r\n    size: number;\r\n}\r\n\r\nexport class Item<T> {\r\n    private _value: T;\r\n    private _next: Item<T>;\r\n    constructor(value: T, next: Item<T> = null) {\r\n        this._value = value;\r\n        this._next = next;\r\n    }\r\n    set value(value: T) {\r\n        this._value = value;\r\n    }\r\n    get value(): T {\r\n        return this._value;\r\n    }\r\n    set next(next: Item<T>) {\r\n        this._next = next;\r\n    }\r\n    get next(): Item<T> {\r\n        return this._next;\r\n    }\r\n}\r\n\r\nexport class Stack<T> implements IStack<T> {\r\n    private _header: Item<T>;\r\n    private _size: number = 0;\r\n    constructor() {\r\n        this._header = new Item<T>(null);\r\n    }\r\n    top(): T {\r\n        if (this._size === 0) {\r\n            return null;\r\n        }\r\n        return this._header.next.value;\r\n    }\r\n\r\n    /**\r\n     * 入栈\r\n     * @param item 添加的元素\r\n     * 将header的下一个元素的引用赋值给新元素的next\r\n     * 再将新元素赋值给header的next\r\n     */\r\n    push(item: T) {\r\n        let newItem = new Item<T>(item);\r\n        newItem.next = this._header.next;\r\n        this._header.next = newItem;\r\n        this._size++;\r\n    }\r\n\r\n    /**\r\n     * 出栈\r\n     * 将header之后的第一个元素移除\r\n     * 同时修改header的next到下一个元素\r\n     */\r\n    pop(): T {\r\n        if (this._size === 0) {\r\n            return null;\r\n        }\r\n        let item = this._header.next;\r\n        this._header.next = item.next;\r\n        this._size--;\r\n        item.next = null;//清除引用\r\n        return item.value;\r\n    }\r\n    clear(){\r\n        let item;\r\n        let tmp = this._header;\r\n        while(this._size !== 0){\r\n            item = tmp.next;\r\n            tmp = item;\r\n            item.next = null;\r\n            this._size--;\r\n        }\r\n        this._header = null;\r\n    }\r\n    get isEmpty(): boolean {\r\n        return this._size === 0;\r\n    }\r\n\r\n    get size(): number {\r\n        return this._size;\r\n    }\r\n}","import {__IC_SignalManager, ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport { Command } from \"../../lib/framework/Command/Command\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport PrefabManager from \"../util/PrefabManager\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\n\r\n//引用注入装饰器\r\nexport class StartCommand extends Command{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtil : MainUtil;\r\n    //注入资源管理器\r\n    @inject(__IC_Manager,ManagerType.Prefab)\r\n    resMgr : PrefabManager;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n    @inject(cc.Node,\"LogicNode\")\r\n    logicNode : cc.Node;\r\n    @inject(cc.Node,\"MainNode\")\r\n    mainNode : cc.Node;\r\n\r\n    //执行\r\n    execute(){\r\n        //console.log(\"[开始指令]\");\r\n\r\n        this.lanuch();\r\n        this.start();\r\n    }\r\n    start(){\r\n    }\r\n    //启动配置\r\n    lanuch(){\r\n        const manager = cc.director.getCollisionManager()\r\n        manager.enabled = true\r\n\r\n        this.loadRes();\r\n        //载入并生成环境\r\n        this.sMgr.get(MainSignalEnum.Generate).dispatch(()=>{\r\n            //注册输入控制方法\r\n            this.sMgr.get(MainSignalEnum.InputControl).dispatch();\r\n            //初始化并启动游戏\r\n            this.sMgr.get(MainSignalEnum.Restart).dispatch(false);\r\n        });\r\n    }\r\n\r\n\r\n    loadRes(){\r\n        if(!this.resMgr.isInit){\r\n            //绑定预制件\r\n            if(this.resMgr.hasPrefab(\"Animal\")){\r\n                this.inj.bind(cc.Prefab).toName(\"Animal\").toValue(this.resMgr.getPrefab(\"Animal\"));\r\n            }\r\n            if(this.resMgr.hasPrefab(\"Food\")){\r\n                this.inj.bind(cc.Prefab).toName(\"Food\").toValue(this.resMgr.getPrefab(\"Food\"));\r\n            }\r\n            this.resMgr.isInit = true;\r\n        }\r\n        \r\n        //检查是否存在对应的资源\r\n        if(this.resMgr.hasPrefab(\"Scene\")){\r\n            let scene : cc.Node = cc.instantiate(this.resMgr.getPrefab(\"Scene\"));\r\n            this.mainNode.addChild(scene);\r\n            let avatar = scene.getChildByName(\"Avatar\");\r\n            let animals = avatar.getChildByName(\"Animals\");\r\n            let score = scene.getChildByName(\"Score\");\r\n            let foodArea = scene.getChildByName(\"FoodArea\");\r\n\r\n            this.inj.bind(cc.Node).toName(\"Scene\").toValue(scene).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Avatar\").toValue(avatar).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Animals\").toValue(animals).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Score\").toValue(score).unBind();\r\n            this.inj.bind(cc.Node).toName(\"FoodArea\").toValue(foodArea).unBind();\r\n\r\n        }else{\r\n            throw new Error(\"Scene prefab is not found\");\r\n        }\r\n        if(this.resMgr.hasPrefab(\"PauseLayer\")){\r\n            let pause : cc.Node = cc.instantiate(this.resMgr.getPrefab(\"PauseLayer\"));\r\n            this.mainNode.addChild(pause);\r\n            pause.active = false;\r\n\r\n            this.inj.bind(cc.Node).toName(\"Pause\").toValue(pause).unBind();\r\n        }else{\r\n            throw new Error(\"Pause layer prefab is not found\");\r\n        }\r\n    }\r\n}","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TipsUiView extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    label: cc.Label = null;\r\n\r\n    @property(cc.RichText)\r\n    text: cc.RichText = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        \r\n    }\r\n    display(title,content){\r\n        this.label.string = title;\r\n        this.text.string = content;\r\n\r\n    }\r\n    onClicked(){\r\n        this.node.active = false;\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import {Singleton} from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\n\r\nexport class TouchUtil extends Singleton implements IUtil{\r\n    private areaMap;\r\n    //全局区域状态\r\n    private globalAreaStatus : AreaStatus;\r\n\r\n    onConstructor(){\r\n        this.areaMap = new Map();\r\n    }\r\n    /**\r\n     * 注册一个触摸区域，只有在区域内的触控才会被识别\r\n     * @param area 区域\r\n     * @param isGlobal 是否设为全局区域\r\n     */\r\n    public registerTouchArea(area: cc.Node,isGlobal:boolean = false) {\r\n        let areaStatus;\r\n        //尝试获取对应的区域状态\r\n        if(this.areaMap.has(area)){\r\n            areaStatus = this.areaMap.get(area);\r\n        }else{\r\n            areaStatus = new AreaStatus();\r\n            this.areaMap.set(area,areaStatus);\r\n        }\r\n        //设定全局区域\r\n        if(isGlobal)this.globalAreaStatus = areaStatus;\r\n        //触摸开始时\r\n        area.on(cc.Node.EventType.TOUCH_START, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                let sPosX = touch.getLocationX();\r\n                let sPoxY = touch.getLocationY();\r\n                let status = new TouchStatus();\r\n                status.direction = TouchDirection.No;\r\n                status.touch = touch;\r\n                status.sPosX = sPosX;\r\n                status.sPosY = sPoxY;\r\n                status.totalX = 0;\r\n                status.totalY = 0;\r\n                status.trendX = 0;\r\n                status.trendY = 0;\r\n\r\n                //绑定触摸ID到状态\r\n                areaStatus.touchMap.set(touch.getID(), status)\r\n            });\r\n        });\r\n        //触摸移动时\r\n        area.on(cc.Node.EventType.TOUCH_MOVE, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    let status: TouchStatus = areaStatus.touchMap.get(touch.getID());\r\n                    let mDeltaX = touch.getDelta().x;\r\n                    let mDeltaY = touch.getDelta().y;\r\n                    status.totalX += mDeltaX;\r\n                    status.totalY += mDeltaY;\r\n\r\n                    //如果触摸正在向左移动\r\n                    if (Math.abs(mDeltaX) > 10) {\r\n                        status.trendX += status.totalX / mDeltaX;\r\n                    }\r\n                    if (Math.abs(mDeltaY) > 10) {\r\n                        status.trendY += status.totalY / mDeltaY;\r\n                    }\r\n                    //如果触摸的长度超过10000则判断划动超长了\r\n                    if((status.totalX*status.totalX+status.totalY*status.totalY)>10000){\r\n                        this.disposeTouchResult(areaStatus,touch);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        //触摸结束时\r\n        area.on(cc.Node.EventType.TOUCH_END, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    this.disposeTouchResult(areaStatus,touch);\r\n                }\r\n            });\r\n        });\r\n\r\n        //触摸取消时\r\n        area.on(cc.Node.EventType.TOUCH_CANCEL, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    this.disposeTouchResult(areaStatus,touch);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    //执行触控结果\r\n    disposeTouchResult(areaStatus,touch){\r\n        //判断当前触摸正处于什么状态\r\n        let result : TouchStatus= areaStatus.touchMoveDetection(touch);\r\n        if(result&&areaStatus.touchEvnet[result.direction]){\r\n            areaStatus.touchEvnet[result.direction].forEach(event => {\r\n                if(event && typeof event ===\"function\"){\r\n                    //告知结果和触摸信息\r\n                    event(result);\r\n                }\r\n            });\r\n        }\r\n        //移除结束的触摸\r\n        areaStatus.touchMap.delete(touch.getID());\r\n    }\r\n    /**\r\n     * 注册指定的回调函数\r\n     * @param direction 方向\r\n     * @param callback 返回一个触控事件\r\n     */\r\n    public on<T extends Function>(direction: TouchDirection, callback: T, area?: cc.Node) : T{\r\n        let areaStatus;\r\n        if(area&&this.areaMap.has(area)){\r\n            areaStatus = this.areaMap.get(area);\r\n        }else{\r\n            areaStatus = this.globalAreaStatus;\r\n        }\r\n        //增加回调函数\r\n        if(!areaStatus.touchEvnet[direction]){\r\n            areaStatus.touchEvnet[direction] = [];\r\n        }\r\n        areaStatus.touchEvnet[direction].push(callback);\r\n        return callback;\r\n    }\r\n    \r\n}\r\n//区域状态\r\nclass AreaStatus{\r\n    public touchEvnet;\r\n    //触摸状态映射\r\n    public touchMap;\r\n\r\n    constructor(){\r\n        this.touchMap = new Map();\r\n        this.touchEvnet = [];\r\n    }\r\n\r\n    //触摸移动检测\r\n    touchMoveDetection(touch: cc.Touch){\r\n        if (this.touchMap.has(touch.getID())) {\r\n            let status: TouchStatus = this.touchMap.get(touch.getID());\r\n            //检查是否为有效触摸\r\n            let isMoveValid = false;\r\n            //触摸的方向，按照上下左右的顺序排列\r\n            let direction : TouchDirection= TouchDirection.No;\r\n            //如果移动的总距离超过10\r\n            if (Math.abs(status.totalX) > 10 || Math.abs(status.totalY) > 10) {\r\n                //趋势不都为0时\r\n                if (status.trendX != 0 || status.trendY != 0) {\r\n                    //检查移动的趋势\r\n                    if (status.trendX === 0) {\r\n                        isMoveValid = true;\r\n                        //检查总移动距离\r\n                        if (status.totalY > 0) {\r\n                            direction = TouchDirection.Up;\r\n                        } else {\r\n                            direction = TouchDirection.Down;\r\n                        }\r\n                    } else {\r\n                        let trend = status.totalX / status.totalY;\r\n                        //在X轴移动趋势不为0的情况下，检查移动趋势是否达到有效判断范围内\r\n                        if (Math.abs(trend) > 1) {\r\n                            //有效的触摸轨迹\r\n                            isMoveValid = true;\r\n                            //X轴方向向右移动\r\n                            if (status.totalX > 0) {\r\n                                direction = TouchDirection.Right;\r\n                            } else {\r\n                                direction = TouchDirection.Left;\r\n                            }\r\n                        }\r\n                    }\r\n                    //如果之前的检查没有通过\r\n                    if (!isMoveValid) {\r\n                        if (status.trendY === 0) {\r\n                            isMoveValid = true;\r\n                            if (status.totalY > 0) {\r\n                                direction = TouchDirection.Right;\r\n                            } else {\r\n                                direction = TouchDirection.Left;\r\n                            }\r\n                        } else {\r\n                            let trend = status.totalY / status.totalX;\r\n                            if (Math.abs(trend) > 1) {\r\n                                //有效的触摸轨迹\r\n                                isMoveValid = true;\r\n                                //Y轴方向向上移动\r\n                                if (status.totalY > 0) {\r\n                                    direction = TouchDirection.Up;\r\n                                } else {\r\n                                    direction = TouchDirection.Down;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //如果之前的检查判断为无效则表明没有发生移动\r\n            if (isMoveValid) {\r\n                switch (direction) {\r\n                    case TouchDirection.No:\r\n                        status.direction = TouchDirection.No;\r\n                        return status;\r\n                    case TouchDirection.Up:\r\n                        status.direction = TouchDirection.Up;\r\n                        return status;\r\n                    case TouchDirection.Down:\r\n                        status.direction = TouchDirection.Down;\r\n                        return status;\r\n                    case TouchDirection.Left:\r\n                        status.direction = TouchDirection.Left;\r\n                        return status;\r\n                    case TouchDirection.Right:\r\n                        status.direction = TouchDirection.Right;\r\n                        return status;\r\n                }\r\n            } else {\r\n                status.direction = TouchDirection.No;\r\n                return status;\r\n            }\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n//传递触摸状态\r\nexport class TouchStatus {\r\n    //触摸\r\n    public touch : cc.Touch;\r\n    //方向\r\n    public direction : TouchDirection;\r\n    /**\r\n     * 触摸开始的X坐标\r\n     */\r\n    public sPosX: number;\r\n    /**\r\n     * 触摸开始的Y坐标\r\n     */\r\n    public sPosY: number;\r\n    /**\r\n     * 最后一次的X坐标\r\n     */\r\n    public lPosX: number;\r\n    /**\r\n     * 最后一次的Y坐标\r\n     */\r\n    public lPosY: number;\r\n    /**\r\n     * X轴移动总距离\r\n     */\r\n    public totalX: number;\r\n    /**\r\n     * Y轴移动总距离\r\n     */\r\n    public totalY: number;\r\n    /**\r\n     * 触摸的总时间\r\n     */\r\n    public totalTime: number;\r\n    /**\r\n     * 趋向于X轴方向移动\r\n     */\r\n    public trendX;\r\n    /**\r\n     * 趋向于Y轴方向移动\r\n     */\r\n    public trendY;\r\n}\r\nexport enum TouchDirection{\r\n    No = -1,\r\n    Up = 0,\r\n    Down = 1,\r\n    Left = 2,\r\n    Right = 3\r\n}","import {__IC_SignalManager, ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport Food from \"../view/Food\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\n\r\n//引用注入装饰器\r\nexport class UpdateCommand extends Command{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(cc.Node,\"Scene\")\r\n    sceneNode : cc.Node;\r\n    @inject(cc.Node,\"FoodArea\")\r\n    foodArea : cc.Node;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl:MainUtil;\r\n\r\n    tickcount:number = 0;\r\n    timecount:number = 0;\r\n    //执行\r\n    execute(dt){\r\n        this.update(dt);\r\n    }\r\n\r\n    update(dt){\r\n        //如果小游戏处于被隐藏的状态则不执行任何更新\r\n        if(this.mMdl.isHide)return;\r\n        this.mMdl.timer += dt\r\n        if (this.mMdl.timer >= this.mMdl.lastTimer + this.mMdl.timePeriod) {\r\n            this.mMdl.lastTimer = this.mMdl.timer\r\n            this.newNode();\r\n            // 难度加成\r\n            if (this.mMdl.timePeriod >= this.mMdl.minTimePeriod && this.mMdl.score > 0 && (this.mMdl.currentLevel < this.mMdl.harderRatios.length - 1)) {\r\n                let [level, ratio] = this.mMdl.harderRatios[this.mMdl.currentLevel + 1]\r\n                if (this.mMdl.score >= level) {\r\n                    this.mMdl.currentLevel++\r\n                    this.mMdl.timePeriod -= ratio\r\n                    console.log(\"[难度提升]\"+this.mMdl.timePeriod)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    newNode() {\r\n        //获取食物实例\r\n        let food = this.getPoolNode()\r\n        if(!food.parent){\r\n            this.foodArea.addChild(food);\r\n        }\r\n        let foodComponent : Food = food.getComponent(Food)\r\n        //初始化配置\r\n        foodComponent.clear();\r\n        //获取对象的食物组件\r\n        foodComponent.randomProps()\r\n        return food\r\n    }\r\n\r\n    getPoolNode() {\r\n        //从食物对象池中获取一个实例\r\n        let foodNode = this.mMdl.foodPool.get();\r\n        //将食物实例放入当前食物节点列表\r\n        this.mMdl.currentFoodNodes.push(foodNode)\r\n        return foodNode\r\n    }\r\n\r\n\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Util extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IUtil\";\r\n    }\r\n}\r\nexport interface IUtil{\r\n\r\n}\r\n/**\r\n * 工具类型枚举\r\n */\r\nexport enum UtilType{\r\n    Main = \"Main\",\r\n    Audio = \"Audio\",\r\n    Touch = \"Touch\",\r\n}","/**\r\n * 微信API接口\r\n */\r\nexport default class WxGameApi {\r\n    static get userPath() {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        return wx.env.USER_DATA_PATH + \"/\";;\r\n    }\r\n    static get isRunInWeiXin() {\r\n        if (cc.sys.platform === cc.sys.WECHAT_GAME) {\r\n            return true\r\n        } else {\r\n            WxGameApi.errorLog();\r\n            return false;\r\n        }\r\n    }\r\n    static onHide(callback) {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        wx.onHide(callback);\r\n    }\r\n    static onShow(callback) {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        wx.onShow(callback);\r\n    }\r\n    static errorLog(func) {\r\n        //console.warn(\"[请在微信环境内调用微信接口]\");\r\n    }\r\n\r\n    static playBGM(bgmUrl) {\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        let bgm = wx.createInnerAudioContext()\r\n        // src 可以设置 http(s) 的路径，本地文件路径或者代码包文件路径\r\n        bgm.src = bgmUrl;\r\n        bgm.loop = true;\r\n        bgm.autoplay = true;\r\n        bgm.play()\r\n        wx.onShow(() => {\r\n            bgm.play();\r\n        });\r\n    }\r\n    static playVideo(x, y, w, h, url ,overtime ,isAutoPlay, onComplete) {\r\n        if (!WxGameApi.isRunInWeiXin) return null;\r\n        let isPlayFinish = false;\r\n        console.info(\"[尝试播放视频]\" + \"<x,y>\" + x + \",\" + y + \"<w,h>\" + w + \",\" + h);\r\n        let video = wx.createVideo({\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h,\r\n            src: url,\r\n            poster: \"\",\r\n            objectFit: \"fill\",\r\n            controls: false,\r\n            autoplay: isAutoPlay,\r\n        });\r\n        video.onEnded(() => {\r\n            isPlayFinish = true;\r\n            onComplete();\r\n            video.destroy();\r\n        });\r\n        video.onerror(() => {\r\n            isPlayFinish = true;\r\n            onComplete();\r\n            video.destroy();\r\n        });\r\n        //检查超时\r\n        setTimeout(()=>{\r\n            //如果播放超时则强制结束播放\r\n            if(!isPlayFinish){\r\n                console.info(\"[视频时长]\"+video);\r\n                debugger;\r\n                //强制销毁视频播放\r\n                if(video)video.destroy();\r\n                onComplete();\r\n            }\r\n        },overtime);\r\n        return video;\r\n    }\r\n    static downFile(url, path, successCallback, failCallback) {\r\n        let userPath = WxGameApi.userPath;\r\n        //console.info(\"[用户缓存路径]\" + userPath);\r\n        wx.downloadFile({\r\n            url: url,\r\n            header: \"\",\r\n            filePath: \"\",\r\n            success(res) {\r\n                console.info(\"[下载成功]\" + res.statusCode);\r\n                //console.info(\"[保存到路径]\" + res.tempFilePath);\r\n                wx.getFileSystemManager().saveFile({\r\n                    tempFilePath: res.tempFilePath,\r\n                    filePath: userPath + path,\r\n                    success(res) {\r\n                        console.info(\"[保存成功]\" + res.savedFilePath);\r\n                        successCallback(res.savedFilePath);\r\n                    },\r\n                    fail(err) {\r\n                        console.info(\"[保存失败]\" + err.errMsg);\r\n                    }\r\n                });\r\n\r\n            },\r\n            fail(err) {\r\n                console.info(\"[下载失败]\" + err.errMsg);\r\n                failCallback(err)\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 检查是缓存中是否存在对应路径的文件\r\n     * @param {*} path 文件路径\r\n     * @param {*} result 结果\r\n     */\r\n    static checkCacheExistFile(path, result) {\r\n        wx.getFileSystemManager().access({\r\n            path: path,\r\n            success() {\r\n                result(true);\r\n            },\r\n            fail() {\r\n                result(false);\r\n            }\r\n        });\r\n    }\r\n    static readFile(path, successCallback, failCallback) {\r\n        wx.getFileSystemManager().readFile({\r\n            filePath: path,\r\n            success(res) {\r\n                console.info(\"[成功获取]\" + res);\r\n                successCallback(res);\r\n            },\r\n            fail(err) {\r\n                console.info(\"[获取失败]\" + err.errMsg);\r\n                failCallback(err);\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * 获取或者缓存资源文件\r\n     * @param {*} url 资源的地址\r\n     * @param {*} path 存储路径\r\n     * @param {*} complete 完成回调\r\n     */\r\n    static getOrCacheResFile(url, path, complete) {\r\n        //是否允许下载资源\r\n        let isAllowDownload;\r\n        if (!url || url === \"\") {\r\n            isAllowDownload = false;\r\n        } else {\r\n            isAllowDownload = true;\r\n        }\r\n        let resPath = WxGameApi.userPath + path;\r\n        //检查缓存文件是否存在\r\n        WxGameApi.checkCacheExistFile(resPath, (result) => {\r\n            if (result === true) {\r\n                console.info(\"[从缓存获取资源]]\" + path);\r\n                //直接从本地获取资源\r\n                complete(resPath);\r\n            } else {\r\n                //允许下载则保存对应的资源到缓存\r\n                if (isAllowDownload) {\r\n                    console.info(\"[需要下载资源]]\" + path);\r\n                    WxGameApi.downFile(url, path, (savedFilePath) => {\r\n                        console.info(\"[下载成功]\" + savedFilePath);\r\n                        complete(savedFilePath);\r\n                    }, (err) => {\r\n                        console.info(\"[下载失败]\" + err);\r\n                        complete(null);\r\n                    });\r\n                } else {\r\n                    console.info(\"[无法获取资源]]\" + path);\r\n                    //无法找到对应的资源\r\n                    complete(null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    //存储游戏分数\r\n    static saveScore(value) {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        console.info(\"[通知开发数据容器存储分数]\" + value);\r\n        //发送存储分数消息告知开放数据容器\r\n        wx.getOpenDataContext().postMessage({\r\n            message: {\r\n                type: \"command\",\r\n                function: \"save\",\r\n                arguments: \"score\",\r\n                data: value,\r\n            }\r\n        });\r\n    }\r\n}","export function spriteRes(resourceUrl) {\n\treturn new Promise((resolve, reject) => {\n\t\tcc.loader.loadRes(resourceUrl, cc.SpriteFrame, (err, spriteFrame) => {\n\t\t\tif (err) throw err\n\t\t\tresolve(spriteFrame)\n\t\t})\n\t})\n}\n\nexport function randomCoin() {\n\treturn Math.round(Math.random())\n}\n\nexport function randomNumber(size) {\n\treturn Math.floor(Math.random() * size)\n}\n\nexport function randomValue(...values) {\n\treturn values[randomNumber(values.length)]\n}\n\n"],"sourceRoot":"/source/","file":"project.js"}