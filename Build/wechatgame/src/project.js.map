{"version":3,"sources":["assets/scripts/lib/extensions/ActionExtension.ts","assets/scripts/project/view/Animal.ts","assets/scripts/project/util/AudioManager.ts","assets/scripts/project/util/AudioUtil.ts","assets/scripts/project/command/BackHomeCommand.ts","assets/scripts/project/impl/Begin.ts","assets/scripts/lib/framework/Bind/BindConst.ts","assets/scripts/lib/framework/Bind/Binder.ts","assets/scripts/lib/framework/Bind/Binding.ts","assets/scripts/lib/framework/Command/CommandBinder.ts","assets/scripts/lib/framework/Command/CommandBinding.ts","assets/scripts/lib/framework/Command/CommandConst.ts","assets/scripts/lib/framework/Command/Command.ts","assets/scripts/project/Common.ts","assets/scripts/lib/framework/Context/Context.ts","assets/scripts/project/view/CountDownView.ts","assets/scripts/lib/framework/Decorator/DecoratorClassBinder.ts","assets/scripts/lib/framework/Decorator/DecoratorClassBinding.ts","assets/scripts/lib/framework/Decorator/DecoratorClass.ts","assets/scripts/lib/framework/Decorator/DecoratorConst.ts","assets/scripts/project/view/Food.ts","assets/scripts/project/command/GenerateCommand.ts","assets/scripts/project/helper/Helper.ts","assets/scripts/lib/framework/Command/ICommandBinder.ts","assets/scripts/lib/framework/Context/IRoot.ts","assets/scripts/lib/framework/Injector/InjectBinder.ts","assets/scripts/lib/framework/Injector/InjectBinding.ts","assets/scripts/lib/framework/Injector/InjectConst.ts","assets/scripts/lib/framework/Injector/InjectDecorator.ts","assets/scripts/lib/framework/Injector/InjectFactory.ts","assets/scripts/lib/framework/Injector/Injector.ts","assets/scripts/project/command/InputControlCommand.ts","assets/scripts/project/Model/InputModel.ts","assets/scripts/lib/extensions/IocComponet.ts","assets/scripts/lib/framework/IocConst.ts","assets/scripts/lib/extensions/IocRoot.ts","assets/scripts/lib/extensions/IocView.ts","assets/scripts/project/view/LogicNode.ts","assets/scripts/project/wxgame/login/Login.js","assets/scripts/project/command/LookRankCommand.ts","assets/scripts/project/context/MainContext.ts","assets/scripts/project/Model/MainModel.ts","assets/scripts/project/view/MainNode.ts","assets/scripts/project/context/MainRoot.ts","assets/scripts/project/signal/MainSignalEnum.ts","assets/scripts/project/signal/MainSignalManager.ts","assets/scripts/project/util/MainUtil.ts","assets/scripts/project/util/Manager.ts","assets/scripts/project/command/MatchCommand.ts","assets/scripts/project/util/Model.ts","assets/scripts/project/view/PauseNode.ts","assets/scripts/project/PersistRoot.ts","assets/scripts/lib/extensions/Pool.ts","assets/scripts/project/util/PrefabManager.ts","assets/scripts/project/helper/PrefabPool.ts","assets/scripts/lib/extensions/Prototype.ts","assets/scripts/project/wxgame/rank/Rank.js","assets/scripts/project/command/RestartCommand.ts","assets/scripts/lib/framework/Signal/SignalManager.ts","assets/scripts/lib/framework/Signal/Signal.ts","assets/scripts/project/util/Singleton.ts","assets/scripts/lib/extensions/Stack.ts","assets/scripts/project/command/StartCommand.ts","assets/scripts/project/wxgame/rank/TipsUiView.ts","assets/scripts/project/util/TouchUtil.ts","assets/scripts/project/command/UpdateCommand.ts","assets/scripts/project/util/Util.ts","assets/scripts/project/wxgame/WxGameApi.js","assets/scripts/project/util/index.ts"],"names":["_a","cc","_decorator","ccclass","Shake","property","_super","_this","apply","this","arguments","_initial_x","_initial_y","_strength_x","_strength_y","__extends","Shake_1","create","duration","strength_x","strength_y","act","initWithDuration","prototype","ActionInterval","fgRangeRand","min","max","Math","random","update","time","randx","randy","getTarget","setPosition","startWithTarget","target","x","y","stop","Vec2","__decorate","exports","InjectDecorator_1","require","Model_1","IocView_1","Animal","type","onLoad","call","start","rePositonAnimal","i","mMdl","animalTextureRect","width","height","offsetRatio","node","inject","__IC_Model","ModelType","Main","IocView","default","AudioManager","isInit","onConstructor","playLoopCount","audioMap","Map","play","key","hasAudio","clip","getAudio","audios","length","playBgm","bgm","loop","has","get","setAudio","value","set","Singleton","AudioUtil","Command_1","InjectBinder_1","BackHomeCommand","execute","gameOver","inj","unbindAllMark","director","loadScene","__IC_InjectBinder","Command","Begin","beginGame","lookRank","Component","BindingConst","NULL","Symbol","Binding_1","BindConst_1","__IC_Binder","Object","defineProperty","IConstructorName","Binder","init","_bindings","resolver","binding","resolveBinding","dict","bindingName","name","existingBinding","delete","bind","getRawBinding","unbind","checkKey","Binding","checkAbstract","getBinding","getBindingMap","__IC_Binding","_resolver","_key","_value","_name","to","toName","isConstructor","constructorName","CommandBinding_1","Pool_1","CommandConst_1","CommandBinder","pools","activeCommands","Set","activeSequences","usePooling","getPool","isPooled","that_1","values","push","forEach","myPool","makePoolFromType","poolType","injectBinder","Pool","CommandConst","COMMAND_POOL","pool","getInstance","CommandBinding","invokeCommand","cmd","args","depth","command","createCommand","sequenceId","trackCommand","executeCommand","data","getCommand","msg","toString","Error","isClean","injector","deploy","add","__IC_Command","isSequence","onDispose","trigger","_i","next","aa","a","releaseCommand","disposeOfSequencedData","isOnce","isRetain","t","constructor","returnInstance","SignalCommandBinder","addListener","signal","toSingleton","createCommandForSignal","_isSequence","_isOnce","Pooled","ICommandBinder_1","_clean","_retain","clean","retain","release","restore","uninject","__IC_CommandBinder","Common","WxGameApi","version","persistRootNode","root","shareTickets","isHasWxRank","maxScore","userOpenId","session_key","unionId","CommandBinder_1","IocConst_1","__IC_Context","Context","firstContext","getRoot","crossContextBinder","addCrossContext","setRoot","addCore","_injectBinder","InjectBinder","_crossContextBinder","_commandBinder","context","removeCrossContext","childContext","restart","instantiateCore","mapBindings","postBindings","launch","toValue","ActionExtension_1","CountDownView","isAutoPlay","label","getComponent","Label","isPlay","completeList","config","step","stepDur","onComplete","complete","dt","before","floor","after","stopAllActions","scale","opacity","scaleActions","scaleBy","fadeActions","fadeIn","fadeOut","string","runAction","sequence","destroy","Number","Boolean","Binder_1","DecoratorClass_1","DecoratorClassBinding_1","Prototype_1","DecoratorClassBinder","_decoratorClassBufferMap","extendsList","Prototype","getPrototypeList","injectClass","DecoratorClass","list","bindingMaps_1","size","inside","j","DecoratorClassBinding","insideDict","insideDict_1","insideDic","_property","toProperty","_list","DecoratorClassBinder_1","DecoratorConst","DECORATOR_CLASS_BINDER","Animal_1","MainSignalEnum_1","Util_1","Manager_1","Food","speed","accel","moveY","Food_1","reuse","unuse","clear","isHide","inited","onCollisionEnter","other","self","otherComponent","selfComponent","sMgr","MainSignalEnum","Match","dispatch","GameSignalEnum","onMatch","resPoolNode","onNotMatch","foodNode","index","currentFoodNodes","indexOf","splice","foodPool","res","randomProps","baseIndex","track","mUtl","randomCoin","lastFoodIndex","lastTrack","randomRange","map","foodDatas","foodIndex","randomValue","foodData","Sprite","spriteFrame","getSceneSize","__IC_Util","UtilType","__IC_Manager","ManagerType","Audio","PrefabPool_1","GenerateCommand","then","generateTouchArea","generateAnimals","area","Node","sceneNode","addChild","tUtl","registerTouchArea","foodPrefab","p1","loadFoodRes","p2","loadAnimalRes","Promise","all","that","resolve","reject","spriteRes","image","spriteFrames","animalDatas","animalData","animalNode","instantiate","animalPrefab","animal","sprite","animalsNode","Touch","Prefab","Helper","getAllInfo","obj","getInfo","console","info","depthTab","item","p","v","__IC_Root","Injector_1","InjectBinding_1","DecoratorConst_1","ClassBinder","_injector","Injector","binder","injectClassBinder","instance","tryInject","InjectBinding","unbinds","isUnbind","InjectConst_1","_isUnbind","_bindingType","InjectConst","BindingType","DEFAULT","_isInject","_args","toArgs","VALUE","SINGLETON","unBind","setValue","o","toInject","injectNoNameFunc","injectToNameFunc","_constructor","_target","injectFunc","InjectFactory","bindingType","singletonOf","valueOf","instanceOf","createFromValue","generateImplicit","c","ToString","InjectFactory_1","factory","decoratorUnInject","tryInjectHere","isValueConstructor","isKeyConstructor","isInject","attemptConstructorInjection","decoratorInject","injectBinding","getInjectValue","injv","TouchUtil_1","InputControlCommand","on","TouchDirection","Up","status","sPosX","areaOnMove","Down","Left","sPosY","Right","direction","pauseFlag","readyFlag","rotateAnimals","isRotationing","iMdl","waitingHandle","aMgr","rotateAction","rotateDur","lastAction","callFunc","resetAnimalsNode","children","animalsNodeChildren","switchIndex","setScale","one","two","temp","Input","InputModel","BubbleType","Context_1","IocRoot_1","IocComponet","_requiresContext","_registerWithContext","enabled","activeInHierarchy","autoRegisterWithContext","registeredWithContext","shouldRegister","bubbleToContext","Add","view","finalTry","loopLimiter","parent","IocRoot","iocContext","success","Remove","Enable","Disable","requiresContext","IocError","IC_ERROR","onDestroy","IocComponet_1","SignalManager_1","__IC_SignalManager","LogicNode","Update","Class","extends","properties","_common2","_WxGameApi2","isRunInWeiXin","getCachePromise","url","getOrCacheResFile","resPath","playBGM","viedo","Date","getSeconds","diff","wx","login","fail","launchOptionsSync","preloadFriendInfo","preloadGroupInfo","getOpenDataContext","postMessage","message","function","getLaunchOptionsSync","scene","shareTicket","LookRankCommand","StartCommand_1","MainSignalManager_1","MainModel_1","UpdateCommand_1","GenerateCommand_1","MainUtil_1","RestartCommand_1","LookRankCommand_1","MatchCommand_1","PrefabManager_1","InputControlCommand_1","InputModel_1","AudioUtil_1","AudioManager_1","BackHomeCommand_1","MainContext","MainSignalManager","MainModel","Instance","MainUtil","TouchUtil","signalMgr","commandBinder","Start","StartCommand","UpdateCommand","Generate","Restart","RestartCommand","LookRank","MatchCommand","InputControl","BackHome","isLookVideo","score","timer","lastTimer","timePeriod","currentLevel","initTimePeriod","minTimePeriod","lastScore","harderRatios","Common_1","MainNode","onHide","onShow","viedoHandle","emitter","event","MainRoot","SignalManager","winSize","resourceUrl","loader","loadRes","SpriteFrame","err","round","randomNumber","PauseNode_1","match","gainPoint","scoreNode","saveScore","pauseNode","active","show","updateScore","stopAllCurrent","PauseNode","mainButton","mainTop","mainBotton","playVideo","replayFrame","onRestartClicked","onLookRankClicked","onBackHomeClicked","MainContext_1","PersistRoot","prefabs","clips","game","addPersistRootNode","loadPrefab","loadAudio","prefab","setPrefab","audio","AudioClip","AudioSource","PoolOverflowBehavior","BindingConstraintType","PoolInflationType","Stack_1","__IC_InstanceProvider","instancesAvailable","Stack","instancesInUse","constraint","POOL","uniqueValues","overflowBehavior","EXCEPTION","inflationType","DOUBLE","failIf","isProtetype","_instanceCount","addList","remove","removeInstance","removeList","retv","pop","instancesToCreate","instanceCount","WARNING","warn","INCREMENT","instanceProvider","newInstance","condition","PrefabManager","prefabMap","hasPrefab","getPrefab","PrefabPool","nodePool","NodePool","put","hasPrototypeList","constructor_1","types","__proto__","startsWith","AddPrototype","prototypeMap","Array","from","tpye","extendSet","subContextView","tipsUiNode","rankType","shareCount","updateShareMenu","withShareTicket","switchRank","switchBtn","switchBar","getChildByName","moveRange","moveBy","v2","hideShowTipsUi","ticket","showTipsUi","getShareInfo","backhome","shareApp","shareAppMessage","title","imageUrl","isExist","content","tipsUiView","display","CountDownView_1","isPlayVideo","revive","width_1","height_1","x_1","y_1","url_1","checkCacheExistFile","result","clearAllCurrent","isResult","waitStartTime","waitDurTime","preMgr","countDown","mainNode","Signal_1","_signal_dic","symbol","_signal","Signal","__IC_Signal","_listener","_onceListener","action","concat","callback","addUnique","addOnceListener","removeAllListeners","listeners","isUnique","getTypes","clazz","classMap","getInstanceOrCreate","destroyInstance","Item","_next","_size","_header","top","newItem","tmp","lanuch","getCollisionManager","avatar","animals","foodArea","pause","TipsUiView","text","onClicked","RichText","areaMap","isGlobal","areaStatus","AreaStatus","globalAreaStatus","EventType","TOUCH_START","getTouches","touch","getLocationX","sPoxY","getLocationY","TouchStatus","No","totalX","totalY","trendX","trendY","touchMap","getID","TOUCH_MOVE","mDeltaX","getDelta","mDeltaY","abs","disposeTouchResult","TOUCH_END","TOUCH_CANCEL","touchMoveDetection","touchEvnet","isMoveValid","trend","tickcount","timecount","newNode","level","ratio","log","food","getPoolNode","foodComponent","func","bgmUrl","createInnerAudioContext","src","autoplay","w","h","overtime","isPlayFinish","video","createVideo","poster","objectFit","controls","onEnded","onerror","setTimeout","path","successCallback","failCallback","userPath","downloadFile","header","filePath","statusCode","getFileSystemManager","saveFile","tempFilePath","savedFilePath","errMsg","access","readFile","isAllowDownload","downFile","env","USER_DATA_PATH","sys","platform","WECHAT_GAME","errorLog"],"mappings":"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","sourcesContent":["const {ccclass,property} = cc._decorator;\r\n@ccclass\r\nexport class Shake extends cc.ActionInterval {\r\n    private _initial_x: number = 0;\r\n    private _initial_y: number = 0;\r\n    private _strength_x: number = 0;\r\n    private _strength_y: number = 0; /**     *  创建抖动动画     * @param {number} duration     动画持续时长     * @param {number} strength_x   抖动幅度： x方向     * @param {number} strength_y   抖动幅度： y方向     * @returns {Shake}     */\r\n    public static create(duration: number, strength_x: number, strength_y: number): Shake {\r\n        let act: Shake = new Shake();\r\n        act.initWithDuration(duration, strength_x, strength_y);\r\n        return act;\r\n    }\r\n    public initWithDuration(duration: number, strength_x: number, strength_y: number): boolean {\r\n        cc.ActionInterval.prototype['initWithDuration'].apply(this, arguments);\r\n        this._strength_x = strength_x;\r\n        this._strength_y = strength_y;\r\n        return true;\r\n    }\r\n    public fgRangeRand(min: number, max: number): number {\r\n        let rnd: number = Math.random();\r\n        return rnd * (max - min) + min;\r\n    }\r\n    public update(time: number): void {\r\n        let randx = this.fgRangeRand(-this._strength_x, this._strength_x);\r\n        let randy = this.fgRangeRand(-this._strength_y, this._strength_y);\r\n        this.getTarget().setPosition(randx + this._initial_x, randy + this._initial_y);\r\n    }\r\n    public startWithTarget(target: cc.Node): void {\r\n        cc.ActionInterval.prototype['startWithTarget'].apply(this, arguments);\r\n        this._initial_x = target.x;\r\n        this._initial_y = target.y;\r\n    }\r\n    public stop(): void {\r\n        this.getTarget().setPosition(new cc.Vec2(this._initial_x, this._initial_y));\r\n        cc.ActionInterval.prototype['stop'].apply(this);\r\n    }\r\n}","import { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class Animal extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n\r\n    @property\r\n    type = ''\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n    }\r\n    start(){\r\n        super.start();\r\n    }\r\n\r\n    //重设动物坐标\r\n    rePositonAnimal(i) {\r\n        let {\r\n            width,\r\n            height\r\n        } = this.mMdl.animalTextureRect\r\n        let offsetRatio = {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n        i === 0 && (offsetRatio = {\r\n            x: -1,\r\n            y: 1\r\n        })\r\n        i === 1 && (offsetRatio = {\r\n            x: 1,\r\n            y: 1\r\n        })\r\n        i === 2 && (offsetRatio = {\r\n            x: 1,\r\n            y: -1\r\n        })\r\n        i === 3 && (offsetRatio = {\r\n            x: -1,\r\n            y: -1\r\n        })\r\n        this.node.setPosition(offsetRatio.x * width / 2, offsetRatio.y * height / 2);\r\n    }\r\n\r\n}","import {Singleton} from \"./Singleton\";\r\nimport {IManager} from \"./Manager\";\r\n\r\nexport default class AudioManager extends Singleton implements IManager {\r\n    public isInit = false;\r\n    public bgm: cc.AudioSource;\r\n    public audios: Array < cc.AudioSource > ;\r\n    private audioMap: Map < any, any >\r\n    private playLoopCount;\r\n\r\n    protected onConstructor() {\r\n        this.playLoopCount = 0;\r\n        this.audioMap = new Map();\r\n    }\r\n\r\n    public play(key) {\r\n        if (this.hasAudio(key)) {\r\n            let clip = this.getAudio(key);\r\n            let isPlay = false;\r\n            if (this.audios.length != 0) {\r\n                if(this.audios[this.playLoopCount]){\r\n                    this.audios[this.playLoopCount].clip = clip;\r\n                    this.audios[this.playLoopCount].play();\r\n                }else{\r\n                    this.playLoopCount=0;\r\n                }\r\n                if(this.playLoopCount < this.audios.length - 1){\r\n                    this.playLoopCount+=1;\r\n                }else{\r\n                    this.playLoopCount=0;\r\n                }\r\n                //找到一个空闲的播放源进行播放\r\n/*                 for(let i =0;i<this.audios.length;i++){\r\n                    if (!this.audios[i].isPlaying) {\r\n                        this.audios[i].clip = clip;\r\n                        this.audios[i].play();\r\n                        isPlay = true;\r\n                        break;\r\n                    }\r\n                } */\r\n                //没有空闲的播放源\r\n/*                 if (!isPlay) {\r\n                    this.audios[0].clip = clip;\r\n                    this.audios[0].play();\r\n                } */\r\n            }\r\n        }\r\n    }\r\n    public playBgm() {\r\n        if (this.bgm.clip) {\r\n            this.bgm.loop = true;\r\n            this.bgm.play();\r\n        }\r\n    }\r\n    hasAudio(key): boolean {\r\n        return this.audioMap.has(key);\r\n    }\r\n    getAudio(key): cc.AudioClip {\r\n        return this.audioMap.get(key);\r\n    }\r\n    setAudio(key, value) {\r\n        this.audioMap.set(key, value);\r\n    }\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\nexport class AudioUtil extends Singleton implements IUtil{\r\n\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IInjectBinder, __IC_InjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\n\r\n//引用注入装饰器\r\nexport class BackHomeCommand extends Command{\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n    \r\n    execute(){\r\n        //console.info(\"[游戏结束]\");\r\n        this.gameOver();\r\n    }\r\n\r\n    gameOver() {\r\n        this.inj.unbindAllMark();\r\n        cc.director.loadScene('Begin')\r\n    }\r\n}","\nconst {ccclass, property} = cc._decorator\n\n@ccclass\nexport default class Begin extends cc.Component {\n\n/*     @property(cc.Node)\n    playButton = null */\n\n    onLoad () {\n        \n    }\n\n    beginGame() {\n        cc.director.loadScene('Game')\n    }\n\n    lookRank(){\n        cc.director.loadScene(\"Rank\");\n    }\n}","//namespace ioc{\r\n    export module BindingConst{\r\n        //定义空常量\r\n        export const NULL = Symbol(\"NULL\");\r\n    }\r\n//}","import { IBinding,Binding } from \"./Binding\"\r\nimport {BindingConst} from \"./BindConst\"\r\nimport {IConstructorName} from \"../IocConst\"\r\n\r\nexport interface IBinder {\r\n    bind(key) : IBinding;\r\n    unbind(key, name);\r\n    //根据绑定器实例生成一个空的绑定状态\r\n    getRawBinding() : IBinding;\r\n    //获取绑定状态\r\n    getBinding(key : any, name : any) : IBinding;\r\n    getBindingMap(key : any) : Map<any,IBinding>;\r\n    resolveBinding( binding : IBinding,  key : any);\r\n}\r\nexport class __IC_Binder extends IConstructorName{\r\n    get constructorName(){return \"IBinder\";}\r\n}\r\nexport class Binder implements IBinder {\r\n    //绑定状态映射字典\r\n    protected _bindings: any;\r\n    //绑定状态白名单\r\n    //protected _bindingWhitelist : Array<object> ;\r\n    constructor() {\r\n        this.init();\r\n    }\r\n    /**\r\n     * 初始化函数，通过重写该函数指定映射字典的实例\r\n     */\r\n    init(){\r\n        //初始化绑定状态映射\r\n        this._bindings = new Map < any, Map < any, IBinding >> ();\r\n    }\r\n    /**\r\n     * 解析器，将正在绑定中的状态信息解析，使之成为可存储的数据绑定到映射字典。\r\n     * @param binding 绑定的状态\r\n     */\r\n    resolver(binding: IBinding) {\r\n        let key = binding.key;\r\n        this.resolveBinding(binding,key);\r\n    }\r\n    /**\r\n     * 解析绑定状态\r\n     * @param binding 绑定状态\r\n     * @param key 键值\r\n     */\r\n    resolveBinding( binding : IBinding,  key : any){\r\n        //检查绑定状态是否存在别名\r\n        let bindingName = (binding.name == null) ? BindingConst.NULL : binding.name;\r\n        let dict : Map<any,IBinding>;\r\n        //检查绑定状态字典已经存在键值\r\n        if ((this._bindings.has(key))) {\r\n            //获取绑定映射\r\n            dict = this._bindings.get(key);\r\n            //检查绑定映射是否存在别名\r\n            if (dict.has(bindingName)) {\r\n                //获取已经存在的绑定映射\r\n                let existingBinding = dict.get(bindingName);\r\n                //检查合法性\r\n                if (existingBinding != binding) {\r\n                    //如果绑定值为空\r\n                    if (!existingBinding.value) {\r\n                        //移除无效的绑定别名\r\n                        dict.delete(bindingName);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //创建绑定映射\r\n            dict = new Map<any,IBinding>();\r\n            //添加绑定映射\r\n            this._bindings.set(key, dict);\r\n        }\r\n\r\n        //如果存在默认绑定状态并且等于当前绑定状态\r\n        if (dict.has(BindingConst.NULL) && dict.get(BindingConst.NULL) === binding) {\r\n            //删除默认绑定\r\n            dict.delete(BindingConst.NULL);\r\n        }\r\n\r\n        //添加或覆盖绑定状态\r\n        if (!dict.has(bindingName)) {\r\n            dict.set(bindingName, binding);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 绑定信号容器\r\n     * @param key 键值，可以是需要执行的全局信号名称或枚举\r\n     */\r\n    bind(key) : IBinding{\r\n        //创建一个绑定中状态\r\n        let binding = this.getRawBinding();\r\n        \r\n        //绑定标志\r\n        binding.bind(key);\r\n        return binding;\r\n    }\r\n    /**\r\n     * 解除绑定信号容器\r\n     * @param key 键值，需要绑定的键值\r\n     * @param name 别名，被绑定变量的别名\r\n     */\r\n    unbind(key, name) {\r\n        let checkKey = Binding.checkAbstract(key);\r\n        //如果绑定映射字典内包含键值\r\n        if (this._bindings.has(checkKey)) {\r\n            //直接获取键值映射的值\r\n            let dict = this._bindings.get(checkKey);\r\n            //检查是否存指定别名\r\n            let bindingName;\r\n            if(name){\r\n                bindingName = name;\r\n            }else{\r\n                bindingName = BindingConst.NULL;\r\n            }\r\n            if (dict.has(bindingName)) {\r\n                dict.delete(bindingName);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 生成默认的绑定状态\r\n     */\r\n    getRawBinding(): IBinding{\r\n        return new Binding(this.resolver.bind(this));\r\n    }\r\n    /**\r\n     * 根据键值和别名获取绑定器中的绑定状态\r\n     * @param key 键值\r\n     * @param name 别名\r\n     */\r\n    getBinding(key : any, name : any) : IBinding{\r\n        //查找是否存在键值\r\n        if(this._bindings.has (key))\r\n        {\r\n            let dict = this._bindings.get(key);\r\n            //如果别名不存在则使用默认值\r\n            if(!name){\r\n                name = BindingConst.NULL\r\n            }\r\n            //查找绑定状态是否存在别名\r\n            if (dict.has(name))\r\n            {\r\n                return dict.get(name);\r\n            }\r\n            else{\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取绑定状态映射表，返回键值的所有绑定状态\r\n     * @param key 被绑定的键值\r\n     */\r\n    getBindingMap(key : any) : any{\r\n        if(this._bindings.has(key)){\r\n            return this._bindings.get(key);\r\n        }\r\n    }\r\n}\r\n//}","import { IConstructorName } from \"../IocConst\";\r\n\r\n//namespace ioc {\r\nexport interface IBinding {\r\n    name: any;\r\n    key: any;\r\n    value: any;\r\n    bind(k:any):IBinding;\r\n    to(v:any):IBinding;\r\n    toName(n:any):IBinding;\r\n}\r\nexport class __IC_Binding extends IConstructorName{\r\n    get constructorName(){return \"IBinding\";}\r\n}\r\nexport class Binding implements IBinding {\r\n    protected _key: any;\r\n    protected _value: any;\r\n    protected _name: any;\r\n    protected _resolver: any;\r\n\r\n    public get key() {\r\n        return this._key;\r\n    }\r\n    public get value() {\r\n        return this._value;\r\n    }\r\n    public get name() {\r\n        return this._name;\r\n    }\r\n\r\n    constructor(resolver: any) {\r\n        this._resolver = resolver;\r\n\r\n        this._key = null;\r\n        this._value = null;\r\n        this._name = null;\r\n    }\r\n\r\n    /**\r\n     * 绑定标志到键值，返回此时的绑定状态。\r\n     * @param key 标志值，可以是需要执行的全局信号名称或枚举\r\n     */\r\n    bind(key) :IBinding{\r\n        this._key = Binding.checkAbstract(key);\r\n        return this;\r\n    }\r\n    /**\r\n     * 从正在绑定状态映射到实例，返回此时的绑定状态。\r\n     * @param value 绑定映射的值\r\n     */\r\n    to(value):IBinding {\r\n        this._value = value;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 实例的别名，用于区分不同的实例，返回此时的绑定状态。\r\n     * @param name 实例的别名\r\n     */\r\n    toName(name):IBinding {\r\n        this._name = name;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n    //判断是否为构造函数\r\n    public get isKeyConstructor():boolean{\r\n        return Binding.isConstructor(this._key);\r\n    }\r\n    //判断是否为构造函数\r\n    public get isValueConstructor():boolean{\r\n        return Binding.isConstructor(this._value);\r\n    }\r\n    public static isConstructor(value : object):boolean{\r\n        //如果不是一个函数则绝对不是构造函数\r\n        if(typeof value !== \"function\"){\r\n            return false;\r\n        }\r\n        //如果不能直接获取原型则不是构造函数\r\n        if(!value.prototype){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    public static checkAbstract(key){\r\n        //检查被绑定的对象是否为虚类\r\n        let constructorName;\r\n        if(key.constructorName){\r\n            constructorName = key.constructorName;\r\n            //console.info(\"[转化虚拟类]\"+ constructorName);\r\n        }else{\r\n            constructorName = key;\r\n            //console.info(\"[非虚拟类]\"+ constructorName.constructor.name);\r\n        }\r\n        return constructorName;\r\n    }\r\n}\r\n//}","import {\r\n    IBinding,\r\n    Binding\r\n} from \"../Bind/Binding\"\r\nimport {\r\n    __IC_InjectBinder,\r\n    IInjectBinder\r\n} from \"../Injector/InjectBinder\";\r\nimport {\r\n    CommandBinding\r\n} from \"./CommandBinding\";\r\nimport {\r\n    ISignal\r\n} from \"../Signal/Signal\"\r\nimport {\r\n    InjectBinding\r\n} from \"../Injector/InjectBinding\";\r\nimport {\r\n    ICommand,\r\n    __IC_Command\r\n} from \"./Command\";\r\nimport {\r\n    Pool\r\n} from \"../../Extensions/Pool\";\r\nimport {\r\n    CommandConst\r\n} from \"./CommandConst\"\r\nimport {\r\n    inject\r\n} from \"../Injector/InjectDecorator\";\r\nimport {\r\n    Binder\r\n} from \"../Bind/Binder\";\r\nimport {\r\n    ICommandBinder\r\n} from \"./ICommandBinder\";\r\n//全局注入数据绑定器\r\n\r\n\r\n/**\r\n * 指令绑定器\r\n */\r\nexport class CommandBinder extends Binder implements ICommandBinder {\r\n    //注入绑定器\r\n    @inject(__IC_InjectBinder)\r\n    public injectBinder: IInjectBinder;\r\n\r\n    //指令池\r\n    protected pools: Map < object, Pool >= new Map < object, Pool > ();\r\n\r\n    // Tracker for parallel commands in progress\r\n    protected activeCommands: Set < ICommand >= new Set < ICommand > ();\r\n    // Tracker for sequences in progress\r\n    protected activeSequences: Map < ICommand, CommandBinding > = new Map < ICommand, CommandBinding > ();\r\n    //是否使用池\r\n    public usePooling: boolean = false;\r\n    public getPool(type: object): Pool {\r\n        if (this.pools.has(type))\r\n            return this.pools.get(type);\r\n        return null;\r\n    }\r\n\r\n    public resolver(binding: IBinding) {\r\n        super.resolver(binding);\r\n        if (this.usePooling && (binding as CommandBinding).isPooled) {\r\n            if (binding.value != null) {\r\n                let that = this;\r\n                //检查被绑定的值是否有效\r\n                let values: object[] = binding.value as object[];\r\n                if (values.length === 0) {\r\n                    values = [];\r\n                    values.push(binding.value);\r\n                }\r\n\r\n                if (values && values.length > 0) {\r\n                    values.forEach((value) => {\r\n                        //如果找不到对应的池则创建\r\n                        if (that.pools.has(value) == false) {\r\n                            let myPool = this.makePoolFromType(value);\r\n                            that.pools.set(value, myPool);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    protected makePoolFromType(type): Pool {\r\n        //池构造函数作为类型使用\r\n        let poolType = type;\r\n        //预制实例缓存\r\n        this.injectBinder.bind(type).to(type);\r\n\r\n        //获取一个池实例\r\n        this.injectBinder.bind(Pool).to(Pool).toName(CommandConst.COMMAND_POOL);\r\n        let pool: Pool = this.injectBinder.getInstance(Pool, CommandConst.COMMAND_POOL) as Pool;\r\n        this.injectBinder.unbind(Pool, CommandConst.COMMAND_POOL);\r\n        pool.bind(poolType);\r\n\r\n        return pool;\r\n    }\r\n    //绑定状态映射字典\r\n    getRawBinding(): IBinding {\r\n        return new CommandBinding(this.resolver.bind(this));\r\n    }\r\n    bind(key: any): CommandBinding {\r\n        return super.bind(key) as CommandBinding;\r\n    }\r\n    //调用指令\r\n    protected invokeCommand(cmd: object, binding: CommandBinding, args, depth: number): ICommand {\r\n        let command: ICommand = this.createCommand(cmd, args);\r\n        command.sequenceId = depth;\r\n        this.trackCommand(command, binding);\r\n        this.executeCommand(command,args);\r\n        return command;\r\n    }\r\n    //\r\n    protected createCommand(cmd: object, data: object): ICommand {\r\n        let command: ICommand = this.getCommand(cmd);\r\n\r\n        if (command == null) {\r\n            let msg: string = \"A Command \";\r\n            if (data != null) {\r\n                msg += \"tied to data \" + data.toString();\r\n            }\r\n            msg += \" could not be instantiated.\\nThis might be caused by a null pointer during instantiation or failing to override Execute (generally you shouldn't have constructor code in Commands).\";\r\n            throw new Error(msg);\r\n        }\r\n\r\n        command.data = data;\r\n        return command;\r\n    }\r\n    //获取指令实例\r\n    protected getCommand(type: object): ICommand {\r\n        //如果使用池则检查是否已经存在相应的实例\r\n        if (this.usePooling && this.pools.has(type)) {\r\n            let pool: Pool = this.pools.get(type);\r\n            let command: ICommand = pool.getInstance() as ICommand;\r\n            //是否存在对应的实例\r\n            if(command){\r\n                //检查是否已经清理\r\n                if (command.isClean) {\r\n                    this.injectBinder.injector.inject(command, null);\r\n                    command.deploy();\r\n                }\r\n            }else{\r\n                //获取实例\r\n                command = this.injectBinder.getInstance(type,null);\r\n                //为池添加实例缓存\r\n                pool.add(command);\r\n            }\r\n            return command;\r\n        } else {\r\n            this.injectBinder.bind(__IC_Command).to(type);\r\n            let command: ICommand = this.injectBinder.getInstance(__IC_Command, null);\r\n            this.injectBinder.unbind(__IC_Command, null);\r\n            return command;\r\n        }\r\n    }\r\n    protected trackCommand(command: ICommand, binding: CommandBinding) {\r\n        if (binding.isSequence) {\r\n            this.activeSequences.set(command, binding);\r\n        } else {\r\n            this.activeCommands.add(command);\r\n        }\r\n    }\r\n    //执行指令\r\n    protected executeCommand(command: ICommand,args) {\r\n        if (command == null) {\r\n            return;\r\n        }\r\n        command.execute(...args);\r\n    }\r\n    /**\r\n     * 信号调用回掉函数\r\n     * @param trigger 触发的信号\r\n     * @param data 数据\r\n     */\r\n    public onDispose(trigger: object , ...args) {\r\n        //尝试获取绑定状态\r\n        let binding: CommandBinding = this.getBinding(trigger, null) as CommandBinding;\r\n        if (binding != null) {\r\n            //是否处于执行序列中\r\n            if (binding.isSequence) {\r\n                //加入执行队列\r\n                this.next(binding, args, 0,);\r\n            } else {\r\n                //获取被绑定的指令对象\r\n                let values: object[] = binding.value as object[];\r\n                let aa = values.length + 1;\r\n                for (let a = 0; a < aa; a++) {\r\n                    this.next(binding, args , a,);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //下一次即将执行的指令\r\n    protected next(binding: CommandBinding, args, depth: number) {\r\n        let values: object[] = binding.value as object[];\r\n        if (values.length === 0) {\r\n            values = [];\r\n            values.push(binding.value);\r\n        }\r\n\r\n        if (depth < values.length) {\r\n            let cmd = values[depth];\r\n            let command: ICommand = this.invokeCommand(cmd, binding, args, depth);\r\n            this.releaseCommand(command);\r\n        } else {\r\n            this.disposeOfSequencedData(args);\r\n            //是否仅执行一次\r\n            if (binding.isOnce) {\r\n                //解除绑定\r\n                this.unbind(binding, null);\r\n            }\r\n        }\r\n    }\r\n    //EventCommandBinder (and perhaps other sub-classes) use this method to dispose of the data in sequenced commands\r\n    protected disposeOfSequencedData(data: object) {\r\n        //No-op. Override if necessary.\r\n    }\r\n    //释放指令，使其进入池\r\n    public releaseCommand(command: ICommand) {\r\n        //有时会需要执行一些耗时的异步操作，如果指令被用户保持则不进行释放，默认情况下都是自动释放的\r\n        if (!command.isRetain) {\r\n            //使用构造函数作为类型\r\n            let t = command.constructor;\r\n            if (this.usePooling && this.pools.has(t)) {\r\n                this.pools.get(t).returnInstance(command);\r\n            }\r\n            if (this.activeCommands.has(command)) {\r\n                this.activeCommands.delete(command);\r\n            } else if (this.activeSequences.has(command)) {\r\n                let binding: CommandBinding = this.activeSequences.get(command);\r\n                let data = command.data;\r\n                this.activeSequences.delete(command);\r\n                this.next(binding, data, command.sequenceId + 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class SignalCommandBinder extends CommandBinder {\r\n    //启用池\r\n    public usePooling : boolean = true;\r\n    //重写解析绑定状态函数\r\n    resolveBinding(binding: IBinding, key: any) {\r\n        super.resolveBinding(binding, key);\r\n        //如果已经存在了则不能再次绑定\r\n        if (this._bindings.has(key)) {\r\n            let signal: ISignal = key;\r\n            signal.addListener(this.onDispose.bind(this)); //Do normal bits, then assign the commandlistener to be reactTo\r\n        }\r\n    }\r\n    //重写绑定方法\r\n    public bind(value: object): CommandBinding {\r\n        //获取绑定状态\r\n        let binding: InjectBinding = this.injectBinder.getBinding(value, null);\r\n        let signal: ISignal = null;\r\n        //检查参数值是否为构造函数\r\n        if (Binding.isConstructor(value)) {\r\n            //如果尚未进行注入则注入一个单例\r\n            if (binding == null) {\r\n                binding = this.injectBinder.bind(value);\r\n                binding.toSingleton();\r\n            }\r\n            signal = this.injectBinder.getInstance(value, null) as ISignal;\r\n        }\r\n        //如果信号存在则绑定信号，否则直接绑定值\r\n        if (signal) {\r\n            return super.bind(signal);\r\n        } else {\r\n            return super.bind(value);\r\n        }\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key: any, name: any): CommandBinding {\r\n        let signal;\r\n        //检查键值是否为构造函数\r\n        if (Binding.isConstructor(key)) {\r\n            //参数应该是一个信号或信号的构造函数，而不是其他的值\r\n            signal = this.injectBinder.getInstance(key, name);\r\n        } else {\r\n            //信号是一个实例\r\n            signal = key;\r\n        }\r\n        return super.getBinding(signal, name) as CommandBinding;\r\n    }\r\n    protected invokeCommand(cmd, binding: CommandBinding, args, depth: number): ICommand {\r\n        let signal: ISignal = binding.key;\r\n        let command: ICommand = this.createCommandForSignal(cmd, args); //Special signal-only command creation\r\n        command.sequenceId = depth;\r\n        this.trackCommand(command, binding);\r\n        this.executeCommand(command,args);\r\n        return command;\r\n    }\r\n    // Create a Command and bind its injectable parameters to the Signal types\r\n    protected createCommandForSignal(cmd, args): ICommand {\r\n        let that = this;\r\n\r\n        if (args != null) {\r\n\r\n            let signalData: [] = args as[];\r\n\r\n            //Iterate each signal type, in order. \r\n            //Iterate values and find a match\r\n            //If we cannot find a match, throw an error\r\n            let injectedTypes = new Set < any > ();\r\n            let values = [signalData];\r\n\r\n            /* if(signalTypes&&signalTypes.length>0){\r\n            signalTypes.forEach((type)=>{\r\n                if (!injectedTypes.has(type)) // Do not allow more than one injection of the same Type\r\n                {\r\n                    let foundValue : boolean= false;\r\n                    for(let i = 0;i<values.length;i++){\r\n                        if (values[i] != null)\r\n                        {\r\n                            that.injectBinder.bind(type).toValue(values[i]).toInject(false);\r\n                            injectedTypes.add(type);\r\n                            //values[i]=null;\r\n                            foundValue = true;\r\n                            break;\r\n                        }\r\n                        else //Do not allow null injections\r\n                        {\r\n                            throw new Error(\"SignalCommandBinder attempted to bind a null value from a signal to Command: \" + cmd.GetType() + \" to type: \" + type);\r\n                        }\r\n                    }\r\n                    if (!foundValue)\r\n                    {\r\n                        throw new Error(\"Could not find an unused injectable value to inject in to Command: \" + cmd.GetType() + \" for Type: \" + type);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    throw new Error(\"SignalCommandBinder: You have attempted to map more than one value of type: \" + type +\r\n                        \" in Command: \" + cmd.GetType() + \". Only the first value of a type will be injected. You may want to place your values in a VO, instead.\");\r\n                }\r\n            })\r\n            }*/\r\n        }\r\n        let command: ICommand = that.getCommand(cmd);\r\n        command.data = args;\r\n/*         if (signalTypes && signalTypes.length > 0) {\r\n            signalTypes.forEach((typeToRemove) => {\r\n                that.injectBinder.unbind(typeToRemove, null);\r\n            })\r\n        } */\r\n        return command;\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\n\r\nexport class CommandBinding extends Binding{\r\n    //是否在执行序列中\r\n    protected _isSequence : boolean;\r\n    //是否仅执行一次\r\n    protected _isOnce : boolean;\r\n    //是否在对象池中\r\n    public isPooled : boolean\r\n    \r\n    public get isSequence() : boolean{\r\n        return this._isSequence\r\n    }\r\n    public get isOnce() : boolean{\r\n        return this._isOnce;\r\n    }\r\n    public to(value) : CommandBinding{\r\n        return super.to(value) as CommandBinding\r\n    }\r\n    public toName(name) : CommandBinding{\r\n        return super.toName(name) as CommandBinding;\r\n    }\r\n    /**\r\n     * 是否进入池\r\n     */\r\n    public Pooled()\r\n    {\r\n        this.isPooled = true;\r\n        this._resolver (this);\r\n        return this;\r\n    }\r\n}","//注入状态类型枚举\r\nexport enum CommandConst\r\n{\r\n    /// Temporary marker for any pool instantiated by the CommandBinder\r\n    COMMAND_POOL = \"COMMAND_POOL\",\r\n}","import { ICommandBinder, __IC_CommandBinder } from \"./ICommandBinder\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../Injector/InjectBinder\";\r\nimport { inject } from \"../Injector/InjectDecorator\";\r\nimport { IConstructorName } from \"../IocConst\";\r\n\r\nexport interface ICommand{\r\n    commandBinder : ICommandBinder;\r\n    injectBinder : IInjectBinder;\r\n    //执行指令\r\n    execute(...args);\r\n    //本条指令的操作ID，用于在队列中寻找下一条指令\r\n    sequenceId : number;\r\n    data : any;\r\n    args : any;\r\n    deploy();\r\n    clean();\r\n    isClean : boolean;\r\n    isRetain : boolean;\r\n    //执行异步操作时可以使用保留指令\r\n    retain();\r\n    //释放被异步操作锁定的指令\r\n    release();\r\n}\r\nexport class __IC_Command extends IConstructorName{\r\n    get constructorName(){return \"ICommand\";}\r\n}\r\nexport class Command implements ICommand{\r\n    // The InjectionBinder for this Context\r\n\t@inject(__IC_InjectBinder)\r\n    public injectBinder : IInjectBinder;\r\n    // Back reference to the CommandBinder that instantiated this Commmand\r\n\t@inject(__IC_CommandBinder)\r\n\tpublic  commandBinder : ICommandBinder;\r\n    public sequenceId;\r\n    public data;\r\n    public args;\r\n    private _clean = false;\r\n    public deploy(){\r\n        this._clean = false;\r\n    }\r\n    public clean(){\r\n        this._clean = true;\r\n    }\r\n    public get isClean(){\r\n        return this._clean;\r\n    };\r\n    private _retain = false;\r\n    //保持指令\r\n    public retain()\r\n    {\r\n        this._retain = true;\r\n    }\r\n    public release()\r\n    {\r\n        this._retain = false\r\n    }\r\n    public get isRetain() : boolean{\r\n        return this._retain;\r\n    }\r\n    //重新释放\r\n    public restore()\r\n    {\r\n        this.injectBinder.injector.uninject (this);\r\n        this.clean();\r\n    }\r\n    //执行指令\r\n    public execute(...args){\r\n\r\n    }\r\n}","import PersistRoot from \"./PersistRoot\";\r\n\r\n//全局变量\r\n export default class  Common{\r\n    static viedo\r\n    static viedoHandle;\r\n    static WxGameApi = null;\r\n    static version = \"v1.6.0\";\r\n    static isInit : boolean = false;\r\n    static persistRootNode : PersistRoot= null;\r\n    static root = null;\r\n    static shareTickets = [];\r\n    static isHasWxRank = false;\r\n    static maxScore = 0;\r\n    //用户的唯一标识\r\n    static userOpenId = 0;\r\n    //会话密钥\r\n    static session_key = \"\";\r\n    //用户全局唯一标识\r\n    static unionId = 0;\r\n}","import {IRoot} from \"./IRoot\"\r\nimport {__IC_InjectBinder,InjectBinder} from \"../Injector/InjectBinder\";\r\nimport {CommandBinder , SignalCommandBinder } from \"../Command/CommandBinder\";\r\nimport {IocError, IConstructorName} from \"../IocConst\"\r\nimport { __IC_CommandBinder } from \"../Command/ICommandBinder\";\r\n\r\nexport interface IContext {\r\n    start(): IContext;\r\n    restart() : IContext;\r\n    //启动\r\n    launch();\r\n    /// Get the ContextView\r\n    getRoot(): any;\r\n    // Register a new context to this one\r\n    addCrossContext(context : IContext):IContext;\r\n    removeCrossContext(context : IContext);\r\n    //共用绑定器\r\n    crossContextBinder : InjectBinder;\r\n}\r\nexport class __IC_Context extends IConstructorName{\r\n    get constructorName(){return \"IContext\";}\r\n}\r\n\r\nexport class Context implements IContext {\r\n    //第一个被创建出来的环境容器\r\n    public static firstContext : IContext;\r\n    //应该以注入的方式获取\r\n    private _injectBinder : InjectBinder;\r\n    private _crossContextBinder : InjectBinder;\r\n    //注入绑定器\r\n    public get injectBinder(): InjectBinder {\r\n        if(!this._injectBinder){\r\n            this._injectBinder = new InjectBinder();\r\n        }\r\n        return this._injectBinder; \r\n    }\r\n    //设置全局注入绑定器\r\n    public set crossContextBinder(value){\r\n        this._crossContextBinder = value;\r\n    }\r\n    //这里使用注入绑定器代替全局绑定器\r\n    public get crossContextBinder(){\r\n        return this._crossContextBinder;\r\n    }\r\n    private _commandBinder : CommandBinder;\r\n    //指令绑定器\r\n    public get commandBinder(): CommandBinder {\r\n/*         //指令绑定器应该由注入产生\r\n        if(!this._commandBinder){\r\n            this._commandBinder = new CommandBinder();\r\n        } */\r\n        return this._commandBinder; \r\n    }\r\n    //根节点\r\n    root: IRoot;\r\n    //获取根节点\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n\r\n    constructor(root: any) {\r\n        if (Context.firstContext == null || Context.firstContext.getRoot() == null){\r\n            Context.firstContext = this;\r\n            this.crossContextBinder = this.injectBinder;\r\n\t\t}else{\r\n\t\t\tContext.firstContext.addCrossContext(this);\r\n        }\r\n        //设置根节点\r\n        this.setRoot(root);\r\n        //添加核心\r\n        this.addCore();\r\n        //启动环境容器\r\n        this.start();\r\n    }\r\n    //添加全局环境容器\r\n    public addCrossContext(context : IContext):IContext{\r\n        //共用注入绑定器\r\n        context.crossContextBinder= this.injectBinder;\r\n\t\treturn this;\r\n    }\r\n    //移除全局环境容器\r\n    public removeCrossContext(childContext: IContext)\r\n    {\r\n/*         if (childContext.crossContextBinder != null)\r\n        {\r\n            childContext.crossContextBinder = null;\r\n        } */\r\n    }\r\n\r\n    public setRoot(root: any): IContext {\r\n        this.root = root;\r\n        return this;\r\n    }\r\n    public restart() : IContext{\r\n        this.addCore();\r\n        this.start();\r\n        //console.info(\"[重启Ioc容器]\");\r\n        return this;\r\n    }\r\n    public start(): IContext {\r\n        this.instantiateCore();\r\n        this.mapBindings();\r\n        this.postBindings();\r\n        this.launch();\r\n\r\n        return this;\r\n    }\r\n    //启动容器\r\n    public launch() {\r\n        //console.info(\"Ioc容器启动\");\r\n    }\r\n    /**\r\n     * 初始化核心组件\r\n     */\r\n    protected instantiateCore() {\r\n        //实例化信号绑定器\r\n        this._commandBinder = this.injectBinder.getInstance(__IC_CommandBinder,null);\r\n    }\r\n    protected mapBindings() {\r\n\r\n    }\r\n    protected postBindings() {\r\n\r\n    }\r\n    protected addCore() {\r\n        //注入注入绑定器\r\n        this.injectBinder.bind(__IC_InjectBinder).toValue(this.injectBinder);\r\n        //注入信号绑定器\r\n        this.injectBinder.bind(__IC_CommandBinder).to(SignalCommandBinder).toSingleton();\r\n    }\r\n\r\n}\r\n//}","import { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { Shake } from \"../../lib/extensions/ActionExtension\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class CountDownView extends cc.Component {\r\n    @property(Number)\r\n    private value : number = 3;\r\n    @property(Number)\r\n    private time: number = 3;\r\n    @property(Boolean)\r\n    private isAutoPlay : boolean = false;\r\n\r\n    //单步运行的比率\r\n    private step : number;\r\n    //单步的持续时间\r\n    private stepDur : number;\r\n    private completeList;\r\n    private isPlay;\r\n    private alpha;\r\n    private isIn;\r\n    private label;\r\n\r\n    onLoad() {\r\n        //super.onLoad();\r\n        this.label = this.node.getComponent(cc.Label);\r\n        this.isPlay = false;\r\n        this.completeList = [];\r\n    }\r\n    start(){\r\n        //super.start();\r\n        if(this.isAutoPlay)this.play();\r\n    }\r\n    /**\r\n     * 配置\r\n     * @param start 起始值 \r\n     * @param duration 持续时间\r\n     */\r\n    config(start,duration){\r\n        this.time = duration;\r\n        this.value = start;\r\n\r\n        return this;\r\n    }\r\n    //播放\r\n    play(){\r\n        this.isPlay = true;\r\n        //如果持续时间或者开始时间为0\r\n        if(this.value ===0||this.time===0){\r\n            this.step = 0;\r\n        }\r\n        else{\r\n            this.step = this.value / this.time;\r\n            this.stepDur = this.time/this.value;\r\n        } \r\n\r\n        return this;\r\n    }\r\n    onComplete(complete){\r\n        this.completeList.push(complete);\r\n        return this;\r\n    }\r\n    update(dt){\r\n        if(!this.isPlay)return;\r\n\r\n        if(this.value>=0&&this.step>0){\r\n            let before = Math.floor(this.value);\r\n            this.value -= dt * this.step;\r\n            this.time -= dt;\r\n            let after = Math.floor(this.value);\r\n            //如果整数部分发生变化\r\n            if(before !== after){\r\n                this.node.stopAllActions();\r\n                this.node.scale = 0.5;\r\n                this.node.opacity = 0;\r\n\r\n                let scaleActions = [cc.scaleBy(0.35*this.stepDur,5),cc.scaleBy(1*this.stepDur,0.125)];\r\n                let fadeActions = [cc.fadeIn(0.35*this.stepDur),cc.fadeOut(1*this.stepDur)];\r\n\r\n                //执行动画效果\r\n                if(after>=1){\r\n                    this.label.string = \"\"+after;\r\n                }else{\r\n                    this.node.runAction(Shake.create(1*this.stepDur,20,20));\r\n                    this.label.string = \"Go~!\";\r\n                }\r\n                this.node.runAction(cc.sequence(scaleActions));\r\n                this.node.runAction(cc.sequence(fadeActions));\r\n            }\r\n        }else{\r\n            this.isPlay = false;\r\n            //执行完成回调\r\n            this.completeList.forEach(complete => {\r\n                complete();\r\n            });\r\n            this.node.destroy();\r\n        }\r\n    }\r\n}","import {Binder} from \"../Bind/Binder\";\r\nimport {BindingConst} from \"../Bind/BindConst\";\r\nimport {DecoratorClass} from \"./DecoratorClass\";\r\nimport {DecoratorClassBinding} from \"./DecoratorClassBinding\";\r\nimport {IBinding, Binding} from \"../Bind/Binding\";\r\nimport { Prototype } from \"../../Extensions/Prototype\";\r\n\r\nexport class DecoratorClassBinder extends Binder {\r\n    //重写绑定状态映射字典Map< 被注入的类名, Map< 属性名 ，Map< 属性别名 , 绑定状态>>>\r\n    protected _bindings: Map < any, Map < any, Map < any, DecoratorClassBinding >>> ;\r\n    private _decoratorClassBufferMap : Map<any,DecoratorClass>;\r\n\r\n    //重写初始化函数\r\n    init() {\r\n        //初始化绑定状态映射\r\n        this._bindings = new Map < any, Map < any, Map < any, DecoratorClassBinding >>> ();\r\n        //初始化缓存映射\r\n        this._decoratorClassBufferMap = new Map<any,DecoratorClass>();\r\n    }\r\n    //检查是否存在指定的键值\r\n    public has(key):boolean{\r\n        return this._bindings.has(key);\r\n    }\r\n    //获取需要注入的类型数据\r\n    public get(target: any): DecoratorClass {\r\n        //检查是否为实例\r\n        if (!(target instanceof Object)) throw new Error(\"proto must is a object but\" + target + \"is not\");\r\n        //检查是否存在缓存\r\n        if(!this._decoratorClassBufferMap.has(target)){\r\n            //获取继承列表\r\n            let extendsList = Prototype.getPrototypeList(target);\r\n\r\n            let injectClass: DecoratorClass = new DecoratorClass();\r\n            let list = [];\r\n            let dict: Map < any, Map < any, DecoratorClassBinding >> ;\r\n            let that = this;\r\n            let bindingMaps = [];\r\n            if (extendsList && extendsList.length > 0) {\r\n                for(let i = 0 ; i<extendsList.length ; i++){\r\n                    dict = that.getBindingMap(extendsList[i]);\r\n                    if(dict&&dict.size>0){\r\n                        dict.forEach(function(inside) {\r\n                            bindingMaps.push(inside);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            let inside : Map<any,DecoratorClassBinding>;\r\n            if (bindingMaps && bindingMaps.length > 0) {\r\n                for(let i = 0; i <bindingMaps.length;i++){\r\n                    inside = bindingMaps[i];\r\n                    if(inside&&inside.size>0){\r\n                        let values = inside.values();\r\n                        for (let j =0;j<inside.size;j++) {\r\n                            let binding = values.next();\r\n                            list.push(binding.value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            injectClass.list = list;\r\n            //添加缓存\r\n            this._decoratorClassBufferMap.set(target,injectClass);\r\n        }\r\n        //从缓存映射中获取对应的列表\r\n        return this._decoratorClassBufferMap.get(target);\r\n    }\r\n    //重写绑定方法\r\n    public bind(key: any): DecoratorClassBinding {\r\n        return super.bind(key) as DecoratorClassBinding;\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key, name): DecoratorClassBinding {\r\n        return super.getBinding(key, name) as DecoratorClassBinding\r\n    }\r\n    //重写绑定获取方法\r\n    public getRawBinding(): IBinding {\r\n        return new DecoratorClassBinding(this.resolver.bind(this));\r\n    }\r\n    //重写解析器\r\n    public resolver(binding: IBinding) {\r\n        super.resolver(binding);\r\n    }\r\n    /**\r\n     * 重写解析绑定状态\r\n     * @param binding 绑定状态\r\n     * @param key 键值\r\n     */\r\n    resolveBinding(binding: DecoratorClassBinding, key: any) {\r\n        //绑定状态必须有属性名\r\n        if (!binding.property) return;\r\n        //检查绑定状态是否存在别名\r\n        let bindingName = (binding.name == null) ? BindingConst.NULL : binding.name;\r\n        let dict: Map < any, Map < any, DecoratorClassBinding >> ;\r\n        //检查绑定状态字典已经存在键值\r\n        if ((this._bindings.has(key))) {\r\n            //获取绑定映射\r\n            dict = this._bindings.get(key);\r\n            //检查绑定映射是否存在别名\r\n            if (dict.has(bindingName)) {\r\n                //获取内部映射\r\n                let insideDict = dict.get(bindingName);\r\n                //检查映射内是否存在属性名\r\n                if (insideDict.has(binding.property)) {\r\n                    let existingBinding = insideDict.get(binding.property);\r\n                    //如果存在绑定状态\r\n                    if (existingBinding) {\r\n                        //检查存在对应状态绑定是否于当前相等\r\n                        if (existingBinding != binding) {\r\n                            //如果绑定值为空\r\n                            if (!existingBinding.value) {\r\n                                //移除无效的绑定别名\r\n                                dict.delete(bindingName);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //创建绑定映射Map< 别名, Map< 属性名, 绑定状态 >\r\n            dict = new Map < any, Map < any, DecoratorClassBinding >> ();\r\n            //添加绑定映射\r\n            this._bindings.set(key, dict);\r\n        }\r\n\r\n        //如果存在默认绑定状态并且等于当前绑定状态\r\n        if (dict.has(BindingConst.NULL)) {\r\n            let insideDic = dict.get(BindingConst.NULL);\r\n            if (insideDic.has(binding.property)) {\r\n                let existingBinding = insideDic.get(binding.property);\r\n                if (binding.property === binding) {\r\n                    //删除默认绑定\r\n                    insideDic.delete(BindingConst.NULL);\r\n                }\r\n            }\r\n\r\n        }\r\n        let insideDict;\r\n        //添加或覆盖绑定状态\r\n        if (!dict.has(bindingName)) {\r\n            //创建内部映射\r\n            insideDict = new Map < any, DecoratorClassBinding > ();\r\n            //映射绑定状态\r\n            insideDict.set(binding.property, binding);\r\n            //映射绑定\r\n            dict.set(bindingName, insideDict);\r\n        } else {\r\n            //获取内部映射\r\n            insideDict = dict.get(bindingName);\r\n            //检查是否存在属性名映射\r\n            if (!insideDict.has(binding.property)) {\r\n                //映射绑定\r\n                insideDict.set(binding.property, binding)\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 重写获取绑定状态映射表，返回键值的所有绑定状态\r\n     * @param key 被绑定的键值\r\n     */\r\n    getBindingMap(key: any): Map < any, Map < any, DecoratorClassBinding >> {\r\n        if (this._bindings.has(key)) {\r\n            return this._bindings.get(key);\r\n        }\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\n\r\nexport class DecoratorClassBinding extends Binding{\r\n    protected _property: any;\r\n    public get property(){\r\n        return this._property;\r\n    }\r\n    \r\n    /**\r\n     * 从正在绑定状态映射到属性，返回此时的绑定状态。\r\n     * @param property 绑定映射的值\r\n     */\r\n    toProperty(property : any):DecoratorClassBinding {\r\n        this._property = property;\r\n        if (this._resolver != null)\r\n            this._resolver(this);\r\n        return this;\r\n    }\r\n    //重写绑定到值\r\n    to(value : any):DecoratorClassBinding{\r\n        return super.to(value) as DecoratorClassBinding;\r\n    }\r\n    //重写绑定别名\r\n    toName(name : any) : DecoratorClassBinding{\r\n        return super.toName(name) as DecoratorClassBinding;\r\n    }\r\n}","import { DecoratorClassBinding } from \"./DecoratorClassBinding\";\r\n/**\r\n * 存储装饰器获取的信息\r\n */\r\nexport class DecoratorClass{\r\n    //注入列表\r\n    private _list : DecoratorClassBinding[];\r\n    public get list(){\r\n        return this._list;\r\n    }\r\n    public set list(value : DecoratorClassBinding[]){\r\n        this._list = value;\r\n    }\r\n}","import { DecoratorClassBinder } from \"./DecoratorClassBinder\";\r\nexport module DecoratorConst {\r\n    /**\r\n     * 全局注册接入点\r\n     * 使用属性的类型和属性的别名识别被注入的属性\r\n     */\r\n    export const DECORATOR_CLASS_BINDER = new DecoratorClassBinder();\r\n}","import { inject } from '../../lib/framework/Injector/InjectDecorator';\r\nimport { MainModel} from '../Model/MainModel';\r\nimport Animal from './Animal';\r\nimport { MainUtil } from '../util/MainUtil';\r\nimport { IocView } from '../../lib/extensions/IocView';\r\nimport { GameSignalEnum, MainSignalEnum } from '../signal/MainSignalEnum';\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Util, UtilType } from '../util/Util';\r\nimport { __IC_Manager, ManagerType } from '../util/Manager';\r\nimport AudioManager from '../util/AudioManager';\r\n\r\nconst {ccclass, property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class Food extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl : MainUtil;\r\n    @inject(__IC_Manager,ManagerType.Audio)\r\n    aMgr : AudioManager;\r\n\r\n    inited;\r\n    foodData;\r\n\r\n\tpublic speed = 0;\r\n    public accel = 0;\r\n    \r\n    private moveY = 0\r\n    type = ''\r\n\r\n    onLoad() {super.onLoad();}\r\n    start(){super.start();}\r\n    reuse() {}\r\n    unuse() {}\r\n    public clear(){\r\n        this.speed = 175;\r\n        this.accel = 125;\r\n        this.moveY = 0;\r\n        this.node.x = 0;\r\n        this.node.y = 0;\r\n    }\r\n    update(dt) {\r\n        //如果小游戏处于被隐藏的状态则不执行任何更新\r\n        if(this.mMdl.isHide)return;\r\n    \tif (!this.inited) return\r\n    \tthis.speed += this.accel * dt\r\n    \tthis.moveY = this.speed * dt\r\n        this.node.y -= this.moveY\r\n    }\r\n\r\n    onCollisionEnter(other, self) {\r\n        if (!this.inited) return;\r\n        let otherComponent = other.getComponent(Animal);\r\n        if(!otherComponent){\r\n            otherComponent = other.getComponent(Food);\r\n            //食物节点之间不进行碰撞检查\r\n            if(otherComponent) return;\r\n        }\r\n        let selfComponent = self.getComponent(Food);\r\n        if (otherComponent && selfComponent && otherComponent.type === selfComponent.type) {\r\n            //this.mMdl.onMatch()\r\n            this.sMgr.get(MainSignalEnum.Match).dispatch(GameSignalEnum.onMatch,this.node);\r\n            this.resPoolNode(this.node);\r\n        } else {\r\n            //this.mMdl.onNotMatch()\r\n            this.sMgr.get(MainSignalEnum.Match).dispatch(GameSignalEnum.onNotMatch);\r\n        }\r\n        this.inited = false;\r\n    }\r\n    //回收到资源池\r\n    resPoolNode(foodNode) {\r\n        let index = this.mMdl.currentFoodNodes.indexOf(foodNode)\r\n        if (index !== -1) {\r\n            this.mMdl.currentFoodNodes.splice(index, 1)\r\n        }\r\n        return this.mMdl.foodPool.res(foodNode)\r\n    }\r\n    //随机配置食物位置\r\n    randomProps() {\r\n        this.inited = false\r\n        let track = this.mUtl.randomCoin()\r\n        //记录最后的食物索引\r\n        if (this.mMdl.lastFoodIndex === -1) this.mMdl.lastFoodIndex = track\r\n        if (this.mMdl.lastTrack === -1) this.mMdl.lastTrack = track\r\n        let baseIndex\r\n        //如果当前轨道等于最后的轨道\r\n        if (track === this.mMdl.lastTrack) {\r\n            //创建与最后的轨道相同类型的食物\r\n            baseIndex = this.mMdl.lastFoodIndex\r\n        } else {\r\n            //检查当前的轨道与最后的食物之间的差值\r\n            baseIndex = track ? this.mMdl.lastFoodIndex + 1 : this.mMdl.lastFoodIndex - 1\r\n        }\r\n        //随机范围\r\n        let randomRange = [baseIndex - 1, baseIndex + 1].map(i => {\r\n            if (i < 0) i = this.mMdl.foodDatas.length + i\r\n            if (i >= this.mMdl.foodDatas.length) i = i - this.mMdl.foodDatas.length\r\n            return i\r\n        })\r\n        let foodIndex = this.mUtl.randomValue(...randomRange)\r\n        this.mMdl.lastFoodIndex = foodIndex\r\n        this.mMdl.lastTrack = track\r\n        this.foodData = this.mMdl.foodDatas[foodIndex]\r\n        let foodNode = this.node\r\n        this.type = this.foodData.type\r\n        foodNode.getComponent(cc.Sprite).spriteFrame = this.foodData.spriteFrame ;\r\n        let x = (track ? 1 : -1) * (this.mMdl.animalTextureRect.width / 2);\r\n        foodNode.setPosition(x , this.mUtl.getSceneSize().height/2);\r\n        this.inited = true\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {\r\n    Command\r\n} from \"../../lib/framework/Command/Command\";\r\nimport {\r\n    inject\r\n} from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport {\r\n    MainModel\r\n} from \"../Model/MainModel\";\r\nimport {\r\n    MainUtil\r\n} from \"../util/MainUtil\";\r\nimport Animal from \"../view/Animal\";\r\nimport {\r\n    __IC_Model,\r\n    ModelType\r\n} from \"../util/Model\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\nimport {\r\n    TouchUtil,\r\n    TouchDirection,\r\n    TouchStatus\r\n} from \"../util/TouchUtil\";\r\nimport {\r\n    __IC_Util,\r\n    UtilType\r\n} from \"../util/Util\";\r\n\r\n/**\r\n * 生成视图节点命令\r\n * 这个命令用于生成游戏视图\r\n */\r\nexport class GenerateCommand extends Command {\r\n    @inject(__IC_Model, ModelType.Main)\r\n    mMdl: MainModel;\r\n    @inject(__IC_Util, UtilType.Main)\r\n    mUtl: MainUtil;\r\n    @inject(__IC_Util, UtilType.Touch)\r\n    tUtl: TouchUtil;\r\n    @inject(cc.Node, \"Scene\")\r\n    sceneNode: cc.Node;\r\n    @inject(cc.Node, \"Animals\")\r\n    animalsNode: cc.Node;\r\n    @inject(cc.Prefab, \"Animal\")\r\n    animalPrefab: cc.Prefab;\r\n    @inject(cc.Prefab, \"Food\")\r\n    foodPrefab: cc.Prefab;\r\n\r\n\r\n    execute(complete) {\r\n        //console.log(\"[视图节点生成指令]\");\r\n        //等待异步过程初始化完成\r\n        this.init().then(() => {\r\n            this.generateTouchArea();\r\n            this.generateAnimals();\r\n            complete();\r\n        })\r\n    }\r\n    //生成触控区域\r\n    generateTouchArea() {\r\n        let area = new cc.Node(\"TouchArea\");\r\n        this.sceneNode.addChild(area);\r\n        area.width = this.mUtl.getSceneSize().width;\r\n        area.height = this.mUtl.getSceneSize().height;\r\n        this.tUtl.registerTouchArea(area, true);\r\n    }\r\n    init(): Promise < {} > {\r\n        this.mMdl.currentFoodNodes = [];\r\n        this.mMdl.foodPool = new PrefabPool('Food', this.foodPrefab)\r\n        let p1 = this.loadFoodRes();\r\n        let p2 = this.loadAnimalRes();\r\n        return Promise.all([p1, p2]);\r\n    }\r\n    private loadFoodRes() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            //获取所有的渲染对象\r\n            let results = Promise.all(that.mMdl.foodDatas.map((foodData) =>{\r\n                return that.mUtl.spriteRes(foodData.image)\r\n            }));\r\n            results.then((spriteFrames)=>{\r\n                spriteFrames.forEach((spriteFrame, i) => {\r\n                    that.mMdl.foodDatas[i].spriteFrame = spriteFrame;\r\n                });\r\n                //完成过程\r\n                resolve();\r\n            })\r\n        });\r\n    }\r\n    private loadAnimalRes() {\r\n        let that = this;\r\n        return new Promise((resolve, reject) => {\r\n            //获取所有的渲染对象\r\n            let results = Promise.all(that.mMdl.animalDatas.map((animalData) =>{\r\n                            return that.mUtl.spriteRes(animalData.image)\r\n                        }));\r\n            results.then((spriteFrames) => {\r\n                if (spriteFrames) {\r\n                    spriteFrames.forEach((spriteFrame, i) => {\r\n                        that.mMdl.animalDatas[i].spriteFrame = spriteFrame;\r\n                    });\r\n                }\r\n                //完成过程\r\n                resolve();\r\n            })\r\n        })\r\n    }\r\n    private generateAnimals(){\r\n        let that = this;\r\n        this.mMdl.animalDatas.forEach((animalData, i) => {\r\n            let animalNode = cc.instantiate(that.animalPrefab);\r\n            let animal = animalNode.getComponent(Animal);\r\n            let sprite = animalNode.getComponent(cc.Sprite);\r\n            //注意，未被添加到空间中的节点不会被初始化，所以这里需要先引入节点再执行节点的函数\r\n            that.animalsNode.addChild(animalNode);\r\n            sprite.spriteFrame = animalData.spriteFrame;\r\n            animal.type = animalData.type;\r\n            animal.rePositonAnimal(i);\r\n        })\r\n    }\r\n}","export class Helper {\r\n    /**\r\n     * 获取一个对象全部的信息并打印出来\r\n     * @param obj 被搜索对象\r\n     */\r\n    public static getAllInfo(obj: object) {\r\n        if (typeof obj !== \"object\") return;\r\n        let property = \"<GetAllInfo>\"+\"\\n\";\r\n        property += Helper.getInfo(obj);\r\n        console.info(property);\r\n    }\r\n    private static getInfo(obj : Object,depth?){\r\n        let property = \"\";\r\n        let depthTab = \"\";\r\n        if(!obj||!obj.constructor||obj.constructor.name === \"object\")return \"\";\r\n        if(depth){\r\n            //深度过大则说明溢出了\r\n            if(depth>100){\r\n                property += \"[N]\"+obj+\"[overflow]\";\r\n                return \"\";\r\n            }\r\n            //根据深度加Tab键\r\n            for(let i = 0;i<depth;i++){\r\n                depthTab += \"\\t\";\r\n            }\r\n        }else{\r\n            depthTab += \"\\t\";\r\n            depth = 1;\r\n        }\r\n\r\n        for (let item in obj) {\r\n            let p = item;\r\n            let v = obj[item];\r\n            if(v && typeof v == \"function\"){\r\n                let f : Function = v as Function;\r\n                v = f.name + \"(F)\";\r\n            }\r\n            property += depthTab + \"[P]\" + p + \"[V]\" + v + \"\\n\";\r\n            //递归遍历\r\n            if(v && typeof v == \"object\"){\r\n                //继续寻找并且深度加一\r\n                property += Helper.getInfo(v,depth+1);\r\n            }\r\n        }\r\n        return property;\r\n    }\r\n}","import { CommandBinding } from \"./CommandBinding\";\r\nimport { IBinding } from \"../Bind/Binding\";\r\nimport { Binder } from \"../Bind/Binder\";\r\nimport { IConstructorName } from \"../IocConst\";\r\n\r\nexport interface ICommandBinder{\r\n    bind (key : any) : CommandBinding;\r\n    getRawBinding():IBinding;\r\n}\r\nexport class __IC_CommandBinder extends IConstructorName{\r\n    static get constructorName(){return \"ICommandBinder\";}\r\n}","//namespace ioc{\r\nimport { IContext } from \"./Context\"\r\nimport { IConstructorName } from \"../IocConst\";\r\nexport class __IC_Root extends IConstructorName{\r\n    get constructorName(){return \"IRoot\";}\r\n}\r\nexport interface IRoot {\r\n    context: IContext;\r\n}\r\n//}","import {Binder, IBinder} from \"../Bind/Binder\"\r\nimport {IBinding, Binding} from \"../Bind/Binding\"\r\nimport {BindingConst} from \"../Bind/BindConst\"\r\nimport { Injector } from \"./Injector\";\r\nimport { InjectBinding } from \"./InjectBinding\";\r\nimport {DecoratorConst} from \"../Decorator/DecoratorConst\"\r\nimport {IocError, IConstructorName} from \"../IocConst\"\r\nimport { __IC_Model } from \"../../../project/util/Model\";\r\nimport { MainModel } from \"../../../project/Model/MainModel\";\r\n//全局注入数据绑定器\r\nconst ClassBinder = DecoratorConst.DECORATOR_CLASS_BINDER;\r\n\r\nexport interface IInjectBinder extends IBinder{\r\n    injector:Injector;\r\n    getInstance(key,name) : any;\r\n    getBinding(key, name) : InjectBinding;\r\n    bind(key:any):InjectBinding;\r\n    /**\r\n     * 解绑所有被标记了需要解绑的状态\r\n     */\r\n    unbindAllMark();\r\n} \r\nexport class __IC_InjectBinder extends IConstructorName{\r\n    get constructorName(){return \"IInjectBinder\";}\r\n}\r\nexport class InjectBinder extends Binder implements IInjectBinder {\r\n    //注入器\r\n    private _injector:Injector;\r\n    constructor(){\r\n        super();\r\n        this._injector = new Injector ();\r\n        this._injector.binder = this;\r\n        this._injector.injectClassBinder = ClassBinder;\r\n    }\r\n    public get injector() : Injector{\r\n        return this._injector;\r\n    }\r\n    //绑定状态映射字典\r\n    public getInstance(key,name) : any\r\n    {\r\n        //如果未设置别名则使用默认设置\r\n        if(!name)name = BindingConst.NULL;\r\n        //获取绑定状态\r\n        let binding : InjectBinding = this.getBinding (Binding.checkAbstract(key), name) as InjectBinding;\r\n        //尝试获取一个未绑定的键值对时抛出绑定失败异常\r\n        if (binding == null){throw new Error(\"InjectionBinder has no binding for:\\n\\tkey: \" + key + \"\\nname: \" + name);}\r\n        //根据绑定状态从注入器中获取实例\r\n        //console.info(\"[实例化]\"+binding.key);\r\n        let instance = this._injector.instantiate(binding,false);\r\n        //console.info(\"[尝试注入]\"+Binding.checkAbstract(binding.key));\r\n        this._injector.tryInject(binding,instance);\r\n        return instance;\r\n    }\r\n    //重写获取绑定状态方法\r\n    public getBinding(key, name) : InjectBinding{\r\n        return super.getBinding(key,name) as InjectBinding\r\n    }\r\n    //重写基类的绑定函数\r\n    public bind(key:any):InjectBinding{\r\n        return super.bind(key) as InjectBinding;\r\n    }\r\n    public getRawBinding() : IBinding{\r\n        return new InjectBinding(this.resolver.bind(this));\r\n    }\r\n    public unbindAllMark(){\r\n        let that = this;\r\n        let unbinds = [];\r\n        (this._bindings as Map < any, Map < any, InjectBinding >>).forEach(dict => {\r\n            dict.forEach(binding=>{\r\n                if(binding.isUnbind){\r\n                    unbinds.push(binding);\r\n                }\r\n            })\r\n        });\r\n        //解除被标记的绑定\r\n        unbinds.forEach(binding=>{\r\n            that.unbind(binding.key,binding.name);\r\n        })\r\n    }\r\n}","import { Binding } from \"../Bind/Binding\";\r\nimport {InjectConst} from \"./InjectConst\";\r\n\r\nexport class InjectBinding extends Binding{\r\n    protected _isUnbind : boolean = false;\r\n    //默认绑定状态\r\n    protected _bindingType: InjectConst.BindingType = InjectConst.BindingType.DEFAULT;\r\n    //默认自动注入\r\n    protected _isInject: boolean = true;\r\n    //参数\r\n    protected _args: any;\r\n/*     //键值是否为构造函数\r\n    protected _isKeyConstructor = false;\r\n    //值是否为构造函数\r\n    protected _isValueConstructor = false; */\r\n\r\n/*     public get isKeyConstructor(){\r\n        return this._isKeyConstructor;\r\n    }\r\n    public get isValueConstructor(){\r\n        return this._isValueConstructor;\r\n    } */\r\n    public get isInject(){\r\n        return this._isInject;\r\n    }\r\n    //参数列表\r\n    public get args() {\r\n        return this._args;\r\n    }\r\n    public get bindingType(){\r\n        return this._bindingType;\r\n    }\r\n    public get isUnbind(){\r\n        return this._isUnbind;\r\n    }\r\n    /**\r\n     * 参数列表\r\n     */\r\n    public toArgs(){\r\n        this._args = arguments;\r\n        if (this._resolver != null){\r\n            this._resolver(this);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 设置为单例模式时，每次都会得到相同的实例\r\n     */\r\n\tpublic toSingleton(): InjectBinding\r\n\t{\r\n\t\t//如果已经存在一个值了, 那么这次映射就被视为多余的\r\n\t\tif (this._bindingType === InjectConst.BindingType.VALUE){\r\n            return this;\r\n        }\r\n        //设定为单例注入\r\n        this._bindingType = InjectConst.BindingType.SINGLETON;\r\n\t\tif (this._resolver != null){\r\n\t\t\tthis._resolver (this);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n    /**\r\n     * 设置为解绑时，调用解绑方法将会解绑所有被标记的绑定状态\r\n     */\r\n    public unBind(): InjectBinding{\r\n        this._isUnbind = true;\r\n        return this;\r\n    }\r\n    public toValue(value : any) : InjectBinding{\r\n        this._bindingType = InjectConst.BindingType.VALUE;\r\n        this.setValue(value);\r\n        return this;\r\n    }\r\n    public setValue(o : any) : InjectBinding\r\n    {\r\n        this.to(o);\r\n        return this;\r\n    }\r\n    public toInject( value : boolean) : InjectBinding\r\n    {\r\n        this._isInject = value;\r\n        return this;\r\n    }\r\n    //重写基类的赋值函数\r\n    public to(value : any) : InjectBinding{\r\n        return super.to(value) as InjectBinding;\r\n    }\r\n    public toName(name : any) : InjectBinding{\r\n        return super.toName(name) as InjectBinding;\r\n    }\r\n}","export module InjectConst {\r\n    //注入状态类型枚举\r\n    export const enum BindingType\r\n    {\r\n        /// 每次都会创建一个新的对象\r\n        DEFAULT = \"Default\",\r\n    \r\n        /// 总是使用同一个对象单例\r\n        SINGLETON = \"Singleton\",\r\n    \r\n        /// 总是相同的对象但参数不同\r\n        VALUE = \"Value\",\r\n    }\r\n}","import {DecoratorConst} from \"../Decorator/DecoratorConst\"\r\nimport { Binding } from \"../Bind/Binding\";\r\n//全局注入数据绑定器\r\nconst ClassBinder = DecoratorConst.DECORATOR_CLASS_BINDER;\r\n/**\r\n * 注入装饰器模块\r\n * 因为TS的类型系统仅可以用于检查语法错误，而在编译为JS后不再有类型系统，所以无法在TS中存储类型数据\r\n * 并且在微信环境下是无法使用反射库和动态代码，至少现在还不行。\r\n * 为了实现注入功能，这里采用类的构造函数作为类型数据，以构造函数的name属性作为类型的名称，又因接口没有构造函数\r\n * 所以统一采用添加 __IC_ 前缀的模拟接口名方式间接存储接口数据，因为装饰器会在程序运行的起始阶段执行，所以使用一个全局变量存储这些数据\r\n * @see 注意：所有的__IC_类均需要实现IConstructorName接口\r\n * @example\r\n * class{\r\n *  @inject(constructor)\r\n *  anyclass:T;\r\n * }\r\n */\r\nexport function inject < T > (str: string): Function;\r\n/**\r\n * 属性值注入装饰器\r\n * @param c 构造函数\r\n */\r\nexport function inject < T > (c: new() => T): Function;\r\n/**\r\n * 使用别名的方式注入属性值\r\n * @param name 属性值别名\r\n */\r\nexport function inject < T > (c: new() => T, name: any): Function;\r\nexport function inject < T > (str:string, name: any): Function;\r\n/**\r\n * 使用默认的方式注入属性值\r\n */\r\n//export function inject<T>(_target: Object, _key: any, _desc ? : any) : void;\r\n\r\n//利用重载的形式定义注入属性的方法\r\nexport function inject < T > (): any {\r\n    switch (arguments.length) {\r\n        case 0:\r\n            break;\r\n        case 1:\r\n            return injectNoNameFunc < T > (arguments[0]);\r\n            break;\r\n        case 2:\r\n            return injectToNameFunc < T > (arguments[0], arguments[1])\r\n            break;\r\n        case 3:\r\n            break;\r\n    }\r\n}\r\n/**\r\n * 无别名的属性装饰器\r\n * @param _constructor 类型T的构造函数\r\n */\r\nconst injectNoNameFunc = < T > (_constructor: new() => T | string) => {\r\n    return function (_target: any, _property: string) {\r\n        injectFunc(_target,_constructor,_property);\r\n    }\r\n}\r\n/**\r\n * 带别名的属性装饰器\r\n * @param _constructor 类型T的构造函数\r\n */\r\nconst injectToNameFunc = < T > (_constructor: new() => T | string, _name: any) => {\r\n    return function (_target: any, _property: string) {\r\n        injectFunc(_target,_constructor,_property,_name);\r\n    }\r\n\r\n}\r\n/**\r\n * \r\n * @param _target 被注入的目标类\r\n * @param _constructor 注入的类\r\n * @param _property 注入的类的属性名\r\n * @param _name 注入的类的别名\r\n */\r\nfunction injectFunc(_target,_constructor,_property,_name?){\r\n    //所有实现了IConstructorName的类都属于虚类，这里获取虚类对应的接口名作为键值传递给绑定器\r\n    //因为压缩代码会把所有对象的名称都压缩掉，所以这里使用构造函数作为键值\r\n    ClassBinder.bind(_target.constructor).to(Binding.checkAbstract(_constructor)).toProperty(_property).toName(_name);\r\n}","import { InjectBinding } from \"./InjectBinding\";\r\nimport {InjectConst} from \"./InjectConst\";\r\nimport { Binding } from \"../Bind/Binding\";\r\n/**\r\n * 注入工厂，负责从给定的构造函数创建对象\r\n * 可以创建单例\r\n */\r\nexport class InjectFactory{\r\n    /**\r\n     * 根据绑定状态和指定的参数创建或获取实例对象\r\n     * @param binding 绑定状态\r\n     * @param args 参数\r\n     */\r\n    public get(binding:InjectBinding,args : any[]):object{\r\n        //检查绑定状态是否有效\r\n        if (binding == null){\r\n\t\t\tthrow new Error (\"InjectorFactory cannot act on null binding\");\r\n        }\r\n        //判断注入状态类型\r\n        let bindingType : InjectConst.BindingType = binding.bindingType;\r\n        //根据不同的类型创建\r\n        switch (bindingType)\r\n        {\r\n            case InjectConst.BindingType.SINGLETON:\r\n                return this.singletonOf (binding, args);\r\n                break;\r\n            case InjectConst.BindingType.VALUE:\r\n                return this.valueOf (binding);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return this.instanceOf (binding, args);\r\n    }\r\n    // 生成一个新的实例\r\n\tprotected instanceOf( binding : InjectBinding, args : any[]) : any\r\n\t{\r\n\t\tif (binding.value != null)\r\n\t\t{\r\n\t\t\treturn this.createFromValue(binding.value, args);\r\n\t\t}\r\n\t\tlet value : any = this.generateImplicit(binding.key, args);\r\n\t\treturn this.createFromValue(value, args);\r\n    }\r\n    // Call the Activator to attempt instantiation the given object\r\n\tprotected createFromValue(c : new(...args)=> any, args : any[]) : any\r\n\t{\r\n\t\tlet instance = null;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (args == null || args.length == 0)\r\n\t\t\t{\r\n\t\t\t\tinstance = new c();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinstance = new c(args);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch\r\n\t\t{\r\n\t\t\t//No-op\r\n        }\r\n        //if(instance)console.info(\"[实例化]\"+instance.constructor.name);\r\n\t\treturn instance;\r\n    }\r\n    protected generateImplicit(key : any, args:any[]):any\r\n    {\r\n        //如果无法直接转换键值为构造函数\r\n        if(!key)return null;\r\n        //检查键值是否为构造函数\r\n        if (Binding.isConstructor(key))\r\n        {\r\n            return this.createFromValue(key, args);\r\n        }\r\n        throw new Error (\"InjectorFactory can't instantiate an Interface or Abstract Class. Class: \" + key.ToString());\r\n    }\r\n    // Generate a Singleton instance\r\n\tprotected singletonOf(binding : InjectBinding, args : any[])\r\n\t{\r\n\t\tif (binding.value != null)\r\n\t\t{\r\n            let o = this.createFromValue (binding.value, args);\r\n            if (o == null)\r\n                return null;\r\n            binding.setValue(o);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbinding.setValue(this.generateImplicit(binding.key, args));\r\n\t\t}\r\n\t\treturn binding.value;\r\n    }\r\n    protected valueOf(binding : InjectBinding)\r\n    {\r\n        return binding.value;\r\n    }\r\n}","import { InjectFactory } from \"./InjectFactory\"\r\nimport { InjectBinder } from \"./InjectBinder\";\r\nimport { InjectBinding } from \"./InjectBinding\";\r\nimport { InjectConst} from \"./InjectConst\";\r\nimport { DecoratorClass } from \"../Decorator/DecoratorClass\";\r\nimport { DecoratorClassBinder } from \"../Decorator/DecoratorClassBinder\";\r\nimport { Binding } from \"../Bind/Binding\";\r\n\r\nexport class Injector{\r\n    public factory : InjectFactory;\r\n    public binder : InjectBinder;\r\n    public injectClassBinder : DecoratorClassBinder;\r\n\r\n    constructor(){\r\n        this.factory = new InjectFactory();\r\n    }\r\n    public uninject(target)\r\n    {\r\n        if(!this.binder||!target)throw new Error(\"Attempt to inject into Injector without a Binder or null instance\");\r\n        //排除一些不能被注入的类型\r\n        let type : any = typeof target;\r\n        if (type === \"string\" || type === \"boolean\"||type === \"number\" ||type === \"symbol\"||type === \"undefined\" || type === \"function\")\r\n        {\r\n            return target;\r\n        }\r\n        //获取注入类\r\n        let injectClass : DecoratorClass = this.injectClassBinder.get(target);\r\n        this.decoratorUnInject (target, injectClass);\r\n    }\r\n    private decoratorUnInject(target : any, injectClass : DecoratorClass){\r\n        let that = this;\r\n        //遍历注入类\r\n        injectClass.list.forEach((binding)=>{\r\n            //尝试获绑定状态\r\n            let injectBinding = that.binder.getBinding(binding.value,binding.name);\r\n            //不能注入一个未绑定的值\r\n            if(injectBinding){\r\n                //将注入值赋给目标对象\r\n                target[binding.property] = null;\r\n            }\r\n        })\r\n    }\r\n    //实例化对象\r\n    public instantiate(binding : InjectBinding,tryInjectHere : boolean) : object{\r\n        //检查是否具备注入条件\r\n        if(!this.binder||!this.factory)throw new Error(\"Attempt to instantiate from Injector without a Binder or inject into Injector without a Factory\");\r\n        //构造函数\r\n        let constructor = null;\r\n        //实例对象\r\n        let instance : object = null;\r\n        //检查绑定状态的值是否为构造函数\r\n        if (binding.isValueConstructor){\r\n            //传入构造函数\r\n            constructor = binding.value;\r\n        }else{\r\n            //直接赋值\r\n            instance = binding.value;\r\n        }\r\n        //如果没有设置注入值但是键值是一个构造函数\r\n        if(!constructor&&binding.isKeyConstructor){\r\n            //指定绑定状态的键值为构造函数\r\n            constructor = binding.key;\r\n        }\r\n        //如果没有直接赋值实例并且存在构造函数\r\n        if(!instance && constructor){\r\n            //参数\r\n            let args = binding.args;\r\n            instance = this.factory.get(binding, args);\r\n            //如果尝试在这里直接注入\r\n            if (tryInjectHere)\r\n            {\r\n                this.tryInject(binding, instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    public tryInject(binding : InjectBinding, target : any)\r\n    {\r\n        //如果工厂不能创建实例则这里直接返回\r\n        if (target != null)\r\n        {\r\n            if (binding.isInject)\r\n            {\r\n                target = this.inject(target, false);\r\n            }\r\n\r\n            if (binding.bindingType == InjectConst.BindingType.SINGLETON || binding.bindingType == InjectConst.BindingType.VALUE)\r\n            {\r\n                //prevent double-injection\r\n                binding.toInject(false);\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    //注入目标中所有被@Inject标记的属性\r\n    public inject(target : object, attemptConstructorInjection : boolean) : any\r\n    {\r\n        if(!this.binder||!target)throw new Error(\"Attempt to inject into Injector without a Binder or null instance\");\r\n        //排除一些不能被注入的类型\r\n        let type : any = typeof target;\r\n        if (type === \"string\" || type === \"boolean\"||type === \"number\" ||type === \"symbol\"||type === \"undefined\" || type === \"function\")\r\n        {\r\n            return target;\r\n        }\r\n        //因为TS中无法获得类型名称，所以使用目标的构造函数名称代替类型名称\r\n        //let typeName : string = target.constructor;\r\n        //获取注入类\r\n        let injectClass : DecoratorClass = this.injectClassBinder.get(target);\r\n        //是否允许使用构造器注入\r\n        if (attemptConstructorInjection)\r\n        {\r\n            //target = performConstructorInject(target, reflection);\r\n        }\r\n        this.decoratorInject(target,injectClass);\r\n        //performSetterInject(target, reflection);\r\n        //postInject(target, reflection);\r\n        return target;\r\n    }\r\n    /**\r\n     * 装饰器注入，使用注入类进行注入\r\n     */\r\n    private decoratorInject(target : any, injectClass : DecoratorClass){\r\n        let that = this;\r\n        //遍历注入类\r\n        injectClass.list.forEach((binding)=>{\r\n            //console.info(\"[装饰器注入]\"+binding.value + \"[别名]\"+binding.name);\r\n            //尝试获绑定状态\r\n            let injectBinding = that.binder.getBinding(binding.value,binding.name);\r\n            //不能注入一个未绑定的值\r\n            if(injectBinding){\r\n                let instance = that.getInjectValue(injectBinding.key,injectBinding.name);\r\n                //将注入值赋给目标对象\r\n                target[binding.property] = instance;\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * 获取需要注入的值，这个过程会递归调用\r\n     * @see 注意循环依赖会严重消耗性能\r\n     */\r\n    private getInjectValue(type,name):object{\r\n        //尝试获取绑定状态\r\n        let binding = this.binder.getBinding(type,name);\r\n        if(!binding)return null;\r\n        //if(binding.key.name)console.info(\"[获取注入值]\"+binding.key.name+\"[别名]\"+name+\"[绑定状态]\"+binding.bindingType + \",\"+binding.isInject);\r\n        //else console.info(\"[获取注入值]\"+binding.key+\"[别名]\"+name+\"[绑定状态]\"+binding.bindingType + \"[需要注入]\"+binding.isInject);\r\n        //如果是值类型绑定\r\n        if(binding.bindingType === InjectConst.BindingType.VALUE){\r\n            //如果需要注入\r\n            if(binding.isInject){\r\n                //if(Binding.isConstructor(binding.value))console.info(\"[对值(构造函数))]\"+binding.value.constructor.name + \"[进行注入]\");\r\n                //else console.info(\"[对值(对象)]\"+binding.value.__proto__.constructor + \"[进行注入]\");\r\n\r\n                let injv = this.inject (binding.value, false);\r\n                binding.toInject (false);\r\n\r\n                //if(binding.key.name)console.info(\"[绑定状态]\"+binding.key.name+\"[完成注入]\"+binding.isInject);\r\n                //else console.info(\"[绑定状态]\"+binding.key+\"[完成注入]\"+binding.isInject);\r\n\r\n                return injv;\r\n            }else{\r\n                return binding.value;\r\n            }\r\n        //如果是单例注入\r\n        }else if (binding.bindingType == InjectConst.BindingType.SINGLETON){\r\n            //如果绑定状态的值是一个构造函数\r\n            if (binding.isValueConstructor || binding.value == null)\r\n            {\r\n                this.instantiate (binding, true);\r\n            }\r\n            return binding.value;\r\n        }else{\r\n            return this.instantiate(binding,true);\r\n        }\r\n    }\r\n    /*     //构造器注入，未实现\r\n    private performConstructorInject(){\r\n\r\n    } */\r\n    /* //属性设置器注入，未实现\r\n    performSetterInject(){\r\n\r\n    } */\r\n    /*     //方法注入，未实现\r\n    postInject(){\r\n\r\n    } */\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport Animal from \"../view/Animal\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { TouchUtil, TouchDirection, TouchStatus } from \"../util/TouchUtil\";\r\nimport { InputModel } from \"../Model/InputModel\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport AudioManager from \"../util/AudioManager\";\r\n\r\n/**\r\n * 输入控制指令\r\n */\r\nexport class InputControlCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Model,ModelType.Input)\r\n    iMdl : InputModel;\r\n    @inject(cc.Node,\"Animals\")\r\n    animalsNode : cc.Node;\r\n    @inject(__IC_Util,UtilType.Touch)\r\n    tUtl : TouchUtil;\r\n    @inject(__IC_Manager,ManagerType.Audio)\r\n    aMgr : AudioManager;\r\n\r\n    execute(){\r\n        let that = this;\r\n        //注册一个使用全局区域的上划回调\r\n        this.tUtl.on(TouchDirection.Up,(status:TouchStatus)=>{\r\n            if(status.sPosX>=0){\r\n                that.areaOnMove(TouchDirection.Up);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Down);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Down,(status:TouchStatus)=>{\r\n            if(status.sPosX>=0){\r\n                that.areaOnMove(TouchDirection.Up);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Down);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Left,(status:TouchStatus)=>{\r\n            if(status.sPosY>=0){\r\n                that.areaOnMove(TouchDirection.Left);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Right);\r\n            }\r\n        });\r\n        this.tUtl.on(TouchDirection.Right,(status:TouchStatus)=>{\r\n            if(status.sPosY>=0){\r\n                that.areaOnMove(TouchDirection.Left);\r\n            }else{\r\n                that.areaOnMove(TouchDirection.Right);\r\n            }\r\n        });\r\n    }\r\n\r\n    areaOnMove(direction : TouchDirection) {\r\n        //如果暂停标志位为真并且不在准备状态则直接返回\r\n        if (this.mMdl.pauseFlag&&!this.mMdl.readyFlag) return;\r\n        if (direction === TouchDirection.Left || direction === TouchDirection.Right) {\r\n            this.rotateAnimals(0)\r\n        } else if (direction === TouchDirection.Up || direction === TouchDirection.Down) {\r\n            this.rotateAnimals(1)\r\n        }\r\n    }\r\n    //旋转动物\r\n    rotateAnimals(direction) {\r\n        //如果正处于旋转中，则将缓存下一步操作\r\n        if (this.mMdl.isRotationing) {\r\n            this.iMdl.waitingHandle = this.rotateAnimals(direction);\r\n            return;\r\n        }\r\n        //播放跳跃音效\r\n        this.aMgr.play(\"Jump\");\r\n        let that = this;\r\n        this.mMdl.isRotationing = true\r\n        const [x, y] = direction ? [1, -1] : [-1, 1]\r\n        const rotateAction = cc.scaleBy(this.mMdl.rotateDur, x, y)\r\n        this.iMdl.lastAction = this.animalsNode.runAction(cc.sequence(rotateAction, cc.callFunc(() => {\r\n            that.resetAnimalsNode(direction);\r\n            if(that.animalsNode.children&&this.animalsNode.children.length>0){\r\n                //遍历并旋转所有动物节点\r\n                that.animalsNode.children.forEach((animalNode, i) => animalNode.getComponent(Animal).rePositonAnimal(i))\r\n            }\r\n            that.mMdl.isRotationing = false;\r\n            //执行之前等待中的操作\r\n            if(this.iMdl.waitingHandle){\r\n                this.iMdl.waitingHandle();\r\n            }\r\n        })));\r\n    }\r\n\r\n    resetAnimalsNode(direction) {\r\n        const animalsNodeChildren = this.animalsNode.children;\r\n        if (!direction) {\r\n            this.switchIndex(animalsNodeChildren, 0, 1)\r\n            this.switchIndex(animalsNodeChildren, 3, 2)\r\n        } else {\r\n            this.switchIndex(animalsNodeChildren, 0, 3)\r\n            this.switchIndex(animalsNodeChildren, 1, 2)\r\n        }\r\n        this.animalsNode.setScale(1, 1)\r\n    }\r\n\r\n    switchIndex(list, one, two) {\r\n        const temp = list[two]\r\n        list[two] = list[one]\r\n        list[one] = temp\r\n    }\r\n}","import { Singleton } from \"../util/Singleton\";\r\nimport { IModel } from \"../util/Model\";\r\n\r\nexport class InputModel extends Singleton implements IModel{\r\n    //等待中的操作\r\n    public waitingHandle;\r\n    public lastAction : cc.Action;\r\n\r\n    onConstructor(){\r\n        this.lastAction = null;\r\n        this.waitingHandle = null;\r\n    }\r\n}","import {Context, IContext} from \"../framework/Context/Context\"\r\nimport {IocRoot} from \"./IocRoot\"\r\nconst {ccclass} = cc._decorator\r\n@ccclass\r\nexport class IocComponet extends cc.Component{\r\n\tpublic registeredWithContext : boolean;\r\n\tprivate _requiresContext : boolean= true;\r\n\tpublic get requiresContext() : boolean\r\n\t{\r\n\t\treturn this._requiresContext;\r\n\t}\r\n\tpublic set requiresContext(value){\r\n\t\tthis._requiresContext = value;\r\n\t}\r\n\tprotected _registerWithContext : boolean = true;\r\n\tpublic get autoRegisterWithContext()\r\n\t{\r\n\t\treturn this._registerWithContext; \r\n\t}\r\n\tpublic set autoRegisterWithContext(value){\r\n\t\tthis._registerWithContext = value;\r\n\t}\r\n\tpublic get shouldRegister() :boolean { return this.enabled && this.node.activeInHierarchy; }\r\n\r\n\t//载入阶段尝试注入数据\r\n    onLoad(){\r\n\t\tif (this.autoRegisterWithContext && !this.registeredWithContext && this.shouldRegister)\r\n\t\t\tthis.bubbleToContext(this,BubbleType.Add, false);\r\n\t}\r\n\t//启动阶段尝试注入数据\r\n\tstart(){\r\n\t\tif (this.autoRegisterWithContext && !this.registeredWithContext && this.shouldRegister)\r\n\t\t\tthis.bubbleToContext(this, BubbleType.Add, true);\r\n\t}\r\n\r\n    protected bubbleToContext(view : cc.Component,type: BubbleType,finalTry:boolean)\r\n\t{\r\n\t\t\tconst LOOP_MAX : number= 100;\r\n\t\t\tlet loopLimiter : number= 0;\r\n\t\t\tlet node = view.node;\r\n\t\t\twhile (node.parent != null && loopLimiter < LOOP_MAX)\r\n\t\t\t{\r\n\t\t\t\tloopLimiter++;\r\n\t\t\t\tnode = node.parent;\r\n\t\t\t\tif (node.getComponent(IocRoot) != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet iocContext : IocRoot = node.getComponent(IocRoot) as IocRoot;\r\n\t\t\t\t\tif (iocContext.context != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet context : IContext= iocContext.context;\r\n\t\t\t\t\t\tlet success : boolean= true;\r\n\r\n\t\t\t\t\t\tswitch (type)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase BubbleType.Add:\r\n\t\t\t\t\t\t\t\t//注入数据\r\n\t\t\t\t\t\t\t\tcontext.crossContextBinder.injector.inject(this,true);\r\n\t\t\t\t\t\t\t\t//context.addView(view);\r\n\t\t\t\t\t\t\t\tthis.registeredWithContext = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Remove:\r\n\t\t\t\t\t\t\t\t//context.removeView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Enable:\r\n\t\t\t\t\t\t\t\t//context.enableView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase BubbleType.Disable:\r\n\t\t\t\t\t\t\t\t//context.disableView(view);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tsuccess = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (success)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.requiresContext && finalTry && type == BubbleType.Add)\r\n\t\t\t{\r\n\t\t\t\t//last ditch. If there's a Context anywhere, we'll use it!\r\n\t\t\t\tif (Context.firstContext != null)\r\n\t\t\t\t{\r\n\t\t\t\t\t//Context.firstContext.addView(view);\r\n\t\t\t\t\tthis.registeredWithContext = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet msg : string;\r\n\t\t\t\tif(loopLimiter == LOOP_MAX){\r\n\t\t\t\t\tmsg = \"A view couldn't find a context. Loop limit reached.\"\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tmsg = \"A view was added with no context. Views must be added into the hierarchy of their ContextView lest all hell break loose.\";\r\n\t\t\t\t\tmsg += \"\\nView: \" + view.toString();\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(msg);\r\n\t\t\t}\r\n\t\t}\r\n}\r\n\r\nexport enum BubbleType\r\n{\r\n\tAdd,\r\n\tRemove,\r\n\tEnable,\r\n\tDisable\r\n}","export module IocError{\r\n    export const IC_ERROR = \"can't implement class that is only as interface\";\r\n}\r\nexport abstract class IConstructorName{\r\n    abstract get constructorName() : string;\r\n}","import {Context, IContext} from \"../framework/Context/Context\"\r\n\r\nconst {ccclass, property} = cc._decorator\r\n@ccclass\r\nexport class IocRoot extends cc.Component{\r\n    public context : IContext;\r\n\r\n    public requiresContext : boolean;\r\n\r\n    public registeredWithContext : boolean;\r\n\r\n    public autoRegisterWithContext : boolean;\r\n\r\n    public get shouldRegister() {return true;}\r\n\r\n    onDestroy(){\r\n        if (this.context != null && Context.firstContext != null)\r\n            Context.firstContext.removeCrossContext(this.context);\r\n    }\r\n}","import { IocComponet } from \"./IocComponet\";\r\nimport { inject } from \"../framework/Injector/InjectDecorator\";\r\nimport { __IC_SignalManager, ISignalManager } from \"../framework/Signal/SignalManager\";\r\n\r\nconst {ccclass} = cc._decorator\r\n@ccclass\r\nexport class IocView extends IocComponet{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n\r\n    onLoad(){\r\n        super.onLoad();\r\n    }\r\n    \r\n    start(){\r\n        super.start();\r\n    }\r\n\r\n}","import { IocComponet } from \"../../lib/extensions/IocComponet\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { __IC_SignalManager, ISignalManager } from \"../../lib/framework/Signal/SignalManager\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class LogicNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    onLoad(){\r\n        super.onLoad();\r\n        //注册节点\r\n        this.inj.bind(cc.Node).toName(\"LogicNode\").toValue(this.node).unBind();\r\n    }\r\n    start(){\r\n        super.start();\r\n    }\r\n    update(dt){\r\n        if(this.sMgr && !this.mMdl.pauseFlag){\r\n            this.sMgr.get(MainSignalEnum.Update).dispatch(dt);\r\n        }\r\n    }\r\n}","import Common from \"../../common\";\r\nimport WxGameApi from \"../WxGameApi\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    onLoad() {\r\n        //引入JS文件到TS环境\r\n        Common.WxGameApi = WxGameApi;\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        let videoName = \"video.mp4\";\r\n        let bgmName = \"bgm.mp3\";\r\n        let videoUrl = \"https://636f-common-510ecc-1257233686.tcb.qcloud.la/default_video.mp4\";\r\n        let bgmUrl = \"https://636f-common-510ecc-1257233686.tcb.qcloud.la/bgm.mp3\";\r\n        let getCachePromise = (url,name,complete) => {\r\n            return new Promise((resolve, reject) => {\r\n                WxGameApi.getOrCacheResFile(url, name, (resPath) => {\r\n                    complete(resPath);\r\n                    //传递结果给下一个异步过程\r\n                    resolve();\r\n                });\r\n            })\r\n        }\r\n        //缓存BGM\r\n        let p1 = getCachePromise(bgmUrl,bgmName,(resPath)=>{\r\n            WxGameApi.playBGM(resPath);\r\n        });\r\n        //缓存视频\r\n        let p2 = getCachePromise(videoUrl,videoName,(resPath)=>{\r\n            Common.viedo = resPath;\r\n        });\r\n        //启动异步的下载过程\r\n        let time = new Date().getSeconds();\r\n        let results = Promise.all([p1,p2]);\r\n        //获取结果\r\n        results.then(()=>{\r\n            let diff = new Date().getSeconds() - time;\r\n            console.info(\"[缓存完成]\" + diff + \"[秒]\");\r\n        });\r\n\r\n        console.info(\"[登入微信平台]\");\r\n        wx.login({\r\n            success(res) {\r\n                console.info(\"[登录成功]\" + res);\r\n            },\r\n            fail(res) {\r\n                console.info(\"[登录失败]\" + res);\r\n            }\r\n        });\r\n        //同步启动选项\r\n        this.launchOptionsSync();\r\n        this.preloadFriendInfo();\r\n        this.preloadGroupInfo();\r\n    },\r\n    preloadFriendInfo() {\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            //console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"preload\",\r\n                    arguments: \"friend\",\r\n                    data: \"\",\r\n                }\r\n            });\r\n        }\r\n    },\r\n    preloadGroupInfo() {\r\n        if (!Common.shareTickets || Common.shareTickets.length === 0) return;\r\n        wx.getOpenDataContext().postMessage({\r\n            message: {\r\n                type: \"command\",\r\n                function: \"preload\",\r\n                arguments: \"group\",\r\n                data: Common.shareTickets[0],\r\n            }\r\n        });\r\n    },\r\n    launchOptionsSync() {\r\n        if (!Common.shareTickets) Common.shareTickets = [];\r\n        let info = wx.getLaunchOptionsSync();\r\n        console.info(\"[同步启动选项]\" + info);\r\n        switch (info.scene) {\r\n            case 1044:\r\n                if (info.shareTicket) {\r\n                    Common.shareTickets.push(info.shareTicket);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n});","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IInjectBinder, __IC_InjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\n\r\n//引用注入装饰器\r\nexport class LookRankCommand extends Command{\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    execute(){\r\n        //console.info(\"[查看排行榜开始]\");\r\n        this.lookRank();\r\n    }\r\n\r\n    lookRank(){\r\n        this.inj.unbindAllMark();\r\n        //let a = Common.persistRootNode;\r\n        cc.director.loadScene('Rank')\r\n    }\r\n}","import {StartCommand} from \"../command/StartCommand\"\r\nimport { __IC_SignalManager, ISignalManager } from \"../../Lib/Framework/Signal/SignalManager\";\r\nimport {IContext,Context} from \"../../Lib/Framework/Context/Context\"\r\nimport { MainSignalManager } from \"../signal/MainSignalManager\"\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { UpdateCommand } from \"../command/UpdateCommand\";\r\nimport { GenerateCommand } from \"../command/GenerateCommand\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport { RestartCommand } from \"../command/RestartCommand\";\r\nimport { LookRankCommand } from \"../command/LookRankCommand\";\r\nimport { MatchCommand } from \"../command/MatchCommand\";\r\nimport PrefabManager from \"../util/PrefabManager\";\r\nimport { ManagerType, __IC_Manager } from \"../util/Manager\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { TouchUtil } from \"../util/TouchUtil\";\r\nimport { InputControlCommand } from \"../command/InputControlCommand\";\r\nimport { InputModel } from \"../Model/InputModel\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { AudioUtil } from \"../util/AudioUtil\";\r\nimport AudioManager from \"../util/AudioManager\";\r\nimport { BackHomeCommand } from \"../command/BackHomeCommand\";\r\n\r\nexport class MainContext extends Context{\r\n    constructor(root: any){\r\n        super(root);\r\n    }\r\n    //添加核心\r\n    addCore(){\r\n        super.addCore();\r\n        //注入信号管理器单例\r\n        this.injectBinder.bind(__IC_SignalManager).to(MainSignalManager).toSingleton();\r\n        //绑定数据\r\n        this.injectBinder.bind(__IC_Model).toValue(MainModel.Instance).toName(ModelType.Main);\r\n        this.injectBinder.bind(__IC_Model).toValue(InputModel.Instance).toName(ModelType.Input);\r\n        //绑定工具\r\n        this.injectBinder.bind(__IC_Util).toValue(MainUtil.Instance).toName(UtilType.Main);\r\n        this.injectBinder.bind(__IC_Util).toValue(TouchUtil.Instance).toName(UtilType.Touch);\r\n        this.injectBinder.bind(__IC_Util).toValue(AudioUtil.Instance).toName(UtilType.Audio);\r\n\r\n        //绑定管理器\r\n        this.injectBinder.bind(__IC_Manager).toValue(PrefabManager.Instance).toName(ManagerType.Prefab);\r\n        this.injectBinder.bind(__IC_Manager).toValue(AudioManager.Instance).toName(ManagerType.Audio);\r\n\r\n        //console.info(\"添加核心\");\r\n    }\r\n    //映射绑定\r\n    mapBindings(){\r\n        super.mapBindings();\r\n        //console.info(\"映射绑定\");\r\n        let signalMgr : ISignalManager= this.injectBinder.getInstance(__IC_SignalManager,null);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Start)).to(StartCommand);\r\n        //绑定更新信号到更新命令,并使用池进行缓存\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Update)).to(UpdateCommand).Pooled();\r\n        //生成游戏视图节点\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Generate)).to(GenerateCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Restart)).to(RestartCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.LookRank)).to(LookRankCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.Match)).to(MatchCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.InputControl)).to(InputControlCommand);\r\n\r\n        this.commandBinder.bind(signalMgr.get(MainSignalEnum.BackHome)).to(BackHomeCommand);\r\n\r\n    }\r\n    start() : IContext{\r\n        super.start();\r\n        //console.info(\"[启动环境]\");\r\n        return this;\r\n    } \r\n}\r\n","import {Singleton} from \"../util/Singleton\";\r\nimport {IModel} from \"../util/Model\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\n\r\n/**\r\n * 应该将需要生命周期较长的变量存储在数据模型里，然后在其他类中通过注入的方式获取数据模型\r\n */\r\nexport class MainModel extends Singleton implements IModel {\r\n    //食物对象池，减少创建对象的开销\r\n    public foodPool: PrefabPool = null;\r\n    //当前的食物节点列表\r\n    public currentFoodNodes = [];\r\n    //最后的食物索引\r\n    public lastFoodIndex = 0;\r\n    //最后的轨道\r\n    public lastTrack = 0;\r\n\r\n    public animalDatas = [{\r\n        image: 'animals/bird',\r\n        type: '0',\r\n        spriteFrame: null,\r\n    }, {\r\n        image: 'animals/bear',\r\n        type: '1',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'animals/rabbit',\r\n        type: '2',\r\n        spriteFrame: null,\r\n    }, {\r\n        image: 'animals/dog',\r\n        type: '3',\r\n        spriteFrame: null\r\n    }]\r\n    public foodDatas = [{\r\n        image: 'foods/food-bird',\r\n        type: '0',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'foods/food-bear',\r\n        type: '1',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'foods/food-rabbit',\r\n        type: '2',\r\n        spriteFrame: null\r\n    }, {\r\n        image: 'foods/food-dog',\r\n        type: '3',\r\n        spriteFrame: null\r\n    }]\r\n    public rotateDur = 0.1\r\n    public isRotationing = false\r\n    public animalTextureRect = {\r\n        width: 264,\r\n        height: 268\r\n    }\r\n    //暂停标记\r\n    public pauseFlag = true;\r\n    //准备状态标记\r\n    public readyFlag = false;\r\n    //游戏被隐藏\r\n    public isHide = false;\r\n    //是否已经观看过广告\r\n    public isLookVideo = false;\r\n\r\n    public score = 0;\r\n    public timer = 0;\r\n    public lastTimer = 0;\r\n    public timePeriod = 2.5;\r\n    public currentLevel = 0;\r\n\r\n\r\n    public initTimePeriod = 0;\r\n\r\n    public minTimePeriod = 0.6;\r\n\r\n    public lastScore = 0;\r\n    public maxScore = 0;\r\n\r\n    public harderRatios = (() => {\r\n        const list = []\r\n        for (let i = 0; i <= 20; i++) {\r\n            list[i] = [i * 200, 0.1]\r\n        }\r\n        return list\r\n    })();\r\n}","import {__IC_SignalManager,ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport {MainModel} from '../Model/MainModel';\r\nimport { inject } from '../../lib/framework/Injector/InjectDecorator';\r\nimport { IocView } from '../../lib/extensions/IocView';\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport Common from \"../Common\";\r\nimport { Helper } from \"../helper/Helper\";\r\n\r\nconst {ccclass,property} = cc._decorator\r\n\r\n@ccclass\r\nexport default class MainNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl: MainModel;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n        //注册节点\r\n        this.inj.bind(cc.Node).toName(\"MainNode\").toValue(this.node).unBind();\r\n        //执行开始信号\r\n        this.sMgr.get(MainSignalEnum.Start).dispatch();\r\n\r\n        Common.WxGameApi.onHide(()=>{\r\n            console.info(\"[隐藏状态]\");\r\n            this.mMdl.isHide = true;\r\n        });\r\n        Common.WxGameApi.onShow(()=>{\r\n            console.info(\"[显示状态]\" + Common.viedoHandle);\r\n            this.mMdl.isHide = false;\r\n            //继续播放被中断的视频\r\n            if(Common.viedoHandle){\r\n                //Helper.getAllInfo(Common.viedoHandle);\r\n                let status = Common.viedoHandle.emitter.event + \"\";\r\n                if(status === \"onVideoPause\"){\r\n                    console.info(\"[继续播放]\" + Common.viedoHandle.emitter.event);\r\n                    Common.viedoHandle.play();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    update(dt) {\r\n\r\n    }\r\n}","import {IRoot} from \"../../Lib/Framework/Context/IRoot\"\r\nimport {IContext} from \"../../Lib/Framework/Context/Context\"\r\nimport {IocRoot} from \"../../lib/extensions/IocRoot\"\r\nimport {MainContext} from \"./MainContext\"\r\nimport PersistRoot from \"../PersistRoot\";\r\nimport Common from \"../Common\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainRoot extends IocRoot implements IRoot {\r\n    //环境容器\r\n    public context: IContext;\r\n\r\n    onLoad () {\r\n        //let context = new MainContext(this);\r\n        this.context = Common.persistRootNode.context;\r\n        //this.context.restart();\r\n    }\r\n\r\n    start () {\r\n        if(this.context){\r\n            //console.info(this.context.getRoot().node.name);\r\n        }\r\n    }\r\n}\r\n\r\n","//主要的信号枚举类型,注意要确保不出现重复的字符串\r\nexport enum MainSignalEnum{\r\n    //开始命令\r\n    Start = \"Start\",\r\n    //更新命令\r\n    Update = \"Update\",\r\n    //生成视图节点命令\r\n    Generate = \"GenerateViewNodes\",\r\n    //重新开始\r\n    Restart = \"Restart\",\r\n    //查看排行榜\r\n    LookRank = \"LookRank\",\r\n    //记分逻辑\r\n    Match = \"Match\",\r\n    //输入控制\r\n    InputControl = \"InputControl\",\r\n    //返回主菜单\r\n    BackHome = \"BackHome\",\r\n}\r\n\r\nexport enum GameSignalEnum{\r\n    onMatch = \"OnMatch\",\r\n    onNotMatch = \"OnNotMatch\"\r\n}","import {SignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\n\r\nexport class MainSignalManager extends SignalManager{\r\n    info : string = \"this is a main signal manager\";\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\nexport class MainUtil extends Singleton implements IUtil{\r\n    public getSceneSize(){\r\n        return cc.winSize;\r\n    }\r\n    /**\r\n     * 异步转换资源文件为可渲染文件的对象\r\n     * @param resourceUrl 资源文件的地址\r\n     */\r\n    public spriteRes(resourceUrl) {\r\n        return new Promise<cc.SpriteFrame>((resolve, reject) => {\r\n            cc.loader.loadRes(resourceUrl, cc.SpriteFrame, (err, spriteFrame : cc.SpriteFrame) => {\r\n                if (err) throw err\r\n                resolve(spriteFrame);\r\n            })\r\n        })\r\n    }\r\n    \r\n    public randomCoin() {\r\n        return Math.round(Math.random())\r\n    }\r\n    \r\n    public randomNumber(size) {\r\n        return Math.floor(Math.random() * size)\r\n    }\r\n    \r\n    public randomValue(...values) {\r\n        return values[this.randomNumber(values.length)]\r\n    }\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Manager extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IManager\";\r\n    }\r\n}\r\nexport interface IManager{\r\n\r\n}\r\n/**\r\n * 管理器类型枚举\r\n */\r\nexport enum ManagerType{\r\n    Prefab = \"Prefab\",\r\n    Audio = \"Audio\",\r\n}","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport Common from \"../Common\";\r\nimport Food from \"../view/Food\";\r\nimport { GameSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport PauseNode from \"../view/PauseNode\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport AudioManager from \"../util/AudioManager\";\r\n\r\n//引用注入装饰器\r\nexport class MatchCommand extends Command{\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Manager,ManagerType.Audio)\r\n    aMgr : AudioManager;\r\n    @inject(cc.Node,\"Score\")\r\n    scoreNode : cc.Node;\r\n    @inject(cc.Node,\"Pause\")\r\n    pauseNode : cc.Node;\r\n\r\n    execute(match){\r\n        //console.info(\"[游戏判断]\");\r\n        switch(match){\r\n            case GameSignalEnum.onMatch:\r\n                this.onMatch();\r\n                break;\r\n            case GameSignalEnum.onNotMatch:\r\n                this.onNotMatch();\r\n                break;\r\n        }\r\n    }\r\n    //增加分数\r\n    gainPoint() {\r\n        this.aMgr.play(\"Score\");\r\n        this.mMdl.score +=100;\r\n        this.scoreNode.getComponent(cc.Label).string = 'Score: ' + Number(this.mMdl.score)\r\n    }\r\n    onMatch() {\r\n        this.gainPoint()\r\n    }\r\n\r\n    onNotMatch() {\r\n        this.mMdl.lastScore = this.mMdl.score;\r\n        //游戏结束时存储分数\r\n        Common.WxGameApi.saveScore(this.mMdl.lastScore);\r\n        this.mMdl.pauseFlag = true\r\n        this.pauseNode.active = true\r\n        this.pauseNode.getComponent(PauseNode).show();\r\n        this.pauseNode.getComponent(PauseNode).updateScore(this.mMdl.score);\r\n        this.stopAllCurrent();\r\n    }\r\n\r\n    stopAllCurrent() {\r\n        //console.info(\"[停止当前游戏进程]\");\r\n        //let a = Common.persistRootNode;\r\n        if(this.mMdl.currentFoodNodes&&this.mMdl.currentFoodNodes.length>0){\r\n            this.mMdl.currentFoodNodes.forEach(foodNode => {\r\n                foodNode.getComponent(Food).inited = false\r\n            })\r\n        }\r\n    }\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Model extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IModel\"\r\n    }\r\n}\r\nexport interface IModel{\r\n\r\n}\r\n/**\r\n * 数据模型类型枚举\r\n */\r\nexport enum ModelType{\r\n    Main = \"Main\",\r\n    Input = \"Input\",\r\n}","import { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { IocView } from \"../../lib/extensions/IocView\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PauseNode extends IocView {\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl:MainModel\r\n    @property(cc.Label)\r\n    score:cc.Label = null;\r\n    @property(cc.Sprite)\r\n    mainButton:cc.Sprite = null;\r\n    @property(cc.Label)\r\n    mainTop:cc.Label = null;\r\n    @property(cc.Label)\r\n    mainBotton:cc.Label = null;\r\n    @property(cc.SpriteFrame)\r\n    playVideo : cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    replayFrame : cc.SpriteFrame = null;\r\n\r\n    onLoad () {\r\n        super.onLoad();\r\n    }\r\n\r\n    start () {\r\n        super.start();\r\n    }\r\n    show(){\r\n        //如果已经观看过广告了\r\n        if(this.mMdl.isLookVideo){\r\n            console.info(\"[无法复活]\");\r\n            this.mainButton.spriteFrame = this.replayFrame;\r\n            this.mainTop.string = \"再接再厉\";\r\n            this.mainBotton.string = \"重新开始\";\r\n        }else{\r\n            console.info(\"[可以复活]\");\r\n            this.mainButton.spriteFrame = this.playVideo;\r\n            this.mainTop.string = \"观看广告\";\r\n            this.mainBotton.string = \"满血复活\";\r\n        }\r\n    }\r\n    updateScore(value){\r\n        this.score.string = value;\r\n    } \r\n    //重新开始按钮被点击时\r\n    onRestartClicked(){\r\n        console.info(\"[观看过广告]\"+this.mMdl.isLookVideo);\r\n        if(this.mMdl.isLookVideo){\r\n            this.sMgr.get(MainSignalEnum.Restart).dispatch(false);\r\n        }\r\n        else{\r\n            //发布重新开始信号并且播放视频\r\n            this.sMgr.get(MainSignalEnum.Restart).dispatch(true);\r\n        }\r\n    }\r\n    //排行榜按钮被点击时\r\n    onLookRankClicked(){\r\n        this.sMgr.get(MainSignalEnum.LookRank).dispatch();\r\n    }\r\n    onBackHomeClicked(){\r\n        this.sMgr.get(MainSignalEnum.BackHome).dispatch();\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import Common from \"./Common\";\r\nimport PrefabManager from \"./util/PrefabManager\";\r\nimport { IRoot } from \"../lib/framework/Context/IRoot\";\r\nimport { MainContext } from \"./context/MainContext\";\r\nimport AudioManager from \"./util/AudioManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PersistRoot extends cc.Component implements IRoot {\r\n    public context;\r\n\r\n    @property([cc.Prefab])\r\n    prefabs: Array<cc.Prefab> = [];\r\n    @property([cc.AudioClip])\r\n    clips: Array<cc.AudioClip> = [];\r\n    @property([cc.AudioSource])\r\n    audios: Array<cc.AudioSource> = [];\r\n    @property(cc.AudioSource)\r\n    bgm:cc.AudioSource = null;\r\n\r\n\r\n    onLoad () {\r\n        //防止重复执行初始化\r\n        if(Common.isInit)return;\r\n        Common.isInit = true;\r\n        console.info(\"[当前版本]\"+Common.version);\r\n        //配置为常驻节点\r\n        if(!Common.persistRootNode){\r\n            cc.game.addPersistRootNode(this.node);\r\n            Common.persistRootNode = this;\r\n        }\r\n        this.context = new MainContext(this)\r\n        this.loadPrefab();\r\n        this.loadAudio();\r\n    }\r\n    loadPrefab(){\r\n        this.prefabs.forEach(prefab => {\r\n            PrefabManager.Instance.setPrefab(prefab.name,prefab);\r\n        });\r\n    }\r\n    loadAudio(){\r\n        this.clips.forEach(audio=>{\r\n            AudioManager.Instance.setAudio(audio.name,audio);\r\n        });\r\n        AudioManager.Instance.bgm = this.bgm;\r\n        AudioManager.Instance.audios = this.audios;\r\n        AudioManager.Instance.playBgm();\r\n\r\n    }\r\n    start () {\r\n\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import {Stack} from \"./Stack\"\r\nimport { IConstructorName } from \"../framework/IocConst\";\r\nimport {inject} from \"../framework/Injector/InjectDecorator\";\r\nimport {Prototype} from \"./Prototype\"\r\n\r\nexport enum PoolOverflowBehavior\r\n{\r\n    /// Requesting more than the fixed size will throw an exception.\r\n    EXCEPTION,\r\n    \r\n    /// Requesting more than the fixed size will throw a warning.\r\n    WARNING,\r\n\r\n    /// Requesting more than the fixed size will return null and not throw an error.\r\n    IGNORE\r\n}\r\nexport enum BindingConstraintType\r\n{\r\n    /// Constrains a SemiBinding to carry no more than one item in its Value\r\n    ONE,\r\n    /// Constrains a SemiBinding to carry a list of items in its Value\r\n    MANY,\r\n    /// Instructs the Binding to apply a Pool instead of a SemiBinding\r\n    POOL,\r\n}\r\nexport enum PoolInflationType\r\n{\r\n    /// When a dynamic pool inflates, add one to the pool.\r\n    INCREMENT,\r\n\r\n    /// When a dynamic pool inflates, double the size of the pool\r\n    DOUBLE\r\n}\r\nexport interface IPoolable\r\n{\r\n    /// <summary>\r\n    /// Clean up this instance for reuse.\r\n    /// </summary>\r\n    /// Restore methods should clean up the instance sufficiently to remove prior state.\r\n    restore ();\r\n\r\n    /// <summary>\r\n    /// Keep this instance from being returned to the pool \r\n    /// </summary>\r\n    retain ();\r\n\r\n    /// <summary>\r\n    /// Release this instance back to the pool.\r\n    /// </summary>\r\n    /// Release methods should clean up the instance sufficiently to remove prior state.\r\n    release();\r\n\r\n    /// <summary>\r\n    /// Is this instance retained?\r\n    /// </summary>\r\n    /// <value><c>true</c> if retained; otherwise, <c>false</c>.</value>\r\n    isRetain : boolean;\r\n}\r\nexport interface IInstanceProvider{\r\n    /// Retrieve an Instance based on the key.\r\n    /// ex. `injectionBinder.Get<cISomeInterface>();`\r\n    //getInstance<T>() : T;\r\n\r\n    /// Retrieve an Instance based on the key.\r\n    /// ex. `injectionBinder.Get(typeof(ISomeInterface));`\r\n    getInstance(key : object) : object;\r\n}\r\nexport class __IC_InstanceProvider extends IConstructorName{\r\n    //getInstance<T>() : T{return;} \r\n    get constructorName(){return \"IInstanceProvider\";}\r\n}\r\nexport interface IManagedList\r\n{\r\n    /// Add a value to this List. \r\n    add( value : object) : IManagedList;\r\n\r\n    /// Add a set of values to this List. \r\n    add( list : object[]) : IManagedList;\r\n\r\n    /// Remove a value from this List. \r\n    remove( value : object) : IManagedList;\r\n\r\n    /// Remove a set of values from this List. \r\n    remove( list : object[]) : IManagedList;\r\n\r\n    /// Retrieve the value of this List.\r\n    /// If the constraint is MANY, the value will be an Array.\r\n    /// If the constraint is POOL, this becomes a synonym for GetInstance().\r\n    value : object;\r\n}\r\nexport interface IPool extends IManagedList\r\n{\r\n    /// A class that provides instances to the pool when it needs them.\r\n    /// This can be the InjectionBinder, or any class you write that satisfies the IInstanceProvider\r\n    /// interface.\r\n    instanceProvider : IInstanceProvider;\r\n\r\n    /// The object Type of the first object added to the pool.\r\n    /// Pool objects must be of the same concrete type. This property enforces that requirement. \r\n    poolType : object;\r\n    /// <summary>\r\n    /// Gets an instance from the pool if one is available.\r\n    /// </summary>\r\n    /// <returns>The instance.</returns>\r\n    getInstance() : object;\r\n\r\n    /// <summary>\r\n    /// Returns an instance to the pool.\r\n    /// </summary>\r\n    /// If the instance being released implements IPoolable, the Release() method will be called.\r\n    /// <param name=\"value\">The instance to be return to the pool.</param>\r\n    returnInstance (value : object);\r\n\r\n    /// <summary>\r\n    /// Remove all instance references from the Pool.\r\n    /// </summary>\r\n    clean ();\r\n\r\n    /// <summary>\r\n    /// Returns the count of non-committed instances\r\n    /// </summary>\r\n    available : number;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the size of the pool.\r\n    /// </summary>\r\n    /// <value>The pool size. '0' is a special value indicating infinite size. Infinite pools expand as necessary to accomodate requirement.</value>\r\n    size : number;\r\n\r\n    /// <summary>\r\n    /// Returns the total number of instances currently managed by this pool.\r\n    /// </summary>\r\n    instanceCount : number;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the overflow behavior of this pool.\r\n    /// </summary>\r\n    /// <value>A PoolOverflowBehavior value.</value>\r\n    overflowBehavior : PoolOverflowBehavior;\r\n\r\n    /// <summary>\r\n    /// Gets or sets the type of inflation for infinite-sized pools.\r\n    /// </summary>\r\n    /// By default, a pool doubles its InstanceCount.\r\n    /// <value>A PoolInflationType value.</value>\r\n    inflationType : PoolInflationType;\r\n}\r\nexport class Pool implements IPool, IPoolable\r\n{\r\n\r\n    @inject(__IC_InstanceProvider)\r\n    public instanceProvider : IInstanceProvider\r\n\r\n    /// Stack of instances still in the Pool.\r\n    protected instancesAvailable : Stack<any> = new Stack<any> ();\r\n\r\n    /// A HashSet of the objects checked out of the Pool.\r\n    protected instancesInUse :Set<object>= new Set<object> ();\r\n\r\n    protected _instanceCount : number;\r\n\r\n    public size : number;\r\n\r\n    public overflowBehavior : PoolOverflowBehavior;\r\n\r\n    public inflationType : PoolInflationType;\r\n\r\n    public uniqueValues : boolean;\r\n\r\n    public constraint : any;\r\n\r\n    public poolType : object;\r\n    \r\n    public isRetain : boolean;\r\n\r\n    public Pool ()\r\n    {\r\n        this.size = 0;\r\n        this.constraint = BindingConstraintType.POOL;\r\n        this.uniqueValues = true;\r\n        \r\n        this.overflowBehavior = PoolOverflowBehavior.EXCEPTION;\r\n        this.inflationType = PoolInflationType.DOUBLE;\r\n    }\r\n    public bind(type){\r\n        this.poolType = type;\r\n    }\r\n\r\n    public add ( value : object) : IManagedList\r\n    {\r\n        //检查对象原型是否相同\r\n        this.failIf(!Prototype.isProtetype(value,this.poolType) , \" Pool Type mismatch. Pools must consist of a common concrete type.\\n\\t\\tPool type: \" + this.poolType + \"\\n\\t\\tMismatch type: \" + value);\r\n        this._instanceCount++;\r\n        this.instancesAvailable.push (value);\r\n        return this;\r\n    }\r\n    public addList (list : object[]) : IManagedList\r\n    {\r\n        if(list&&list.length>0){\r\n            list.forEach((item : object)=>{\r\n                this.add (item);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    public remove (value : object) : IManagedList\r\n    {\r\n        this._instanceCount--;\r\n        this.removeInstance (value);\r\n        return this;\r\n    }\r\n\r\n    public removeList (list : object[]) : IManagedList\r\n    {\r\n        if(list&&list.length>0){\r\n            list.forEach((item : object)=>{\r\n                this.remove(item);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public get value() : object\r\n    {\r\n        return this.getInstance ();\r\n    }\r\n\r\n    /// The object Type of the first object added to the pool.\r\n    /// Pool objects must be of the same concrete type. This property enforces that requirement. \r\n\r\n    public get instanceCount() : number\r\n    {\r\n        return this._instanceCount;\r\n    }\r\n\r\n    public getInstance () : object\r\n    {\r\n        // Is an instance available?\r\n        if (this.instancesAvailable.size > 0)\r\n        {\r\n            let retv : object = this.instancesAvailable.pop ();\r\n            this.instancesInUse.add (retv);\r\n            return retv;\r\n        }\r\n\r\n        let instancesToCreate : number = 0;\r\n\r\n        //New fixed-size pool. Populate.\r\n        if (this.size > 0)\r\n        {\r\n            if (this.instanceCount == 0)\r\n            {\r\n                //New pool. Add instances.\r\n                instancesToCreate = this.size;\r\n            }\r\n            else\r\n            {\r\n                //Illegal overflow. Report and return null\r\n                this.failIf (this.overflowBehavior == PoolOverflowBehavior.EXCEPTION,\r\n                    \"A pool has overflowed its limit.\\n\\t\\tPool type: \" + this.poolType);\r\n\r\n                if (this.overflowBehavior == PoolOverflowBehavior.WARNING)\r\n                {\r\n                    console.warn (\"WARNING: A pool has overflowed its limit.\\n\\t\\tPool type: \" + this.poolType);\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //Zero-sized pools will expand.\r\n            if (this.instanceCount == 0 || this.inflationType == PoolInflationType.INCREMENT)\r\n            {\r\n                instancesToCreate = 1;\r\n            }\r\n            else\r\n            {\r\n                instancesToCreate = this.instanceCount;\r\n            }\r\n        }\r\n\r\n        if (instancesToCreate > 0)\r\n        {\r\n            this.failIf (this.instanceProvider == null, \"A Pool of type: \" + this.poolType + \" has no instance provider.\");\r\n\r\n            for (let a = 0; a < instancesToCreate; a++)\r\n            {\r\n                let newInstance : object= this.instanceProvider.getInstance (this.poolType);\r\n                this.add (newInstance);\r\n            }\r\n            return this.getInstance ();\r\n        }\r\n\r\n        //If not, return null\r\n        return null;\r\n    }\r\n\r\n    public returnInstance ( value : object)\r\n    {\r\n        if (this.instancesInUse.has (value))\r\n        {\r\n            /* if (value extends IPoolable)\r\n            {\r\n                (value as IPoolable).Restore ();\r\n            } */\r\n            (value as IPoolable).restore ();\r\n            this.instancesInUse.delete (value);\r\n            this.instancesAvailable.push (value);\r\n        }\r\n    }\r\n\r\n    public clean()\r\n    {\r\n        this.instancesAvailable.clear();\r\n        this.instancesInUse = new Set<object> ();\r\n        this._instanceCount = 0;\r\n    }\r\n\r\n    public get available() : number\r\n    {\r\n        return this.instancesAvailable.size;\r\n\r\n    }\r\n\r\n    public restore ()\r\n    {\r\n        this.clean ();\r\n        this.size = 0;\r\n    }\r\n\r\n    public retain()\r\n    {\r\n        this.isRetain = true;\r\n    }\r\n\r\n    public release()\r\n    {\r\n        this.isRetain = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Permanently removes an instance from the Pool\r\n    /// </summary>\r\n    /// In the event that the removed Instance is in use, it is removed from instancesInUse.\r\n    /// Otherwise, it is presumed inactive, and the next available object is popped from\r\n    /// instancesAvailable.\r\n    /// <param name=\"value\">An instance to remove permanently from the Pool.</param>\r\n    protected removeInstance(value : object)\r\n    {\r\n        this.failIf (value != this.poolType, \"Attempt to remove a instance from a pool that is of the wrong Type:\\n\\t\\tPool type: \" + this.poolType.toString() + \"\\n\\t\\tInstance type: \" + value.toString());\r\n        if (this.instancesInUse.has(value))\r\n        {\r\n            this.instancesInUse.delete (value);\r\n        }\r\n        else\r\n        {\r\n            this.instancesAvailable.pop ();\r\n        }\r\n    }\r\n\r\n    protected failIf(condition : boolean, message : string)\r\n    {\r\n        if (condition)\r\n        {\r\n            throw new Error(message);\r\n        }\r\n    }\r\n}","import { Singleton } from \"./Singleton\";\r\nimport { IManager } from \"./Manager\";\r\n\r\nexport default class PrefabManager extends Singleton implements IManager{\r\n    public isInit = false;\r\n    private prefabMap : Map<any,any>\r\n\r\n    protected onConstructor(){\r\n        this.prefabMap = new Map();\r\n    }\r\n    hasPrefab(key):boolean{\r\n        return this.prefabMap.has(key);\r\n    }\r\n    getPrefab(key):cc.Prefab{\r\n        return this.prefabMap.get(key);\r\n    }\r\n    setPrefab(key,value){\r\n        this.prefabMap.set(key,value);\r\n    }\r\n\r\n}","/**\n * 简单的对象池\n */\nexport default class PrefabPool {\n\ttype;\n\tprefab;\n\tnodePool : cc.NodePool;\n\n\tconstructor(type, prefab) {\n\t\tthis.type = type\n\t\tthis.prefab = prefab\n\t\tthis.nodePool = new cc.NodePool(type)\n\t}\n\t/**\n\t * 获取节点\n\t */\n\tget() {\n\t\tlet node : cc.Node= null\n\t    if (this.nodePool.size() > 0) {\n\t        node = this.nodePool.get()\n\t    } else {\n\t        node = cc.instantiate(this.prefab)\n\t\t}\n\t\tnode.active = true;\n\t    return node\n\t}\n\t/**\n\t * 回收节点\n\t * @param node \n\t */\n\tres(node : cc.Node) {\n\t\tnode.active = false;\n\t\tthis.nodePool.put(node)\n\t}\n\n}","/**\r\n * 原型缓存字典，用于检测一个对象的基类\r\n */\r\nexport class Prototype {\r\n    //继承映射表\r\n    private static prototypeMap = new Map<Object,Set<Object>>();\r\n    /**\r\n     * 基类检测函数\r\n     * @param instance 实例\r\n     * @param prototype 基类\r\n     */\r\n    public static isProtetype(type, prototype): boolean {\r\n        //let b = type instanceof prototype;\r\n        return type instanceof prototype;\r\n/*         if(!(type instanceof Object))return false;\r\n        let constructor = type.constructor;\r\n        if(this.prototypeMap.has(constructor)){\r\n            let sett = this.prototypeMap.get(constructor);\r\n            if(sett.has(prototype)){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return false; */\r\n    }\r\n    /**\r\n     * 获取继承列表\r\n     * @param instance 实例\r\n     */\r\n    public static getPrototypeList(target) {\r\n        let that = this;\r\n        if(!this.hasPrototypeList(target)){\r\n            let extendsList;\r\n            //获取继承列表\r\n            extendsList = [];\r\n            //用构造函数代替类型来使用\r\n            let types = [];\r\n            //types.push(target.constructor);\r\n            //继承类型\r\n            let prototype = target.__proto__;\r\n            //构造函数\r\n            let constructor;\r\n            while (true) {\r\n                //如果继承存在\r\n                if (prototype) {\r\n                    //因为压缩代码会把所有对象的名称都压缩掉，所以这里使用构造函数作为键值\r\n                    constructor = prototype.constructor;\r\n                    //搜索到基类一层\r\n                    if (constructor === Object) break;\r\n                    //排除以__IC__开头模拟接口的临时替代类型\r\n                    if (!constructor.name.startsWith(\"__IC_\")) {\r\n                        extendsList.push(constructor);\r\n                        types.push(constructor);\r\n                        //为每一个类都添加继承关系\r\n                        types.forEach(type => {\r\n                            that.AddPrototype(type,constructor);\r\n                        });\r\n                    }\r\n                    prototype = prototype.__proto__;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }            \r\n        let values = this.prototypeMap.get(target.constructor);\r\n        return Array.from(values);\r\n    }\r\n    /**\r\n     * 添加继承关系\r\n     */\r\n    public static AddPrototype(tpye,prototype){\r\n        let extendSet : Set<Object>;\r\n        if(this.prototypeMap.has(tpye)){\r\n            extendSet = this.prototypeMap.get(tpye);\r\n        }else{\r\n            extendSet = new Set();\r\n            this.prototypeMap.set(tpye,extendSet);\r\n        }\r\n        //为继承队列加入新的继承\r\n        extendSet.add(prototype);\r\n    }\r\n    /**\r\n     * 是否存在继承列表\r\n     * @param instance 实例\r\n     */\r\n    public static hasPrototypeList(target) {\r\n        if(this.prototypeMap.has(target.constructor)){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}","import Common from \"../../common\";\r\nimport WxGameApi from \"../WxGameApi\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        subContextView: cc.Node,\r\n        tipsUiNode: cc.Node\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        let that = this;\r\n        this.rankType = 0;\r\n        this.shareCount = 0;\r\n        //设置转发选项\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            wx.updateShareMenu({\r\n                withShareTicket: true,\r\n                success() {\r\n                    //console.info(\"设置转发选项成功\");\r\n                },\r\n                fail() {\r\n                    //console.info(\"设置转发选项失败\");\r\n                }\r\n            })\r\n        }\r\n        //this.subContextView.enabled = false;\r\n        //console.info(\"[初始化功能]\");\r\n    },\r\n\r\n    start() {\r\n        //console.info(\"[主域进入排行榜界面]\");\r\n        //发送启动消息告知开发数据容器\r\n        if (WxGameApi.isRunInWeiXin) {\r\n            //console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"start\",\r\n                    arguments: \"default\",\r\n                    data: {\r\n                        width: this.subContextView.width,\r\n                        height: this.subContextView.height\r\n                    },\r\n                }\r\n            });\r\n        }\r\n    },\r\n    //切换排行榜\r\n    switchRank(event) {\r\n        //获取切换按钮\r\n        let switchBtn = event.target;\r\n        let switchBar = event.target.getChildByName(\"Switch\");\r\n        let moveRange = switchBtn.width - switchBar.width - 10;\r\n        let that = this;\r\n        //循环切换排行榜类型\r\n        if (this.rankType < 1) {\r\n            this.rankType += 1;\r\n        } else {\r\n            this.rankType = 0;\r\n        }\r\n        switch (this.rankType) {\r\n            case 0:\r\n                switchBar.runAction(cc.moveBy(0.125, cc.v2(-moveRange, 0)));\r\n                if (WxGameApi.isRunInWeiXin) {\r\n                    that.hideShowTipsUi();\r\n                    //console.info(\"[显示好友排行]\");\r\n                    //切换到显示好友排行\r\n                    wx.getOpenDataContext().postMessage({\r\n                        message: {\r\n                            type: \"command\",\r\n                            function: \"switch\",\r\n                            arguments: \"friend\",\r\n                            data: \"\",\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            case 1:\r\n                switchBar.runAction(cc.moveBy(0.125, cc.v2(moveRange, 0)));\r\n                if (WxGameApi.isRunInWeiXin) {\r\n                    let ticket;\r\n                    if (Common.shareTickets && Common.shareTickets.length > 0) {\r\n                        ticket = Common.shareTickets[this.shareCount];\r\n                        if (!ticket) {\r\n                            //console.info(\"[意外的识别码缺失]\" + Common.shareTickets +\",\"+ this.shareCount);\r\n                            Common.shareTickets = [];\r\n                            this.shareCount = 0;\r\n                        } else {\r\n                            //循环切换群信息，索引是从0开始计算的，所以这里需要减一\r\n                            if (this.shareCount >= (Common.shareTickets.length - 1)) {\r\n                                this.shareCount = 0;\r\n                            } else {\r\n                                this.shareCount += 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.info(\"[未找到群信息]\");\r\n                        this.showTipsUi(\"无法显示群排行榜\", \"请先分享到群再查看\");\r\n                    }\r\n                    //验证群信息是否有效\r\n                    if(ticket&&ticket!=\"\"){\r\n                        wx.getShareInfo({\r\n                            shareTicket : ticket,\r\n                            success(res){\r\n                                //console.info(\"[有效的群信息]\" + ticket + \",\" + res);\r\n                            },\r\n                            fail(err){\r\n                                //console.info(\"[无效的群信息]\" + ticket + \",\" + err);\r\n                            }\r\n                        })\r\n                    }else{\r\n                        ticket = \"\";\r\n                    }\r\n                    //console.info(\"[显示群信息]\" + Common.shareTickets.length);\r\n                    //切换到显示群排行\r\n                    wx.getOpenDataContext().postMessage({\r\n                        message: {\r\n                            type: \"command\",\r\n                            function: \"switch\",\r\n                            arguments: \"group\",\r\n                            data: ticket,\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        //console.info(\"[切换排行榜]\" + this.rankType);\r\n    },\r\n\r\n    backhome() {\r\n        cc.director.loadScene(\"Begin\");\r\n        //清理排行榜\r\n/*         if (WxGameApi.isRunInWeiXin) {\r\n            //console.info(\"[启动排行榜]\" + this.subContextView.width + \",\" + this.subContextView.height);\r\n            wx.getOpenDataContext().postMessage({\r\n                message: {\r\n                    type: \"command\",\r\n                    function: \"clear\",\r\n                    arguments: \"\",\r\n                    data: \"\",\r\n                }\r\n            });\r\n        } */\r\n    },\r\n\r\n    shareApp() {\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        let url = \"https://636f-common-510ecc-1257233686.tcb.qcloud.la/share_rabbit.png?sign=9875d25b3df98df73fbaf7ae9dcdb860&t=1538207291\";\r\n        let that = this;\r\n        wx.shareAppMessage({\r\n            title: \"一起来玩游戏吧！\",\r\n            imageUrl: url,\r\n            success(res) {\r\n                //console.info(\"[转发成功]\" + res.shareTickets);\r\n                //没有获取到群消息\r\n                if (!res.shareTickets || res.shareTickets === \"\") {\r\n                    //console.info(\"[转发到个人用户]\");\r\n                    if(that.rankType === 1){\r\n                        that.showTipsUi(\"无法显示群排行榜\", \"检测到转发到个人或者无效的群\");\r\n                    }\r\n                } else {\r\n                    that.hideShowTipsUi();\r\n                    //console.info(\"[转发到微信群]\" + res.shareTickets);\r\n                    //如果存在群组信息\r\n                    if (res.shareTickets.length > 0) {\r\n                        let isExist = false;\r\n                        //保存群组信息\r\n                        for (let i = 0; i < res.shareTickets.length; i++) {\r\n                            for (let j = 0; j < Common.shareTickets.length; j++) {\r\n                                //检查是否存在重复的群识别号\r\n                                if (res.shareTickets[i] === Common.shareTickets[j]) {\r\n                                    isExist = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!isExist) {\r\n                                //console.info(\"[存储群识别码]\" + res.shareTickets[i]);\r\n                                Common.shareTickets.push(res.shareTickets[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    //保持在群组页面时\r\n                    if(that.rankType === 1){\r\n                        //立刻刷新页面\r\n                        wx.getOpenDataContext().postMessage({\r\n                            message: {\r\n                                type: \"command\",\r\n                                function: \"switch\",\r\n                                arguments: \"group\",\r\n                                data: res.shareTickets,\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            fail(res) {\r\n                //console.info(\"[转发失败]\");\r\n            }\r\n        });\r\n\r\n    },\r\n    //显示提示框\r\n    showTipsUi(title, content) {\r\n        if(!this.tipsUiNode)return;\r\n        let tipsUiView = this.tipsUiNode.getComponent(\"TipsUiView\");\r\n        if (!this.tipsUiNode.active) {\r\n            this.tipsUiNode.active = true;\r\n        }\r\n        if (tipsUiView) {\r\n            tipsUiView.display(title, content);\r\n        } else {\r\n            //console.info(\"[提示UI不存在]\");\r\n        }\r\n    },\r\n    hideShowTipsUi(){\r\n        if(!this.tipsUiNode)return;\r\n        if (this.tipsUiNode.active) {\r\n            this.tipsUiNode.active = false;\r\n        }\r\n    }\r\n});","import { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport Common from \"../Common\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport PrefabManager from \"../util/PrefabManager\";\r\nimport CountDownView from \"../view/CountDownView\";\r\n\r\n//引用注入装饰器\r\nexport class RestartCommand extends Command{\r\n    @inject(cc.Node,\"Pause\")\r\n    pauseNode : cc.Node;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl : MainUtil;\r\n    @inject(cc.Node,\"Score\")\r\n    scoreNode : cc.Node;\r\n    @inject(__IC_Manager,ManagerType.Prefab)\r\n    preMgr : PrefabManager;\r\n    @inject(cc.Node,\"MainNode\")\r\n    mainNode : cc.Node;\r\n\r\n    execute(isPlayVideo){\r\n        //console.info(\"[重新开始]\");\r\n        this.revive();\r\n        //是否需要播放广告\r\n        if(isPlayVideo){\r\n            this.playVideo();\r\n        }else{\r\n            console.info(\"[不播放广告]\");\r\n            this.restart(true);\r\n        }\r\n    }\r\n    playVideo(){\r\n        //是否已经看过广告\r\n        if(!this.mMdl.isLookVideo){\r\n            this.mMdl.isLookVideo = true;\r\n        }\r\n        //是否为微信环境\r\n        if(Common.WxGameApi.isRunInWeiXin){\r\n            console.info(\"[微信环境]\");\r\n            //从本地直接获取视频资源\r\n            if(Common.viedo){\r\n                let width = this.mUtl.getSceneSize().width*0.25;\r\n                let height = this.mUtl.getSceneSize().width*0.25;\r\n                let x = width/4;\r\n                let y = this.mUtl.getSceneSize().height/4 - height;\r\n                let url = Common.viedo;\r\n                Common.WxGameApi.checkCacheExistFile(url,(result)=>{\r\n                    if(result){\r\n                        //记录当前的播放器\r\n                        Common.viedoHandle = Common.WxGameApi.playVideo(x,y,width,height,url,10000,true,()=>{\r\n                            //重新开始但不结算\r\n                            this.restart(false);\r\n                        });\r\n                        console.info(\"[使用缓存路径]\");\r\n                    }else{\r\n                        console.info(\"[缓存路径无效]\");\r\n                        this.restart(false);\r\n                    }\r\n                })\r\n            }else{\r\n                console.info(\"[播放广告失败]\");\r\n                this.restart(false);\r\n            }\r\n        }else{\r\n            console.info(\"[无法播放广告]\");\r\n            this.restart(false);\r\n        }\r\n    }\r\n    //清理环境\r\n    revive() {\r\n        this.pauseNode.active = false\r\n        this.clearAllCurrent()\r\n    }\r\n    //结算分数\r\n    result(){\r\n        this.mMdl.isLookVideo = false;\r\n        this.mMdl.score = 0;\r\n        this.scoreNode.getComponent(cc.Label).string = 'Score: ' + Number(this.mMdl.score)\r\n    }\r\n    /**\r\n     * 重新开始\r\n     * @param isResult 是否进行结算\r\n     */\r\n    restart(isResult:boolean){\r\n        this.mMdl.lastFoodIndex = -1\r\n        this.mMdl.lastTrack = -1\r\n        this.mMdl.lastTimer = 0\r\n        this.mMdl.timePeriod = 2.5\r\n        this.mMdl.currentLevel = 0;                    \r\n        this.mMdl.timer = this.mMdl.timePeriod;\r\n        \r\n        let waitStartTime;\r\n        let waitDurTime;\r\n        //是否结算分数\r\n        if(isResult){\r\n            this.result();\r\n            waitStartTime = 4;\r\n            waitDurTime = 1.5;\r\n        }else{\r\n            waitStartTime = 1;\r\n            waitDurTime = 0.75;\r\n        }\r\n        //处于准备开始的状态\r\n        this.mMdl.readyFlag = true;\r\n        if(this.preMgr.hasPrefab(\"CountDown\")){\r\n            let countDown : cc.Node = cc.instantiate(this.preMgr.getPrefab(\"CountDown\"));\r\n            this.mainNode.addChild(countDown);\r\n            countDown.getComponent(CountDownView).config(waitStartTime,waitDurTime).onComplete(()=>{\r\n                this.mMdl.pauseFlag = false;\r\n                this.mMdl.readyFlag = false;\r\n            }).play();\r\n        }else{\r\n            this.mMdl.pauseFlag = false;\r\n            this.mMdl.readyFlag = false;\r\n        }\r\n    }\r\n\r\n    clearAllCurrent() {\r\n        if(this.mMdl.currentFoodNodes&&this.mMdl.currentFoodNodes.length>0){\r\n            this.mMdl.currentFoodNodes.forEach(foodNode => {\r\n                this.mMdl.foodPool.res(foodNode)\r\n            })\r\n        }\r\n        this.mMdl.currentFoodNodes = []\r\n    }\r\n}","import { IConstructorName } from \"../IocConst\"\r\nimport { __IC_Signal , Signal, ISignal } from \"./Signal\"\r\n\r\nexport interface ISignalManager {\r\n    get(symbol) : ISignal;\r\n    delete(symbol);\r\n    info: string;\r\n}\r\nexport class __IC_SignalManager extends IConstructorName {\r\n    static get constructorName(){return \"ISignalManager\";}\r\n}\r\nexport class SignalManager implements ISignalManager {\r\n    //维护一个信号指令映射表，注意不再使用的信号应该及时释放掉\r\n    _signal_dic : Map<any,ISignal>= new Map < any, ISignal > ();\r\n    info: string = \"this is a signal manager\";\r\n\r\n    public get(symbol) : ISignal{\r\n        //检查全局信号字典内是否存在对应的信号名称或枚举\r\n        if (this._signal_dic.has(symbol)) {\r\n            //获取标志对应的信号\r\n            return this._signal_dic.get(symbol);\r\n        } else {\r\n            //创建一个信号\r\n            let _signal = new Signal();\r\n            //如果使用字符串作为信号识别名，则将其绑定给信号\r\n            if(typeof symbol == \"string\")_signal.name = symbol;\r\n            //设置根环境\r\n            //_signal.setRoot(this._context.getRoot);\r\n            //建立全局信号与标志值的映射关系\r\n            this._signal_dic.set(symbol, _signal);\r\n            return _signal;\r\n        }\r\n    };\r\n\r\n    public delete(symbol) {\r\n        //检查全局信号字典内是否存在对应的信号名称或枚举\r\n        if (this._signal_dic.has(symbol)) {\r\n            //获取标志对应的信号\r\n            return this._signal_dic.delete(symbol);\r\n        }\r\n    }\r\n}","import {IocError, IConstructorName} from \"../IocConst\"\r\nexport interface ISignal {\r\n    name;\r\n    dispatch(...args);\r\n    addListener(callback:Function);\r\n    addOnceListener(callback:Function);\r\n    removeAllListeners();\r\n    /// Returns a List<System.Type> representing the Types bindable to this Signal\r\n\tgetTypes() : object[];\r\n}\r\nexport class __IC_Signal extends IConstructorName {\r\n    static get constructorName(){return \"ISignal\";};\r\n}\r\n\r\nexport class Signal implements ISignal {\r\n    public name;\r\n    //回调监听\r\n    public _listener: Function[] = [];\r\n    public _onceListener: Function[] = [];\r\n    //执行信号\r\n    public dispatch(...args) {\r\n        let that = this;\r\n        //如果存在回调函数\r\n        if (that._listener&&that._listener.length != 0) {\r\n            this._listener.forEach(function (action) {\r\n                action(that,...args);\r\n            })\r\n        }\r\n        //如果存在单次回调\r\n        if (that._onceListener&&that._onceListener.length != 0)\r\n            this._listener.forEach(function (action) {\r\n                action(that,...args);\r\n            })\r\n        //清空单次执行的监听\r\n        this._onceListener.length = 0;\r\n    }\r\n    public addListener(callback:Function){\r\n        this._listener = this.addUnique(this._listener,callback);\r\n    }\r\n    public addOnceListener(callback:Function){\r\n        this._onceListener = this.addUnique(this._onceListener,callback);\r\n    }\r\n    //清空监听\r\n    public removeAllListeners(){\r\n        this._listener.length=0;\r\n        this._onceListener.length=0;\r\n    }\r\n    //不重复添加\r\n    private addUnique(listeners : Function[], callback : Function)\r\n    {\r\n        //检查监听回调是否存在\r\n        if (listeners)\r\n        {\r\n            let isUnique = false;\r\n            for(let i = 0;i<listeners.length;i++){\r\n                //检查是否存在重复项\r\n                if(listeners[i] === callback){\r\n                    isUnique = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!isUnique){\r\n                //放入回调\r\n                listeners.push(callback);\r\n            }\r\n        }\r\n        return listeners;\r\n    }\r\n    public getTypes() : object[]\r\n    {\r\n        let retv = [];\r\n        //retv.push(this);\r\n        return retv;\r\n    }\r\n}","export class Singleton {\r\n    /** 存放初始化过的构造函数,这里用数组来存放构造函数 **/\r\n    private static classMap: Map < any, any > = new Map();\r\n\r\n    constructor() {\r\n        let clazz: any = this.constructor;\r\n        //为空时，表示浏览器不支持这样读取构造函数\r\n        if (!clazz)\r\n            return;\r\n        // 防止重复实例化\r\n        if (Singleton.classMap.has(clazz))\r\n            throw new Error(this + \" 只允许实例化一次！\");\r\n        else {\r\n            Singleton.classMap.set(clazz, this);\r\n            this.onConstructor();\r\n        }\r\n    }\r\n    protected onConstructor() {\r\n\r\n    }\r\n    public static get Instance() {\r\n        return Singleton.getInstanceOrCreate(this);\r\n    }\r\n\r\n    public static destroyInstance(clazz: any): void {\r\n        if (Singleton.classMap.has(clazz)) {\r\n            Singleton.classMap.get(clazz).onDestroy();\r\n            Singleton.classMap.delete(clazz);\r\n        }\r\n    }\r\n\r\n    public static getInstanceOrCreate(clazz: any,...args): any {\r\n        let instance;\r\n        if (Singleton.classMap.has(clazz)) {\r\n            instance = Singleton.classMap.get(clazz);\r\n            if (instance) {\r\n                return instance;\r\n            }\r\n        }\r\n        instance = new clazz(...args);\r\n        //不是Singleton的子类，则手动添加Singleton构造器会自动添加到classMap\r\n        if (!(instance instanceof Singleton)) {\r\n            Singleton.classMap.set(clazz, instance);\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n\r\n    }\r\n}","export interface IStack<T> {\r\n    //获取栈顶元素\r\n    top(): T;\r\n    //压栈\r\n    push(item: T);\r\n    //出栈\r\n    pop(): T;\r\n    //清空\r\n    clear();\r\n    //是否空栈\r\n    isEmpty: boolean;\r\n    //栈大小\r\n    size: number;\r\n}\r\n\r\nexport class Item<T> {\r\n    private _value: T;\r\n    private _next: Item<T>;\r\n    constructor(value: T, next: Item<T> = null) {\r\n        this._value = value;\r\n        this._next = next;\r\n    }\r\n    set value(value: T) {\r\n        this._value = value;\r\n    }\r\n    get value(): T {\r\n        return this._value;\r\n    }\r\n    set next(next: Item<T>) {\r\n        this._next = next;\r\n    }\r\n    get next(): Item<T> {\r\n        return this._next;\r\n    }\r\n}\r\n\r\nexport class Stack<T> implements IStack<T> {\r\n    private _header: Item<T>;\r\n    private _size: number = 0;\r\n    constructor() {\r\n        this._header = new Item<T>(null);\r\n    }\r\n    top(): T {\r\n        if (this._size === 0) {\r\n            return null;\r\n        }\r\n        return this._header.next.value;\r\n    }\r\n\r\n    /**\r\n     * 入栈\r\n     * @param item 添加的元素\r\n     * 将header的下一个元素的引用赋值给新元素的next\r\n     * 再将新元素赋值给header的next\r\n     */\r\n    push(item: T) {\r\n        let newItem = new Item<T>(item);\r\n        newItem.next = this._header.next;\r\n        this._header.next = newItem;\r\n        this._size++;\r\n    }\r\n\r\n    /**\r\n     * 出栈\r\n     * 将header之后的第一个元素移除\r\n     * 同时修改header的next到下一个元素\r\n     */\r\n    pop(): T {\r\n        if (this._size === 0) {\r\n            return null;\r\n        }\r\n        let item = this._header.next;\r\n        this._header.next = item.next;\r\n        this._size--;\r\n        item.next = null;//清除引用\r\n        return item.value;\r\n    }\r\n    clear(){\r\n        let item;\r\n        let tmp = this._header;\r\n        while(this._size !== 0){\r\n            item = tmp.next;\r\n            tmp = item;\r\n            item.next = null;\r\n            this._size--;\r\n        }\r\n        this._header = null;\r\n    }\r\n    get isEmpty(): boolean {\r\n        return this._size === 0;\r\n    }\r\n\r\n    get size(): number {\r\n        return this._size;\r\n    }\r\n}","import {__IC_SignalManager, ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport { Command } from \"../../lib/framework/Command/Command\";\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport { MainSignalEnum } from \"../signal/MainSignalEnum\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport PrefabPool from \"../helper/PrefabPool\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Manager, ManagerType } from \"../util/Manager\";\r\nimport PrefabManager from \"../util/PrefabManager\";\r\nimport { __IC_InjectBinder, IInjectBinder } from \"../../lib/framework/Injector/InjectBinder\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\nimport CountDownView from \"../view/CountDownView\";\r\n\r\n//引用注入装饰器\r\nexport class StartCommand extends Command{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtil : MainUtil;\r\n    //注入资源管理器\r\n    @inject(__IC_Manager,ManagerType.Prefab)\r\n    preMgr : PrefabManager;\r\n    @inject(__IC_InjectBinder)\r\n    inj: IInjectBinder;\r\n    @inject(cc.Node,\"LogicNode\")\r\n    logicNode : cc.Node;\r\n    @inject(cc.Node,\"MainNode\")\r\n    mainNode : cc.Node;\r\n\r\n    //执行\r\n    execute(){\r\n        //console.log(\"[开始指令]\");\r\n\r\n        this.lanuch();\r\n        this.start();\r\n    }\r\n    start(){\r\n    }\r\n    //启动配置\r\n    lanuch(){\r\n        const manager = cc.director.getCollisionManager()\r\n        manager.enabled = true\r\n\r\n        this.loadRes();\r\n        //载入并生成环境\r\n        this.sMgr.get(MainSignalEnum.Generate).dispatch(()=>{\r\n            //注册输入控制方法\r\n            this.sMgr.get(MainSignalEnum.InputControl).dispatch();\r\n            //初始化并启动游戏\r\n            this.sMgr.get(MainSignalEnum.Restart).dispatch(false);\r\n        });\r\n    }\r\n\r\n\r\n    loadRes(){\r\n        if(!this.preMgr.isInit){\r\n            //绑定预制件\r\n            if(this.preMgr.hasPrefab(\"Animal\")){\r\n                this.inj.bind(cc.Prefab).toName(\"Animal\").toValue(this.preMgr.getPrefab(\"Animal\"));\r\n            }\r\n            if(this.preMgr.hasPrefab(\"Food\")){\r\n                this.inj.bind(cc.Prefab).toName(\"Food\").toValue(this.preMgr.getPrefab(\"Food\"));\r\n            }\r\n            this.preMgr.isInit = true;\r\n        }\r\n        \r\n        //检查是否存在对应的资源\r\n        if(this.preMgr.hasPrefab(\"Scene\")){\r\n            let scene : cc.Node = cc.instantiate(this.preMgr.getPrefab(\"Scene\"));\r\n            this.mainNode.addChild(scene);\r\n            let avatar = scene.getChildByName(\"Avatar\");\r\n            let animals = avatar.getChildByName(\"Animals\");\r\n            let score = scene.getChildByName(\"Score\");\r\n            let foodArea = scene.getChildByName(\"FoodArea\");\r\n\r\n            this.inj.bind(cc.Node).toName(\"Scene\").toValue(scene).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Avatar\").toValue(avatar).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Animals\").toValue(animals).unBind();\r\n            this.inj.bind(cc.Node).toName(\"Score\").toValue(score).unBind();\r\n            this.inj.bind(cc.Node).toName(\"FoodArea\").toValue(foodArea).unBind();\r\n\r\n        }else{\r\n            throw new Error(\"Scene prefab is not found\");\r\n        }\r\n        if(this.preMgr.hasPrefab(\"PauseLayer\")){\r\n            let pause : cc.Node = cc.instantiate(this.preMgr.getPrefab(\"PauseLayer\"));\r\n            this.mainNode.addChild(pause);\r\n            pause.active = false;\r\n\r\n            this.inj.bind(cc.Node).toName(\"Pause\").toValue(pause).unBind();\r\n        }else{\r\n            throw new Error(\"Pause layer prefab is not found\");\r\n        }\r\n    }\r\n}","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TipsUiView extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    label: cc.Label = null;\r\n\r\n    @property(cc.RichText)\r\n    text: cc.RichText = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        \r\n    }\r\n    display(title,content){\r\n        this.label.string = title;\r\n        this.text.string = content;\r\n\r\n    }\r\n    onClicked(){\r\n        this.node.active = false;\r\n    }\r\n    // update (dt) {}\r\n}\r\n","import {Singleton} from \"./Singleton\";\r\nimport { IUtil } from \"./Util\";\r\n\r\n\r\nexport class TouchUtil extends Singleton implements IUtil{\r\n    private areaMap;\r\n    //全局区域状态\r\n    private globalAreaStatus : AreaStatus;\r\n\r\n    onConstructor(){\r\n        this.areaMap = new Map();\r\n    }\r\n    /**\r\n     * 注册一个触摸区域，只有在区域内的触控才会被识别\r\n     * @param area 区域\r\n     * @param isGlobal 是否设为全局区域\r\n     */\r\n    public registerTouchArea(area: cc.Node,isGlobal:boolean = false) {\r\n        let areaStatus;\r\n        //尝试获取对应的区域状态\r\n        if(this.areaMap.has(area)){\r\n            areaStatus = this.areaMap.get(area);\r\n        }else{\r\n            areaStatus = new AreaStatus();\r\n            this.areaMap.set(area,areaStatus);\r\n        }\r\n        //设定全局区域\r\n        if(isGlobal)this.globalAreaStatus = areaStatus;\r\n        //触摸开始时\r\n        area.on(cc.Node.EventType.TOUCH_START, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                let sPosX = touch.getLocationX();\r\n                let sPoxY = touch.getLocationY();\r\n                let status = new TouchStatus();\r\n                status.direction = TouchDirection.No;\r\n                status.touch = touch;\r\n                status.sPosX = sPosX;\r\n                status.sPosY = sPoxY;\r\n                status.totalX = 0;\r\n                status.totalY = 0;\r\n                status.trendX = 0;\r\n                status.trendY = 0;\r\n\r\n                //绑定触摸ID到状态\r\n                areaStatus.touchMap.set(touch.getID(), status)\r\n            });\r\n        });\r\n        //触摸移动时\r\n        area.on(cc.Node.EventType.TOUCH_MOVE, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    let status: TouchStatus = areaStatus.touchMap.get(touch.getID());\r\n                    let mDeltaX = touch.getDelta().x;\r\n                    let mDeltaY = touch.getDelta().y;\r\n                    status.totalX += mDeltaX;\r\n                    status.totalY += mDeltaY;\r\n\r\n                    //如果触摸正在向左移动\r\n                    if (Math.abs(mDeltaX) > 10) {\r\n                        status.trendX += status.totalX / mDeltaX;\r\n                    }\r\n                    if (Math.abs(mDeltaY) > 10) {\r\n                        status.trendY += status.totalY / mDeltaY;\r\n                    }\r\n                    //如果触摸的长度超过10000则判断划动超长了\r\n                    if((status.totalX*status.totalX+status.totalY*status.totalY)>10000){\r\n                        this.disposeTouchResult(areaStatus,touch);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        //触摸结束时\r\n        area.on(cc.Node.EventType.TOUCH_END, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    this.disposeTouchResult(areaStatus,touch);\r\n                }\r\n            });\r\n        });\r\n\r\n        //触摸取消时\r\n        area.on(cc.Node.EventType.TOUCH_CANCEL, (event: cc.Event.EventTouch) => {\r\n            let touches = event.getTouches();\r\n            touches.forEach((touch: cc.Touch) => {\r\n                if (areaStatus.touchMap.has(touch.getID())) {\r\n                    this.disposeTouchResult(areaStatus,touch);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    //执行触控结果\r\n    disposeTouchResult(areaStatus,touch){\r\n        //判断当前触摸正处于什么状态\r\n        let result : TouchStatus= areaStatus.touchMoveDetection(touch);\r\n        if(result&&areaStatus.touchEvnet[result.direction]){\r\n            areaStatus.touchEvnet[result.direction].forEach(event => {\r\n                if(event && typeof event ===\"function\"){\r\n                    //告知结果和触摸信息\r\n                    event(result);\r\n                }\r\n            });\r\n        }\r\n        //移除结束的触摸\r\n        areaStatus.touchMap.delete(touch.getID());\r\n    }\r\n    /**\r\n     * 注册指定的回调函数\r\n     * @param direction 方向\r\n     * @param callback 返回一个触控事件\r\n     */\r\n    public on<T extends Function>(direction: TouchDirection, callback: T, area?: cc.Node) : T{\r\n        let areaStatus;\r\n        if(area&&this.areaMap.has(area)){\r\n            areaStatus = this.areaMap.get(area);\r\n        }else{\r\n            areaStatus = this.globalAreaStatus;\r\n        }\r\n        //增加回调函数\r\n        if(!areaStatus.touchEvnet[direction]){\r\n            areaStatus.touchEvnet[direction] = [];\r\n        }\r\n        areaStatus.touchEvnet[direction].push(callback);\r\n        return callback;\r\n    }\r\n    \r\n}\r\n//区域状态\r\nclass AreaStatus{\r\n    public touchEvnet;\r\n    //触摸状态映射\r\n    public touchMap;\r\n\r\n    constructor(){\r\n        this.touchMap = new Map();\r\n        this.touchEvnet = [];\r\n    }\r\n\r\n    //触摸移动检测\r\n    touchMoveDetection(touch: cc.Touch){\r\n        if (this.touchMap.has(touch.getID())) {\r\n            let status: TouchStatus = this.touchMap.get(touch.getID());\r\n            //检查是否为有效触摸\r\n            let isMoveValid = false;\r\n            //触摸的方向，按照上下左右的顺序排列\r\n            let direction : TouchDirection= TouchDirection.No;\r\n            //如果移动的总距离超过10\r\n            if (Math.abs(status.totalX) > 10 || Math.abs(status.totalY) > 10) {\r\n                //趋势不都为0时\r\n                if (status.trendX != 0 || status.trendY != 0) {\r\n                    //检查移动的趋势\r\n                    if (status.trendX === 0) {\r\n                        isMoveValid = true;\r\n                        //检查总移动距离\r\n                        if (status.totalY > 0) {\r\n                            direction = TouchDirection.Up;\r\n                        } else {\r\n                            direction = TouchDirection.Down;\r\n                        }\r\n                    } else {\r\n                        let trend = status.totalX / status.totalY;\r\n                        //在X轴移动趋势不为0的情况下，检查移动趋势是否达到有效判断范围内\r\n                        if (Math.abs(trend) > 1) {\r\n                            //有效的触摸轨迹\r\n                            isMoveValid = true;\r\n                            //X轴方向向右移动\r\n                            if (status.totalX > 0) {\r\n                                direction = TouchDirection.Right;\r\n                            } else {\r\n                                direction = TouchDirection.Left;\r\n                            }\r\n                        }\r\n                    }\r\n                    //如果之前的检查没有通过\r\n                    if (!isMoveValid) {\r\n                        if (status.trendY === 0) {\r\n                            isMoveValid = true;\r\n                            if (status.totalY > 0) {\r\n                                direction = TouchDirection.Right;\r\n                            } else {\r\n                                direction = TouchDirection.Left;\r\n                            }\r\n                        } else {\r\n                            let trend = status.totalY / status.totalX;\r\n                            if (Math.abs(trend) > 1) {\r\n                                //有效的触摸轨迹\r\n                                isMoveValid = true;\r\n                                //Y轴方向向上移动\r\n                                if (status.totalY > 0) {\r\n                                    direction = TouchDirection.Up;\r\n                                } else {\r\n                                    direction = TouchDirection.Down;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //如果之前的检查判断为无效则表明没有发生移动\r\n            if (isMoveValid) {\r\n                switch (direction) {\r\n                    case TouchDirection.No:\r\n                        status.direction = TouchDirection.No;\r\n                        return status;\r\n                    case TouchDirection.Up:\r\n                        status.direction = TouchDirection.Up;\r\n                        return status;\r\n                    case TouchDirection.Down:\r\n                        status.direction = TouchDirection.Down;\r\n                        return status;\r\n                    case TouchDirection.Left:\r\n                        status.direction = TouchDirection.Left;\r\n                        return status;\r\n                    case TouchDirection.Right:\r\n                        status.direction = TouchDirection.Right;\r\n                        return status;\r\n                }\r\n            } else {\r\n                status.direction = TouchDirection.No;\r\n                return status;\r\n            }\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n//传递触摸状态\r\nexport class TouchStatus {\r\n    //触摸\r\n    public touch : cc.Touch;\r\n    //方向\r\n    public direction : TouchDirection;\r\n    /**\r\n     * 触摸开始的X坐标\r\n     */\r\n    public sPosX: number;\r\n    /**\r\n     * 触摸开始的Y坐标\r\n     */\r\n    public sPosY: number;\r\n    /**\r\n     * 最后一次的X坐标\r\n     */\r\n    public lPosX: number;\r\n    /**\r\n     * 最后一次的Y坐标\r\n     */\r\n    public lPosY: number;\r\n    /**\r\n     * X轴移动总距离\r\n     */\r\n    public totalX: number;\r\n    /**\r\n     * Y轴移动总距离\r\n     */\r\n    public totalY: number;\r\n    /**\r\n     * 触摸的总时间\r\n     */\r\n    public totalTime: number;\r\n    /**\r\n     * 趋向于X轴方向移动\r\n     */\r\n    public trendX;\r\n    /**\r\n     * 趋向于Y轴方向移动\r\n     */\r\n    public trendY;\r\n}\r\nexport enum TouchDirection{\r\n    No = -1,\r\n    Up = 0,\r\n    Down = 1,\r\n    Left = 2,\r\n    Right = 3\r\n}","import {__IC_SignalManager, ISignalManager} from \"../../Lib/Framework/Signal/SignalManager\"\r\nimport { MainModel } from \"../Model/MainModel\";\r\nimport { Command } from \"../../lib/framework/Command/Command\";\r\nimport { inject } from \"../../lib/framework/Injector/InjectDecorator\";\r\nimport Food from \"../view/Food\";\r\nimport { MainUtil } from \"../util/MainUtil\";\r\nimport { __IC_Model, ModelType } from \"../util/Model\";\r\nimport { __IC_Util, UtilType } from \"../util/Util\";\r\n\r\n//引用注入装饰器\r\nexport class UpdateCommand extends Command{\r\n    @inject(__IC_SignalManager)\r\n    sMgr : ISignalManager;\r\n    @inject(__IC_Model,ModelType.Main)\r\n    mMdl : MainModel;\r\n    @inject(cc.Node,\"Scene\")\r\n    sceneNode : cc.Node;\r\n    @inject(cc.Node,\"FoodArea\")\r\n    foodArea : cc.Node;\r\n    @inject(__IC_Util,UtilType.Main)\r\n    mUtl:MainUtil;\r\n\r\n    tickcount:number = 0;\r\n    timecount:number = 0;\r\n    //执行\r\n    execute(dt){\r\n        this.update(dt);\r\n    }\r\n\r\n    update(dt){\r\n        //如果小游戏处于被隐藏的状态则不执行任何更新\r\n        if(this.mMdl.isHide)return;\r\n        this.mMdl.timer += dt\r\n        if (this.mMdl.timer >= this.mMdl.lastTimer + this.mMdl.timePeriod) {\r\n            this.mMdl.lastTimer = this.mMdl.timer\r\n            this.newNode();\r\n            // 难度加成\r\n            if (this.mMdl.timePeriod >= this.mMdl.minTimePeriod && this.mMdl.score > 0 && (this.mMdl.currentLevel < this.mMdl.harderRatios.length - 1)) {\r\n                let [level, ratio] = this.mMdl.harderRatios[this.mMdl.currentLevel + 1]\r\n                if (this.mMdl.score >= level) {\r\n                    this.mMdl.currentLevel++\r\n                    this.mMdl.timePeriod -= ratio\r\n                    console.log(\"[难度提升]\"+this.mMdl.timePeriod)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    newNode() {\r\n        //获取食物实例\r\n        let food = this.getPoolNode()\r\n        if(!food.parent){\r\n            this.foodArea.addChild(food);\r\n        }\r\n        let foodComponent : Food = food.getComponent(Food)\r\n        //初始化配置\r\n        foodComponent.clear();\r\n        //获取对象的食物组件\r\n        foodComponent.randomProps()\r\n        return food\r\n    }\r\n\r\n    getPoolNode() {\r\n        //从食物对象池中获取一个实例\r\n        let foodNode = this.mMdl.foodPool.get();\r\n        //将食物实例放入当前食物节点列表\r\n        this.mMdl.currentFoodNodes.push(foodNode)\r\n        return foodNode\r\n    }\r\n\r\n\r\n}","import { IConstructorName } from \"../../lib/framework/IocConst\";\r\n\r\nexport class __IC_Util extends IConstructorName{\r\n    public get constructorName(){\r\n        return \"IUtil\";\r\n    }\r\n}\r\nexport interface IUtil{\r\n\r\n}\r\n/**\r\n * 工具类型枚举\r\n */\r\nexport enum UtilType{\r\n    Main = \"Main\",\r\n    Audio = \"Audio\",\r\n    Touch = \"Touch\",\r\n}","/**\r\n * 微信API接口\r\n */\r\nexport default class WxGameApi {\r\n    static get userPath() {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        return wx.env.USER_DATA_PATH + \"/\";;\r\n    }\r\n    static get isRunInWeiXin() {\r\n        if (cc.sys.platform === cc.sys.WECHAT_GAME) {\r\n            return true\r\n        } else {\r\n            WxGameApi.errorLog();\r\n            return false;\r\n        }\r\n    }\r\n    static onHide(callback) {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        wx.onHide(callback);\r\n    }\r\n    static onShow(callback) {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        wx.onShow(callback);\r\n    }\r\n    static errorLog(func) {\r\n        //console.warn(\"[请在微信环境内调用微信接口]\");\r\n    }\r\n\r\n    static playBGM(bgmUrl) {\r\n        if (!WxGameApi.isRunInWeiXin) return;\r\n        let bgm = wx.createInnerAudioContext()\r\n        // src 可以设置 http(s) 的路径，本地文件路径或者代码包文件路径\r\n        bgm.src = bgmUrl;\r\n        bgm.loop = true;\r\n        bgm.autoplay = true;\r\n        bgm.play()\r\n        wx.onShow(() => {\r\n            bgm.play();\r\n        });\r\n    }\r\n    static playVideo(x, y, w, h, url ,overtime ,isAutoPlay, onComplete) {\r\n        if (!WxGameApi.isRunInWeiXin) return null;\r\n        let isPlayFinish = false;\r\n        console.info(\"[尝试播放视频]\" + \"<x,y>\" + x + \",\" + y + \"<w,h>\" + w + \",\" + h);\r\n        let video = wx.createVideo({\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h,\r\n            src: url,\r\n            poster: \"\",\r\n            objectFit: \"fill\",\r\n            controls: false,\r\n            autoplay: isAutoPlay,\r\n        });\r\n        video.onEnded(() => {\r\n            isPlayFinish = true;\r\n            onComplete();\r\n            video.destroy();\r\n        });\r\n        video.onerror(() => {\r\n            isPlayFinish = true;\r\n            onComplete();\r\n            video.destroy();\r\n        });\r\n        //播放一秒后检查播放状态\r\n        setTimeout(()=>{\r\n            if(!video)return;\r\n            //根据对象搜索算法找到的微信视频接口状态函数\r\n            \r\n            let status = video.emitter.event + \"\";\r\n            if(status === \"onVideoPause\"){\r\n                console.info(\"[播放提前结束]\" + video.emitter.event);\r\n                isPlayFinish = true;\r\n                onComplete();\r\n                video.destroy();\r\n            }\r\n        },1000);\r\n        //检查超时\r\n        setTimeout(()=>{\r\n            //如果播放超时则强制结束播放\r\n            if(!isPlayFinish){\r\n                //强制销毁视频播放\r\n                if(video)video.destroy();\r\n                onComplete();\r\n            }\r\n        },overtime);\r\n        return video;\r\n    }\r\n    static downFile(url, path, successCallback, failCallback) {\r\n        let userPath = WxGameApi.userPath;\r\n        //console.info(\"[用户缓存路径]\" + userPath);\r\n        wx.downloadFile({\r\n            url: url,\r\n            header: \"\",\r\n            filePath: \"\",\r\n            success(res) {\r\n                console.info(\"[下载成功]\" + res.statusCode);\r\n                //console.info(\"[保存到路径]\" + res.tempFilePath);\r\n                wx.getFileSystemManager().saveFile({\r\n                    tempFilePath: res.tempFilePath,\r\n                    filePath: userPath + path,\r\n                    success(res) {\r\n                        console.info(\"[保存成功]\" + res.savedFilePath);\r\n                        successCallback(res.savedFilePath);\r\n                    },\r\n                    fail(err) {\r\n                        console.info(\"[保存失败]\" + err.errMsg);\r\n                    }\r\n                });\r\n\r\n            },\r\n            fail(err) {\r\n                console.info(\"[下载失败]\" + err.errMsg);\r\n                failCallback(err)\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 检查是缓存中是否存在对应路径的文件\r\n     * @param {*} path 文件路径\r\n     * @param {*} result 结果\r\n     */\r\n    static checkCacheExistFile(path, result) {\r\n        wx.getFileSystemManager().access({\r\n            path: path,\r\n            success() {\r\n                result(true);\r\n            },\r\n            fail() {\r\n                result(false);\r\n            }\r\n        });\r\n    }\r\n    static readFile(path, successCallback, failCallback) {\r\n        wx.getFileSystemManager().readFile({\r\n            filePath: path,\r\n            success(res) {\r\n                console.info(\"[成功获取]\" + res);\r\n                successCallback(res);\r\n            },\r\n            fail(err) {\r\n                console.info(\"[获取失败]\" + err.errMsg);\r\n                failCallback(err);\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * 获取或者缓存资源文件\r\n     * @param {*} url 资源的地址\r\n     * @param {*} path 存储路径\r\n     * @param {*} complete 完成回调\r\n     */\r\n    static getOrCacheResFile(url, path, complete) {\r\n        //是否允许下载资源\r\n        let isAllowDownload;\r\n        if (!url || url === \"\") {\r\n            isAllowDownload = false;\r\n        } else {\r\n            isAllowDownload = true;\r\n        }\r\n        let resPath = WxGameApi.userPath + path;\r\n        //检查缓存文件是否存在\r\n        WxGameApi.checkCacheExistFile(resPath, (result) => {\r\n            if (result === true) {\r\n                console.info(\"[从缓存获取资源]]\" + path);\r\n                //直接从本地获取资源\r\n                complete(resPath);\r\n            } else {\r\n                //允许下载则保存对应的资源到缓存\r\n                if (isAllowDownload) {\r\n                    console.info(\"[需要下载资源]]\" + path);\r\n                    WxGameApi.downFile(url, path, (savedFilePath) => {\r\n                        console.info(\"[下载成功]\" + savedFilePath);\r\n                        complete(savedFilePath);\r\n                    }, (err) => {\r\n                        console.info(\"[下载失败]\" + err);\r\n                        complete(null);\r\n                    });\r\n                } else {\r\n                    console.info(\"[无法获取资源]]\" + path);\r\n                    //无法找到对应的资源\r\n                    complete(null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    //存储游戏分数\r\n    static saveScore(value) {\r\n        if (!WxGameApi.isRunInWeiXin) return\r\n        console.info(\"[通知开发数据容器存储分数]\" + value);\r\n        //发送存储分数消息告知开放数据容器\r\n        wx.getOpenDataContext().postMessage({\r\n            message: {\r\n                type: \"command\",\r\n                function: \"save\",\r\n                arguments: \"score\",\r\n                data: value,\r\n            }\r\n        });\r\n    }\r\n}","export function spriteRes(resourceUrl) {\n\treturn new Promise((resolve, reject) => {\n\t\tcc.loader.loadRes(resourceUrl, cc.SpriteFrame, (err, spriteFrame) => {\n\t\t\tif (err) throw err\n\t\t\tresolve(spriteFrame)\n\t\t})\n\t})\n}\n\nexport function randomCoin() {\n\treturn Math.round(Math.random())\n}\n\nexport function randomNumber(size) {\n\treturn Math.floor(Math.random() * size)\n}\n\nexport function randomValue(...values) {\n\treturn values[randomNumber(values.length)]\n}\n\n"],"sourceRoot":"/source/","file":"project.js"}