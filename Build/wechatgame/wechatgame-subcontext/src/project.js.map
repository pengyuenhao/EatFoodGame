{"version":3,"sources":["assets/scripts/OpenCommon.ts","assets/scripts/launch.js"],"names":["OpenCommon","localStorageMap","Map","exports","_OpenCommon","require","cc","Class","extends","Component","properties","content","Node","prefab","Prefab","start","that","this","rank","wx","onMessage","data","message","resolveMessage","createUserBlock","user","node","createPrefab","nickName","avatarUrl","score","nickname","resolveCloudStorage","KVDataList","userRank","getChildByName","getComponent","Label","userName","userIcon","children","Sprite","userScore","enabled","string","color","Color","fontSize","console","log","loader","load","url","type","err","texture","error","spriteFrame","SpriteFrame","on","EventType","TOUCH_START","instantiate","parent","resolveCommand","function","arguments","func","args","_this","Promise","resolve","clearContext","getUserInfo","result","width","height","Canvas","designResolution","size","then","getFriendInfo","getGroupInfo","maxScore","saveMaxScoreData","removeAllChildren","userInfo","openIdList","lang","success","res","getUserMaxScoreData","userBlock","userAvatarSprite","getComponentInChildren","nickNameLabel","maxScoreLabel","fail","keys","kList","has","dict","get","i","length","createInfoBlock","push","getFriendCloudStorage","keyList","resolveInfo","key","sortList","infoMap","set","len","friendInfo","groupShareTicket","getGroupCloudStorage","shareTicket","kvDataList","Array","getUserCloudStorage","isGetMaxScoreSuccess","kVDataList","Key","value","saveCloudStorage","setUserCloudStorage","ListData","order","sort","a","b","AMaxScore","BMaxScore","_i","parseInt"],"mappings":"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","sourcesContent":["export class OpenCommon{\r\n    static groupShareTickets;\r\n    static isGetMaxScoreSuccess;\r\n    //最高分\r\n    static maxScore;\r\n    //用户信息\r\n    static userInfo;\r\n    //本地数据缓存\r\n    static localStorageMap : Map<any,Map<any,any>> = new Map();\r\n}","import {\n    OpenCommon\n} from \"./OpenCommon\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        content: cc.Node,\n        prefab: cc.Prefab\n    },\n\n    start() {\n        let that = this;\n        this.rank = 0;\n        //监听主域通过微信API发送到子域的消息\n        wx.onMessage(data => {\n            if (data && data.message) {\n                //console.info(\"[子域收到消息]\" + data.message);\n                that.resolveMessage(data.message);\n            }\n        });\n    },\n    //创建使用者区块\n    createUserBlock(user) {\n        let that = this;\n        let node = this.createPrefab();\n        // getUserInfo will return the nickName, getFriendCloudStorage will return the nickname.\n        let nickName;\n        let avatarUrl;\n        let score;\n        //如果存在信息\n        if(user){\n            nickName = user.nickName ? user.nickName : user.nickname;\n            avatarUrl = user.avatarUrl;\n            score = this.resolveCloudStorage(user.KVDataList, \"OneEatMaxScore\");\n        }\n        //尝试解析数据\n        let userRank = node.getChildByName('rank').getComponent(cc.Label);\n        let userName = node.getChildByName('userName').getComponent(cc.Label);\n        let userIcon = node.getChildByName('mask').children[0].getComponent(cc.Sprite);\n        let userScore = node.getChildByName('userScore').getComponent(cc.Label);\n        \n        userIcon.enabled = false;\n\n        //如果名称存在则创建对应的区块，否则创建空区块\n        if (nickName) {\n            if (!score) {\n                score = \"null\";\n                userRank.string = \"null\";\n            }else{\n                that.rank += 1;\n                userRank.string = that.rank;\n                switch(that.rank){\n                    case 1:\n                        userRank.node.color = new cc.Color(255, 0, 0);\n                        break;\n                    case 2:\n                        userRank.node.color = new cc.Color(0, 255, 0);\n                        break;\n                    case 3:\n                        userRank.node.color = new cc.Color(0, 0, 255);\n                        break;\n                    default:\n                        userRank.fontSize = userRank.fontSize / 2;\n                        break;\n                }\n            }\n            userName.string = nickName;\n            userScore.string = score;\n            console.log(\"[获取好友信息]\" + nickName);\n            //如果头像存在\n            if (avatarUrl) {\n                cc.loader.load({\n                    url: avatarUrl,\n                    type: 'png'\n                }, (err, texture) => {\n                    if (err) console.error(err);\n                    userIcon.enabled = true;\n                    userIcon.spriteFrame = new cc.SpriteFrame(texture);\n                });\n            }\n            node.on(cc.Node.EventType.TOUCH_START, () => {\n                //console.info(\"[点击区块1]\" + userName.string + \"[分数]\" + userScore.string);\n            }, this);\n        }else{\n            userName.string = \"\";\n            userScore.string = \"\";\n            userIcon.spriteFrame = \"\";\n            userRank.string = \"\";\n        }\n    },\n    createPrefab() {\n        let node = cc.instantiate(this.prefab);\n        node.parent = this.content;\n        return node;\n    },\n    //分解主域传递过来的信息\n    resolveMessage(message) {\n        //console.info(\"[指令]\" + message.type);\n        switch (message.type) {\n            case \"command\":\n                this.resolveCommand(message.function, message.arguments, message.data);\n                break;\n            default:\n                break;\n        }\n    },\n\n    resolveCommand(func, args, data) {\n        //console.info(\"[指令]\" + func + \"[参数]\" + args + \"[数据]\" + data);\n        switch (func) {\n            case \"start\":\n                new Promise((resolve) => {\n                    this.clearContext();\n                    //获取用户信息\n                    this.getUserInfo((result) => {\n                        resolve(result);\n                    });\n                    if (data && data.width && data.height) {\n                        //console.info(\"[修正分辨率]\" + data.width + \",\" + data.height);\n                        //修改分辨率\n                        this.getComponent(cc.Canvas).designResolution = new cc.size(data.width, data.height);\n                    }\n                }).then((result) => {\n                    //console.info(\"[是否得到用户信息]\" + result);\n                    //获取朋友信息\n                    this.getFriendInfo([\"OneEatMaxScore\"]);\n                    //this.resolveCommand(\"switch\",\"friend\",\"\");\n                });\n                break;\n            case \"switch\":\n                this.clearContext();\n                switch (args) {\n                    case \"friend\":\n                        //获取好友最高分信息\n                        this.getFriendInfo([\"OneEatMaxScore\"]);\n                        break;\n                    case \"group\":\n                        //如果是从群分享卡片中打开的则可以查看同玩信息\n                        if (data) {\n                            //console.info(\"[根据]\" + data + \"[获取群组信息]\");\n                            //获取群信息\n                            this.getGroupInfo(data, [\"OneEatMaxScore\"]);\n                        } else {\n                            //console.info(\"[无法获取群组信息]\");\n                        }\n                        break;\n                }\n                break;\n            case \"save\":\n                switch (args) {\n                    case \"gameDiamond\":\n                        //console.info(\"[存储游戏钻石]\" + data);\n                        break;\n                    case \"gameCurrency\":\n                        //console.info(\"[存储游戏币]\" + data);\n                        break;\n                    case \"score\":\n                        //console.info(\"[存储分数]\" + data);\n                        if (data > OpenCommon.maxScore) {\n                            //console.info(\"[新的最高分数]\" + data);\n                            this.saveMaxScoreData(data);\n                        }\n                        break;\n                    case \"shareTicket\":\n                        //console.info(\"[存储群识别码]\" + data);\n                        break;\n                }\n                break;\n            default:\n                break;\n        }\n    },\n    //移除容器内所有子节点\n    clearContext() {\n        this.rank = 0;\n        this.content.removeAllChildren();\n        //console.info(\"[清理容器]\");\n    },\n    getUserInfo(result) {\n        let that = this;\n        //如果没有用户信息则尝试获取用户信息\n        if (!OpenCommon.userInfo) {\n            //微信在子域内调用获取用户信息API\n            wx.getUserInfo({\n                openIdList: ['selfOpenId'],\n                lang: 'zh_CN',\n                success: (res) => {\n                    //获取用户信息\n                    let userInfo = res.data[0];\n                    //保存用户信息\n                    OpenCommon.userInfo = userInfo;\n                    //console.info(\"[获取用户信息成功]\" + userInfo);\n                    //尝试获取用户托管数据\n                    that.getUserMaxScoreData((score) => {\n                        let nickName = userInfo.nickName;\n                        let avatarUrl = userInfo.avatarUrl;\n                        let maxScore = score;\n                        //如果存在使用者区块\n                        if (that.userBlock) {\n                            let userAvatarSprite = that.userBlock.getChildByName('Mask').getComponentInChildren(cc.Sprite);\n                            let nickNameLabel = that.userBlock.getChildByName('Name').getComponent(cc.Label);\n                            let maxScoreLabel = that.userBlock.getChildByName('Score').getComponent(cc.Label);\n\n                            nickNameLabel.string = nickName;\n                            cc.loader.load({\n                                url: avatarUrl,\n                                type: 'png'\n                            }, (err, texture) => {\n                                if (err) console.error(err);\n                                userAvatarSprite.spriteFrame = new cc.SpriteFrame(texture);\n                            });\n                            //检查是否存在最高分\n                            if (maxScore) {\n                                maxScoreLabel.string = score;\n                            } else {\n                                maxScoreLabel.string = \"null\";\n                            }\n                        }\n                        result(true);\n                    });\n                },\n                fail: (res) => {\n                    //reject(res);\n                    //console.info(\"[获取用户信息失败]\" + res);\n                    result(false);\n                }\n            });\n        }else{\n            result(true);\n        }\n\n    },\n\n    getFriendInfo(keys) {\n        let that = this;\n        let kList;\n\n        if (OpenCommon.localStorageMap.has(\"Friend\")) {\n            let dict = OpenCommon.localStorageMap.get(\"Friend\");\n\n            kList = [];\n            for (let i = 0; i < keys.length; i++) {\n                //如果有缓存信息\n                if (dict.has(keys[i])) {\n                    //console.info(\"[从缓存获取好友托管数据]\" + keys[i]);\n                    let data = dict.get(keys[i]);\n                    that.createInfoBlock(data, 10);\n                } else {\n                    kList.push(keys[i]);\n                }\n            }\n        } else {\n            kList = keys;\n        }\n\n        //如果有未缓存的数据则请求云端获取\n        if (kList.length > 0) {\n            //console.info(\"[开始获取好友托管数据]\" + kList);\n            // https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getFriendCloudStorage.html\n            wx.getFriendCloudStorage({\n                keyList: keys,\n                success: function (res) {\n                    //console.info(\"[成功获取朋友信息]\", res.data);\n                    //解析数据信息\n                    let data = that.resolveInfo(\"Friend\", \"OneEatMaxScore\", res.data);\n                    that.createInfoBlock(data, 10);\n                },\n                fail: function (res) {\n                    console.error(res);\n                }\n            });\n        }\n    },\n    //解析数据信息\n    resolveInfo(type, key, data) {\n        let that = this;\n        //排序\n        that.sortList(data, key, false);\n        let infoMap;\n        if (OpenCommon.localStorageMap.has(type)) {\n            infoMap = OpenCommon.localStorageMap.get(type);\n        } else {\n            infoMap = new Map();\n            OpenCommon.localStorageMap.set(type, infoMap);\n            //console.info(\"[创建数据缓存]\"+infoMap);\n        }\n        //缓存数据信息\n        infoMap.set(key, data);\n\n        return data;\n    },\n    createInfoBlock(data, length) {\n        let that = this;\n        let len;\n        if(data.length>length){\n            len = data.length;\n        }else{\n            len = length;\n        }\n        for (let i = 0; i < len; i++) {\n            let friendInfo = data[i];\n            //如果朋友信息存在则创建信息否则创建空信息\n            if (friendInfo) {\n                that.createUserBlock(friendInfo);\n            } else {\n                that.createUserBlock();\n            }\n        }\n    },\n\n    getGroupInfo(groupShareTicket, keys) {\n        let that = this;\n        let kList;\n\n        if (OpenCommon.localStorageMap.has(\"Group\")) {\n            let dict = OpenCommon.localStorageMap.get(\"Group\");\n\n            kList = [];\n            for (let i = 0; i < keys.length; i++) {\n                //如果有缓存信息\n                if (dict.has(keys[i])) {\n                    //console.info(\"[从缓存获取群组托管数据]\" + keys[i]);\n                    let data = dict.get(keys[i]);\n                    that.createInfoBlock(data, 10);\n                } else {\n                    kList.push(keys[i]);\n                }\n            }\n        } else {\n            kList = keys;\n        }\n\n        //如果有未缓存的数据则请求云端获取\n        if (kList.length > 0) {\n            //console.info(\"[开始获取好友托管数据]\" + kList);\n            // https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getFriendCloudStorage.html\n            wx.getGroupCloudStorage({\n                shareTicket: groupShareTicket,\n                keyList: keys,\n                success: function (res) {\n                    //console.info(\"[成功获取群组信息]\", res.data);\n                    //解析数据信息\n                    let data = that.resolveInfo(\"Group\", \"OneEatMaxScore\", res.data);\n                    that.createInfoBlock(data, 10);\n                },\n                fail: function (res) {\n                    console.error(res);\n                }\n            });\n        }\n    },\n    //获取用户的最高分记录\n    getUserMaxScoreData(result) {\n        let that = this;\n        let kvDataList = new Array();\n        //获取游戏最高分数\n        kvDataList.push(\"OneEatMaxScore\");\n        wx.getUserCloudStorage({\n            keyList: kvDataList,\n            success(res) {\n                //console.info(\"[获取用户托管数据成功]\" + res.KVDataList.length);\n                let score = that.resolveCloudStorage(res.KVDataList, \"OneEatMaxScore\");\n                if (score) {\n                    //console.info(\"[获取托管最高分成功]\")\n                    OpenCommon.maxScore = score;\n                    result(score);\n                } else {\n                    that.saveMaxScoreData(0);\n                    result(0);\n                }\n                OpenCommon.isGetMaxScoreSuccess = true;\n            },\n            fail(res) {\n                //console.info(\"[获取托管数据失败]\");\n                OpenCommon.isGetMaxScoreSuccess = false;\n                result(0);\n            }\n        });\n    },\n    //解析云存储数据\n    resolveCloudStorage(kVDataList, Key) {\n        //数据无效则直接返回\n        if (!kVDataList) return null;\n        console.log(\"[托管数据数量]\" + kVDataList.length);\n        for (let i = 0; i < kVDataList.length; i++) {\n            if (kVDataList[i].key === Key) {\n                return kVDataList[i].value;\n                //console.info(\"[获取托管键值]\" + Key + \"[数据]\" + kVDataList[i].value);\n                break;\n            }\n        }\n    },\n    //存储托管数据\n    saveCloudStorage(kVDataList, success, fail) {\n        wx.setUserCloudStorage({\n            KVDataList: kVDataList,\n            success,\n            fail\n        });\n    },\n    saveMaxScoreData(value) {\n        let kvDataList = new Array();\n        kvDataList.push({\n            key: \"OneEatMaxScore\",\n            value: \"\" + value\n        });\n        this.saveCloudStorage(kvDataList, () => {\n            //console.info(\"[存储最高分数据成功]\");\n        }, () => {\n            //console.info(\"[存储最高分数据失败]\");\n        });\n    },\n    //排序(ListData：res.data;order:false降序，true升序)\n    sortList(ListData, key, order) {\n        ListData.sort(function (a, b) {\n            let AMaxScore = 0;\n            let KVDataList = a.KVDataList;\n            for (let i = 0; i < KVDataList.length; i++) {\n                if (KVDataList[i].key == key) {\n                    AMaxScore = KVDataList[i].value;\n                }\n            }\n            let BMaxScore = 0;\n            KVDataList = b.KVDataList;\n            for (let i = 0; i < KVDataList.length; i++) {\n                if (KVDataList[i].key == key) {\n                    BMaxScore = KVDataList[i].value;\n                }\n            }\n\n            if (order) {\n                return parseInt(AMaxScore) - parseInt(BMaxScore);\n            } else {\n                return parseInt(BMaxScore) - parseInt(AMaxScore);\n            }\n        });\n        return ListData;\n    }\n});"],"sourceRoot":"/source/","file":"project.js"}