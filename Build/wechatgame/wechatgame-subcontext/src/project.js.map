{"version":3,"sources":["assets/scripts/OpenCommon.ts","assets/scripts/PrefabPool.ts","assets/scripts/launch.js"],"names":["OpenCommon","prefabPool","localStorageMap","Map","exports","PrefabPool","type","prefab","this","nodePool","cc","NodePool","prototype","get","node","size","instantiate","active","res","put","_OpenCommon","require","Class","extends","Component","properties","content","Node","Prefab","onLoad","_this","_PrefabPool2","default","getUserInfo","result","console","info","getUserMaxScoreData","maxScore","saveMaxScoreData","undefined","error","start","that","rank","wx","onMessage","data","message","resolveMessage","setTimeout","createUserBlock","user","createPrefab","nickName","avatarUrl","score","nickname","resolveCloudStorage","KVDataList","openid","userRank","getChildByName","getComponent","Label","userName","userIcon","children","Sprite","userScore","enabled","fontSize","color","Color","string","loader","load","url","err","texture","spriteFrame","SpriteFrame","on","EventType","TOUCH_START","parent","resolveCommand","function","arguments","func","args","_this2","clearContext","updateFriendInfo","updateGroupInfo","Promise","resolve","width","height","Canvas","designResolution","then","getFriendInfo","lastTicket","getGroupInfo","forEach","child","removeAllChildren","userInfo","openIdList","lang","success","userBlock","userAvatarSprite","getComponentInChildren","nickNameLabel","maxScoreLabel","fail","keys","getFriendCloudStorage","keyList","resolveInfo","kList","has","dict","i","length","createInfoBlock","push","key","sortList","infoMap","set","len","friendInfo","groupShareTicket","getGroupCloudStorage","shareTicket","kvDataList","Array","getUserCloudStorage","isGetMaxScoreSuccess","kVDataList","Key","value","saveCloudStorage","setUserCloudStorage","ListData","order","sort","a","b","AMaxScore","BMaxScore","_i","parseInt"],"mappings":"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","sourcesContent":["import PrefabPool from \"./PrefabPool\";\r\n\r\nexport class OpenCommon{\r\n    static prefabPool : PrefabPool = null;\r\n    static groupShareTickets;\r\n    static isGetMaxScoreSuccess;\r\n    //最高分\r\n    static maxScore;\r\n    //用户信息\r\n    static userInfo;\r\n    //最后一条群句柄\r\n    static lastTicket;\r\n    //本地数据缓存\r\n    static localStorageMap : Map<any,Map<any,any>> = new Map();\r\n}","/**\n * 简单的对象池\n */\nexport default class PrefabPool {\n\ttype;\n\tprefab;\n\tnodePool : cc.NodePool;\n\n\tconstructor(type, prefab) {\n\t\tthis.type = type\n\t\tthis.prefab = prefab\n\t\tthis.nodePool = new cc.NodePool(type)\n\t}\n\t/**\n\t * 获取节点\n\t */\n\tget() {\n\t\tlet node : cc.Node= null\n\t    if (this.nodePool.size() > 0) {\n\t        node = this.nodePool.get()\n\t    } else {\n\t        node = cc.instantiate(this.prefab)\n\t\t}\n\t\tnode.active = true;\n\t    return node\n\t}\n\t/**\n\t * 回收节点\n\t * @param node \n\t */\n\tres(node : cc.Node) {\n\t\tnode.active = false;\n\t\tthis.nodePool.put(node)\n\t}\n\n}","import {OpenCommon} from \"./OpenCommon\";\r\nimport PrefabPool from \"./PrefabPool\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        content: cc.Node,\r\n        prefab: cc.Prefab\r\n    },\r\n    onLoad(){\r\n        OpenCommon.prefabPool = new PrefabPool(cc.Node,this.prefab);\r\n        //获取用户信息\r\n        this.getUserInfo((result) => {\r\n            console.info(\"[获取用户信息]\"+result);\r\n        });\r\n        //获取使用者信息\r\n        this.getUserMaxScoreData((result)=>{\r\n            OpenCommon.maxScore = result;\r\n            //如果获取到的数据为0值则直接保存一次数据\r\n            if(result===0){\r\n                this.saveMaxScoreData(0);\r\n            }\r\n            //获取用户分数数据失败时\r\n            if(result===null||result===undefined){\r\n                console.error(\"[获取用户最高分失败]\"+result);\r\n            }else{\r\n                console.info(\"[获取用户最高分]\"+result);\r\n            }\r\n        })\r\n    },\r\n    start() {\r\n        let that = this;\r\n        this.rank = 0;\r\n        //监听主域通过微信API发送到子域的消息\r\n        wx.onMessage(data => {\r\n            if (data && data.message) {\r\n                //console.info(\"[子域收到消息]\" + data.message);\r\n                that.resolveMessage(data.message);\r\n            }\r\n        });\r\n        //等待直到大部分预载工作完成\r\n        setTimeout(()=>{\r\n            /**测试专用 */\r\n            if(false&&OpenCommon.userInfo.nickName === \"彭云浩\"){\r\n                wx.removeUserCloudStorage({\r\n                    keyList : [\"OneEatMaxScore\"],\r\n                    success(){\r\n                        console.info(\"[移除测试人员分数]\");\r\n                    }\r\n                });\r\n            }\r\n        },1000);\r\n\r\n    },\r\n    //创建使用者区块\r\n    createUserBlock(user) {\r\n        let that = this;\r\n        let node = this.createPrefab();\r\n        // getUserInfo will return the nickName, getFriendCloudStorage will return the nickname.\r\n        let nickName;\r\n        let avatarUrl;\r\n        let score;\r\n        let openid;\r\n        //如果存在信息\r\n        if(user){\r\n            nickName = user.nickName ? user.nickName : user.nickname;\r\n            avatarUrl = user.avatarUrl;\r\n            score = this.resolveCloudStorage(user.KVDataList, \"OneEatMaxScore\");\r\n            openid = user.openid;\r\n        }\r\n        //尝试解析数据\r\n        let userRank = node.getChildByName('rank').getComponent(cc.Label);\r\n        let userName = node.getChildByName('userName').getComponent(cc.Label);\r\n        let userIcon = node.getChildByName('mask').children[0].getComponent(cc.Sprite);\r\n        let userScore = node.getChildByName('userScore').getComponent(cc.Label);\r\n        \r\n        userIcon.enabled = false;\r\n\r\n        //如果名称存在则创建对应的区块，否则创建空区块\r\n        if (nickName) {\r\n            if (!score) {\r\n                score = \"null\";\r\n                userRank.string = \"null\";\r\n            }else{\r\n                userRank.fontSize = 100;\r\n                userRank.node.color = new cc.Color(255,255,255);\r\n                that.rank += 1;\r\n                userRank.string = that.rank;\r\n                switch(that.rank){\r\n                    case 1:\r\n                        userRank.node.color = new cc.Color(255, 0, 0);\r\n                        break;\r\n                    case 2:\r\n                        userRank.node.color = new cc.Color(0, 255, 0);\r\n                        break;\r\n                    case 3:\r\n                        userRank.node.color = new cc.Color(0, 0, 255);\r\n                        break;\r\n                    default:\r\n                        userRank.fontSize = userRank.fontSize / 2;\r\n                        break;\r\n                }\r\n            }\r\n            userName.string = nickName;\r\n            userScore.string = score;\r\n            //console.log(\"[获取好友信息]\" + nickName);\r\n            //如果头像存在\r\n            if (avatarUrl) {\r\n                cc.loader.load({\r\n                    url: avatarUrl,\r\n                    type: 'png'\r\n                }, (err, texture) => {\r\n                    if (err) console.error(err);\r\n                    userIcon.enabled = true;\r\n                    userIcon.spriteFrame = new cc.SpriteFrame(texture);\r\n                });\r\n            }\r\n            node.on(cc.Node.EventType.TOUCH_START, () => {\r\n                //console.info(\"[点击区块1]\" + userName.string + \"[分数]\" + userScore.string);\r\n            }, this);\r\n        }else{\r\n            userName.string = \"\";\r\n            userScore.string = \"\";\r\n            userIcon.spriteFrame = \"\";\r\n            userRank.string = \"\";\r\n        }\r\n    },\r\n    createPrefab() {\r\n        let node = OpenCommon.prefabPool.get();\r\n        //let node = cc.instantiate(this.prefab);\r\n        node.parent = this.content;\r\n        return node;\r\n    },\r\n    //分解主域传递过来的信息\r\n    resolveMessage(message) {\r\n        //console.info(\"[指令]\" + message.type);\r\n        switch (message.type) {\r\n            case \"command\":\r\n                this.resolveCommand(message.function, message.arguments, message.data);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    resolveCommand(func, args, data) {\r\n        //console.info(\"[指令]\" + func + \"[参数]\" + args + \"[数据]\" + data);\r\n        switch (func) {\r\n            case \"clear\":\r\n                this.clearContext();\r\n                break;\r\n            case \"preload\":\r\n                switch (args) {\r\n                    case \"friend\": \r\n                        this.updateFriendInfo([\"OneEatMaxScore\"]);\r\n                        break;\r\n                    case \"group\":\r\n                        this.updateGroupInfo(data,[\"OneEatMaxScore\"]);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"start\":\r\n                new Promise((resolve) => {\r\n                    this.clearContext();\r\n                    //获取用户信息\r\n                    this.getUserInfo((result) => {\r\n                        resolve(result);\r\n                    });\r\n                    if (data && data.width && data.height) {\r\n                        //console.info(\"[修正分辨率]\" + data.width + \",\" + data.height);\r\n                        //修改分辨率\r\n                        this.getComponent(cc.Canvas).designResolution = new cc.size(data.width, data.height);\r\n                    }\r\n                }).then((result) => {\r\n                    //console.info(\"[是否得到用户信息]\" + result);\r\n                    //获取朋友信息\r\n                    this.getFriendInfo([\"OneEatMaxScore\"]);\r\n                    //this.resolveCommand(\"switch\",\"friend\",\"\");\r\n                });\r\n                break;\r\n            case \"switch\":\r\n                this.clearContext();\r\n                switch (args) {\r\n                    case \"friend\":\r\n                        //获取好友最高分信息\r\n                        this.getFriendInfo([\"OneEatMaxScore\"]);\r\n                        break;\r\n                    case \"group\":\r\n                        //如果是从群分享卡片中打开的则可以查看同玩信息\r\n                        if (data) {\r\n                            //console.info(\"[根据]\" + data + \"[获取群组信息]\");\r\n                            OpenCommon.lastTicket = data;\r\n                            //获取群信息\r\n                            this.getGroupInfo(data, [\"OneEatMaxScore\"]);\r\n                        } else {\r\n                            //console.info(\"[无法获取群组信息]\");\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case \"save\":\r\n                switch (args) {\r\n                    case \"gameDiamond\":\r\n                        //console.info(\"[存储游戏钻石]\" + data);\r\n                        break;\r\n                    case \"gameCurrency\":\r\n                        //console.info(\"[存储游戏币]\" + data);\r\n                        break;\r\n                    case \"score\":\r\n                        //console.info(\"[存储分数]\" + data);\r\n                        this.saveMaxScoreData(data);\r\n                        break;\r\n                    case \"shareTicket\":\r\n                        //console.info(\"[存储群识别码]\" + data);\r\n                        break;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    //移除容器内所有子节点\r\n    clearContext() {\r\n        this.rank = 0;\r\n        //回收所有子节点\r\n        this.content.children.forEach(child => {\r\n            OpenCommon.prefabPool.res(child);\r\n        });\r\n        this.content.removeAllChildren();\r\n        //console.info(\"[清理容器]\");\r\n    },\r\n    getUserInfo(result) {\r\n        let that = this;\r\n        //如果没有用户信息则尝试获取用户信息\r\n        if (!OpenCommon.userInfo) {\r\n            //微信在子域内调用获取用户信息API\r\n            wx.getUserInfo({\r\n                openIdList: ['selfOpenId'],\r\n                lang: 'zh_CN',\r\n                success: (res) => {\r\n                    //获取用户信息\r\n                    let userInfo = res.data[0];\r\n                    //保存用户信息\r\n                    OpenCommon.userInfo = userInfo;\r\n                    //console.info(\"[获取用户信息成功]\" + userInfo);\r\n                    //尝试获取用户托管数据\r\n                    that.getUserMaxScoreData((score) => {\r\n                        let nickName = userInfo.nickName;\r\n                        let avatarUrl = userInfo.avatarUrl;\r\n                        let maxScore = score;\r\n                        //如果存在使用者区块\r\n                        if (that.userBlock) {\r\n                            let userAvatarSprite = that.userBlock.getChildByName('Mask').getComponentInChildren(cc.Sprite);\r\n                            let nickNameLabel = that.userBlock.getChildByName('Name').getComponent(cc.Label);\r\n                            let maxScoreLabel = that.userBlock.getChildByName('Score').getComponent(cc.Label);\r\n\r\n                            nickNameLabel.string = nickName;\r\n                            cc.loader.load({\r\n                                url: avatarUrl,\r\n                                type: 'png'\r\n                            }, (err, texture) => {\r\n                                if (err) console.error(err);\r\n                                userAvatarSprite.spriteFrame = new cc.SpriteFrame(texture);\r\n                            });\r\n                            //检查是否存在最高分\r\n                            if (maxScore) {\r\n                                maxScoreLabel.string = score;\r\n                            } else {\r\n                                maxScoreLabel.string = \"null\";\r\n                            }\r\n                        }\r\n                        result(true);\r\n                    });\r\n/*                     if(userInfo.nickName === \"彭云浩\"){\r\n                        console.info(\"[修改指定最高分]\");\r\n                        that.saveMaxScoreData(-9999);\r\n                    } */\r\n                },\r\n                fail: (res) => {\r\n                    //reject(res);\r\n                    //console.info(\"[获取用户信息失败]\" + res);\r\n                    result(false);\r\n                }\r\n            });\r\n        }else{\r\n            result(true);\r\n        }\r\n\r\n    },\r\n    //更新朋友信息\r\n    updateFriendInfo(keys){\r\n        let that = this;\r\n        wx.getFriendCloudStorage({\r\n            keyList: keys,\r\n            success: function (res) {\r\n                //console.info(\"[成功更新朋友信息]\", res.data);\r\n                //解析数据信息\r\n                that.resolveInfo(\"Friend\", \"OneEatMaxScore\", res.data);\r\n            },\r\n            fail: function (res) {\r\n                console.error(\"[更新朋友信息失败]\"+res);\r\n            }\r\n        });\r\n    },\r\n    getFriendInfo(keys) {\r\n        let that = this;\r\n        let kList;\r\n\r\n        if (OpenCommon.localStorageMap.has(\"Friend\")) {\r\n            let dict = OpenCommon.localStorageMap.get(\"Friend\");\r\n\r\n            kList = [];\r\n            for (let i = 0; i < keys.length; i++) {\r\n                //如果有缓存信息\r\n                if (dict.has(keys[i])) {\r\n                    //console.info(\"[从缓存获取好友托管数据]\" + keys[i]);\r\n                    let data = dict.get(keys[i]);\r\n                    that.createInfoBlock(data, 10);\r\n                } else {\r\n                    kList.push(keys[i]);\r\n                }\r\n            }\r\n            //更新朋友排行榜信息\r\n            that.updateFriendInfo(keys);\r\n        } else {\r\n            kList = keys;\r\n        }\r\n\r\n        //如果有未缓存的数据则请求云端获取\r\n        if (kList.length > 0) {\r\n            //console.info(\"[开始获取好友托管数据]\" + kList);\r\n            // https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getFriendCloudStorage.html\r\n            wx.getFriendCloudStorage({\r\n                keyList: keys,\r\n                success: function (res) {\r\n                    //console.info(\"[成功获取朋友信息]\", res.data);\r\n                    //解析数据信息\r\n                    let data = that.resolveInfo(\"Friend\", \"OneEatMaxScore\", res.data);\r\n                    that.createInfoBlock(data, 10);\r\n                },\r\n                fail: function (res) {\r\n                    console.error(res);\r\n                }\r\n            });\r\n        }\r\n    },\r\n    //解析数据信息\r\n    resolveInfo(type, key, data) {\r\n        let that = this;\r\n        //排序\r\n        that.sortList(data, key, false);\r\n        let infoMap;\r\n        if (OpenCommon.localStorageMap.has(type)) {\r\n            infoMap = OpenCommon.localStorageMap.get(type);\r\n        } else {\r\n            infoMap = new Map();\r\n            OpenCommon.localStorageMap.set(type, infoMap);\r\n            //console.info(\"[创建数据缓存]\"+infoMap);\r\n        }\r\n        //缓存数据信息\r\n        infoMap.set(key, data);\r\n\r\n        return data;\r\n    },\r\n    createInfoBlock(data, length) {\r\n        let that = this;\r\n        let len;\r\n        if(data.length>length){\r\n            len = data.length;\r\n        }else{\r\n            len = length;\r\n        }\r\n        for (let i = 0; i < len; i++) {\r\n            let friendInfo = data[i];\r\n            //如果朋友信息存在则创建信息否则创建空信息\r\n            if (friendInfo) {\r\n                that.createUserBlock(friendInfo);\r\n            } else {\r\n                that.createUserBlock();\r\n            }\r\n        }\r\n    },\r\n    updateGroupInfo(groupShareTicket, keys){\r\n        let that = this;\r\n        wx.getGroupCloudStorage({\r\n            shareTicket: groupShareTicket,\r\n            keyList: keys,\r\n            success: function (res) {\r\n                //console.info(\"[成功更新群组信息]\", res.data);\r\n                //解析数据信息\r\n                that.resolveInfo(\"Group\", \"OneEatMaxScore\", res.data);\r\n            },\r\n            fail: function (res) {\r\n                console.error(res);\r\n            }\r\n        });\r\n    },\r\n    getGroupInfo(groupShareTicket, keys) {\r\n        let that = this;\r\n        let kList;\r\n\r\n        if (OpenCommon.localStorageMap.has(\"Group\")) {\r\n            let dict = OpenCommon.localStorageMap.get(\"Group\");\r\n\r\n            kList = [];\r\n            for (let i = 0; i < keys.length; i++) {\r\n                //如果有缓存信息\r\n                if (dict.has(keys[i])) {\r\n                    //console.info(\"[从缓存获取群组托管数据]\" + keys[i]);\r\n                    let data = dict.get(keys[i]);\r\n                    that.createInfoBlock(data, 10);\r\n                } else {\r\n                    kList.push(keys[i]);\r\n                }\r\n            }\r\n            //更新排行榜分数\r\n            if(OpenCommon.lastTicket){\r\n                //如果存在信息则进行更新\r\n                that.updateGroupInfo(OpenCommon.lastTicket,keys);\r\n            }\r\n        } else {\r\n            kList = keys;\r\n        }\r\n\r\n        //如果有未缓存的数据则请求云端获取\r\n        if (kList.length > 0) {\r\n            //console.info(\"[开始获取好友托管数据]\" + kList);\r\n            // https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getFriendCloudStorage.html\r\n            wx.getGroupCloudStorage({\r\n                shareTicket: groupShareTicket,\r\n                keyList: keys,\r\n                success: function (res) {\r\n                    //console.info(\"[成功获取群组信息]\", res.data);\r\n                    //解析数据信息\r\n                    let data = that.resolveInfo(\"Group\", \"OneEatMaxScore\", res.data);\r\n                    that.createInfoBlock(data, 10);\r\n                },\r\n                fail: function (res) {\r\n                    console.error(res);\r\n                }\r\n            });\r\n        }\r\n    },\r\n    //获取用户的最高分记录\r\n    getUserMaxScoreData(result) {\r\n        let that = this;\r\n        let kvDataList = new Array();\r\n        //获取游戏最高分数\r\n        kvDataList.push(\"OneEatMaxScore\");\r\n        wx.getUserCloudStorage({\r\n            keyList: kvDataList,\r\n            success(res) {\r\n                //console.info(\"[获取用户托管数据成功]\" + res.KVDataList.length);\r\n                let score = that.resolveCloudStorage(res.KVDataList, \"OneEatMaxScore\");\r\n                if (score) {\r\n                    console.info(\"[获取托管最高分成功]\" + score)\r\n                    //如果请求成功并且有数据\r\n                    result(score);\r\n                } else {\r\n                    console.info(\"[获取结果为新用户]\" + score)\r\n                    result(0);\r\n                }\r\n                OpenCommon.isGetMaxScoreSuccess = true;\r\n            },\r\n            fail(res) {\r\n                //console.info(\"[获取托管数据失败]\");\r\n                OpenCommon.isGetMaxScoreSuccess = false;\r\n                //获取用户分数数据失败\r\n                result(null);\r\n            }\r\n        });\r\n    },\r\n    //解析云存储数据\r\n    resolveCloudStorage(kVDataList, Key) {\r\n        //数据无效则直接返回\r\n        if (!kVDataList) return null;\r\n        //console.log(\"[托管数据数量]\" + kVDataList.length);\r\n        for (let i = 0; i < kVDataList.length; i++) {\r\n            if (kVDataList[i].key === Key) {\r\n                return kVDataList[i].value;\r\n                //console.info(\"[获取托管键值]\" + Key + \"[数据]\" + kVDataList[i].value);\r\n                //break;\r\n            }\r\n        }\r\n    },\r\n    //存储托管数据\r\n    saveCloudStorage(kVDataList, success, fail) {\r\n        wx.setUserCloudStorage({\r\n            KVDataList: kVDataList,\r\n            success,\r\n            fail\r\n        });\r\n    },\r\n    saveMaxScoreData(value) {\r\n        //存在最高分数据并且新的分数有效\r\n        if(OpenCommon.maxScore===null||OpenCommon.maxScore===undefined||value<=OpenCommon.maxScore){\r\n            console.info(\"[不存储最高分]\"+OpenCommon.maxScore +\"[分值]\"+value +\"[过低]\");\r\n            return;\r\n        }\r\n        let that = this;\r\n        let keys = [\"OneEatMaxScore\"];\r\n        let kvDataList = new Array();\r\n        kvDataList.push({\r\n            key: keys[0],\r\n            value: \"\" + value\r\n        });\r\n        //存储分数数据\r\n        this.saveCloudStorage(kvDataList, () => {\r\n            console.info(\"[存储最高分数据成功]\"+value);\r\n            //更新朋友排行榜信息\r\n            that.updateFriendInfo(keys);\r\n            //上报分数后立刻更新排行榜分数\r\n            if(OpenCommon.lastTicket){\r\n                //如果存在信息则进行更新\r\n                that.updateGroupInfo(OpenCommon.lastTicket,keys);\r\n            }\r\n        }, () => {\r\n            console.error(\"[存储最高分数据失败]\"+value);\r\n        });\r\n    },\r\n    //排序(ListData：res.data;order:false降序，true升序)\r\n    sortList(ListData, key, order) {\r\n        ListData.sort(function (a, b) {\r\n            let AMaxScore = 0;\r\n            let KVDataList = a.KVDataList;\r\n            for (let i = 0; i < KVDataList.length; i++) {\r\n                if (KVDataList[i].key == key) {\r\n                    AMaxScore = KVDataList[i].value;\r\n                }\r\n            }\r\n            let BMaxScore = 0;\r\n            KVDataList = b.KVDataList;\r\n            for (let i = 0; i < KVDataList.length; i++) {\r\n                if (KVDataList[i].key == key) {\r\n                    BMaxScore = KVDataList[i].value;\r\n                }\r\n            }\r\n\r\n            if (order) {\r\n                return parseInt(AMaxScore) - parseInt(BMaxScore);\r\n            } else {\r\n                return parseInt(BMaxScore) - parseInt(AMaxScore);\r\n            }\r\n        });\r\n        return ListData;\r\n    }\r\n});"],"sourceRoot":"/source/","file":"project.js"}