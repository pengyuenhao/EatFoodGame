{"version":3,"sources":["assets/scripts/OpenCommon.ts","assets/scripts/launch.js"],"names":["OpenCommon","localStorageMap","Map","exports","_OpenCommon","require","cc","Class","extends","Component","properties","content","Node","prefab","Prefab","onLoad","_this","this","getUserInfo","result","console","info","getUserMaxScoreData","maxScore","saveMaxScoreData","undefined","error","start","that","rank","wx","onMessage","data","message","resolveMessage","setTimeout","createUserBlock","user","node","createPrefab","nickName","avatarUrl","score","nickname","resolveCloudStorage","KVDataList","openid","userRank","getChildByName","getComponent","Label","userName","userIcon","children","Sprite","userScore","enabled","string","color","Color","fontSize","loader","load","url","type","err","texture","spriteFrame","SpriteFrame","on","EventType","TOUCH_START","instantiate","parent","resolveCommand","function","arguments","func","args","_this2","clearContext","updateFriendInfo","updateGroupInfo","Promise","resolve","width","height","Canvas","designResolution","size","then","getFriendInfo","lastTicket","getGroupInfo","removeAllChildren","userInfo","openIdList","lang","success","res","userBlock","userAvatarSprite","getComponentInChildren","nickNameLabel","maxScoreLabel","fail","keys","getFriendCloudStorage","keyList","resolveInfo","kList","has","dict","get","i","length","createInfoBlock","push","key","sortList","infoMap","set","len","friendInfo","groupShareTicket","getGroupCloudStorage","shareTicket","kvDataList","Array","getUserCloudStorage","isGetMaxScoreSuccess","kVDataList","Key","value","saveCloudStorage","setUserCloudStorage","_this3","ListData","order","sort","a","b","AMaxScore","BMaxScore","_i","parseInt"],"mappings":"kmBAAA,IAAAA,EAAA,WAAA,SAAAA,KAWA,OADWA,EAAAC,gBAAA,IAAAC,IACXF,EAXA,GAAaG,EAAAH,WAAAA,2GCAb,IAAAI,EAAAC,EAAA,gBAIAC,GAAAC,OACIC,QAAAF,GAAAG,UAEAC,YACIC,QAAAL,GAAAM,KACAC,OAAAP,GAAAQ,QAEJC,OAAA,WAAQ,IAAAC,EAAAC,KAEJA,KAAAC,YAAA,SAAAC,GACIC,QAAAC,KAAA,yCAAAF,KAGJF,KAAAK,oBAAA,SAAAH,GACIf,EAAAJ,WAAAuB,SAAAJ,EAEA,IAAAA,GACIH,EAAAQ,iBAAA,GAGJ,OAAAL,QAAAM,IAAAN,EACIC,QAAAM,MAAA,2DAAAP,GAEAC,QAAAC,KAAA,+CAAAF,MAIZQ,MAAA,WACI,IAAAC,EAAAX,KACAA,KAAAY,KAAA,EAEAC,GAAAC,UAAA,SAAAC,GACIA,GAAAA,EAAAC,SAEIL,EAAAM,eAAAF,EAAAC,WAIRE,WAAA,WAEI,GAQH,MAILC,gBAAA,SAAAC,GACI,IACAC,EAAArB,KAAAsB,eAEAC,OAAA,EACAC,OAAA,EACAC,OAAA,EAGAL,IACIG,EAAAH,EAAAG,SAAAH,EAAAG,SAAAH,EAAAM,SACAF,EAAAJ,EAAAI,UACAC,EAAAzB,KAAA2B,oBAAAP,EAAAQ,WAAA,kBACAR,EAAAS,QAGJ,IAAAC,EAAAT,EAAAU,eAAA,QAAAC,aAAA3C,GAAA4C,OACAC,EAAAb,EAAAU,eAAA,YAAAC,aAAA3C,GAAA4C,OACAE,EAAAd,EAAAU,eAAA,QAAAK,SAAA,GAAAJ,aAAA3C,GAAAgD,QACAC,EAAAjB,EAAAU,eAAA,aAAAC,aAAA3C,GAAA4C,OAKA,GAHAE,EAAAI,SAAA,EAGAhB,EAAA,CACI,GAAAE,EAOI,OA/BRzB,KA6BQY,MAAA,EACAkB,EAAAU,OA9BRxC,KA8BQY,KA9BRZ,KA+BQY,MACI,KAAA,EACIkB,EAAAT,KAAAoB,MAAA,IAAApD,GAAAqD,MAAA,IAAA,EAAA,GACA,MACJ,KAAA,EACIZ,EAAAT,KAAAoB,MAAA,IAAApD,GAAAqD,MAAA,EAAA,IAAA,GACA,MACJ,KAAA,EACIZ,EAAAT,KAAAoB,MAAA,IAAApD,GAAAqD,MAAA,EAAA,EAAA,KACA,MACJ,QACIZ,EAAAa,SAAAb,EAAAa,SAAA,OAjBRlB,EAAA,OACAK,EAAAU,OAAA,OAoBJN,EAAAM,OAAAjB,EACAe,EAAAE,OAAAf,EAGAD,GACInC,GAAAuD,OAAAC,MACIC,IAAAtB,EACAuB,KAAA,OAFW,SAAAC,EAAAC,GAIXD,GAAA7C,QAAAM,MAAAuC,GACAb,EAAAI,SAAA,EACAJ,EAAAe,YAAA,IAAA7D,GAAA8D,YAAAF,KAGR5B,EAAA+B,GAAA/D,GAAAM,KAAA0D,UAAAC,YAAA,aAECtD,WAEDkC,EAAAM,OAAA,GACAF,EAAAE,OAAA,GACAL,EAAAe,YAAA,GACApB,EAAAU,OAAA,IAGRlB,aAAA,WACI,IAAAD,EAAAhC,GAAAkE,YAAAvD,KAAAJ,QAEA,OADAyB,EAAAmC,OAAAxD,KAAAN,QACA2B,GAGJJ,eAAA,SAAAD,GAEI,OAAAA,EAAA+B,MACI,IAAA,UACI/C,KAAAyD,eAAAzC,EAAA0C,SAAA1C,EAAA2C,UAAA3C,EAAAD,QAOZ0C,eAAA,SAAAG,EAAAC,EAAA9C,GAAiC,IAAA+C,EAAA9D,KAE7B,OAAA4D,GACI,IAAA,QACI5D,KAAA+D,eACA,MACJ,IAAA,UACI,OAAAF,GACI,IAAA,SACI7D,KAAAgE,kBAAA,mBACA,MACJ,IAAA,QACIhE,KAAAiE,gBAAAlD,GAAA,mBAGR,MACJ,IAAA,QACI,IAAAmD,QAAA,SAAAC,GACIL,EAAAC,eAEAD,EAAA7D,YAAA,SAAAC,GACIiE,EAAAjE,KAEJa,GAAAA,EAAAqD,OAAArD,EAAAsD,SAGIP,EAAA9B,aAAA3C,GAAAiF,QAAAC,iBAAA,IAAAlF,GAAAmF,KAAAzD,EAAAqD,MAAArD,EAAAsD,WAEPI,KAAA,SAAAvE,GAGG4D,EAAAY,eAAA,qBAGJ,MACJ,IAAA,SAEI,OADA1E,KAAA+D,eACAF,GACI,IAAA,SAEI7D,KAAA0E,eAAA,mBACA,MACJ,IAAA,QAEI3D,IAEI5B,EAAAJ,WAAA4F,WAAA5D,EAEAf,KAAA4E,aAAA7D,GAAA,oBAMZ,MACJ,IAAA,OACI,OAAA8C,GACI,IAAA,cAGA,IAAA,eAEI,MACJ,IAAA,QAEI7D,KAAAO,iBAAAQ,MAYpBgD,aAAA,WACI/D,KAAAY,KAAA,EACAZ,KAAAN,QAAAmF,qBAGJ5E,YAAA,SAAAC,GACI,IAAAS,EAAAX,KAEAb,EAAAJ,WAAA+F,SAmDI5E,GAAA,GAjDAW,GAAAZ,aACI8E,YAAA,cACAC,KAAA,QACAC,QAAA,SAAAC,GAEI,IAAAJ,EAAAI,EAAAnE,KAAA,GAEA5B,EAAAJ,WAAA+F,SAAAA,EAGAnE,EAAAN,oBAAA,SAAAoB,GACI,IAAAF,EAAAuD,EAAAvD,SACAC,EAAAsD,EAAAtD,UACAlB,EAAAmB,EAEA,GAAAd,EAAAwE,UAAA,CACI,IAAAC,EAAAzE,EAAAwE,UAAApD,eAAA,QAAAsD,uBAAAhG,GAAAgD,QACAiD,EAAA3E,EAAAwE,UAAApD,eAAA,QAAAC,aAAA3C,GAAA4C,OACAsD,EAAA5E,EAAAwE,UAAApD,eAAA,SAAAC,aAAA3C,GAAA4C,OAEAqD,EAAA9C,OAAAjB,EACAlC,GAAAuD,OAAAC,MACIC,IAAAtB,EACAuB,KAAA,OAFW,SAAAC,EAAAC,GAIXD,GAAA7C,QAAAM,MAAAuC,GACAoC,EAAAlC,YAAA,IAAA7D,GAAA8D,YAAAF,KAIAsC,EAAA/C,OADJlC,EACImB,EAEA,OAGRvB,GAAA,MAORsF,KAAA,SAAAN,GAGIhF,GAAA,OAShB8D,iBAAA,SAAAyB,GACI,IAAA9E,EAAAX,KACAa,GAAA6E,uBACIC,QAAAF,EACAR,QAAA,SAAAC,GAGIvE,EAAAiF,YAAA,SAAA,iBAAAV,EAAAnE,OAEJyE,KAAA,SAAAN,GACI/E,QAAAM,MAAAyE,OAIZR,cAAA,SAAAe,GACI,IAAA9E,EAAAX,KACA6F,OAAA,EAEA,GAAA1G,EAAAJ,WAAAC,gBAAA8G,IAAA,UAAA,CACI,IAAAC,EAAA5G,EAAAJ,WAAAC,gBAAAgH,IAAA,UAEAH,KACA,IAAA,IAAAI,EAAA,EAAAA,EAAAR,EAAAS,OAAAD,IAEI,GAAAF,EAAAD,IAAAL,EAAAQ,IAAA,CAEI,IAAAlF,EAAAgF,EAAAC,IAAAP,EAAAQ,IACAtF,EAAAwF,gBAAApF,EAAA,SAEA8E,EAAAO,KAAAX,EAAAQ,SAIRJ,EAAAJ,EAIJI,EAAAK,OAAA,GAGIrF,GAAA6E,uBACIC,QAAAF,EACAR,QAAA,SAAAC,GAGI,IAAAnE,EAAAJ,EAAAiF,YAAA,SAAA,iBAAAV,EAAAnE,MACAJ,EAAAwF,gBAAApF,EAAA,KAEJyE,KAAA,SAAAN,GACI/E,QAAAM,MAAAyE,OAMhBU,YAAA,SAAA7C,EAAAsD,EAAAtF,GACIf,KAEAsG,SAAAvF,EAAAsF,GAAA,GACA,IAAAE,OAAA,EAWA,OAVApH,EAAAJ,WAAAC,gBAAA8G,IAAA/C,GACIwD,EAAApH,EAAAJ,WAAAC,gBAAAgH,IAAAjD,IAEAwD,EAAA,IAAAtH,IACAE,EAAAJ,WAAAC,gBAAAwH,IAAAzD,EAAAwD,IAIJA,EAAAC,IAAAH,EAAAtF,GAEAA,GAEJoF,gBAAA,SAAApF,EAAAmF,GACI,IACAO,OAAA,EAEIA,EADJ1F,EAAAmF,OAAAA,EACInF,EAAAmF,OAEAA,EAEJ,IAAA,IAAAD,EAAA,EAAAA,EAAAQ,EAAAR,IAAA,CACI,IAAAS,EAAA3F,EAAAkF,GAEAS,EAVJ1G,KAWQmB,gBAAAuF,GAXR1G,KAaQmB,oBAIZ8C,gBAAA,SAAA0C,EAAAlB,GACI,IAAA9E,EAAAX,KACAa,GAAA+F,sBACIC,YAAAF,EACAhB,QAAAF,EACAR,QAAA,SAAAC,GAGIvE,EAAAiF,YAAA,QAAA,iBAAAV,EAAAnE,OAEJyE,KAAA,SAAAN,GACI/E,QAAAM,MAAAyE,OAIZN,aAAA,SAAA+B,EAAAlB,GACI,IAAA9E,EAAAX,KACA6F,OAAA,EAEA,GAAA1G,EAAAJ,WAAAC,gBAAA8G,IAAA,SAAA,CACI,IAAAC,EAAA5G,EAAAJ,WAAAC,gBAAAgH,IAAA,SAEAH,KACA,IAAA,IAAAI,EAAA,EAAAA,EAAAR,EAAAS,OAAAD,IAEI,GAAAF,EAAAD,IAAAL,EAAAQ,IAAA,CAEI,IAAAlF,EAAAgF,EAAAC,IAAAP,EAAAQ,IACAtF,EAAAwF,gBAAApF,EAAA,SAEA8E,EAAAO,KAAAX,EAAAQ,SAIRJ,EAAAJ,EAIJI,EAAAK,OAAA,GAGIrF,GAAA+F,sBACIC,YAAAF,EACAhB,QAAAF,EACAR,QAAA,SAAAC,GAGI,IAAAnE,EAAAJ,EAAAiF,YAAA,QAAA,iBAAAV,EAAAnE,MACAJ,EAAAwF,gBAAApF,EAAA,KAEJyE,KAAA,SAAAN,GACI/E,QAAAM,MAAAyE,OAMhB7E,oBAAA,SAAAH,GACI,IAAAS,EAAAX,KACA8G,EAAA,IAAAC,MAEAD,EAAAV,KAAA,kBACAvF,GAAAmG,qBACIrB,QAAAmB,EACA7B,QAAA,SAAAC,GAEI,IAAAzD,EAAAd,EAAAgB,oBAAAuD,EAAAtD,WAAA,kBACAH,GACItB,QAAAC,KAAA,2DAAAqB,GAEAvB,EAAAuB,KAEAtB,QAAAC,KAAA,qDAAAqB,GACAvB,EAAA,IAEJf,EAAAJ,WAAAkI,sBAAA,GAEJzB,KAAA,SAAAN,GAEI/F,EAAAJ,WAAAkI,sBAAA,EAEA/G,EAAA,UAKZyB,oBAAA,SAAAuF,EAAAC,GAEI,IAAAD,EAAA,OAAA,KAEA,IAAA,IAAAjB,EAAA,EAAAA,EAAAiB,EAAAhB,OAAAD,IACI,GAAAiB,EAAAjB,GAAAI,MAAAc,EACI,OAAAD,EAAAjB,GAAAmB,OAOZC,iBAAA,SAAAH,EAAAjC,EAAAO,GACI3E,GAAAyG,qBACI1F,WAAAsF,EACAjC,QAAAA,EACAO,KAAAA,KAGRjF,iBAAA,SAAA6G,GAAwB,IAAAG,EAAAvH,KAEpB,GAAA,OAAAb,EAAAJ,WAAAuB,eAAAE,IAAArB,EAAAJ,WAAAuB,UAAA,IAAA8G,GAAAA,GAAAjI,EAAAJ,WAAAuB,SACIH,QAAAC,KAAA,yCAAAjB,EAAAJ,WAAAuB,SAAA,iBAAA8G,EAAA,sBADJ,CAIA,IAAA3B,GAAA,kBACAqB,EAAA,IAAAC,MACAD,EAAAV,MACIC,IAAAZ,EAAA,GACA2B,MAAA,GAAAA,IAGJjI,EAAAJ,WAAA4F,YAEI3E,KAAAiE,gBAAA9E,EAAAJ,WAAA4F,WAAAc,GAGJzF,KAAAqH,iBAAAP,EAAA,WACI3G,QAAAC,KAAA,2DAAAgH,GACAG,EAAAvD,iBAAAyB,IACH,WACGtF,QAAAM,MAAA,2DAAA2G,OAIRd,SAAA,SAAAkB,EAAAnB,EAAAoB,GAuBI,OAtBAD,EAAAE,KAAA,SAAAC,EAAAC,GAGI,IAFA,IAAAC,EAAA,EACAjG,EAAA+F,EAAA/F,WACAqE,EAAA,EAAAA,EAAArE,EAAAsE,OAAAD,IACIrE,EAAAqE,GAAAI,KAAAA,IACIwB,EAAAjG,EAAAqE,GAAAmB,OAGR,IAAAU,EAAA,EACAlG,EAAAgG,EAAAhG,WACA,IAAA,IAAAmG,EAAA,EAAAA,EAAAnG,EAAAsE,OAAA6B,IACInG,EAAAmG,GAAA1B,KAAAA,IACIyB,EAAAlG,EAAAmG,GAAAX,OAIR,OAAAK,EACIO,SAAAH,GAAAG,SAAAF,GAEAE,SAAAF,GAAAE,SAAAH,KAGRL","sourcesContent":["export class OpenCommon{\r\n    static groupShareTickets;\r\n    static isGetMaxScoreSuccess;\r\n    //最高分\r\n    static maxScore;\r\n    //用户信息\r\n    static userInfo;\r\n    //最后一条群句柄\r\n    static lastTicket;\r\n    //本地数据缓存\r\n    static localStorageMap : Map<any,Map<any,any>> = new Map();\r\n}","import {\r\n    OpenCommon\r\n} from \"./OpenCommon\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        content: cc.Node,\r\n        prefab: cc.Prefab\r\n    },\r\n    onLoad(){\r\n        //获取用户信息\r\n        this.getUserInfo((result) => {\r\n            console.info(\"[获取用户信息]\"+result);\r\n        });\r\n        //获取使用者信息\r\n        this.getUserMaxScoreData((result)=>{\r\n            OpenCommon.maxScore = result;\r\n            //如果获取到的数据为0值则直接保存一次数据\r\n            if(result===0){\r\n                this.saveMaxScoreData(0);\r\n            }\r\n            //获取用户分数数据失败时\r\n            if(result===null||result===undefined){\r\n                console.error(\"[获取用户最高分失败]\"+result);\r\n            }else{\r\n                console.info(\"[获取用户最高分]\"+result);\r\n            }\r\n        })\r\n    },\r\n    start() {\r\n        let that = this;\r\n        this.rank = 0;\r\n        //监听主域通过微信API发送到子域的消息\r\n        wx.onMessage(data => {\r\n            if (data && data.message) {\r\n                //console.info(\"[子域收到消息]\" + data.message);\r\n                that.resolveMessage(data.message);\r\n            }\r\n        });\r\n        //等待直到大部分预载工作完成\r\n        setTimeout(()=>{\r\n            /**测试专用 */\r\n            if(false&&OpenCommon.userInfo.nickName === \"彭云浩\"){\r\n                wx.removeUserCloudStorage({\r\n                    keyList : [\"OneEatMaxScore\"],\r\n                    success(){\r\n                        console.info(\"[移除测试人员分数]\");\r\n                    }\r\n                });\r\n            }\r\n        },1000);\r\n\r\n    },\r\n    //创建使用者区块\r\n    createUserBlock(user) {\r\n        let that = this;\r\n        let node = this.createPrefab();\r\n        // getUserInfo will return the nickName, getFriendCloudStorage will return the nickname.\r\n        let nickName;\r\n        let avatarUrl;\r\n        let score;\r\n        let openid;\r\n        //如果存在信息\r\n        if(user){\r\n            nickName = user.nickName ? user.nickName : user.nickname;\r\n            avatarUrl = user.avatarUrl;\r\n            score = this.resolveCloudStorage(user.KVDataList, \"OneEatMaxScore\");\r\n            openid = user.openid;\r\n        }\r\n        //尝试解析数据\r\n        let userRank = node.getChildByName('rank').getComponent(cc.Label);\r\n        let userName = node.getChildByName('userName').getComponent(cc.Label);\r\n        let userIcon = node.getChildByName('mask').children[0].getComponent(cc.Sprite);\r\n        let userScore = node.getChildByName('userScore').getComponent(cc.Label);\r\n        \r\n        userIcon.enabled = false;\r\n\r\n        //如果名称存在则创建对应的区块，否则创建空区块\r\n        if (nickName) {\r\n            if (!score) {\r\n                score = \"null\";\r\n                userRank.string = \"null\";\r\n            }else{\r\n\r\n                that.rank += 1;\r\n                userRank.string = that.rank;\r\n                switch(that.rank){\r\n                    case 1:\r\n                        userRank.node.color = new cc.Color(255, 0, 0);\r\n                        break;\r\n                    case 2:\r\n                        userRank.node.color = new cc.Color(0, 255, 0);\r\n                        break;\r\n                    case 3:\r\n                        userRank.node.color = new cc.Color(0, 0, 255);\r\n                        break;\r\n                    default:\r\n                        userRank.fontSize = userRank.fontSize / 2;\r\n                        break;\r\n                }\r\n            }\r\n            userName.string = nickName;\r\n            userScore.string = score;\r\n            //console.log(\"[获取好友信息]\" + nickName);\r\n            //如果头像存在\r\n            if (avatarUrl) {\r\n                cc.loader.load({\r\n                    url: avatarUrl,\r\n                    type: 'png'\r\n                }, (err, texture) => {\r\n                    if (err) console.error(err);\r\n                    userIcon.enabled = true;\r\n                    userIcon.spriteFrame = new cc.SpriteFrame(texture);\r\n                });\r\n            }\r\n            node.on(cc.Node.EventType.TOUCH_START, () => {\r\n                //console.info(\"[点击区块1]\" + userName.string + \"[分数]\" + userScore.string);\r\n            }, this);\r\n        }else{\r\n            userName.string = \"\";\r\n            userScore.string = \"\";\r\n            userIcon.spriteFrame = \"\";\r\n            userRank.string = \"\";\r\n        }\r\n    },\r\n    createPrefab() {\r\n        let node = cc.instantiate(this.prefab);\r\n        node.parent = this.content;\r\n        return node;\r\n    },\r\n    //分解主域传递过来的信息\r\n    resolveMessage(message) {\r\n        //console.info(\"[指令]\" + message.type);\r\n        switch (message.type) {\r\n            case \"command\":\r\n                this.resolveCommand(message.function, message.arguments, message.data);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    resolveCommand(func, args, data) {\r\n        //console.info(\"[指令]\" + func + \"[参数]\" + args + \"[数据]\" + data);\r\n        switch (func) {\r\n            case \"clear\":\r\n                this.clearContext();\r\n                break;\r\n            case \"preload\":\r\n                switch (args) {\r\n                    case \"friend\": \r\n                        this.updateFriendInfo([\"OneEatMaxScore\"]);\r\n                        break;\r\n                    case \"group\":\r\n                        this.updateGroupInfo(data,[\"OneEatMaxScore\"]);\r\n                        break;\r\n                }\r\n                break;\r\n            case \"start\":\r\n                new Promise((resolve) => {\r\n                    this.clearContext();\r\n                    //获取用户信息\r\n                    this.getUserInfo((result) => {\r\n                        resolve(result);\r\n                    });\r\n                    if (data && data.width && data.height) {\r\n                        //console.info(\"[修正分辨率]\" + data.width + \",\" + data.height);\r\n                        //修改分辨率\r\n                        this.getComponent(cc.Canvas).designResolution = new cc.size(data.width, data.height);\r\n                    }\r\n                }).then((result) => {\r\n                    //console.info(\"[是否得到用户信息]\" + result);\r\n                    //获取朋友信息\r\n                    this.getFriendInfo([\"OneEatMaxScore\"]);\r\n                    //this.resolveCommand(\"switch\",\"friend\",\"\");\r\n                });\r\n                break;\r\n            case \"switch\":\r\n                this.clearContext();\r\n                switch (args) {\r\n                    case \"friend\":\r\n                        //获取好友最高分信息\r\n                        this.getFriendInfo([\"OneEatMaxScore\"]);\r\n                        break;\r\n                    case \"group\":\r\n                        //如果是从群分享卡片中打开的则可以查看同玩信息\r\n                        if (data) {\r\n                            //console.info(\"[根据]\" + data + \"[获取群组信息]\");\r\n                            OpenCommon.lastTicket = data;\r\n                            //获取群信息\r\n                            this.getGroupInfo(data, [\"OneEatMaxScore\"]);\r\n                        } else {\r\n                            //console.info(\"[无法获取群组信息]\");\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case \"save\":\r\n                switch (args) {\r\n                    case \"gameDiamond\":\r\n                        //console.info(\"[存储游戏钻石]\" + data);\r\n                        break;\r\n                    case \"gameCurrency\":\r\n                        //console.info(\"[存储游戏币]\" + data);\r\n                        break;\r\n                    case \"score\":\r\n                        //console.info(\"[存储分数]\" + data);\r\n                        this.saveMaxScoreData(data);\r\n                        break;\r\n                    case \"shareTicket\":\r\n                        //console.info(\"[存储群识别码]\" + data);\r\n                        break;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n    //移除容器内所有子节点\r\n    clearContext() {\r\n        this.rank = 0;\r\n        this.content.removeAllChildren();\r\n        //console.info(\"[清理容器]\");\r\n    },\r\n    getUserInfo(result) {\r\n        let that = this;\r\n        //如果没有用户信息则尝试获取用户信息\r\n        if (!OpenCommon.userInfo) {\r\n            //微信在子域内调用获取用户信息API\r\n            wx.getUserInfo({\r\n                openIdList: ['selfOpenId'],\r\n                lang: 'zh_CN',\r\n                success: (res) => {\r\n                    //获取用户信息\r\n                    let userInfo = res.data[0];\r\n                    //保存用户信息\r\n                    OpenCommon.userInfo = userInfo;\r\n                    //console.info(\"[获取用户信息成功]\" + userInfo);\r\n                    //尝试获取用户托管数据\r\n                    that.getUserMaxScoreData((score) => {\r\n                        let nickName = userInfo.nickName;\r\n                        let avatarUrl = userInfo.avatarUrl;\r\n                        let maxScore = score;\r\n                        //如果存在使用者区块\r\n                        if (that.userBlock) {\r\n                            let userAvatarSprite = that.userBlock.getChildByName('Mask').getComponentInChildren(cc.Sprite);\r\n                            let nickNameLabel = that.userBlock.getChildByName('Name').getComponent(cc.Label);\r\n                            let maxScoreLabel = that.userBlock.getChildByName('Score').getComponent(cc.Label);\r\n\r\n                            nickNameLabel.string = nickName;\r\n                            cc.loader.load({\r\n                                url: avatarUrl,\r\n                                type: 'png'\r\n                            }, (err, texture) => {\r\n                                if (err) console.error(err);\r\n                                userAvatarSprite.spriteFrame = new cc.SpriteFrame(texture);\r\n                            });\r\n                            //检查是否存在最高分\r\n                            if (maxScore) {\r\n                                maxScoreLabel.string = score;\r\n                            } else {\r\n                                maxScoreLabel.string = \"null\";\r\n                            }\r\n                        }\r\n                        result(true);\r\n                    });\r\n/*                     if(userInfo.nickName === \"彭云浩\"){\r\n                        console.info(\"[修改指定最高分]\");\r\n                        that.saveMaxScoreData(-9999);\r\n                    } */\r\n                },\r\n                fail: (res) => {\r\n                    //reject(res);\r\n                    //console.info(\"[获取用户信息失败]\" + res);\r\n                    result(false);\r\n                }\r\n            });\r\n        }else{\r\n            result(true);\r\n        }\r\n\r\n    },\r\n    //更新朋友信息\r\n    updateFriendInfo(keys){\r\n        let that = this;\r\n        wx.getFriendCloudStorage({\r\n            keyList: keys,\r\n            success: function (res) {\r\n                //console.info(\"[成功更新朋友信息]\", res.data);\r\n                //解析数据信息\r\n                that.resolveInfo(\"Friend\", \"OneEatMaxScore\", res.data);\r\n            },\r\n            fail: function (res) {\r\n                console.error(res);\r\n            }\r\n        });\r\n    },\r\n    getFriendInfo(keys) {\r\n        let that = this;\r\n        let kList;\r\n\r\n        if (OpenCommon.localStorageMap.has(\"Friend\")) {\r\n            let dict = OpenCommon.localStorageMap.get(\"Friend\");\r\n\r\n            kList = [];\r\n            for (let i = 0; i < keys.length; i++) {\r\n                //如果有缓存信息\r\n                if (dict.has(keys[i])) {\r\n                    //console.info(\"[从缓存获取好友托管数据]\" + keys[i]);\r\n                    let data = dict.get(keys[i]);\r\n                    that.createInfoBlock(data, 10);\r\n                } else {\r\n                    kList.push(keys[i]);\r\n                }\r\n            }\r\n        } else {\r\n            kList = keys;\r\n        }\r\n\r\n        //如果有未缓存的数据则请求云端获取\r\n        if (kList.length > 0) {\r\n            //console.info(\"[开始获取好友托管数据]\" + kList);\r\n            // https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getFriendCloudStorage.html\r\n            wx.getFriendCloudStorage({\r\n                keyList: keys,\r\n                success: function (res) {\r\n                    //console.info(\"[成功获取朋友信息]\", res.data);\r\n                    //解析数据信息\r\n                    let data = that.resolveInfo(\"Friend\", \"OneEatMaxScore\", res.data);\r\n                    that.createInfoBlock(data, 10);\r\n                },\r\n                fail: function (res) {\r\n                    console.error(res);\r\n                }\r\n            });\r\n        }\r\n    },\r\n    //解析数据信息\r\n    resolveInfo(type, key, data) {\r\n        let that = this;\r\n        //排序\r\n        that.sortList(data, key, false);\r\n        let infoMap;\r\n        if (OpenCommon.localStorageMap.has(type)) {\r\n            infoMap = OpenCommon.localStorageMap.get(type);\r\n        } else {\r\n            infoMap = new Map();\r\n            OpenCommon.localStorageMap.set(type, infoMap);\r\n            //console.info(\"[创建数据缓存]\"+infoMap);\r\n        }\r\n        //缓存数据信息\r\n        infoMap.set(key, data);\r\n\r\n        return data;\r\n    },\r\n    createInfoBlock(data, length) {\r\n        let that = this;\r\n        let len;\r\n        if(data.length>length){\r\n            len = data.length;\r\n        }else{\r\n            len = length;\r\n        }\r\n        for (let i = 0; i < len; i++) {\r\n            let friendInfo = data[i];\r\n            //如果朋友信息存在则创建信息否则创建空信息\r\n            if (friendInfo) {\r\n                that.createUserBlock(friendInfo);\r\n            } else {\r\n                that.createUserBlock();\r\n            }\r\n        }\r\n    },\r\n    updateGroupInfo(groupShareTicket, keys){\r\n        let that = this;\r\n        wx.getGroupCloudStorage({\r\n            shareTicket: groupShareTicket,\r\n            keyList: keys,\r\n            success: function (res) {\r\n                //console.info(\"[成功更新群组信息]\", res.data);\r\n                //解析数据信息\r\n                that.resolveInfo(\"Group\", \"OneEatMaxScore\", res.data);\r\n            },\r\n            fail: function (res) {\r\n                console.error(res);\r\n            }\r\n        });\r\n    },\r\n    getGroupInfo(groupShareTicket, keys) {\r\n        let that = this;\r\n        let kList;\r\n\r\n        if (OpenCommon.localStorageMap.has(\"Group\")) {\r\n            let dict = OpenCommon.localStorageMap.get(\"Group\");\r\n\r\n            kList = [];\r\n            for (let i = 0; i < keys.length; i++) {\r\n                //如果有缓存信息\r\n                if (dict.has(keys[i])) {\r\n                    //console.info(\"[从缓存获取群组托管数据]\" + keys[i]);\r\n                    let data = dict.get(keys[i]);\r\n                    that.createInfoBlock(data, 10);\r\n                } else {\r\n                    kList.push(keys[i]);\r\n                }\r\n            }\r\n        } else {\r\n            kList = keys;\r\n        }\r\n\r\n        //如果有未缓存的数据则请求云端获取\r\n        if (kList.length > 0) {\r\n            //console.info(\"[开始获取好友托管数据]\" + kList);\r\n            // https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getFriendCloudStorage.html\r\n            wx.getGroupCloudStorage({\r\n                shareTicket: groupShareTicket,\r\n                keyList: keys,\r\n                success: function (res) {\r\n                    //console.info(\"[成功获取群组信息]\", res.data);\r\n                    //解析数据信息\r\n                    let data = that.resolveInfo(\"Group\", \"OneEatMaxScore\", res.data);\r\n                    that.createInfoBlock(data, 10);\r\n                },\r\n                fail: function (res) {\r\n                    console.error(res);\r\n                }\r\n            });\r\n        }\r\n    },\r\n    //获取用户的最高分记录\r\n    getUserMaxScoreData(result) {\r\n        let that = this;\r\n        let kvDataList = new Array();\r\n        //获取游戏最高分数\r\n        kvDataList.push(\"OneEatMaxScore\");\r\n        wx.getUserCloudStorage({\r\n            keyList: kvDataList,\r\n            success(res) {\r\n                //console.info(\"[获取用户托管数据成功]\" + res.KVDataList.length);\r\n                let score = that.resolveCloudStorage(res.KVDataList, \"OneEatMaxScore\");\r\n                if (score) {\r\n                    console.info(\"[获取托管最高分成功]\" + score)\r\n                    //如果请求成功并且有数据\r\n                    result(score);\r\n                } else {\r\n                    console.info(\"[获取结果为新用户]\" + score)\r\n                    result(0);\r\n                }\r\n                OpenCommon.isGetMaxScoreSuccess = true;\r\n            },\r\n            fail(res) {\r\n                //console.info(\"[获取托管数据失败]\");\r\n                OpenCommon.isGetMaxScoreSuccess = false;\r\n                //获取用户分数数据失败\r\n                result(null);\r\n            }\r\n        });\r\n    },\r\n    //解析云存储数据\r\n    resolveCloudStorage(kVDataList, Key) {\r\n        //数据无效则直接返回\r\n        if (!kVDataList) return null;\r\n        //console.log(\"[托管数据数量]\" + kVDataList.length);\r\n        for (let i = 0; i < kVDataList.length; i++) {\r\n            if (kVDataList[i].key === Key) {\r\n                return kVDataList[i].value;\r\n                //console.info(\"[获取托管键值]\" + Key + \"[数据]\" + kVDataList[i].value);\r\n                //break;\r\n            }\r\n        }\r\n    },\r\n    //存储托管数据\r\n    saveCloudStorage(kVDataList, success, fail) {\r\n        wx.setUserCloudStorage({\r\n            KVDataList: kVDataList,\r\n            success,\r\n            fail\r\n        });\r\n    },\r\n    saveMaxScoreData(value) {\r\n        //存在最高分数据并且新的分数有效\r\n        if(OpenCommon.maxScore===null||OpenCommon.maxScore===undefined||(value!==0&&value<=OpenCommon.maxScore)){\r\n            console.info(\"[不存储最高分]\"+OpenCommon.maxScore +\"[分值]\"+value +\"[过低]\");\r\n            return;\r\n        }\r\n        let keys = [\"OneEatMaxScore\"];\r\n        let kvDataList = new Array();\r\n        kvDataList.push({\r\n            key: keys[0],\r\n            value: \"\" + value\r\n        });\r\n        //上报分数后立刻更新排行榜分数\r\n        if(OpenCommon.lastTicket){\r\n            //如果存在信息则进行更新\r\n            this.updateGroupInfo(OpenCommon.lastTicket,keys);\r\n        }\r\n        //存储分数数据\r\n        this.saveCloudStorage(kvDataList, () => {\r\n            console.info(\"[存储最高分数据成功]\"+value);\r\n            this.updateFriendInfo(keys);\r\n        }, () => {\r\n            console.error(\"[存储最高分数据失败]\"+value);\r\n        });\r\n    },\r\n    //排序(ListData：res.data;order:false降序，true升序)\r\n    sortList(ListData, key, order) {\r\n        ListData.sort(function (a, b) {\r\n            let AMaxScore = 0;\r\n            let KVDataList = a.KVDataList;\r\n            for (let i = 0; i < KVDataList.length; i++) {\r\n                if (KVDataList[i].key == key) {\r\n                    AMaxScore = KVDataList[i].value;\r\n                }\r\n            }\r\n            let BMaxScore = 0;\r\n            KVDataList = b.KVDataList;\r\n            for (let i = 0; i < KVDataList.length; i++) {\r\n                if (KVDataList[i].key == key) {\r\n                    BMaxScore = KVDataList[i].value;\r\n                }\r\n            }\r\n\r\n            if (order) {\r\n                return parseInt(AMaxScore) - parseInt(BMaxScore);\r\n            } else {\r\n                return parseInt(BMaxScore) - parseInt(AMaxScore);\r\n            }\r\n        });\r\n        return ListData;\r\n    }\r\n});"],"sourceRoot":"/source/","file":"project.js"}